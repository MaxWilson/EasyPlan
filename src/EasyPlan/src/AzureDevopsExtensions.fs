// ts2fable 0.7.1
module rec AzureDevopsExtensions
open System
open Fable.Core
open Fable.Core.JS

type Array<'T> = System.Collections.Generic.IList<'T>
type Error = System.Exception
type RegExp = System.Text.RegularExpressions.Regex


type [<AllowNullLiteral>] Account =
    /// Identifier for an Account
    abstract accountId: string with get, set
    /// Name for an account
    abstract accountName: string with get, set
    /// Owner of account
    abstract accountOwner: string with get, set
    /// Current account status
    abstract accountStatus: AccountStatus with get, set
    /// Type of account: Personal, Organization
    abstract accountType: AccountType with get, set
    /// Uri for an account
    abstract accountUri: string with get, set
    /// Who created the account
    abstract createdBy: string with get, set
    /// Date account was created
    abstract createdDate: DateTime with get, set
    abstract hasMoved: bool with get, set
    /// Identity of last person to update the account
    abstract lastUpdatedBy: string with get, set
    /// Date account was last updated
    abstract lastUpdatedDate: DateTime with get, set
    /// Namespace for an account
    abstract namespaceId: string with get, set
    abstract newCollectionId: string with get, set
    /// Organization that created the account
    abstract organizationName: string with get, set
    /// Extended properties
    abstract properties: obj option with get, set
    /// Reason for current status
    abstract statusReason: string with get, set

type [<AllowNullLiteral>] AccountCreateInfoInternal =
    abstract accountName: string with get, set
    abstract creator: string with get, set
    abstract organization: string with get, set
    abstract preferences: AccountPreferencesInternal with get, set
    abstract properties: obj option with get, set
    abstract serviceDefinitions: ResizeArray<AccountCreateInfoInternalServiceDefinitions> with get, set

type [<AllowNullLiteral>] AccountPreferencesInternal =
    abstract culture: obj option with get, set
    abstract language: obj option with get, set
    abstract timeZone: obj option with get, set

type [<RequireQualifiedAccess>] AccountStatus =
    | None = 0
    | Enabled = 1
    | Disabled = 2
    | Deleted = 3
    | Moved = 4

type [<RequireQualifiedAccess>] AccountType =
    | Personal = 0
    | Organization = 1

type [<RequireQualifiedAccess>] AccountUserStatus =
    | None = 0
    | Active = 1
    | Disabled = 2
    | Deleted = 3
    | Pending = 4
    | Expired = 5
    | PendingDisabled = 6

type [<AllowNullLiteral>] AccountCreateInfoInternalServiceDefinitions =
    abstract key: string with get, set
    abstract value: string with get, set
module Accounts = ___Accounts_Accounts
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract AccountsRestClient: AccountsRestClientStatic

type [<AllowNullLiteral>] AccountsRestClient =
    inherit RestClientBase
    /// <param name="info">-</param>
    /// <param name="usePrecreated">-</param>
    abstract createAccount: info: Accounts.AccountCreateInfoInternal * ?usePrecreated: bool -> Promise<Accounts.Account>
    /// <param name="accountId">-</param>
    abstract getAccount: accountId: string -> Promise<Accounts.Account>
    /// <summary>Get a list of accounts for a specific owner or a specific member.</summary>
    /// <param name="ownerId">- ID for the owner of the accounts.</param>
    /// <param name="memberId">- ID for a member of the accounts.</param>
    /// <param name="properties">-</param>
    abstract getAccounts: ?ownerId: string * ?memberId: string * ?properties: string -> Promise<ResizeArray<Accounts.Account>>

type [<AllowNullLiteral>] AccountsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> AccountsRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] Board =
    inherit BoardReference
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// Description of the board.
    abstract description: string with get, set

/// Provides properties that describe a column in a board.
type [<AllowNullLiteral>] BoardColumn =
    inherit BoardColumnBase
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// Id of the resource.
    abstract id: string with get, set
    /// Next column identifier.
    abstract nextColumnId: string with get, set
    /// Full http link to the resource.
    abstract url: string with get, set

/// Provides base properties that describe a column in a board.
type [<AllowNullLiteral>] BoardColumnBase =
    /// Board column description.
    abstract description: string with get, set
    /// Name of the column.
    abstract name: string with get, set

/// Response collection for board column actions.
type [<AllowNullLiteral>] BoardColumnCollectionResponse =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// The resulting collection of BoardColumn.
    abstract columns: ResizeArray<BoardColumn> with get, set

/// Describes a column to create on a board.
type [<AllowNullLiteral>] BoardColumnCreate =
    inherit BoardColumnBase
    /// Next column identifier or supported directive: $first or $last.
    abstract nextColumnId: string with get, set

/// INTERNAL. Event that is fired when a column is added.
type [<AllowNullLiteral>] BoardColumnCreatedRealtimeEvent =
    inherit RealtimeBoardEvent
    /// Ids of columns created.
    abstract columnIds: ResizeArray<string> with get, set
    /// The latest ETag for the column.
    abstract eTag: string with get, set
    /// Gets the identifier of the next column.
    abstract nextColumnId: string with get, set

/// Describes a list of columns to create on a board.
type [<AllowNullLiteral>] BoardColumnCreateList =
    /// New columns.
    abstract columns: ResizeArray<BoardColumnBase> with get, set
    /// Next column identifier or supported directive: $first or $last.
    abstract nextColumnId: string with get, set

/// INTERNAL. Event that is fired when a column is deleted.
type [<AllowNullLiteral>] BoardColumnDeletedRealtimeEvent =
    inherit RealtimeBoardEvent
    /// Gets the column identifier.
    abstract columnId: string with get, set

/// Response for board column actions.
type [<AllowNullLiteral>] BoardColumnResponse =
    /// The resulting BoardColumn.
    abstract column: BoardColumn with get, set
    /// The last change date and time for all the columns in the collection.
    abstract eTag: ResizeArray<string> with get, set

/// Describes a column to update on a board.
type [<AllowNullLiteral>] BoardColumnUpdate =
    inherit BoardColumnCreate
    /// Name of the column.
    abstract name: string with get, set

/// INTERNAL. Event that is fired when a column is updated.
type [<AllowNullLiteral>] BoardColumnUpdatedRealtimeEvent =
    inherit RealtimeBoardEvent
    /// Gets the column identifier.
    abstract columnId: string with get, set
    /// The latest ETag for the column.
    abstract eTag: string with get, set
    /// Gets the identifier of the next column.
    abstract nextColumnId: string with get, set

/// Provides properties that describe an item in a board.
type [<AllowNullLiteral>] BoardItem =
    inherit BoardItemReference
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// Board id for this item.
    abstract boardId: float with get, set
    /// Board column id for this item.
    abstract columnId: string with get, set
    /// Next board item id.
    abstract nextId: string with get, set
    /// Board row id for this item.
    abstract rowId: string with get, set
    /// Error that occurred related to the source data for this item.
    abstract sourceErrorMessages: ResizeArray<string> with get, set
    /// Indicates whether a change has occurred requiring a refresh of the source data for this item.
    abstract sourceRefreshRequired: bool with get, set

/// Describe the action to apply when an item is moved to a column and the specified condition is met.
type [<AllowNullLiteral>] BoardItemAction =
    inherit PredicateAndAction
    /// Action Id.
    abstract id: string with get, set
    /// Item type.
    abstract itemType: string with get, set

/// Describes a board item action to create on a board.
type [<AllowNullLiteral>] BoardItemActionCreate =
    inherit PredicateAndAction
    /// Item Type.
    abstract itemType: string with get, set

/// Describes a board item action to update on a board.
type [<AllowNullLiteral>] BoardItemActionUpdate =
    /// Action to execute. e.g. Change state
    abstract action: string with get, set
    /// Condition to meet before applying action.
    abstract predicate: string with get, set

/// INTERNAL. Event that is fired when a board item is added.
type [<AllowNullLiteral>] BoardItemAddedRealtimeEvent =
    inherit RealtimeBoardEvent
    /// The column id where the item was added.
    abstract columnId: string with get, set
    /// The latest eTag for the item.
    abstract eTag: string with get, set
    /// The id of the added item.
    abstract id: string with get, set
    /// The id of the added item
    abstract itemSourceId: string with get, set
    /// The type of the added item
    abstract itemType: string with get, set
    /// The id of the next item in the list.
    abstract nextId: string with get, set
    /// The row id where the item was added.
    abstract rowId: string with get, set

/// Data to perform an operation on a batch of board items.
type [<AllowNullLiteral>] BoardItemBatchOperation =
    /// The data needed to perform the operation. This is optional based on the type of the operation.
    abstract data: UpdateBoardItem with get, set
    /// The list of items with etags to perform the operation on.
    abstract items: ResizeArray<BoardItemIdAndEtag> with get, set
    /// Operation to perform.
    abstract operation: BoardItemBatchOperationTypeEnum with get, set

type [<RequireQualifiedAccess>] BoardItemBatchOperationTypeEnum =
    | Reorder = 1

/// Response collection for board items actions.
type [<AllowNullLiteral>] BoardItemCollectionResponse =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// The resulting collection of BoardItem.
    abstract items: ResizeArray<BoardItem> with get, set

/// Board Item id and etag pair.
type [<AllowNullLiteral>] BoardItemIdAndEtag =
    /// Board Item's etag.
    abstract eTag: string with get, set
    /// Board Item's id.
    abstract id: string with get, set

/// INTERNAL. Event that is fired when a board item moves.
type [<AllowNullLiteral>] BoardItemMovedRealtimeEvent =
    inherit RealtimeBoardEvent
    /// The column id where the item was moved.
    abstract columnId: string with get, set
    /// The latest eTag for the items.
    abstract eTag: string with get, set
    /// The ids of the moved item.
    abstract ids: ResizeArray<string> with get, set
    /// The id of the next item in the list.
    abstract nextId: string with get, set
    /// The row id where the item was moved.
    abstract rowId: string with get, set

type [<AllowNullLiteral>] BoardItemReference =
    inherit BoardItemSourceIdAndType
    /// Board item identifier. Unique for each item in the board.
    abstract id: string with get, set
    /// Full http link to the resource.
    abstract url: string with get, set

/// INTERNAL. Event that is fired when a board item is removed.
type [<AllowNullLiteral>] BoardItemRemovedRealtimeEvent =
    inherit RealtimeBoardEvent
    /// The id of the removed item.
    abstract id: string with get, set

/// Provides a response for board item actions.
type [<AllowNullLiteral>] BoardItemResponse =
    /// The last changed date for the board item.
    abstract eTag: ResizeArray<string> with get, set
    /// The resulting BoardItem.
    abstract item: BoardItem with get, set

/// Provides properties that describe an item's source identifier and type in a board.
type [<AllowNullLiteral>] BoardItemSourceIdAndType =
    /// Item id.
    abstract itemSourceId: string with get, set
    /// Item type.
    abstract itemType: string with get, set

/// Describe a two way sync from moving item on board OR from changing state of item outside of the board.
type [<AllowNullLiteral>] BoardItemStateSync =
    inherit SubTypeAndStateValue
    /// Sync Id.
    abstract id: string with get, set
    /// Item type.
    abstract itemType: string with get, set

/// Describes a board item state sync to create on a board.
type [<AllowNullLiteral>] BoardItemStateSyncCreate =
    inherit SubTypeAndStateValue
    /// The Item type.
    abstract itemType: string with get, set

/// Describes a board item state sync to update on a board.
type [<AllowNullLiteral>] BoardItemStateSyncUpdate =
    /// The state value that will be synced to.
    abstract stateValue: string with get, set
    /// The sub-type that will be set for sync, for example, 'User Story' for work item.
    abstract subType: string with get, set

type [<AllowNullLiteral>] BoardReference =
    inherit EntityReference
    /// Id of the resource.
    abstract id: float with get, set

/// Response for board column actions.
type [<AllowNullLiteral>] BoardResponse =
    /// The resulting Board.
    abstract board: Board with get, set
    /// The last date and time the board was changed.
    abstract eTag: ResizeArray<string> with get, set

/// Provides properties that describe a row in a board.
type [<AllowNullLiteral>] BoardRow =
    inherit BoardRowBase
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// Id of the resource.
    abstract id: string with get, set
    /// Next row identifier.
    abstract nextRowId: string with get, set
    /// Full http link to the resource.
    abstract url: string with get, set

/// Provides properties that describe a row in a board.
type [<AllowNullLiteral>] BoardRowBase =
    /// Row name.
    abstract name: string with get, set

/// Response collection for board row actions.
type [<AllowNullLiteral>] BoardRowCollectionResponse =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// The resulting collection of BoardRow.
    abstract rows: ResizeArray<BoardRow> with get, set

/// Describes a row to create on a board.
type [<AllowNullLiteral>] BoardRowCreate =
    inherit BoardRowBase
    /// Next row identifier or supported directive: $first or $last.
    abstract nextRowId: string with get, set

/// Describes a list of rows to create on a board.
type [<AllowNullLiteral>] BoardRowCreateList =
    /// Next row identifier or supported directive: $first or $last.
    abstract nextRowId: string with get, set
    /// New rows.
    abstract rows: ResizeArray<BoardRowBase> with get, set

/// Response for board row actions.
type [<AllowNullLiteral>] BoardRowResponse =
    /// The last change date and time for all the rows in the collection.
    abstract eTag: ResizeArray<string> with get, set
    /// The resulting collection of BoardRow.
    abstract row: BoardRow with get, set

/// Describes a row to update on a board.
type [<AllowNullLiteral>] BoardRowUpdate =
    inherit BoardRowCreate

type [<RequireQualifiedAccess>] BoardTypeEnum =
    | IdBoundBoard = 1
    | QueryBoundBoard = 2
    | KanbanBoard = 3
    | TaskBoard = 4

type [<AllowNullLiteral>] CreateBoard =
    /// Description of the board.
    abstract description: string with get, set
    /// Name of the board to create.
    abstract name: string with get, set

type [<AllowNullLiteral>] EntityReference =
    /// Name of the resource.
    abstract name: string with get, set
    /// Full http link to the resource.
    abstract url: string with get, set

type [<AllowNullLiteral>] NewBoardItem =
    inherit BoardItemSourceIdAndType
    /// Board column identifier.
    abstract columnId: string with get, set
    /// Next board item id or supported directive: $first or $last.
    abstract nextId: string with get, set
    /// Board row identifier.
    abstract rowId: string with get, set

/// Response containing ETag header with no content
type [<AllowNullLiteral>] NoContentResponse =
    /// The place holder to stop genclient from creating invalid client code
    abstract data: obj option with get, set
    /// The last change date and time for all the rows/columns in the collection.
    abstract eTag: ResizeArray<string> with get, set

type [<AllowNullLiteral>] PredicateAndAction =
    /// Action to execute. e.g. Change state
    abstract action: string with get, set
    /// Condition to meet before applying action.
    abstract predicate: string with get, set

/// Base type for real time board events. All board events should inherit from this class.
type [<AllowNullLiteral>] RealtimeBoardEvent =
    /// The Board ID of the event
    abstract boardId: float with get, set
    /// A unique ID for events, used for logging and tracing.
    abstract eventId: string with get, set
    /// The Project ID of the board.
    abstract projectId: string with get, set
    /// The type of this event, so the client can disambiguate
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] SubTypeAndStateValue =
    /// The state value that will be synced to.
    abstract stateValue: string with get, set
    /// The sub-type that will be set for sync, for example, 'User Story' for work item.
    abstract subType: string with get, set

type [<AllowNullLiteral>] UpdateBoard =
    /// New description of the board.
    abstract description: string with get, set
    /// New name of the board.
    abstract name: string with get, set

type [<AllowNullLiteral>] UpdateBoardItem =
    /// Board column identifier.
    abstract columnId: string with get, set
    /// Next board item id or supported directive: $first or $last.
    abstract nextId: string with get, set
    /// Board row identifier.
    abstract rowId: string with get, set

/// List of items to update in the board.
type [<AllowNullLiteral>] UpdateBoardItemList =
    inherit UpdateBoardItem
    /// List of items by id and etag.
    abstract items: ResizeArray<BoardItemIdAndEtag> with get, set
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract BoardsRestClient: BoardsRestClientStatic

type [<AllowNullLiteral>] BoardsRestClient =
    inherit RestClientBase
    /// <summary>Add a new board for the project.</summary>
    /// <param name="postedBoard">- Board definition.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createBoard: postedBoard: Boards.CreateBoard * project: string -> Promise<Boards.BoardResponse>
    /// <summary>Deletes a board.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Board identifier.</param>
    abstract deleteBoard: project: string * id: float -> Promise<unit>
    /// <summary>Returns information for a board given its unique identifier.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Board's unique identifier.</param>
    abstract getBoard: project: string * id: float -> Promise<Boards.BoardResponse>
    /// <summary>Get boards.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- The maximum number of boards to get.</param>
    /// <param name="skip">- The number of boards to skip.</param>
    abstract getBoards: project: string * ?top: float * ?skip: float -> Promise<ResizeArray<Boards.BoardReference>>
    /// <summary>Updates a board.</summary>
    /// <param name="updatedBoard">- New board data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Id of the board to update.</param>
    /// <param name="eTag">- Board Latest Changed Date</param>
    abstract updateBoard: updatedBoard: Boards.UpdateBoard * project: string * id: float * eTag: String -> Promise<Boards.BoardResponse>
    /// <summary>Creates a new column on a board.</summary>
    /// <param name="boardColumn">- Column data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    abstract createBoardColumn: boardColumn: Boards.BoardColumnCreate * project: string * board: float -> Promise<Boards.BoardColumnResponse>
    /// <summary>Deletes a column from a board.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Column identifier.</param>
    /// <param name="forceRemoveItems">- Boolean indicating if items are to be force removed during the column delete.</param>
    abstract deleteBoardColumn: project: string * board: float * id: string * forceRemoveItems: bool -> Promise<unit>
    /// <summary>Gets column data for a board given its identifier.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Column identifier.</param>
    abstract getBoardColumn: project: string * board: float * id: string -> Promise<Boards.BoardColumnResponse>
    /// <summary>Get columns in a board.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    abstract getBoardColumns: project: string * board: float -> Promise<Boards.BoardColumnCollectionResponse>
    /// <summary>Updates a board column.</summary>
    /// <param name="boardColumn">- Column data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Column identifier.</param>
    /// <param name="eTag">- Column Latest Changed Date</param>
    abstract updateBoardColumn: boardColumn: Boards.BoardColumnUpdate * project: string * board: float * id: string * eTag: String -> Promise<Boards.BoardColumnResponse>
    /// <summary>Adds a single item to a board.</summary>
    /// <param name="item">- Item to add to the board.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    abstract addBoardItem: item: Boards.NewBoardItem * project: string * board: float -> Promise<Boards.BoardItemResponse>
    /// <summary>Gets data for a single board's item.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Item identifier.</param>
    abstract getBoardItem: project: string * board: float * id: string -> Promise<Boards.BoardItemResponse>
    /// <summary>Get items information for a board given its identifier.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    abstract getBoardItems: project: string * board: float -> Promise<Boards.BoardItemCollectionResponse>
    /// <summary>Removes an item from a board.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Board Item identifier to remove.</param>
    abstract removeBoardItem: project: string * board: float * id: string -> Promise<unit>
    /// <summary>Updates a single item in a board.</summary>
    /// <param name="updateItemDef">- Updated item data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Update item id.</param>
    /// <param name="eTag">- Item Latest Changed Date</param>
    abstract updateBoardItem: updateItemDef: Boards.UpdateBoardItem * project: string * board: float * id: string * eTag: String -> Promise<Boards.BoardItemResponse>
    /// <summary>Do an operation on a batch of items.</summary>
    /// <param name="batchRequest">- Data defining the batch operation.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- The id of the board containing the items.</param>
    abstract updateBoardItems: batchRequest: Boards.BoardItemBatchOperation * project: string * board: float -> Promise<Boards.BoardItemCollectionResponse>
    /// <summary>Creates a new row on a board.</summary>
    /// <param name="boardRow">- Row data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    abstract createBoardRow: boardRow: Boards.BoardRowCreate * project: string * board: float -> Promise<Boards.BoardRowResponse>
    /// <summary>Deletes a row from a board.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Row identifier.</param>
    /// <param name="forceRemoveItems">- Boolean indicating if items are to be force removed during the row delete.</param>
    abstract deleteBoardRow: project: string * board: float * id: string * forceRemoveItems: bool -> Promise<unit>
    /// <summary>Gets a row given its identifier and board.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Board row identifier.</param>
    abstract getBoardRow: project: string * board: float * id: string -> Promise<Boards.BoardRowResponse>
    /// <summary>Get rows in a board given its identifier.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    abstract getBoardRows: project: string * board: float -> Promise<Boards.BoardRowCollectionResponse>
    /// <summary>Updates a board row.</summary>
    /// <param name="boardRow">- Row data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">- Board identifier.</param>
    /// <param name="id">- Row identifier.</param>
    /// <param name="eTag">- Row Latest Changed Date</param>
    abstract updateBoardRow: boardRow: Boards.BoardRowUpdate * project: string * board: float * id: string * eTag: String -> Promise<Boards.BoardRowResponse>
    /// <summary>Creates a new sync for a column on a board.</summary>
    /// <param name="boardSync">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="board">-</param>
    /// <param name="column">-</param>
    abstract createBoardSyncAction: boardSync: Boards.BoardItemStateSyncCreate * project: string * board: float * column: string -> Promise<Boards.BoardItemStateSync>

type [<AllowNullLiteral>] BoardsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> BoardsRestClient
    abstract RESOURCE_AREA_ID: string
module TfsCore = ___Core_Core
module DistributedTaskCommon = ___DistributedTaskCommon_DistributedTaskCommon
module Git = ___Git_Git
module Test = ___Test_Test
module WebApi = ___WebApi_WebApi

/// Represents a queue for running builds.
type [<AllowNullLiteral>] AgentPoolQueue =
    abstract _links: obj option with get, set
    /// The ID of the queue.
    abstract id: float with get, set
    /// The name of the queue.
    abstract name: string with get, set
    /// The pool used by this queue.
    abstract pool: TaskAgentPoolReference with get, set
    /// The full http link to the resource.
    abstract url: string with get, set

/// Represents a reference to an agent queue.
type [<AllowNullLiteral>] AgentPoolQueueReference =
    inherit ResourceReference
    /// The ID of the queue.
    abstract id: float with get, set

/// Describes how a phase should run against an agent queue.
type [<AllowNullLiteral>] AgentPoolQueueTarget =
    inherit PhaseTarget
    /// Agent specification of the target.
    abstract agentSpecification: AgentSpecification with get, set
    /// Enables scripts and other processes launched while executing phase to access the OAuth token
    abstract allowScriptsAuthAccessOption: bool with get, set
    abstract demands: ResizeArray<Demand> with get, set
    /// The execution options.
    abstract executionOptions: AgentTargetExecutionOptions with get, set
    /// The queue.
    abstract queue: AgentPoolQueue with get, set

/// Specification of the agent defined by the pool provider.
type [<AllowNullLiteral>] AgentSpecification =
    /// Agent specification unique identifier.
    abstract identifier: string with get, set

type [<RequireQualifiedAccess>] AgentStatus =
    | Unavailable = 0
    | Available = 1
    | Offline = 2

/// Additional options for running phases against an agent queue.
type [<AllowNullLiteral>] AgentTargetExecutionOptions =
    /// Indicates the type of execution options.
    abstract ``type``: float with get, set

type [<AllowNullLiteral>] ArtifactResource =
    abstract _links: obj option with get, set
    /// Type-specific data about the artifact.
    abstract data: string with get, set
    /// A link to download the resource.
    abstract downloadUrl: string with get, set
    /// Type-specific properties of the artifact.
    abstract properties: ArtifactResourceProperties with get, set
    /// The type of the resource: File container, version control folder, UNC path, etc.
    abstract ``type``: string with get, set
    /// The full http link to the resource.
    abstract url: string with get, set

/// Represents an attachment to a build.
type [<AllowNullLiteral>] Attachment =
    abstract _links: obj option with get, set
    /// The name of the attachment.
    abstract name: string with get, set

type [<RequireQualifiedAccess>] AuditAction =
    | Add = 1
    | Update = 2
    | Delete = 3

/// Data representation of a build.
type [<AllowNullLiteral>] Build =
    abstract _links: obj option with get, set
    /// The agent specification for the build.
    abstract agentSpecification: AgentSpecification with get, set
    /// The build number/name of the build.
    abstract buildNumber: string with get, set
    /// The build number revision.
    abstract buildNumberRevision: float with get, set
    /// The build controller. This is only set if the definition type is Xaml.
    abstract controller: BuildController with get, set
    /// The definition associated with the build.
    abstract definition: DefinitionReference with get, set
    /// Indicates whether the build has been deleted.
    abstract deleted: bool with get, set
    /// The identity of the process or person that deleted the build.
    abstract deletedBy: WebApi.IdentityRef with get, set
    /// The date the build was deleted.
    abstract deletedDate: DateTime with get, set
    /// The description of how the build was deleted.
    abstract deletedReason: string with get, set
    /// A list of demands that represents the agent capabilities required by this build.
    abstract demands: ResizeArray<Demand> with get, set
    /// The time that the build was completed.
    abstract finishTime: DateTime with get, set
    /// The ID of the build.
    abstract id: float with get, set
    /// Indicates whether the build should be skipped by retention policies.
    abstract keepForever: bool with get, set
    /// The identity representing the process or person that last changed the build.
    abstract lastChangedBy: WebApi.IdentityRef with get, set
    /// The date the build was last changed.
    abstract lastChangedDate: DateTime with get, set
    /// Information about the build logs.
    abstract logs: BuildLogReference with get, set
    /// The orchestration plan for the build.
    abstract orchestrationPlan: TaskOrchestrationPlanReference with get, set
    /// The parameters for the build.
    abstract parameters: string with get, set
    /// Orchestration plans associated with the build (build, cleanup)
    abstract plans: ResizeArray<TaskOrchestrationPlanReference> with get, set
    /// The build's priority.
    abstract priority: QueuePriority with get, set
    /// The team project.
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract properties: obj option with get, set
    /// The quality of the xaml build (good, bad, etc.)
    abstract quality: string with get, set
    /// The queue. This is only set if the definition type is Build.
    abstract queue: AgentPoolQueue with get, set
    /// Additional options for queueing the build.
    abstract queueOptions: QueueOptions with get, set
    /// The current position of the build in the queue.
    abstract queuePosition: float with get, set
    /// The time that the build was queued.
    abstract queueTime: DateTime with get, set
    /// The reason that the build was created.
    abstract reason: BuildReason with get, set
    /// The repository.
    abstract repository: BuildRepository with get, set
    /// The identity that queued the build.
    abstract requestedBy: WebApi.IdentityRef with get, set
    /// The identity on whose behalf the build was queued.
    abstract requestedFor: WebApi.IdentityRef with get, set
    /// The build result.
    abstract result: BuildResult with get, set
    /// Indicates whether the build is retained by a release.
    abstract retainedByRelease: bool with get, set
    /// The source branch.
    abstract sourceBranch: string with get, set
    /// The source version.
    abstract sourceVersion: string with get, set
    /// The time that the build was started.
    abstract startTime: DateTime with get, set
    /// The status of the build.
    abstract status: BuildStatus with get, set
    abstract tags: ResizeArray<string> with get, set
    /// The build that triggered this build via a Build completion trigger.
    abstract triggeredByBuild: Build with get, set
    /// Sourceprovider-specific information about what triggered the build
    abstract triggerInfo: ArtifactResourceProperties with get, set
    /// The URI of the build.
    abstract uri: string with get, set
    /// The REST URL of the build.
    abstract url: string with get, set
    abstract validationResults: ResizeArray<BuildRequestValidationResult> with get, set

type [<AllowNullLiteral>] BuildAgent =
    abstract buildDirectory: string with get, set
    abstract controller: XamlBuildControllerReference with get, set
    abstract createdDate: DateTime with get, set
    abstract description: string with get, set
    abstract enabled: bool with get, set
    abstract id: float with get, set
    abstract messageQueueUrl: string with get, set
    abstract name: string with get, set
    abstract reservedForBuild: string with get, set
    abstract server: XamlBuildServerReference with get, set
    abstract status: AgentStatus with get, set
    abstract statusMessage: string with get, set
    abstract updatedDate: DateTime with get, set
    abstract uri: string with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] BuildAgentReference =
    /// Id of the resource
    abstract id: float with get, set
    /// Name of the linked resource (definition name, controller name, etc.)
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

/// Represents an artifact produced by a build.
type [<AllowNullLiteral>] BuildArtifact =
    /// The artifact ID.
    abstract id: float with get, set
    /// The name of the artifact.
    abstract name: string with get, set
    /// The actual resource.
    abstract resource: ArtifactResource with get, set
    /// The artifact source, which will be the ID of the job that produced this artifact. If an artifact is associated with multiple sources, this points to the first source.
    abstract source: string with get, set

type [<RequireQualifiedAccess>] BuildAuthorizationScope =
    | ProjectCollection = 1
    | Project = 2

/// Represents a build badge.
type [<AllowNullLiteral>] BuildBadge =
    /// The ID of the build represented by this badge.
    abstract buildId: float with get, set
    /// A link to the SVG resource.
    abstract imageUrl: string with get, set

type [<AllowNullLiteral>] BuildCompletedEvent =
    inherit BuildUpdatedEvent
    /// Changes associated with a build used for build notifications
    abstract changes: ResizeArray<Change> with get, set
    /// Pull request for the build used for build notifications
    abstract pullRequest: PullRequest with get, set
    /// Test results associated with a build used for build notifications
    abstract testResults: Test.AggregatedResultsAnalysis with get, set
    /// Timeline records associated with a build used for build notifications
    abstract timelineRecords: ResizeArray<TimelineRecord> with get, set
    /// Work items associated with a build used for build notifications
    abstract workItems: ResizeArray<Git.AssociatedWorkItem> with get, set

/// Represents a build completion trigger.
type [<AllowNullLiteral>] BuildCompletionTrigger =
    inherit BuildTrigger
    abstract branchFilters: ResizeArray<string> with get, set
    /// A reference to the definition that should trigger builds for this definition.
    abstract definition: DefinitionReference with get, set
    abstract requiresSuccessfulBuild: bool with get, set

type [<AllowNullLiteral>] BuildController =
    inherit XamlBuildControllerReference
    abstract _links: obj option with get, set
    /// The date the controller was created.
    abstract createdDate: DateTime with get, set
    /// The description of the controller.
    abstract description: string with get, set
    /// Indicates whether the controller is enabled.
    abstract enabled: bool with get, set
    /// The status of the controller.
    abstract status: ControllerStatus with get, set
    /// The date the controller was last updated.
    abstract updatedDate: DateTime with get, set
    /// The controller's URI.
    abstract uri: string with get, set

/// Represents a build definition.
type [<AllowNullLiteral>] BuildDefinition =
    inherit BuildDefinitionReference
    /// Indicates whether badges are enabled for this definition.
    abstract badgeEnabled: bool with get, set
    /// The build number format.
    abstract buildNumberFormat: string with get, set
    /// A save-time comment for the definition.
    abstract comment: string with get, set
    abstract demands: ResizeArray<Demand> with get, set
    /// The description.
    abstract description: string with get, set
    /// The drop location for the definition.
    abstract dropLocation: string with get, set
    /// The job authorization scope for builds queued against this definition.
    abstract jobAuthorizationScope: BuildAuthorizationScope with get, set
    /// The job cancel timeout (in minutes) for builds cancelled by user for this definition.
    abstract jobCancelTimeoutInMinutes: float with get, set
    /// The job execution timeout (in minutes) for builds queued against this definition.
    abstract jobTimeoutInMinutes: float with get, set
    abstract options: ResizeArray<BuildOption> with get, set
    /// The build process.
    abstract ``process``: BuildProcess with get, set
    /// The process parameters for this definition.
    abstract processParameters: DistributedTaskCommon.ProcessParameters with get, set
    abstract properties: obj option with get, set
    /// The repository.
    abstract repository: BuildRepository with get, set
    abstract retentionRules: ResizeArray<RetentionPolicy> with get, set
    abstract tags: ResizeArray<string> with get, set
    abstract triggers: ResizeArray<BuildTrigger> with get, set
    abstract variableGroups: ResizeArray<VariableGroup> with get, set
    abstract variables: BuildDefinitionVariables with get, set

/// For back-compat with extensions that use the old Steps format instead of Process and Phases
type [<AllowNullLiteral>] BuildDefinition3_2 =
    inherit BuildDefinitionReference3_2
    /// Indicates whether badges are enabled for this definition
    abstract badgeEnabled: bool with get, set
    abstract build: ResizeArray<BuildDefinitionStep> with get, set
    /// The build number format
    abstract buildNumberFormat: string with get, set
    /// The comment entered when saving the definition
    abstract comment: string with get, set
    abstract demands: ResizeArray<Demand> with get, set
    /// The description
    abstract description: string with get, set
    /// The drop location for the definition
    abstract dropLocation: string with get, set
    /// The job authorization scope for builds which are queued against this definition
    abstract jobAuthorizationScope: BuildAuthorizationScope with get, set
    /// The job cancel timeout in minutes for builds which are cancelled by user for this definition
    abstract jobCancelTimeoutInMinutes: float with get, set
    /// The job execution timeout in minutes for builds which are queued against this definition
    abstract jobTimeoutInMinutes: float with get, set
    abstract latestBuild: Build with get, set
    abstract latestCompletedBuild: Build with get, set
    abstract options: ResizeArray<BuildOption> with get, set
    /// Process Parameters
    abstract processParameters: DistributedTaskCommon.ProcessParameters with get, set
    abstract properties: obj option with get, set
    /// The repository
    abstract repository: BuildRepository with get, set
    abstract retentionRules: ResizeArray<RetentionPolicy> with get, set
    abstract tags: ResizeArray<string> with get, set
    abstract triggers: ResizeArray<BuildTrigger> with get, set
    abstract variables: BuildDefinitionVariables with get, set

/// Represents a reference to a build definition.
type [<AllowNullLiteral>] BuildDefinitionReference =
    inherit DefinitionReference
    abstract _links: obj option with get, set
    /// The author of the definition.
    abstract authoredBy: WebApi.IdentityRef with get, set
    /// A reference to the definition that this definition is a draft of, if this is a draft definition.
    abstract draftOf: DefinitionReference with get, set
    /// The list of drafts associated with this definition, if this is not a draft definition.
    abstract drafts: ResizeArray<DefinitionReference> with get, set
    abstract latestBuild: Build with get, set
    abstract latestCompletedBuild: Build with get, set
    abstract metrics: ResizeArray<BuildMetric> with get, set
    /// The quality of the definition document (draft, etc.)
    abstract quality: DefinitionQuality with get, set
    /// The default queue for builds run against this definition.
    abstract queue: AgentPoolQueue with get, set

/// For back-compat with extensions that use the old Steps format instead of Process and Phases
type [<AllowNullLiteral>] BuildDefinitionReference3_2 =
    inherit DefinitionReference
    abstract _links: obj option with get, set
    /// The author of the definition.
    abstract authoredBy: WebApi.IdentityRef with get, set
    /// A reference to the definition that this definition is a draft of, if this is a draft definition.
    abstract draftOf: DefinitionReference with get, set
    /// The list of drafts associated with this definition, if this is not a draft definition.
    abstract drafts: ResizeArray<DefinitionReference> with get, set
    abstract metrics: ResizeArray<BuildMetric> with get, set
    /// The quality of the definition document (draft, etc.)
    abstract quality: DefinitionQuality with get, set
    /// The default queue for builds run against this definition.
    abstract queue: AgentPoolQueue with get, set

/// Represents a revision of a build definition.
type [<AllowNullLiteral>] BuildDefinitionRevision =
    /// The identity of the person or process that changed the definition.
    abstract changedBy: WebApi.IdentityRef with get, set
    /// The date and time that the definition was changed.
    abstract changedDate: DateTime with get, set
    /// The change type (add, edit, delete).
    abstract changeType: AuditAction with get, set
    /// The comment associated with the change.
    abstract comment: string with get, set
    /// A link to the definition at this revision.
    abstract definitionUrl: string with get, set
    /// The name of the definition.
    abstract name: string with get, set
    /// The revision number.
    abstract revision: float with get, set

type [<AllowNullLiteral>] BuildDefinitionSourceProvider =
    /// Uri of the associated definition
    abstract definitionUri: string with get, set
    /// fields associated with this build definition
    abstract fields: ArtifactResourceProperties with get, set
    /// Id of this source provider
    abstract id: float with get, set
    /// The lst time this source provider was modified
    abstract lastModified: DateTime with get, set
    /// Name of the source provider
    abstract name: string with get, set
    /// Which trigger types are supported by this definition source provider
    abstract supportedTriggerTypes: DefinitionTriggerType with get, set

/// Represents a step in a build phase.
type [<AllowNullLiteral>] BuildDefinitionStep =
    /// Indicates whether this step should run even if a previous step fails.
    abstract alwaysRun: bool with get, set
    /// A condition that determines whether this step should run.
    abstract condition: string with get, set
    /// Indicates whether the phase should continue even if this step fails.
    abstract continueOnError: bool with get, set
    /// The display name for this step.
    abstract displayName: string with get, set
    /// Indicates whether the step is enabled.
    abstract enabled: bool with get, set
    abstract environment: ArtifactResourceProperties with get, set
    abstract inputs: ArtifactResourceProperties with get, set
    /// The reference name for this step.
    abstract refName: string with get, set
    /// The task associated with this step.
    abstract task: TaskDefinitionReference with get, set
    /// The time, in minutes, that this step is allowed to run.
    abstract timeoutInMinutes: float with get, set

/// Represents a template from which new build definitions can be created.
type [<AllowNullLiteral>] BuildDefinitionTemplate =
    /// Indicates whether the template can be deleted.
    abstract canDelete: bool with get, set
    /// The template category.
    abstract category: string with get, set
    /// An optional hosted agent queue for the template to use by default.
    abstract defaultHostedQueue: string with get, set
    /// A description of the template.
    abstract description: string with get, set
    abstract icons: ArtifactResourceProperties with get, set
    /// The ID of the task whose icon is used when showing this template in the UI.
    abstract iconTaskId: string with get, set
    /// The ID of the template.
    abstract id: string with get, set
    /// The name of the template.
    abstract name: string with get, set
    /// The actual template.
    abstract template: BuildDefinition with get, set

/// For back-compat with extensions that use the old Steps format instead of Process and Phases
type [<AllowNullLiteral>] BuildDefinitionTemplate3_2 =
    abstract canDelete: bool with get, set
    abstract category: string with get, set
    abstract defaultHostedQueue: string with get, set
    abstract description: string with get, set
    abstract icons: ArtifactResourceProperties with get, set
    abstract iconTaskId: string with get, set
    abstract id: string with get, set
    abstract name: string with get, set
    abstract template: BuildDefinition3_2 with get, set

/// Represents a variable used by a build definition.
type [<AllowNullLiteral>] BuildDefinitionVariable =
    /// Indicates whether the value can be set at queue time.
    abstract allowOverride: bool with get, set
    /// Indicates whether the variable's value is a secret.
    abstract isSecret: bool with get, set
    /// The value of the variable.
    abstract value: string with get, set

type [<AllowNullLiteral>] BuildDeletedEvent =
    inherit RealtimeBuildEvent
    abstract build: Build with get, set

type [<AllowNullLiteral>] BuildDeployment =
    abstract deployment: BuildSummary with get, set
    abstract sourceBuild: XamlBuildReference with get, set

type [<AllowNullLiteral>] BuildEvent =
    abstract data: ResizeArray<string> with get, set
    abstract identifier: string with get, set

/// Represents a build log.
type [<AllowNullLiteral>] BuildLog =
    inherit BuildLogReference
    /// The date and time the log was created.
    abstract createdOn: DateTime with get, set
    /// The date and time the log was last changed.
    abstract lastChangedOn: DateTime with get, set
    /// The number of lines in the log.
    abstract lineCount: float with get, set

/// Represents a reference to a build log.
type [<AllowNullLiteral>] BuildLogReference =
    /// The ID of the log.
    abstract id: float with get, set
    /// The type of the log location.
    abstract ``type``: string with get, set
    /// A full link to the log resource.
    abstract url: string with get, set

/// Represents metadata about builds in the system.
type [<AllowNullLiteral>] BuildMetric =
    /// The date for the scope.
    abstract date: DateTime with get, set
    /// The value.
    abstract intValue: float with get, set
    /// The name of the metric.
    abstract name: string with get, set
    /// The scope.
    abstract scope: string with get, set

/// Represents the application of an optional behavior to a build definition.
type [<AllowNullLiteral>] BuildOption =
    /// A reference to the build option.
    abstract definition: BuildOptionDefinitionReference with get, set
    /// Indicates whether the behavior is enabled.
    abstract enabled: bool with get, set
    abstract inputs: ArtifactResourceProperties with get, set

/// Represents an optional behavior that can be applied to a build definition.
type [<AllowNullLiteral>] BuildOptionDefinition =
    inherit BuildOptionDefinitionReference
    /// The description.
    abstract description: string with get, set
    /// The list of input groups defined for the build option.
    abstract groups: ResizeArray<BuildOptionGroupDefinition> with get, set
    /// The list of inputs defined for the build option.
    abstract inputs: ResizeArray<BuildOptionInputDefinition> with get, set
    /// The name of the build option.
    abstract name: string with get, set
    /// A value that indicates the relative order in which the behavior should be applied.
    abstract ordinal: float with get, set

/// Represents a reference to a build option definition.
type [<AllowNullLiteral>] BuildOptionDefinitionReference =
    /// The ID of the referenced build option.
    abstract id: string with get, set

/// Represents a group of inputs for a build option.
type [<AllowNullLiteral>] BuildOptionGroupDefinition =
    /// The name of the group to display in the UI.
    abstract displayName: string with get, set
    /// Indicates whether the group is initially displayed as expanded in the UI.
    abstract isExpanded: bool with get, set
    /// The internal name of the group.
    abstract name: string with get, set

/// Represents an input for a build option.
type [<AllowNullLiteral>] BuildOptionInputDefinition =
    /// The default value.
    abstract defaultValue: string with get, set
    /// The name of the input group that this input belongs to.
    abstract groupName: string with get, set
    abstract help: ArtifactResourceProperties with get, set
    /// The label for the input.
    abstract label: string with get, set
    /// The name of the input.
    abstract name: string with get, set
    abstract options: ArtifactResourceProperties with get, set
    /// Indicates whether the input is required to have a value.
    abstract required: bool with get, set
    /// Indicates the type of the input value.
    abstract ``type``: BuildOptionInputType with get, set
    /// The rule that is applied to determine whether the input is visible in the UI.
    abstract visibleRule: string with get, set

type [<RequireQualifiedAccess>] BuildOptionInputType =
    | String = 0
    | Boolean = 1
    | StringList = 2
    | Radio = 3
    | PickList = 4
    | MultiLine = 5
    | BranchFilter = 6

type [<RequireQualifiedAccess>] BuildPhaseStatus =
    | Unknown = 0
    | Failed = 1
    | Succeeded = 2

/// Represents a build process.
type [<AllowNullLiteral>] BuildProcess =
    /// The type of the process.
    abstract ``type``: float with get, set

/// Represents resources used by a build process.
type [<AllowNullLiteral>] BuildProcessResources =
    abstract endpoints: ResizeArray<ServiceEndpointReference> with get, set
    abstract files: ResizeArray<SecureFileReference> with get, set
    abstract queues: ResizeArray<AgentPoolQueueReference> with get, set
    abstract variableGroups: ResizeArray<VariableGroupReference> with get, set

type [<AllowNullLiteral>] BuildProcessTemplate =
    abstract description: string with get, set
    abstract fileExists: bool with get, set
    abstract id: float with get, set
    abstract parameters: string with get, set
    abstract serverPath: string with get, set
    abstract supportedReasons: BuildReason with get, set
    abstract teamProject: string with get, set
    abstract templateType: ProcessTemplateType with get, set
    abstract url: string with get, set
    abstract version: string with get, set

type [<RequireQualifiedAccess>] BuildQueryOrder =
    | FinishTimeAscending = 2
    | FinishTimeDescending = 3
    | QueueTimeDescending = 4
    | QueueTimeAscending = 5
    | StartTimeDescending = 6
    | StartTimeAscending = 7

type [<AllowNullLiteral>] BuildQueuedEvent =
    inherit BuildUpdatedEvent

type [<RequireQualifiedAccess>] BuildReason =
    | None = 0
    | Manual = 1
    | IndividualCI = 2
    | BatchedCI = 4
    | Schedule = 8
    | ScheduleForced = 16
    | UserCreated = 32
    | ValidateShelveset = 64
    | CheckInShelveset = 128
    | PullRequest = 256
    | BuildCompletion = 512
    | Triggered = 943
    | All = 1007

/// Represents a reference to a build.
type [<AllowNullLiteral>] BuildReference =
    abstract _links: obj option with get, set
    /// The build number.
    abstract buildNumber: string with get, set
    /// Indicates whether the build has been deleted.
    abstract deleted: bool with get, set
    /// The time that the build was completed.
    abstract finishTime: DateTime with get, set
    /// The ID of the build.
    abstract id: float with get, set
    /// The time that the build was queued.
    abstract queueTime: DateTime with get, set
    /// The identity on whose behalf the build was queued.
    abstract requestedFor: WebApi.IdentityRef with get, set
    /// The build result.
    abstract result: BuildResult with get, set
    /// The time that the build was started.
    abstract startTime: DateTime with get, set
    /// The build status.
    abstract status: BuildStatus with get, set

/// Represents information about a build report.
type [<AllowNullLiteral>] BuildReportMetadata =
    /// The Id of the build.
    abstract buildId: float with get, set
    /// The content of the report.
    abstract content: string with get, set
    /// The type of the report.
    abstract ``type``: string with get, set

/// Represents a repository used by a build definition.
type [<AllowNullLiteral>] BuildRepository =
    /// Indicates whether to checkout submodules.
    abstract checkoutSubmodules: bool with get, set
    /// Indicates whether to clean the target folder when getting code from the repository.
    abstract clean: string with get, set
    /// The name of the default branch.
    abstract defaultBranch: string with get, set
    /// The ID of the repository.
    abstract id: string with get, set
    /// The friendly name of the repository.
    abstract name: string with get, set
    abstract properties: ArtifactResourceProperties with get, set
    /// The root folder.
    abstract rootFolder: string with get, set
    /// The type of the repository.
    abstract ``type``: string with get, set
    /// The URL of the repository.
    abstract url: string with get, set

/// Represents the result of validating a build request.
type [<AllowNullLiteral>] BuildRequestValidationResult =
    /// The message associated with the result.
    abstract message: string with get, set
    /// The result.
    abstract result: ValidationResult with get, set

/// Represents information about resources used by builds in the system.
type [<AllowNullLiteral>] BuildResourceUsage =
    /// The number of build agents.
    abstract distributedTaskAgents: float with get, set
    /// The number of paid private agent slots.
    abstract paidPrivateAgentSlots: float with get, set
    /// The total usage.
    abstract totalUsage: float with get, set
    /// The number of XAML controllers.
    abstract xamlControllers: float with get, set

type [<RequireQualifiedAccess>] BuildResult =
    | None = 0
    | Succeeded = 2
    | PartiallySucceeded = 4
    | Failed = 8
    | Canceled = 32

type [<AllowNullLiteral>] BuildsDeletedEvent =
    inherit BuildsDeletedEvent1

type [<AllowNullLiteral>] BuildsDeletedEvent1 =
    abstract buildIds: ResizeArray<float> with get, set
    /// The ID of the definition.
    abstract definitionId: float with get, set
    /// The ID of the project.
    abstract projectId: string with get, set

type [<AllowNullLiteral>] BuildServer =
    abstract agents: ResizeArray<BuildAgentReference> with get, set
    abstract controller: XamlBuildControllerReference with get, set
    abstract id: float with get, set
    abstract isVirtual: bool with get, set
    abstract messageQueueUrl: string with get, set
    abstract name: string with get, set
    abstract requireClientCertificates: bool with get, set
    abstract status: ServiceHostStatus with get, set
    abstract statusChangedDate: DateTime with get, set
    abstract uri: string with get, set
    abstract url: string with get, set
    abstract version: float with get, set

/// Represents system-wide build settings.
type [<AllowNullLiteral>] BuildSettings =
    /// The number of days to keep records of deleted builds.
    abstract daysToKeepDeletedBuildsBeforeDestroy: float with get, set
    /// The default retention policy.
    abstract defaultRetentionPolicy: RetentionPolicy with get, set
    /// The maximum retention policy.
    abstract maximumRetentionPolicy: RetentionPolicy with get, set

type [<RequireQualifiedAccess>] BuildStatus =
    | None = 0
    | InProgress = 1
    | Completed = 2
    | Cancelling = 4
    | Postponed = 8
    | NotStarted = 32
    | All = 47

type [<AllowNullLiteral>] BuildSummary =
    abstract build: XamlBuildReference with get, set
    abstract finishTime: DateTime with get, set
    abstract keepForever: bool with get, set
    abstract quality: string with get, set
    abstract reason: BuildReason with get, set
    abstract requestedFor: WebApi.IdentityRef with get, set
    abstract startTime: DateTime with get, set
    abstract status: BuildStatus with get, set

type [<AllowNullLiteral>] BuildTagsAddedEvent =
    inherit BuildUpdatedEvent
    abstract allTags: ResizeArray<string> with get, set
    abstract newTags: ResizeArray<string> with get, set

/// Represents a trigger for a buld definition.
type [<AllowNullLiteral>] BuildTrigger =
    /// The type of the trigger.
    abstract triggerType: DefinitionTriggerType with get, set

type [<AllowNullLiteral>] BuildUpdatedEvent =
    inherit RealtimeBuildEvent
    abstract build: Build with get, set

/// Represents a workspace mapping.
type [<AllowNullLiteral>] BuildWorkspace =
    abstract mappings: ResizeArray<MappingDetails> with get, set

/// Represents a change associated with a build.
type [<AllowNullLiteral>] Change =
    /// The author of the change.
    abstract author: WebApi.IdentityRef with get, set
    /// The location of a user-friendly representation of the resource.
    abstract displayUri: string with get, set
    /// The identifier for the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset ID.
    abstract id: string with get, set
    /// The location of the full representation of the resource.
    abstract location: string with get, set
    /// The description of the change. This might be a commit message or changeset description.
    abstract message: string with get, set
    /// Indicates whether the message was truncated.
    abstract messageTruncated: bool with get, set
    /// The person or process that pushed the change.
    abstract pusher: string with get, set
    /// The timestamp for the change.
    abstract timestamp: DateTime with get, set
    /// The type of change. "commit", "changeset", etc.
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ConsoleLogEvent =
    inherit RealtimeBuildEvent
    abstract lines: ResizeArray<string> with get, set
    abstract stepRecordId: string with get, set
    abstract timelineId: string with get, set
    abstract timelineRecordId: string with get, set

type [<AllowNullLiteral>] ContinuousDeploymentDefinition =
    /// The connected service associated with the continuous deployment
    abstract connectedService: TfsCore.WebApiConnectedServiceRef with get, set
    /// The definition associated with the continuous deployment
    abstract definition: XamlDefinitionReference with get, set
    abstract gitBranch: string with get, set
    abstract hostedServiceName: string with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract repositoryId: string with get, set
    abstract storageAccountName: string with get, set
    abstract subscriptionId: string with get, set
    abstract website: string with get, set
    abstract webspace: string with get, set

/// Represents a continuous integration (CI) trigger.
type [<AllowNullLiteral>] ContinuousIntegrationTrigger =
    inherit BuildTrigger
    /// Indicates whether changes should be batched while another CI build is running.
    abstract batchChanges: bool with get, set
    abstract branchFilters: ResizeArray<string> with get, set
    /// The maximum number of simultaneous CI builds that will run per branch.
    abstract maxConcurrentBuildsPerBranch: float with get, set
    abstract pathFilters: ResizeArray<string> with get, set
    /// The polling interval, in seconds.
    abstract pollingInterval: float with get, set
    /// The ID of the job used to poll an external repository.
    abstract pollingJobId: string with get, set
    abstract settingsSourceType: float with get, set

type [<RequireQualifiedAccess>] ControllerStatus =
    | Unavailable = 0
    | Available = 1
    | Offline = 2

type [<RequireQualifiedAccess>] DefinitionQuality =
    | Definition = 1
    | Draft = 2

type [<RequireQualifiedAccess>] DefinitionQueryOrder =
    | None = 0
    | LastModifiedAscending = 1
    | LastModifiedDescending = 2
    | DefinitionNameAscending = 3
    | DefinitionNameDescending = 4

type [<RequireQualifiedAccess>] DefinitionQueueStatus =
    | Enabled = 0
    | Paused = 1
    | Disabled = 2

/// Represents a reference to a definition.
type [<AllowNullLiteral>] DefinitionReference =
    /// The date this version of the definition was created.
    abstract createdDate: DateTime with get, set
    /// The ID of the referenced definition.
    abstract id: float with get, set
    /// The name of the referenced definition.
    abstract name: string with get, set
    /// The folder path of the definition.
    abstract path: string with get, set
    /// A reference to the project.
    abstract project: TfsCore.TeamProjectReference with get, set
    /// A value that indicates whether builds can be queued against this definition.
    abstract queueStatus: DefinitionQueueStatus with get, set
    /// The definition revision number.
    abstract revision: float with get, set
    /// The type of the definition.
    abstract ``type``: DefinitionType with get, set
    /// The definition's URI.
    abstract uri: string with get, set
    /// The REST URL of the definition.
    abstract url: string with get, set

type [<AllowNullLiteral>] DefinitionResourceReference =
    /// Indicates whether the resource is authorized for use.
    abstract authorized: bool with get, set
    /// The id of the resource.
    abstract id: string with get, set
    /// A friendly name for the resource.
    abstract name: string with get, set
    /// The type of the resource.
    abstract ``type``: string with get, set

type [<RequireQualifiedAccess>] DefinitionTriggerType =
    | None = 1
    | ContinuousIntegration = 2
    | BatchedContinuousIntegration = 4
    | Schedule = 8
    | GatedCheckIn = 16
    | BatchedGatedCheckIn = 32
    | PullRequest = 64
    | BuildCompletion = 128
    | All = 255

type [<RequireQualifiedAccess>] DefinitionType =
    | Xaml = 1
    | Build = 2

type [<RequireQualifiedAccess>] DeleteOptions =
    | None = 0
    | DropLocation = 1
    | TestResults = 2
    | Label = 4
    | Details = 8
    | Symbols = 16
    | All = 31

/// Represents a demand used by a definition or build.
type [<AllowNullLiteral>] Demand =
    /// The name of the capability referenced by the demand.
    abstract name: string with get, set
    /// The demanded value.
    abstract value: string with get, set

/// Represents a dependency.
type [<AllowNullLiteral>] Dependency =
    /// The event. The dependency is satisfied when the referenced object emits this event.
    abstract ``event``: string with get, set
    /// The scope. This names the object referenced by the dependency.
    abstract scope: string with get, set

/// Represents the data from the build information nodes for type "DeploymentInformation" for xaml builds
type [<AllowNullLiteral>] Deployment =
    abstract ``type``: string with get, set

/// Deployment information for type "Build"
type [<AllowNullLiteral>] DeploymentBuild =
    inherit Deployment
    abstract buildId: float with get, set

/// Deployment information for type "Deploy"
type [<AllowNullLiteral>] DeploymentDeploy =
    inherit Deployment
    abstract message: string with get, set

/// Deployment information for type "Test"
type [<AllowNullLiteral>] DeploymentTest =
    inherit Deployment
    abstract runId: float with get, set

/// Represents a build process supported by the build definition designer.
type [<AllowNullLiteral>] DesignerProcess =
    inherit BuildProcess
    abstract phases: ResizeArray<Phase> with get, set
    /// The target for the build process.
    abstract target: DesignerProcessTarget with get, set

/// Represents the target for the build process.
type [<AllowNullLiteral>] DesignerProcessTarget =
    /// Agent specification for the build process.
    abstract agentSpecification: AgentSpecification with get, set

type [<AllowNullLiteral>] DockerProcess =
    inherit BuildProcess
    abstract target: DockerProcessTarget with get, set

/// Represents the target for the docker build process.
type [<AllowNullLiteral>] DockerProcessTarget =
    inherit DesignerProcessTarget

/// Represents a folder that contains build definitions.
type [<AllowNullLiteral>] Folder =
    /// The process or person who created the folder.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The date the folder was created.
    abstract createdOn: DateTime with get, set
    /// The description.
    abstract description: string with get, set
    /// The process or person that last changed the folder.
    abstract lastChangedBy: WebApi.IdentityRef with get, set
    /// The date the folder was last changed.
    abstract lastChangedDate: DateTime with get, set
    /// The full path.
    abstract path: string with get, set
    /// The project.
    abstract project: TfsCore.TeamProjectReference with get, set

type [<RequireQualifiedAccess>] FolderQueryOrder =
    | None = 0
    | FolderAscending = 1
    | FolderDescending = 2

/// Represents the ability to build forks of the selected repository.
type [<AllowNullLiteral>] Forks =
    /// Indicates whether a build should use secrets when building forks of the selected repository.
    abstract allowSecrets: bool with get, set
    /// Indicates whether the trigger should queue builds for forks of the selected repository.
    abstract enabled: bool with get, set

/// Represents a gated check-in trigger.
type [<AllowNullLiteral>] GatedCheckInTrigger =
    inherit BuildTrigger
    abstract pathFilters: ResizeArray<string> with get, set
    /// Indicates whether CI triggers should run after the gated check-in succeeds.
    abstract runContinuousIntegration: bool with get, set
    /// Indicates whether to take workspace mappings into account when determining whether a build should run.
    abstract useWorkspaceMappings: bool with get, set

type [<RequireQualifiedAccess>] GetOption =
    | LatestOnQueue = 0
    | LatestOnBuild = 1
    | Custom = 2

/// Data representation of an information node associated with a build
type [<AllowNullLiteral>] InformationNode =
    /// Fields of the information node
    abstract fields: ArtifactResourceProperties with get, set
    /// Process or person that last modified this node
    abstract lastModifiedBy: string with get, set
    /// Date this node was last modified
    abstract lastModifiedDate: DateTime with get, set
    /// Node Id of this information node
    abstract nodeId: float with get, set
    /// Id of parent node (xml tree)
    abstract parentId: float with get, set
    /// The type of the information node
    abstract ``type``: string with get, set

/// Represents an issue (error, warning) associated with a build.
type [<AllowNullLiteral>] Issue =
    /// The category.
    abstract category: string with get, set
    abstract data: ArtifactResourceProperties with get, set
    /// A description of the issue.
    abstract message: string with get, set
    /// The type (error, warning) of the issue.
    abstract ``type``: IssueType with get, set

type [<RequireQualifiedAccess>] IssueType =
    | Error = 1
    | Warning = 2

type [<AllowNullLiteral>] JustInTimeProcess =
    inherit BuildProcess

/// Represents an entry in a workspace mapping.
type [<AllowNullLiteral>] MappingDetails =
    /// The local path.
    abstract localPath: string with get, set
    /// The mapping type.
    abstract mappingType: string with get, set
    /// The server path.
    abstract serverPath: string with get, set

/// Represents options for running a phase against multiple agents.
type [<AllowNullLiteral>] MultipleAgentExecutionOptions =
    inherit AgentTargetExecutionOptions
    /// Indicates whether failure on one agent should prevent the phase from running on other agents.
    abstract continueOnError: bool with get, set
    /// The maximum number of agents to use simultaneously.
    abstract maxConcurrency: float with get, set

/// Represents a phase of a build definition.
type [<AllowNullLiteral>] Phase =
    /// The condition that must be true for this phase to execute.
    abstract condition: string with get, set
    abstract dependencies: ResizeArray<Dependency> with get, set
    /// The job authorization scope for builds queued against this definition.
    abstract jobAuthorizationScope: BuildAuthorizationScope with get, set
    /// The cancellation timeout, in minutes, for builds queued against this definition.
    abstract jobCancelTimeoutInMinutes: float with get, set
    /// The job execution timeout, in minutes, for builds queued against this definition.
    abstract jobTimeoutInMinutes: float with get, set
    /// The name of the phase.
    abstract name: string with get, set
    /// The unique ref name of the phase.
    abstract refName: string with get, set
    abstract steps: ResizeArray<BuildDefinitionStep> with get, set
    /// The target (agent, server, etc.) for this phase.
    abstract target: PhaseTarget with get, set
    abstract variables: BuildDefinitionVariables with get, set

/// Represents the target of a phase.
type [<AllowNullLiteral>] PhaseTarget =
    /// The type of the target.
    abstract ``type``: float with get, set

type [<RequireQualifiedAccess>] ProcessTemplateType =
    | Custom = 0
    | Default = 1
    | Upgrade = 2

/// Contains the settings for the retention rules.
type [<AllowNullLiteral>] ProjectRetentionSetting =
    /// The rules for artifact retention. Artifacts can not live longer than a run, so will be overridden by a shorter run purge setting.
    abstract purgeArtifacts: RetentionSetting with get, set
    /// The rules for pull request pipeline run retention.
    abstract purgePullRequestRuns: RetentionSetting with get, set
    /// The rules for pipeline run retention.
    abstract purgeRuns: RetentionSetting with get, set

/// Represents a pull request object.  These are retrieved from Source Providers.
type [<AllowNullLiteral>] PullRequest =
    /// The links to other objects related to this object.
    abstract _links: obj option with get, set
    /// Author of the pull request.
    abstract author: WebApi.IdentityRef with get, set
    /// Current state of the pull request, e.g. open, merged, closed, conflicts, etc.
    abstract currentState: string with get, set
    /// Description for the pull request.
    abstract description: string with get, set
    /// Unique identifier for the pull request
    abstract id: string with get, set
    /// The name of the provider this pull request is associated with.
    abstract providerName: string with get, set
    /// Source branch ref of this pull request
    abstract sourceBranchRef: string with get, set
    /// Owner of the source repository of this pull request
    abstract sourceRepositoryOwner: string with get, set
    /// Target branch ref of this pull request
    abstract targetBranchRef: string with get, set
    /// Owner of the target repository of this pull request
    abstract targetRepositoryOwner: string with get, set
    /// Title of the pull request.
    abstract title: string with get, set

/// Represents a pull request trigger.
type [<AllowNullLiteral>] PullRequestTrigger =
    inherit BuildTrigger
    /// Indicates if an update to a PR should delete current in-progress builds.
    abstract autoCancel: bool with get, set
    abstract branchFilters: ResizeArray<string> with get, set
    abstract forks: Forks with get, set
    abstract isCommentRequiredForPullRequest: bool with get, set
    abstract pathFilters: ResizeArray<string> with get, set
    abstract requireCommentsForNonTeamMembersOnly: bool with get, set
    abstract settingsSourceType: float with get, set

type [<RequireQualifiedAccess>] QueryDeletedOption =
    | ExcludeDeleted = 0
    | IncludeDeleted = 1
    | OnlyDeleted = 2

type [<RequireQualifiedAccess>] QueueOptions =
    | None = 0
    | DoNotRun = 1

type [<RequireQualifiedAccess>] QueuePriority =
    | Low = 5
    | BelowNormal = 4
    | Normal = 3
    | AboveNormal = 2
    | High = 1

type [<AllowNullLiteral>] RealtimeBuildEvent =
    abstract buildId: float with get, set

type [<RequireQualifiedAccess>] RepositoryCleanOptions =
    | Source = 0
    | SourceAndOutputDir = 1
    | SourceDir = 2
    | AllBuildDir = 3

/// Represents a repository's webhook returned from a source provider.
type [<AllowNullLiteral>] RepositoryWebhook =
    /// The friendly name of the repository.
    abstract name: string with get, set
    abstract types: ResizeArray<DefinitionTriggerType> with get, set
    /// The URL of the repository.
    abstract url: string with get, set

/// Represents a reference to a resource.
type [<AllowNullLiteral>] ResourceReference =
    /// An alias to be used when referencing the resource.
    abstract alias: string with get, set

type [<RequireQualifiedAccess>] ResultSet =
    | All = 0
    | Top = 1

/// Represents a retention policy for a build definition.
type [<AllowNullLiteral>] RetentionPolicy =
    abstract artifacts: ResizeArray<string> with get, set
    abstract artifactTypesToDelete: ResizeArray<string> with get, set
    abstract branches: ResizeArray<string> with get, set
    /// The number of days to keep builds.
    abstract daysToKeep: float with get, set
    /// Indicates whether the build record itself should be deleted.
    abstract deleteBuildRecord: bool with get, set
    /// Indicates whether to delete test results associated with the build.
    abstract deleteTestResults: bool with get, set
    /// The minimum number of builds to keep.
    abstract minimumToKeep: float with get, set

/// Contains the minimum, maximum, and current value for a retention setting.
type [<AllowNullLiteral>] RetentionSetting =
    abstract max: float with get, set
    abstract min: float with get, set
    abstract value: float with get, set

type [<AllowNullLiteral>] Schedule =
    abstract branchFilters: ResizeArray<string> with get, set
    /// Days for a build (flags enum for days of the week)
    abstract daysToBuild: ScheduleDays with get, set
    /// The Job Id of the Scheduled job that will queue the scheduled build. Since a single trigger can have multiple schedules and we want a single job to process a single schedule (since each schedule has a list of branches to build), the schedule itself needs to define the Job Id. This value will be filled in when a definition is added or updated.  The UI does not provide it or use it.
    abstract scheduleJobId: string with get, set
    /// Flag to determine if this schedule should only build if the associated source has been changed.
    abstract scheduleOnlyWithChanges: bool with get, set
    /// Local timezone hour to start
    abstract startHours: float with get, set
    /// Local timezone minute to start
    abstract startMinutes: float with get, set
    /// Time zone of the build schedule (String representation of the time zone ID)
    abstract timeZoneId: string with get, set

type [<RequireQualifiedAccess>] ScheduleDays =
    | None = 0
    | Monday = 1
    | Tuesday = 2
    | Wednesday = 4
    | Thursday = 8
    | Friday = 16
    | Saturday = 32
    | Sunday = 64
    | All = 127

/// Represents a schedule trigger.
type [<AllowNullLiteral>] ScheduleTrigger =
    inherit BuildTrigger
    abstract schedules: ResizeArray<Schedule> with get, set

/// Represents a reference to a secure file.
type [<AllowNullLiteral>] SecureFileReference =
    inherit ResourceReference
    /// The ID of the secure file.
    abstract id: string with get, set

/// Represents a phase target that runs on the server.
type [<AllowNullLiteral>] ServerTarget =
    inherit PhaseTarget
    /// The execution options.
    abstract executionOptions: ServerTargetExecutionOptions with get, set

/// Represents options for running a phase on the server.
type [<AllowNullLiteral>] ServerTargetExecutionOptions =
    /// The type.
    abstract ``type``: float with get, set

/// Represents a referenec to a service endpoint.
type [<AllowNullLiteral>] ServiceEndpointReference =
    inherit ResourceReference
    /// The ID of the service endpoint.
    abstract id: string with get, set

type [<RequireQualifiedAccess>] ServiceHostStatus =
    | Online = 1
    | Offline = 2

type [<AllowNullLiteral>] SourceProviderAttributes =
    /// The name of the source provider.
    abstract name: string with get, set
    /// The capabilities supported by this source provider.
    abstract supportedCapabilities: SourceProviderAttributesSupportedCapabilities with get, set
    /// The types of triggers supported by this source provider.
    abstract supportedTriggers: ResizeArray<SupportedTrigger> with get, set

type [<RequireQualifiedAccess>] SourceProviderAvailability =
    | Hosted = 1
    | OnPremises = 2
    | All = 3

/// Represents a work item related to some source item. These are retrieved from Source Providers.
type [<AllowNullLiteral>] SourceRelatedWorkItem =
    abstract _links: obj option with get, set
    /// Identity ref for the person that the work item is assigned to.
    abstract assignedTo: WebApi.IdentityRef with get, set
    /// Current state of the work item, e.g. Active, Resolved, Closed, etc.
    abstract currentState: string with get, set
    /// Long description for the work item.
    abstract description: string with get, set
    /// Unique identifier for the work item
    abstract id: string with get, set
    /// The name of the provider the work item is associated with.
    abstract providerName: string with get, set
    /// Short name for the work item.
    abstract title: string with get, set
    /// Type of work item, e.g. Bug, Task, User Story, etc.
    abstract ``type``: string with get, set

/// A set of repositories returned from the source provider.
type [<AllowNullLiteral>] SourceRepositories =
    /// A token used to continue this paged request; 'null' if the request is complete
    abstract continuationToken: string with get, set
    /// The number of repositories requested for each page
    abstract pageLength: float with get, set
    /// A list of repositories
    abstract repositories: ResizeArray<SourceRepository> with get, set
    /// The total number of pages, or '-1' if unknown
    abstract totalPageCount: float with get, set

/// Represents a repository returned from a source provider.
type [<AllowNullLiteral>] SourceRepository =
    /// The name of the default branch.
    abstract defaultBranch: string with get, set
    /// The full name of the repository.
    abstract fullName: string with get, set
    /// The ID of the repository.
    abstract id: string with get, set
    /// The friendly name of the repository.
    abstract name: string with get, set
    abstract properties: ArtifactResourceProperties with get, set
    /// The name of the source provider the repository is from.
    abstract sourceProviderName: string with get, set
    /// The URL of the repository.
    abstract url: string with get, set

/// Represents an item in a repository from a source provider.
type [<AllowNullLiteral>] SourceRepositoryItem =
    /// Whether the item is able to have sub-items (e.g., is a folder).
    abstract isContainer: bool with get, set
    /// The full path of the item, relative to the root of the repository.
    abstract path: string with get, set
    /// The type of the item (folder, file, etc).
    abstract ``type``: string with get, set
    /// The URL of the item.
    abstract url: string with get, set

type [<RequireQualifiedAccess>] StageUpdateType =
    | Cancel = 0
    | Retry = 1

type [<AllowNullLiteral>] SupportedTrigger =
    /// The default interval to wait between polls (only relevant when NotificationType is Polling).
    abstract defaultPollingInterval: float with get, set
    /// How the trigger is notified of changes.
    abstract notificationType: string with get, set
    /// The capabilities supported by this trigger.
    abstract supportedCapabilities: SupportedTriggerSupportedCapabilities with get, set
    /// The type of trigger.
    abstract ``type``: DefinitionTriggerType with get, set

type [<RequireQualifiedAccess>] SupportLevel =
    | Unsupported = 0
    | Supported = 1
    | Required = 2

/// Represents a Subversion mapping entry.
type [<AllowNullLiteral>] SvnMappingDetails =
    /// The depth.
    abstract depth: float with get, set
    /// Indicates whether to ignore externals.
    abstract ignoreExternals: bool with get, set
    /// The local path.
    abstract localPath: string with get, set
    /// The revision.
    abstract revision: string with get, set
    /// The server path.
    abstract serverPath: string with get, set

/// Represents a subversion workspace.
type [<AllowNullLiteral>] SvnWorkspace =
    abstract mappings: ResizeArray<SvnMappingDetails> with get, set

/// Represents a reference to an agent pool.
type [<AllowNullLiteral>] TaskAgentPoolReference =
    /// The pool ID.
    abstract id: float with get, set
    /// A value indicating whether or not this pool is managed by the service.
    abstract isHosted: bool with get, set
    /// The pool name.
    abstract name: string with get, set

/// A reference to a task definition.
type [<AllowNullLiteral>] TaskDefinitionReference =
    /// The type of task (task or task group).
    abstract definitionType: string with get, set
    /// The ID of the task.
    abstract id: string with get, set
    /// The version of the task.
    abstract versionSpec: string with get, set

/// Represents a reference to a plan group.
type [<AllowNullLiteral>] TaskOrchestrationPlanGroupReference =
    /// The name of the plan group.
    abstract planGroup: string with get, set
    /// The project ID.
    abstract projectId: string with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlanGroupsStartedEvent =
    abstract planGroups: ResizeArray<TaskOrchestrationPlanGroupReference> with get, set

/// Represents a reference to an orchestration plan.
type [<AllowNullLiteral>] TaskOrchestrationPlanReference =
    /// The type of the plan.
    abstract orchestrationType: float with get, set
    /// The ID of the plan.
    abstract planId: string with get, set

/// Represents a reference to a task.
type [<AllowNullLiteral>] TaskReference =
    /// The ID of the task definition.
    abstract id: string with get, set
    /// The name of the task definition.
    abstract name: string with get, set
    /// The version of the task definition.
    abstract version: string with get, set

type [<RequireQualifiedAccess>] TaskResult =
    | Succeeded = 0
    | SucceededWithIssues = 1
    | Failed = 2
    | Canceled = 3
    | Skipped = 4
    | Abandoned = 5

/// Represents the timeline of a build.
type [<AllowNullLiteral>] Timeline =
    inherit TimelineReference
    /// The process or person that last changed the timeline.
    abstract lastChangedBy: string with get, set
    /// The time the timeline was last changed.
    abstract lastChangedOn: DateTime with get, set
    abstract records: ResizeArray<TimelineRecord> with get, set

type [<AllowNullLiteral>] TimelineAttempt =
    /// Gets or sets the attempt of the record.
    abstract attempt: float with get, set
    /// Gets or sets the record identifier located within the specified timeline.
    abstract recordId: string with get, set
    /// Gets or sets the timeline identifier which owns the record representing this attempt.
    abstract timelineId: string with get, set

/// Represents an entry in a build's timeline.
type [<AllowNullLiteral>] TimelineRecord =
    abstract _links: obj option with get, set
    /// Attempt number of record.
    abstract attempt: float with get, set
    /// The change ID.
    abstract changeId: float with get, set
    /// A string that indicates the current operation.
    abstract currentOperation: string with get, set
    /// A reference to a sub-timeline.
    abstract details: TimelineReference with get, set
    /// The number of errors produced by this operation.
    abstract errorCount: float with get, set
    /// The finish time.
    abstract finishTime: DateTime with get, set
    /// The ID of the record.
    abstract id: string with get, set
    /// String identifier that is consistent across attempts.
    abstract identifier: string with get, set
    abstract issues: ResizeArray<Issue> with get, set
    /// The time the record was last modified.
    abstract lastModified: DateTime with get, set
    /// A reference to the log produced by this operation.
    abstract log: BuildLogReference with get, set
    /// The name.
    abstract name: string with get, set
    /// An ordinal value relative to other records.
    abstract order: float with get, set
    /// The ID of the record's parent.
    abstract parentId: string with get, set
    /// The current completion percentage.
    abstract percentComplete: float with get, set
    abstract previousAttempts: ResizeArray<TimelineAttempt> with get, set
    /// The result.
    abstract result: TaskResult with get, set
    /// The result code.
    abstract resultCode: string with get, set
    /// The start time.
    abstract startTime: DateTime with get, set
    /// The state of the record.
    abstract state: TimelineRecordState with get, set
    /// A reference to the task represented by this timeline record.
    abstract task: TaskReference with get, set
    /// The type of the record.
    abstract ``type``: string with get, set
    /// The REST URL of the timeline record.
    abstract url: string with get, set
    /// The number of warnings produced by this operation.
    abstract warningCount: float with get, set
    /// The name of the agent running the operation.
    abstract workerName: string with get, set

type [<RequireQualifiedAccess>] TimelineRecordState =
    | Pending = 0
    | InProgress = 1
    | Completed = 2

type [<AllowNullLiteral>] TimelineRecordsUpdatedEvent =
    inherit RealtimeBuildEvent
    abstract timelineRecords: ResizeArray<TimelineRecord> with get, set

/// Represents a reference to a timeline.
type [<AllowNullLiteral>] TimelineReference =
    /// The change ID.
    abstract changeId: float with get, set
    /// The ID of the timeline.
    abstract id: string with get, set
    /// The REST URL of the timeline.
    abstract url: string with get, set

/// Contains members for updating the retention settings values. All fields are optional.
type [<AllowNullLiteral>] UpdateProjectRetentionSettingModel =
    abstract artifactsRetention: UpdateRetentionSettingModel with get, set
    abstract pullRequestRunRetention: UpdateRetentionSettingModel with get, set
    abstract runRetention: UpdateRetentionSettingModel with get, set

type [<AllowNullLiteral>] UpdateRetentionSettingModel =
    abstract value: float with get, set

type [<AllowNullLiteral>] UpdateStageParameters =
    abstract state: StageUpdateType with get, set

type [<RequireQualifiedAccess>] ValidationResult =
    | OK = 0
    | Warning = 1
    | Error = 2

/// Represents a variable group.
type [<AllowNullLiteral>] VariableGroup =
    inherit VariableGroupReference
    /// The description.
    abstract description: string with get, set
    /// The name of the variable group.
    abstract name: string with get, set
    /// The type of the variable group.
    abstract ``type``: string with get, set
    abstract variables: BuildDefinitionVariables with get, set

/// Represents a reference to a variable group.
type [<AllowNullLiteral>] VariableGroupReference =
    /// The Name of the variable group.
    abstract alias: string with get, set
    /// The ID of the variable group.
    abstract id: float with get, set

/// Represents options for running a phase based on values specified by a list of variables.
type [<AllowNullLiteral>] VariableMultipliersAgentExecutionOptions =
    inherit AgentTargetExecutionOptions
    /// Indicates whether failure on one agent should prevent the phase from running on other agents.
    abstract continueOnError: bool with get, set
    /// The maximum number of agents to use in parallel.
    abstract maxConcurrency: float with get, set
    abstract multipliers: ResizeArray<string> with get, set

/// Represents options for running a phase based on values specified by a list of variables.
type [<AllowNullLiteral>] VariableMultipliersServerExecutionOptions =
    inherit ServerTargetExecutionOptions
    /// Indicates whether failure of one job should prevent the phase from running in other jobs.
    abstract continueOnError: bool with get, set
    /// The maximum number of server jobs to run in parallel.
    abstract maxConcurrency: float with get, set
    abstract multipliers: ResizeArray<string> with get, set

/// Mapping for a workspace
type [<AllowNullLiteral>] WorkspaceMapping =
    /// Uri of the associated definition
    abstract definitionUri: string with get, set
    /// Depth of this mapping
    abstract depth: float with get, set
    /// local location of the definition
    abstract localItem: string with get, set
    /// type of workspace mapping
    abstract mappingType: WorkspaceMappingType with get, set
    /// Server location of the definition
    abstract serverItem: string with get, set
    /// Id of the workspace
    abstract workspaceId: float with get, set

type [<RequireQualifiedAccess>] WorkspaceMappingType =
    | Map = 0
    | Cloak = 1

type [<AllowNullLiteral>] WorkspaceTemplate =
    /// Uri of the associated definition
    abstract definitionUri: string with get, set
    /// The identity that last modified this template
    abstract lastModifiedBy: string with get, set
    /// The last time this template was modified
    abstract lastModifiedDate: DateTime with get, set
    /// List of workspace mappings
    abstract mappings: ResizeArray<WorkspaceMapping> with get, set
    /// Id of the workspace for this template
    abstract workspaceId: float with get, set

type [<AllowNullLiteral>] XamlBuildControllerReference =
    /// Id of the resource
    abstract id: float with get, set
    /// Name of the linked resource (definition name, controller name, etc.)
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] XamlBuildDefinition =
    inherit DefinitionReference
    abstract _links: obj option with get, set
    /// Batch size of the definition
    abstract batchSize: float with get, set
    abstract buildArgs: string with get, set
    /// The continuous integration quiet period
    abstract continuousIntegrationQuietPeriod: float with get, set
    /// The build controller
    abstract controller: BuildController with get, set
    /// The date this definition was created
    abstract createdOn: DateTime with get, set
    /// Default drop location for builds from this definition
    abstract defaultDropLocation: string with get, set
    /// Description of the definition
    abstract description: string with get, set
    /// The last build on this definition
    abstract lastBuild: XamlBuildReference with get, set
    /// The repository
    abstract repository: BuildRepository with get, set
    /// The reasons supported by the template
    abstract supportedReasons: BuildReason with get, set
    /// How builds are triggered from this definition
    abstract triggerType: DefinitionTriggerType with get, set

type [<AllowNullLiteral>] XamlBuildReference =
    /// Id of the resource
    abstract id: float with get, set
    /// Name of the linked resource (definition name, controller name, etc.)
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] XamlBuildServerReference =
    /// Id of the resource
    abstract id: float with get, set
    /// Name of the linked resource (definition name, controller name, etc.)
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] XamlDefinitionReference =
    /// Id of the resource
    abstract id: float with get, set
    /// Name of the linked resource (definition name, controller name, etc.)
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

/// Represents a YAML process.
type [<AllowNullLiteral>] YamlProcess =
    inherit BuildProcess
    abstract errors: ResizeArray<string> with get, set
    /// The resources used by the build definition.
    abstract resources: BuildProcessResources with get, set
    /// The YAML filename.
    abstract yamlFilename: string with get, set

type [<AllowNullLiteral>] ArtifactResourceProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] BuildDefinitionVariables =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> BuildDefinitionVariable with get, set

type [<AllowNullLiteral>] SourceProviderAttributesSupportedCapabilities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> bool with get, set

type [<AllowNullLiteral>] SupportedTriggerSupportedCapabilities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> SupportLevel with get, set
module Build = ___Build_Build
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract BuildRestClient: BuildRestClientStatic

type [<AllowNullLiteral>] BuildRestClient =
    inherit RestClientBase
    /// <summary>Associates an artifact with a build.</summary>
    /// <param name="artifact">- The artifact.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract createArtifact: artifact: Build.BuildArtifact * project: string * buildId: float -> Promise<Build.BuildArtifact>
    /// <summary>Gets a specific artifact for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="artifactName">- The name of the artifact.</param>
    abstract getArtifact: project: string * buildId: float * artifactName: string -> Promise<Build.BuildArtifact>
    /// <summary>Gets a specific artifact for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="artifactName">- The name of the artifact.</param>
    abstract getArtifactContentZip: project: string * buildId: float * artifactName: string -> Promise<ArrayBuffer>
    /// <summary>Gets all artifacts for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract getArtifacts: project: string * buildId: float -> Promise<ResizeArray<Build.BuildArtifact>>
    /// <summary>Gets a file from the build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="artifactName">- The name of the artifact.</param>
    /// <param name="fileId">- The primary key for the file.</param>
    /// <param name="fileName">- The name that the file will be set to.</param>
    abstract getFile: project: string * buildId: float * artifactName: string * fileId: string * fileName: string -> Promise<ArrayBuffer>
    /// <summary>Gets the list of attachments of a specific type that are associated with a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="type">- The type of attachment.</param>
    abstract getAttachments: project: string * buildId: float * ``type``: string -> Promise<ResizeArray<Build.Attachment>>
    /// <summary>Gets a specific attachment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="timelineId">- The ID of the timeline.</param>
    /// <param name="recordId">- The ID of the timeline record.</param>
    /// <param name="type">- The type of the attachment.</param>
    /// <param name="name">- The name of the attachment.</param>
    abstract getAttachment: project: string * buildId: float * timelineId: string * recordId: string * ``type``: string * name: string -> Promise<ArrayBuffer>
    /// <param name="resources">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract authorizeProjectResources: resources: ResizeArray<Build.DefinitionResourceReference> * project: string -> Promise<ResizeArray<Build.DefinitionResourceReference>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">-</param>
    /// <param name="id">-</param>
    abstract getProjectResources: project: string * ?``type``: string * ?id: string -> Promise<ResizeArray<Build.DefinitionResourceReference>>
    /// <summary>Gets a badge that indicates the status of the most recent build for a definition. Note that this API is deprecated. Prefer StatusBadgeController.GetStatusBadge.</summary>
    /// <param name="project">- The project ID or name.</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="branchName">- The name of the branch.</param>
    abstract getBadge: project: string * definitionId: float * ?branchName: string -> Promise<string>
    /// <summary>Gets a list of branches for the given source code repository.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    /// <param name="repository">- The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.</param>
    /// <param name="branchName">- If supplied, the name of the branch to check for specifically.</param>
    abstract listBranches: project: string * providerName: string * ?serviceEndpointId: string * ?repository: string * ?branchName: string -> Promise<ResizeArray<string>>
    /// <summary>Gets a badge that indicates the status of the most recent build for the specified branch.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repoType">- The repository type.</param>
    /// <param name="repoId">- The repository ID.</param>
    /// <param name="branchName">- The branch name.</param>
    abstract getBuildBadge: project: string * repoType: string * ?repoId: string * ?branchName: string -> Promise<Build.BuildBadge>
    /// <summary>Gets a badge that indicates the status of the most recent build for the specified branch.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repoType">- The repository type.</param>
    /// <param name="repoId">- The repository ID.</param>
    /// <param name="branchName">- The branch name.</param>
    abstract getBuildBadgeData: project: string * repoType: string * ?repoId: string * ?branchName: string -> Promise<string>
    /// <summary>Deletes a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract deleteBuild: project: string * buildId: float -> Promise<unit>
    /// <summary>Gets a build</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="propertyFilters">-</param>
    abstract getBuild: project: string * buildId: float * ?propertyFilters: string -> Promise<Build.Build>
    /// <summary>Gets a list of builds.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitions">- A comma-delimited list of definition IDs. If specified, filters to builds for these definitions.</param>
    /// <param name="queues">- A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.</param>
    /// <param name="buildNumber">- If specified, filters to builds that match this build number. Append * to do a prefix search.</param>
    /// <param name="minTime">- If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified.</param>
    /// <param name="maxTime">- If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified.</param>
    /// <param name="requestedFor">- If specified, filters to builds requested for the specified user.</param>
    /// <param name="reasonFilter">- If specified, filters to builds that match this reason.</param>
    /// <param name="statusFilter">- If specified, filters to builds that match this status.</param>
    /// <param name="resultFilter">- If specified, filters to builds that match this result.</param>
    /// <param name="tagFilters">- A comma-delimited list of tags. If specified, filters to builds that have the specified tags.</param>
    /// <param name="properties">- A comma-delimited list of properties to retrieve.</param>
    /// <param name="top">- The maximum number of builds to return.</param>
    /// <param name="continuationToken">- A continuation token, returned by a previous call to this method, that can be used to return the next set of builds.</param>
    /// <param name="maxBuildsPerDefinition">- The maximum number of builds to return per definition.</param>
    /// <param name="deletedFilter">- Indicates whether to exclude, include, or only return deleted builds.</param>
    /// <param name="queryOrder">- The order in which builds should be returned.</param>
    /// <param name="branchName">- If specified, filters to builds that built branches that built this branch.</param>
    /// <param name="buildIds">- A comma-delimited list that specifies the IDs of builds to retrieve.</param>
    /// <param name="repositoryId">- If specified, filters to builds that built from this repository.</param>
    /// <param name="repositoryType">- If specified, filters to builds that built from repositories of this type.</param>
    abstract getBuilds: project: string * ?definitions: ResizeArray<float> * ?queues: ResizeArray<float> * ?buildNumber: string * ?minTime: DateTime * ?maxTime: DateTime * ?requestedFor: string * ?reasonFilter: Build.BuildReason * ?statusFilter: Build.BuildStatus * ?resultFilter: Build.BuildResult * ?tagFilters: ResizeArray<string> * ?properties: ResizeArray<string> * ?top: float * ?continuationToken: string * ?maxBuildsPerDefinition: float * ?deletedFilter: Build.QueryDeletedOption * ?queryOrder: Build.BuildQueryOrder * ?branchName: string * ?buildIds: ResizeArray<float> * ?repositoryId: string * ?repositoryType: string -> Promise<ResizeArray<Build.Build>>
    /// <summary>Queues a build</summary>
    /// <param name="build">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="ignoreWarnings">-</param>
    /// <param name="checkInTicket">-</param>
    /// <param name="sourceBuildId">-</param>
    abstract queueBuild: build: Build.Build * project: string * ?ignoreWarnings: bool * ?checkInTicket: string * ?sourceBuildId: float -> Promise<Build.Build>
    /// <summary>Updates a build.</summary>
    /// <param name="build">- The build.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="retry">-</param>
    abstract updateBuild: build: Build.Build * project: string * buildId: float * ?retry: bool -> Promise<Build.Build>
    /// <summary>Updates multiple builds.</summary>
    /// <param name="builds">- The builds to update.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateBuilds: builds: ResizeArray<Build.Build> * project: string -> Promise<ResizeArray<Build.Build>>
    /// <summary>Gets the changes associated with a build</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="continuationToken">-</param>
    /// <param name="top">- The maximum number of changes to return</param>
    /// <param name="includeSourceChange">-</param>
    abstract getBuildChanges: project: string * buildId: float * ?continuationToken: string * ?top: float * ?includeSourceChange: bool -> Promise<ResizeArray<Build.Change>>
    /// <summary>Gets the changes made to the repository between two given builds.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fromBuildId">- The ID of the first build.</param>
    /// <param name="toBuildId">- The ID of the last build.</param>
    /// <param name="top">- The maximum number of changes to return.</param>
    abstract getChangesBetweenBuilds: project: string * ?fromBuildId: float * ?toBuildId: float * ?top: float -> Promise<ResizeArray<Build.Change>>
    /// <summary>Gets a controller</summary>
    /// <param name="controllerId">-</param>
    abstract getBuildController: controllerId: float -> Promise<Build.BuildController>
    /// <summary>Gets controller, optionally filtered by name</summary>
    /// <param name="name">-</param>
    abstract getBuildControllers: ?name: string -> Promise<ResizeArray<Build.BuildController>>
    /// <summary>Creates a new definition.</summary>
    /// <param name="definition">- The definition.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionToCloneId">-</param>
    /// <param name="definitionToCloneRevision">-</param>
    abstract createDefinition: definition: Build.BuildDefinition * project: string * ?definitionToCloneId: float * ?definitionToCloneRevision: float -> Promise<Build.BuildDefinition>
    /// <summary>Deletes a definition and all associated builds.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    abstract deleteDefinition: project: string * definitionId: float -> Promise<unit>
    /// <summary>Gets a definition, optionally at a specific revision.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="revision">- The revision number to retrieve. If this is not specified, the latest version will be returned.</param>
    /// <param name="minMetricsTime">- If specified, indicates the date from which metrics should be included.</param>
    /// <param name="propertyFilters">- A comma-delimited list of properties to include in the results.</param>
    /// <param name="includeLatestBuilds">-</param>
    abstract getDefinition: project: string * definitionId: float * ?revision: float * ?minMetricsTime: DateTime * ?propertyFilters: ResizeArray<string> * ?includeLatestBuilds: bool -> Promise<Build.BuildDefinition>
    /// <summary>Gets a list of definitions.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="name">- If specified, filters to definitions whose names match this pattern.</param>
    /// <param name="repositoryId">- A repository ID. If specified, filters to definitions that use this repository.</param>
    /// <param name="repositoryType">- If specified, filters to definitions that have a repository of this type.</param>
    /// <param name="queryOrder">- Indicates the order in which definitions should be returned.</param>
    /// <param name="top">- The maximum number of definitions to return.</param>
    /// <param name="continuationToken">- A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions.</param>
    /// <param name="minMetricsTime">- If specified, indicates the date from which metrics should be included.</param>
    /// <param name="definitionIds">- A comma-delimited list that specifies the IDs of definitions to retrieve.</param>
    /// <param name="path">- If specified, filters to definitions under this folder.</param>
    /// <param name="builtAfter">- If specified, filters to definitions that have builds after this date.</param>
    /// <param name="notBuiltAfter">- If specified, filters to definitions that do not have builds after this date.</param>
    /// <param name="includeAllProperties">- Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned.</param>
    /// <param name="includeLatestBuilds">- Indicates whether to return the latest and latest completed builds for this definition.</param>
    /// <param name="taskIdFilter">- If specified, filters to definitions that use the specified task.</param>
    /// <param name="processType">- If specified, filters to definitions with the given process type.</param>
    /// <param name="yamlFilename">- If specified, filters to YAML definitions that match the given filename.</param>
    abstract getDefinitions: project: string * ?name: string * ?repositoryId: string * ?repositoryType: string * ?queryOrder: Build.DefinitionQueryOrder * ?top: float * ?continuationToken: string * ?minMetricsTime: DateTime * ?definitionIds: ResizeArray<float> * ?path: string * ?builtAfter: DateTime * ?notBuiltAfter: DateTime * ?includeAllProperties: bool * ?includeLatestBuilds: bool * ?taskIdFilter: string * ?processType: float * ?yamlFilename: string -> Promise<ResizeArray<Build.BuildDefinitionReference>>
    /// <summary>Restores a deleted definition</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The identifier of the definition to restore.</param>
    /// <param name="deleted">- When false, restores a deleted definition.</param>
    abstract restoreDefinition: project: string * definitionId: float * deleted: bool -> Promise<Build.BuildDefinition>
    /// <summary>Updates an existing definition.</summary>
    /// <param name="definition">- The new version of the defintion.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="secretsSourceDefinitionId">-</param>
    /// <param name="secretsSourceDefinitionRevision">-</param>
    abstract updateDefinition: definition: Build.BuildDefinition * project: string * definitionId: float * ?secretsSourceDefinitionId: float * ?secretsSourceDefinitionRevision: float -> Promise<Build.BuildDefinition>
    /// <summary>Gets the contents of a file in the given source code repository.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    /// <param name="repository">- If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.</param>
    /// <param name="commitOrBranch">- The identifier of the commit or branch from which a file's contents are retrieved.</param>
    /// <param name="path">- The path to the file to retrieve, relative to the root of the repository.</param>
    abstract getFileContents: project: string * providerName: string * ?serviceEndpointId: string * ?repository: string * ?commitOrBranch: string * ?path: string -> Promise<string>
    /// <summary>Creates a new folder.</summary>
    /// <param name="folder">- The folder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- The full path of the folder.</param>
    abstract createFolder: folder: Build.Folder * project: string * path: string -> Promise<Build.Folder>
    /// <summary>Deletes a definition folder. Definitions and their corresponding builds will also be deleted.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- The full path to the folder.</param>
    abstract deleteFolder: project: string * path: string -> Promise<unit>
    /// <summary>Gets a list of build definition folders.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- The path to start with.</param>
    /// <param name="queryOrder">- The order in which folders should be returned.</param>
    abstract getFolders: project: string * ?path: string * ?queryOrder: Build.FolderQueryOrder -> Promise<ResizeArray<Build.Folder>>
    /// <summary>Updates an existing folder at given  existing path</summary>
    /// <param name="folder">- The new version of the folder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- The full path to the folder.</param>
    abstract updateFolder: folder: Build.Folder * project: string * path: string -> Promise<Build.Folder>
    /// <summary>Gets the latest build for a definition, optionally scoped to a specific branch.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definition">- definition name with optional leading folder path, or the definition id</param>
    /// <param name="branchName">- optional parameter that indicates the specific branch to use</param>
    abstract getLatestBuild: project: string * definition: string * ?branchName: string -> Promise<Build.Build>
    /// <summary>Gets an individual log file for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="logId">- The ID of the log file.</param>
    /// <param name="startLine">- The start line.</param>
    /// <param name="endLine">- The end line.</param>
    abstract getBuildLog: project: string * buildId: float * logId: float * ?startLine: float * ?endLine: float -> Promise<string>
    /// <summary>Gets an individual log file for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="logId">- The ID of the log file.</param>
    /// <param name="startLine">- The start line.</param>
    /// <param name="endLine">- The end line.</param>
    abstract getBuildLogLines: project: string * buildId: float * logId: float * ?startLine: float * ?endLine: float -> Promise<ResizeArray<string>>
    /// <summary>Gets the logs for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract getBuildLogs: project: string * buildId: float -> Promise<ResizeArray<Build.BuildLog>>
    /// <summary>Gets the logs for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract getBuildLogsZip: project: string * buildId: float -> Promise<ArrayBuffer>
    /// <summary>Gets an individual log file for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="logId">- The ID of the log file.</param>
    /// <param name="startLine">- The start line.</param>
    /// <param name="endLine">- The end line.</param>
    abstract getBuildLogZip: project: string * buildId: float * logId: float * ?startLine: float * ?endLine: float -> Promise<ArrayBuffer>
    /// <summary>Gets build metrics for a project.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="metricAggregationType">- The aggregation type to use (hourly, daily).</param>
    /// <param name="minMetricsTime">- The date from which to calculate metrics.</param>
    abstract getProjectMetrics: project: string * ?metricAggregationType: string * ?minMetricsTime: DateTime -> Promise<ResizeArray<Build.BuildMetric>>
    /// <summary>Gets build metrics for a definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="minMetricsTime">- The date from which to calculate metrics.</param>
    abstract getDefinitionMetrics: project: string * definitionId: float * ?minMetricsTime: DateTime -> Promise<ResizeArray<Build.BuildMetric>>
    /// <summary>Gets all build definition options supported by the system.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getBuildOptionDefinitions: ?project: string -> Promise<ResizeArray<Build.BuildOptionDefinition>>
    /// <summary>Gets the contents of a directory in the given source code repository.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    /// <param name="repository">- If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.</param>
    /// <param name="commitOrBranch">- The identifier of the commit or branch from which a file's contents are retrieved.</param>
    /// <param name="path">- The path contents to list, relative to the root of the repository.</param>
    abstract getPathContents: project: string * providerName: string * ?serviceEndpointId: string * ?repository: string * ?commitOrBranch: string * ?path: string -> Promise<ResizeArray<Build.SourceRepositoryItem>>
    /// <summary>Gets properties for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="filter">- A comma-delimited list of properties. If specified, filters to these specific properties.</param>
    abstract getBuildProperties: project: string * buildId: float * ?filter: ResizeArray<string> -> Promise<obj option>
    /// <summary>Updates properties for a build.</summary>
    /// <param name="document">- A json-patch document describing the properties to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract updateBuildProperties: document: WebApi.JsonPatchDocument * project: string * buildId: float -> Promise<obj option>
    /// <summary>Gets properties for a definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="filter">- A comma-delimited list of properties. If specified, filters to these specific properties.</param>
    abstract getDefinitionProperties: project: string * definitionId: float * ?filter: ResizeArray<string> -> Promise<obj option>
    /// <summary>Updates properties for a definition.</summary>
    /// <param name="document">- A json-patch document describing the properties to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    abstract updateDefinitionProperties: document: WebApi.JsonPatchDocument * project: string * definitionId: float -> Promise<obj option>
    /// <summary>Gets a pull request object from source provider.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="pullRequestId">- Vendor-specific id of the pull request.</param>
    /// <param name="repositoryId">- Vendor-specific identifier or the name of the repository that contains the pull request.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    abstract getPullRequest: project: string * providerName: string * pullRequestId: string * ?repositoryId: string * ?serviceEndpointId: string -> Promise<Build.PullRequest>
    /// <summary>Gets a build report.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="type">-</param>
    abstract getBuildReport: project: string * buildId: float * ?``type``: string -> Promise<Build.BuildReportMetadata>
    /// <summary>Gets a build report.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="type">-</param>
    abstract getBuildReportHtmlContent: project: string * buildId: float * ?``type``: string -> Promise<obj option>
    /// <summary>Gets a list of source code repositories.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    /// <param name="repository">- If specified, the vendor-specific identifier or the name of a single repository to get.</param>
    /// <param name="resultSet">- 'top' for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if 'repository' is set.</param>
    /// <param name="pageResults">- If set to true, this will limit the set of results and will return a continuation token to continue the query.</param>
    /// <param name="continuationToken">- When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories.</param>
    abstract listRepositories: project: string * providerName: string * ?serviceEndpointId: string * ?repository: string * ?resultSet: Build.ResultSet * ?pageResults: bool * ?continuationToken: string -> Promise<Build.SourceRepositories>
    /// <param name="resources">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">-</param>
    abstract authorizeDefinitionResources: resources: ResizeArray<Build.DefinitionResourceReference> * project: string * definitionId: float -> Promise<ResizeArray<Build.DefinitionResourceReference>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">-</param>
    abstract getDefinitionResources: project: string * definitionId: float -> Promise<ResizeArray<Build.DefinitionResourceReference>>
    /// Gets information about build resources in the system.
    abstract getResourceUsage: unit -> Promise<Build.BuildResourceUsage>
    /// <summary>Gets the project's retention settings.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getRetentionSettings: project: string -> Promise<Build.ProjectRetentionSetting>
    /// <summary>Updates the project's retention settings.</summary>
    /// <param name="updateModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateRetentionSettings: updateModel: Build.UpdateProjectRetentionSettingModel * project: string -> Promise<Build.ProjectRetentionSetting>
    /// <summary>Gets all revisions of a definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    abstract getDefinitionRevisions: project: string * definitionId: float -> Promise<ResizeArray<Build.BuildDefinitionRevision>>
    /// <summary>Gets the build settings.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getBuildSettings: ?project: string -> Promise<Build.BuildSettings>
    /// <summary>Updates the build settings.</summary>
    /// <param name="settings">- The new settings.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateBuildSettings: settings: Build.BuildSettings * ?project: string -> Promise<Build.BuildSettings>
    /// <summary>Get a list of source providers and their capabilities.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract listSourceProviders: project: string -> Promise<ResizeArray<Build.SourceProviderAttributes>>
    /// <summary>Update a build stage</summary>
    /// <param name="updateParameters">-</param>
    /// <param name="buildId">-</param>
    /// <param name="stageRefName">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateStage: updateParameters: Build.UpdateStageParameters * buildId: float * stageRefName: string * ?project: string -> Promise<unit>
    /// <summary>\<p\>Gets the build status for a definition, optionally scoped to a specific branch, stage, job, and configuration.\</p\> \<p\>If there are more than one, then it is required to pass in a stageName value when specifying a jobName, and the same rule then applies for both if passing a configuration parameter.\</p\></summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definition">- Either the definition name with optional leading folder path, or the definition id.</param>
    /// <param name="branchName">- Only consider the most recent build for this branch.</param>
    /// <param name="stageName">- Use this stage within the pipeline to render the status.</param>
    /// <param name="jobName">- Use this job within a stage of the pipeline to render the status.</param>
    /// <param name="configuration">- Use this job configuration to render the status</param>
    /// <param name="label">- Replaces the default text on the left side of the badge.</param>
    abstract getStatusBadge: project: string * definition: string * ?branchName: string * ?stageName: string * ?jobName: string * ?configuration: string * ?label: string -> Promise<string>
    /// <summary>Adds a tag to a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="tag">- The tag to add.</param>
    abstract addBuildTag: project: string * buildId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Adds tags to a build.</summary>
    /// <param name="tags">- The tags to add.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract addBuildTags: tags: ResizeArray<string> * project: string * buildId: float -> Promise<ResizeArray<string>>
    /// <summary>Removes a tag from a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="tag">- The tag to remove.</param>
    abstract deleteBuildTag: project: string * buildId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Gets the tags for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    abstract getBuildTags: project: string * buildId: float -> Promise<ResizeArray<string>>
    /// <summary>Adds a tag to a definition</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="tag">- The tag to add.</param>
    abstract addDefinitionTag: project: string * definitionId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Adds multiple tags to a definition.</summary>
    /// <param name="tags">- The tags to add.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    abstract addDefinitionTags: tags: ResizeArray<string> * project: string * definitionId: float -> Promise<ResizeArray<string>>
    /// <summary>Removes a tag from a definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="tag">- The tag to remove.</param>
    abstract deleteDefinitionTag: project: string * definitionId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Gets the tags for a definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- The ID of the definition.</param>
    /// <param name="revision">- The definition revision number. If not specified, uses the latest revision of the definition.</param>
    abstract getDefinitionTags: project: string * definitionId: float * ?revision: float -> Promise<ResizeArray<string>>
    /// <summary>Removes a tag from builds, definitions, and from the tag store</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="tag">- The tag to remove.</param>
    abstract deleteTag: project: string * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Gets a list of all build tags in the project.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getTags: project: string -> Promise<ResizeArray<string>>
    /// <summary>Deletes a build definition template.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="templateId">- The ID of the template.</param>
    abstract deleteTemplate: project: string * templateId: string -> Promise<unit>
    /// <summary>Gets a specific build definition template.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="templateId">- The ID of the requested template.</param>
    abstract getTemplate: project: string * templateId: string -> Promise<Build.BuildDefinitionTemplate>
    /// <summary>Gets all definition templates.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getTemplates: project: string -> Promise<ResizeArray<Build.BuildDefinitionTemplate>>
    /// <summary>Updates an existing build definition template.</summary>
    /// <param name="template">- The new version of the template.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="templateId">- The ID of the template.</param>
    abstract saveTemplate: template: Build.BuildDefinitionTemplate * project: string * templateId: string -> Promise<Build.BuildDefinitionTemplate>
    /// <summary>Gets details for a build</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="timelineId">-</param>
    /// <param name="changeId">-</param>
    /// <param name="planId">-</param>
    abstract getBuildTimeline: project: string * buildId: float * ?timelineId: string * ?changeId: float * ?planId: string -> Promise<Build.Timeline>
    /// <summary>Recreates the webhooks for the specified triggers in the given source code repository.</summary>
    /// <param name="triggerTypes">- The types of triggers to restore webhooks for.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    /// <param name="repository">- If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.</param>
    abstract restoreWebhooks: triggerTypes: ResizeArray<Build.DefinitionTriggerType> * project: string * providerName: string * ?serviceEndpointId: string * ?repository: string -> Promise<unit>
    /// <summary>Gets a list of webhooks installed in the given source code repository.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="providerName">- The name of the source provider.</param>
    /// <param name="serviceEndpointId">- If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.</param>
    /// <param name="repository">- If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.</param>
    abstract listWebhooks: project: string * providerName: string * ?serviceEndpointId: string * ?repository: string -> Promise<ResizeArray<Build.RepositoryWebhook>>
    /// <summary>Gets the work items associated with a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="top">- The maximum number of work items to return.</param>
    abstract getBuildWorkItemsRefs: project: string * buildId: float * ?top: float -> Promise<ResizeArray<WebApi.ResourceRef>>
    /// <summary>Gets the work items associated with a build, filtered to specific commits.</summary>
    /// <param name="commitIds">- A comma-delimited list of commit IDs.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- The ID of the build.</param>
    /// <param name="top">- The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified.</param>
    abstract getBuildWorkItemsRefsFromCommits: commitIds: ResizeArray<string> * project: string * buildId: float * ?top: float -> Promise<ResizeArray<WebApi.ResourceRef>>
    /// <summary>Gets all the work items between two builds.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fromBuildId">- The ID of the first build.</param>
    /// <param name="toBuildId">- The ID of the last build.</param>
    /// <param name="top">- The maximum number of work items to return.</param>
    abstract getWorkItemsBetweenBuilds: project: string * fromBuildId: float * toBuildId: float * ?top: float -> Promise<ResizeArray<WebApi.ResourceRef>>

type [<AllowNullLiteral>] BuildRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> BuildRestClient
    abstract RESOURCE_AREA_ID: string
type BuildDefinitionReference = __Build.BuildDefinitionReference
type BuildReference = __Build.BuildReference

type [<StringEnum>] [<RequireQualifiedAccess>] BuildServiceIds =
    | [<CompiledName "ms.vss-build-web.build-page-data-service">] BuildPageDataService

/// Contextual information for a build page
type [<AllowNullLiteral>] IBuildPageData =
    /// The currently selected build result when on a build page
    abstract build: BuildReference option with get, set
    /// The currently selected build definition when on a build page
    abstract definition: BuildDefinitionReference option with get, set

/// Service for getting contextual information when on a builds page
type [<AllowNullLiteral>] IBuildPageDataService =
    /// Gets contextual information for a build page
    abstract getBuildPageData: unit -> IBuildPageData option
module WebApi = ___WebApi_WebApi

/// Comment on an artifact like Work Item or Wiki, etc.
type [<AllowNullLiteral>] Comment =
    inherit CommentResourceReference
    /// The id of the artifact this comment belongs to
    abstract artifactId: string with get, set
    /// IdentityRef of the creator of the comment.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The creation date of the comment.
    abstract createdDate: DateTime with get, set
    /// The id assigned to the comment.
    abstract id: float with get, set
    /// Indicates if the comment has been deleted.
    abstract isDeleted: bool with get, set
    /// The mentions of the comment.
    abstract mentions: ResizeArray<CommentMention> with get, set
    /// IdentityRef of the user who last modified the comment.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// The last modification date of the comment.
    abstract modifiedDate: DateTime with get, set
    /// The comment id of the parent comment, if any
    abstract parentId: float with get, set
    /// The reactions on the comment.
    abstract reactions: ResizeArray<CommentReaction> with get, set
    /// The rendered text of the comment
    abstract renderedText: string with get, set
    /// Replies for this comment
    abstract replies: CommentList with get, set
    /// Indicates the current state of the comment
    abstract state: CommentState with get, set
    /// The plaintext/markdown version of the comment
    abstract text: string with get, set
    /// The current version of the comment
    abstract version: float with get, set

/// Represents an attachment to a comment.
type [<AllowNullLiteral>] CommentAttachment =
    inherit CommentResourceReference
    /// IdentityRef of the creator of the attachment.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The creation date of the attachment.
    abstract createdDate: DateTime with get, set
    /// Unique Id of the attachment.
    abstract id: string with get, set

/// Represents a request to create a work item comment.
type [<AllowNullLiteral>] CommentCreateParameters =
    /// Optional CommentId of the parent in order to add a reply for an existing comment
    abstract parentId: float with get, set
    abstract text: string with get, set

type [<RequireQualifiedAccess>] CommentExpandOptions =
    | None = 0
    | Reactions = 1
    | RenderedText = 8
    | RenderedTextOnly = 16
    | Children = 32
    | All = -17

type [<RequireQualifiedAccess>] CommentFormat =
    | Markdown = 0
    | Html = 1

/// Represents a list of comments.
type [<AllowNullLiteral>] CommentList =
    inherit CommentResourceReference
    /// List of comments in the current batch.
    abstract comments: ResizeArray<Comment> with get, set
    /// A string token that can be used to retrieving next page of comments if available. Otherwise null.
    abstract continuationToken: string with get, set
    /// The count of comments in the current batch.
    abstract count: float with get, set
    /// Uri to the next page of comments if it is available. Otherwise null.
    abstract nextPage: string with get, set
    /// Total count of comments on a work item.
    abstract totalCount: float with get, set

/// Contains information about various artifacts mentioned in the comment
type [<AllowNullLiteral>] CommentMention =
    inherit CommentResourceReference
    /// Id of the artifact this mention belongs to
    abstract artifactId: string with get, set
    /// Id of the comment associated with this mention. Nullable to support legacy mentions which can potentially have null commentId
    abstract commentId: float with get, set
    /// Value of the mentioned artifact. Expected Value varies by CommentMentionType: Person:         VSID associated with the identity Work Item:      ID of the work item Pull Request:   ID of the Pull Request
    abstract mentionedArtifact: string with get, set
    /// The context which represent where this mentioned was parsed from
    abstract ``type``: CommentMentionType with get, set

type [<RequireQualifiedAccess>] CommentMentionType =
    | Person = 0
    | WorkItem = 1
    | PullRequest = 2

/// Contains information about comment reaction for a particular reaction type.
type [<AllowNullLiteral>] CommentReaction =
    inherit CommentResourceReference
    /// The id of the comment this reaction belongs to.
    abstract commentId: float with get, set
    /// Total number of reactions for the CommentReactionType.
    abstract count: float with get, set
    /// Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
    abstract isCurrentUserEngaged: bool with get, set
    /// Type of the reaction.
    abstract ``type``: CommentReactionType with get, set

type [<RequireQualifiedAccess>] CommentReactionType =
    | Like = 0
    | Dislike = 1
    | Heart = 2
    | Hooray = 3
    | Smile = 4
    | Confused = 5

/// Base class for comment resource references
type [<AllowNullLiteral>] CommentResourceReference =
    abstract url: string with get, set

type [<RequireQualifiedAccess>] CommentSortOrder =
    | Asc = 1
    | Desc = 2

type [<RequireQualifiedAccess>] CommentState =
    | Active = 0
    | Resolved = 1
    | Closed = 2

/// Represents a request to update a comment.
type [<AllowNullLiteral>] CommentUpdateParameters =
    /// Set the current state of the comment
    abstract state: CommentState with get, set
    /// The updated text of the comment
    abstract text: string with get, set

/// Represents a specific version of a comment on a work item.
type [<AllowNullLiteral>] CommentVersion =
    inherit CommentResourceReference
    /// IdentityRef of the creator of the comment.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The creation date of the comment.
    abstract createdDate: DateTime with get, set
    /// The id assigned to the comment.
    abstract id: float with get, set
    /// Indicates if the comment has been deleted at this version.
    abstract isDeleted: bool with get, set
    /// IdentityRef of the user who modified the comment at this version.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// The modification date of the comment for this version.
    abstract modifiedDate: DateTime with get, set
    /// The rendered content of the comment at this version.
    abstract renderedText: string with get, set
    /// Indicates the current state of the comment
    abstract state: CommentState with get, set
    /// The text of the comment at this version.
    abstract text: string with get, set
    /// The version number.
    abstract version: float with get, set
type IVssRestClientOptions = __Context.IVssRestClientOptions

type [<AllowNullLiteral>] IExports =
    abstract getClient: clientClass: RestClientFactory<'T> * ?clientOptions: IVssRestClientOptions -> 'T

type [<AllowNullLiteral>] RestClientFactory<'T> =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> 'T
    abstract RESOURCE_AREA_ID: string option with get, set

type [<StringEnum>] [<RequireQualifiedAccess>] CommonServiceIds =
    | [<CompiledName "ms.vss-features.extension-data-service">] ExtensionDataService
    | [<CompiledName "ms.vss-tfs-web.tfs-global-messages-service">] GlobalMessagesService
    | [<CompiledName "ms.vss-features.host-navigation-service">] HostNavigationService
    | [<CompiledName "ms.vss-features.host-page-layout-service">] HostPageLayoutService
    | [<CompiledName "ms.vss-features.location-service">] LocationService
    | [<CompiledName "ms.vss-tfs-web.tfs-page-data-service">] ProjectPageService

/// Route information for the current page
type [<AllowNullLiteral>] IPageRoute =
    /// Id of the contributed route
    abstract id: string with get, set
    /// The route values that were specified in the request
    abstract routeValues: IPageRouteRouteValues with get, set

/// Information about a displayed navigation element
type [<AllowNullLiteral>] INavigationElement =
    /// Unique id of the displayed navigation
    abstract id: string with get, set
    /// Name of the displayed navigation
    abstract name: string option with get, set
    /// Type of the navigation element
    abstract ``type``: string with get, set

/// Service for interacting with the host window's navigation (URLs, new windows, etc.)
type [<AllowNullLiteral>] IHostNavigationService =
    /// Gets the current hash.
    abstract getHash: unit -> Promise<string>
    /// Gets the set of navigation elements (like hubs and hub groups) selected on the current page.
    abstract getPageNavigationElements: unit -> Promise<ResizeArray<INavigationElement>>
    /// Gets information about the route that was matched for the current page
    abstract getPageRoute: unit -> Promise<IPageRoute>
    /// Gets the current set of query parameters in the host page's URL.
    abstract getQueryParams: unit -> Promise<IPageRouteRouteValues>
    /// <summary>Navigate the parent page to the specified url</summary>
    /// <param name="url">Url to navigate to</param>
    abstract navigate: url: string -> unit
    /// <summary>Add a callback to be invoked each time the hash navigation has changed</summary>
    /// <param name="callback">Method invoked on each navigation hash change</param>
    abstract onHashChanged: callback: (string -> unit) -> unit
    /// <summary>Open a new window to the specified url</summary>
    /// <param name="url">Url of the new window</param>
    /// <param name="features">Comma-separated list of features/specs sent as the 3rd parameter to window.open. For example: "height=400,width=400".</param>
    abstract openNewWindow: url: string * features: string -> unit
    /// Reloads the parent frame
    abstract reload: unit -> unit
    /// Replace existing hash with the provided hash from the hosted content.
    abstract replaceHash: hash: string -> unit
    /// <summary>Update the host document's title (appears as the browser tab title).</summary>
    /// <param name="title">The new title of the window</param>
    abstract setDocumentTitle: title: string -> unit
    /// Sets the provided hash from the hosted content.
    abstract setHash: hash: string -> unit
    /// <summary>Sets one or more query parameters on the host page</summary>
    /// <param name="parameters">Dictionary of query string parameters to add, update, or remove (pass an empty value to remove)</param>
    abstract setQueryParams: parameters: IHostNavigationServiceSetQueryParamsParameters -> unit

type [<AllowNullLiteral>] IHostNavigationServiceSetQueryParamsParameters =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<RequireQualifiedAccess>] TeamFoundationHostType =
    | Deployment = 1
    | Enterprise = 2
    | Organization = 4

/// Service for external content to get locations
type [<AllowNullLiteral>] ILocationService =
    /// <summary>Gets the URL for the given REST resource area</summary>
    /// <param name="resourceAreaId">- Id of the resource area</param>
    abstract getResourceAreaLocation: resourceAreaId: string -> Promise<string>
    /// <summary>Gets the location of a remote service at a given host type.</summary>
    /// <param name="serviceInstanceType">- The GUID of the service instance type to lookup</param>
    /// <param name="hostType">- The host type to lookup (defaults to the host type of the current page data)</param>
    abstract getServiceLocation: ?serviceInstanceType: string * ?hostType: TeamFoundationHostType -> Promise<string>
    /// <summary>Attemps to create a url for the specified route template and paramaters.  The url will include host path.
    /// For example, if the page url is https://dev.azure.com/foo and you try to create admin settings url for project "bar",
    /// the output will be /foo/bar/_admin.
    ///
    /// This will asynchronously fetch a route contribution if it has not been included in page data.</summary>
    /// <param name="routeId">- Id of the route contribution</param>
    /// <param name="routeValues">- Route value replacements</param>
    /// <param name="hostPath">- Optional host path to use rather than the default host path for the page.</param>
    abstract routeUrl: routeId: string * ?routeValues: ILocationServiceRouteUrlRouteValues * ?hostPath: string -> Promise<string>

type [<AllowNullLiteral>] ILocationServiceRouteUrlRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

/// Options for showing host dialogs
type [<AllowNullLiteral>] IDialogOptions<'TResult> =
    /// Dialog title
    abstract title: string option with get, set
    /// Callback invoked when the dialog is closed
    abstract onClose: ('TResult option -> unit) option with get, set
    /// Optional initial configuration for the dialog content
    abstract configuration: obj option with get, set
    /// If true, clicking outside the dialog closes it
    abstract lightDismiss: bool option with get, set

/// Options for showing a message dialog
type [<AllowNullLiteral>] IMessageDialogOptions =
    inherit IDialogOptions<bool>
    /// If true, show the cancel button
    abstract showCancel: bool option with get, set
    /// Custom text for the OK button
    abstract okText: string option with get, set
    /// Custom text for the Cancel button
    abstract cancelText: string option with get, set

type [<RequireQualifiedAccess>] PanelSize =
    | Small = 0
    | Medium = 1
    | Large = 2

/// Options for showing panels
type [<AllowNullLiteral>] IPanelOptions<'TResult> =
    /// Callback invoked when the dialog is closed
    abstract onClose: ('TResult option -> unit) option with get, set
    /// The panel title you want to display.
    abstract title: string option with get, set
    /// Optional, description of panel.
    abstract description: string option with get, set
    /// Size of the panel. (defaults to PanelSize.Medium)
    abstract size: PanelSize option with get, set
    /// Optional initial configuration for the panel content
    abstract configuration: obj option with get, set

/// Service for interacting with the layout of the page: managing full-screen mode,
/// opening dialogs and panels
type [<AllowNullLiteral>] IHostPageLayoutService =
    /// Gets whether the page is currently in full screen mode
    abstract getFullScreenMode: unit -> Promise<bool>
    /// Open a dialog in the host frame, showing custom external content
    abstract openCustomDialog: (string -> IDialogOptions<'TResult> -> unit) with get, set
    /// Open a dialog in the host frame, showing the specified text message, an OK and optional Cancel button
    abstract openMessageDialog: (string -> IMessageDialogOptions -> unit) with get, set
    /// Open a panel in the host frame, showing custom external content
    abstract openPanel: (string -> IPanelOptions<'TResult> -> unit) with get, set
    /// <summary>Enter or exit full screen mode</summary>
    /// <param name="fullScreenMode">True to enter full-screen mode, false to exit.</param>
    abstract setFullScreenMode: fullScreenMode: bool -> unit

/// Interface for options that can be supplied with document actions
type [<AllowNullLiteral>] IDocumentOptions =
    /// The scope of where the document is stored. Can be Default or User.
    abstract scopeType: string option with get, set
    /// The value of the scope where the document is stored. Can be Current or Me.
    abstract scopeValue: string option with get, set
    /// The default value to return when using getValue(). If the document has no value,
    /// this value will be used instead.
    abstract defaultValue: obj option with get, set

/// Represents a single collection for extension data documents
type [<AllowNullLiteral>] ExtensionDataCollection =
    /// The name of the collection
    abstract collectionName: string with get, set
    /// A list of documents belonging to the collection
    abstract documents: ResizeArray<obj option> with get, set
    /// The type of the collection's scope, such as Default or User
    abstract scopeType: string with get, set
    /// The value of the collection's scope, such as Current or Me
    abstract scopeValue: string with get, set

type [<AllowNullLiteral>] IExtensionDataManager =
    /// <summary>Returns a promise for retrieving a setting at the provided key and scope</summary>
    /// <param name="key">- The key to retrieve a value for</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract getValue: key: string * ?documentOptions: IDocumentOptions -> Promise<'T>
    /// <summary>Returns a promise for saving a setting at the provided key and scope</summary>
    /// <param name="key">- The key to save a value for</param>
    /// <param name="value">- The value to save</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract setValue: key: string * value: 'T * ?documentOptions: IDocumentOptions -> Promise<'T>
    /// <summary>Returns a promise for getting a document with the provided id in the provided collection</summary>
    /// <param name="collectionName">- The name of the collection where the document lives</param>
    /// <param name="id">- The id of the document in the collection</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract getDocument: collectionName: string * id: string * ?documentOptions: IDocumentOptions -> Promise<obj option>
    /// <summary>Returns a promise for getting all of the documents in the provided collection</summary>
    /// <param name="collectionName">- The name of the collection where the document lives</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract getDocuments: collectionName: string * ?documentOptions: IDocumentOptions -> Promise<ResizeArray<obj option>>
    /// <summary>Returns a promise for creating a document in the provided collection</summary>
    /// <param name="collectionName">- The name of the collection where the document lives</param>
    /// <param name="doc">- The document to store</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract createDocument: collectionName: string * doc: obj option * ?documentOptions: IDocumentOptions -> Promise<obj option>
    /// <summary>Returns a promise for setting a document in the provided collection
    /// Creates the document if it does not exist, otherwise updates the existing document with the id provided</summary>
    /// <param name="collectionName">- The name of the collection where the document lives</param>
    /// <param name="doc">- The document to store</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract setDocument: collectionName: string * doc: obj option * ?documentOptions: IDocumentOptions -> Promise<obj option>
    /// <summary>Returns a promise for updating a document in the provided collection
    /// A document with the id provided must exist</summary>
    /// <param name="collectionName">- The name of the collection where the document lives</param>
    /// <param name="doc">- The document to store</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract updateDocument: collectionName: string * doc: obj option * ?documentOptions: IDocumentOptions -> Promise<obj option>
    /// <summary>Returns a promise for deleting the document at the provided scope, collection and id</summary>
    /// <param name="collectionName">- The name of the collection where the document lives</param>
    /// <param name="id">- The id of the document in the collection</param>
    /// <param name="documentOptions">- Extension document options, the default scope value is account-wide</param>
    abstract deleteDocument: collectionName: string * id: string * ?documentOptions: IDocumentOptions -> Promise<unit>
    /// Returns a promise for querying a set of collections
    abstract queryCollectionsByName: collectionNames: ResizeArray<string> -> Promise<ResizeArray<ExtensionDataCollection>>
    /// <summary>Returns a promise for querying a set of collections</summary>
    /// <param name="collections">- The list of collections to query. Each collection will contain its collectionName, scopeType, and scopeValue</param>
    abstract queryCollections: collections: ResizeArray<ExtensionDataCollection> -> Promise<ResizeArray<ExtensionDataCollection>>

type [<AllowNullLiteral>] IExtensionDataService =
    /// <summary>Gets a class that can be used to manage extension data.</summary>
    /// <param name="extensionId">- Id of the extension (publisher.extension)</param>
    /// <param name="accessToken">- Access token to use for the extension</param>
    abstract getExtensionDataManager: extensionId: string * accessToken: string -> Promise<IExtensionDataManager>

type [<AllowNullLiteral>] IProjectInfo =
    /// Unique identifier (GUID) of the project
    abstract id: string with get, set
    /// Name of the project
    abstract name: string with get, set

type [<AllowNullLiteral>] IProjectPageService =
    /// Gets the project associated with the current page
    abstract getProject: unit -> Promise<IProjectInfo option>

/// Definition which can be specified in a contributions "icon" property which can specify a set of values for different themes.
type [<AllowNullLiteral>] IContributedIconDefinition =
    /// Icon property (absolute url or relative asset path) to use when the current theme is a "light" theme.
    abstract light: string with get, set
    /// Icon property (absolute url or relative asset path) to use when the current theme is a "dark" theme.
    abstract dark: string with get, set

/// Defines a button from a first- or third- party contribution
type [<AllowNullLiteral>] IContributedButton =
    /// The id of a command contribution to execute when the button is clicked
    abstract command: string option with get, set
    /// Optional arugments to pass when invoking the supplied command
    abstract commandArguments: ResizeArray<obj option> option with get, set
    /// Id of the contribution that the button was defined in (optional, used to resolve relative icon URLs)
    abstract contributionId: string option with get, set
    /// If true, the button cannot be interacted with.
    abstract disabled: bool option with get, set
    /// Href to navigate to when the button is clicked.  Pass in if this is a link button.
    abstract href: string option with get, set
    /// Either a url (relative or fully qualified) or an IContributedIconDefinition with
    /// urls for light and dark themes. This allows the caller to use different styles of
    /// icons based on the theme type.
    abstract icon: U2<string, IContributedIconDefinition> option with get, set
    /// Set to true if this button should be styled with a primary color.
    abstract primary: bool option with get, set
    /// Optional,context in which the linked resource will open.
    abstract target: string option with get, set
    /// Text to render inside the button.
    abstract text: string option with get, set
    /// Optional value to use as an aria-label and tooltip for the button.
    abstract tooltip: string option with get, set

/// Message links that will be formatted into the message.
type [<AllowNullLiteral>] IGlobalMessageLink =
    /// Hyperlink text
    abstract name: string with get, set
    /// Url of the link target
    abstract href: string with get, set

/// Optional help icon info to show after global message text
type [<AllowNullLiteral>] IGlobalMessageHelpInfo =
    /// If supplied the help icon will act as a hyperlink to the specified target href
    abstract href: string option with get, set
    /// If supplied, hovering/focusing the help icon will show the given tooltip text
    abstract tooltip: string option with get, set

type [<RequireQualifiedAccess>] MessageBannerLevel =
    | Info = 0
    | Warning = 1
    | Error = 2
    | Success = 3

/// Banner Props specifying how it will be rendered by the service
type [<AllowNullLiteral>] IGlobalMessageBanner =
    /// Buttons to display after the message
    abstract buttons: ResizeArray<IContributedButton> option with get, set
    /// Custom icon name. Must be an icon in the Azure DevOps icon font.
    abstract customIcon: string option with get, set
    /// Whether or not the message banner is dismissable. If false, do not show the close (X) icon.
    abstract dismissable: bool option with get, set
    /// Optional "?" icon to show after the message that has a tooltip with more information and/or a hyperlink.
    abstract helpInfo: IGlobalMessageHelpInfo option with get, set
    /// banner level (controls the background and icon of the banner)
    abstract level: MessageBannerLevel option with get, set
    /// Banner message. Ignored if messageFormat is also provided
    abstract message: string option with get, set
    /// Banner message format string. Arguments (like \{0\}, \{1\} are filled in with hyperlinks supplied in messageLinks)
    abstract messageFormat: string option with get, set
    /// Links to supply to the format arguments in `messageFormat`
    abstract messageLinks: ResizeArray<IGlobalMessageLink> option with get, set

/// Toast Props with metadata to specify how it will be rendered by the service
type [<AllowNullLiteral>] IToast =
    /// Optional text for the Call to Action
    abstract callToAction: string option with get, set
    /// Duration in ms the toast will appear for
    abstract duration: float with get, set
    /// If true, we'll immediately take down any existing toast and display this instead
    /// Otherwise, it adds it to an internal queue in the GlobalToast and will display after others in the queue
    abstract forceOverrideExisting: bool option with get, set
    /// Message to display on the Toast
    abstract message: string with get, set
    /// Optional handler for when the Call to Action is clicked
    abstract onCallToActionClick: (unit -> unit) option with get, set

type [<AllowNullLiteral>] IGlobalMessagesService =
    /// <summary>Adds a new message banner to the displayed banners</summary>
    /// <param name="banner">- The message banner to display</param>
    abstract addBanner: banner: IGlobalMessageBanner -> unit
    /// <summary>Displays or queues a Toast to display at the bottom of the page</summary>
    /// <param name="toast">- The toast to display</param>
    abstract addToast: toast: IToast -> unit
    /// Closes the currently active global message banner
    abstract closeBanner: unit -> unit

/// Color used in some UI components
type [<AllowNullLiteral>] IColor =
    /// Red coordinate: 0-255
    abstract red: float with get, set
    /// Blue coordinate: 0-255
    abstract blue: float with get, set
    /// Green coordinate: 0-255
    abstract green: float with get, set
    /// Optional color name; may or may not be used by various controls
    abstract name: string option with get, set

/// Defines a pill from a contribution
type [<AllowNullLiteral>] IContributedPill =
    /// Background color for the pill
    /// Ignored unless variant is set to Colored
    /// If variant is set to Colored and this is not provided, we'll render as Standard and emit a warning to the console
    abstract color: IColor option with get, set
    /// Id of the contribution that the button was defined in (optional, used to resolve relative icon URLs)
    abstract contributionId: string option with get, set
    /// Either a url (relative or fully qualified) or an IContributedIconDefinition with
    /// urls for light and dark themes. This allows the caller to use different styles of
    /// icons based on the theme type.
    abstract icon: U2<string, IContributedIconDefinition> option with get, set
    /// onClick handler for the pill itself
    abstract onClick: (unit -> unit) option with get, set
    /// Renders the remove button if provided
    /// Handler to remove the pill
    abstract onRemoveClick: (unit -> unit) option with get, set
    /// The text to render inside the pill.
    abstract text: string with get, set
    /// Optional value to use as an aria-label and tooltip for the pill.
    abstract tooltip: string option with get, set

type [<AllowNullLiteral>] IPageRouteRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

/// Interface for a class that can retrieve authorization tokens to be used in fetch requests.
type [<AllowNullLiteral>] IAuthorizationTokenProvider =
    /// <summary>Gets the authorization header to use in a fetch request</summary>
    /// <param name="forceRefresh">- If true, indicates that we should get a new token, if applicable for current provider.</param>
    abstract getAuthorizationHeader: ?forceRefresh: bool -> Promise<string>

/// Options for a specific instance of a REST client.
type [<AllowNullLiteral>] IVssRestClientOptions =
    /// Auth token manager that can be used to get and attach auth tokens to requests.
    /// If not supplied, the default token provider is used if the serviceInstanceType option is supplied
    /// and is different from the hosting page's service instance type.
    abstract authTokenProvider: IAuthorizationTokenProvider option with get, set
    /// The root URL path to use for this client. Can be relative or absolute.
    abstract rootPath: U2<string, Promise<string>> option with get, set
    /// Current session id.
    abstract sessionId: string option with get, set
    /// Current command for activity logging.
    abstract command: string option with get, set
type IAuthorizationTokenProvider = __Context.IAuthorizationTokenProvider

type [<AllowNullLiteral>] IExports =
    /// <summary>Issue a fetch request. This is a wrapper around the browser fetch method that handles VSS authentication
    /// and triggers events that can be listened to by other modules.</summary>
    /// <param name="requestUrl">Url to send the request to</param>
    /// <param name="options">fetch settings/options for the request</param>
    /// <param name="vssRequestOptions">VSS specific request options
    ///
    /// Triggered Events:
    /// afterRequest -> IPostRequestEvent is sent after the request has completed.
    /// beforeRequest -> IPreRequestEvent is sent before the request is made.</param>
    abstract issueRequest: requestUrl: string * ?options: RequestInit * ?vssRequestOptions: IVssRequestOptions -> Promise<Response>

/// VSS-specific options for VSS requests
type [<AllowNullLiteral>] IVssRequestOptions =
    abstract authTokenProvider: IAuthorizationTokenProvider option with get, set
    /// Current session id.
    abstract sessionId: string option with get, set
    /// Current command for activity logging.
    abstract command: string option with get, set

/// An IPreRequestEvent is sent before a fetch request is made.
type [<AllowNullLiteral>] IPreRequestEvent =
    /// A unique id that can be used to track this particular request (id is unique among all clients)
    abstract requestId: float with get, set
    /// Url of the request that is about to be issued
    abstract requestUrl: string with get, set
    /// Request settings being used
    abstract options: RequestInit option with get, set
    /// Additional VSS-specific options supplied in the request
    abstract vssRequestOptions: IVssRequestOptions option with get, set

/// An IPostRequestEvent is sent after a fetch request has completed.
type [<AllowNullLiteral>] IPostRequestEvent =
    /// A unique id that can be used to track this particular request (id is unique among all clients)
    abstract requestId: float with get, set
    /// Url of the request that is about to be issued
    abstract requestUrl: string with get, set
    /// The Response returned for this request, if the request fails it will be undefined
    abstract response: Response option with get, set
    /// Additional VSS-specific options supplied in the request
    abstract vssRequestOptions: IVssRequestOptions option with get, set

/// When a fetch request fails, it will throw a VssServerError. Failure is defined
/// as a request that made it to the server, and the server successfully responded
/// with a failure. This will be any status return that is not a status code in
/// the success range (200-299).
type [<AllowNullLiteral>] VssServerError =
    inherit Error
    /// The status code returned from the server.
    abstract status: float with get, set
    /// The raw text that was returned from the server. If any is available.
    abstract responseText: string with get, set
    /// If the response text was sent and it was in the form of a JSON response
    /// the object will be parsed and deserialized object is available here.
    ///
    /// This commonly has the exception details about the failure from the server.
    /// Things like the message, exception type, and stack trace will be available.
    abstract serverError: obj option with get, set
type IVssRestClientOptions = __Context.IVssRestClientOptions

type [<AllowNullLiteral>] IExports =
    abstract RestClientBase: RestClientBaseStatic

/// Parameters for sending a WebApi request
type [<AllowNullLiteral>] RestClientRequestParams =
    /// Route template that is used to form the request path. If routeTemplate is NOT specified, then locationId
    /// is used to lookup the template via an OPTIONS request.
    abstract routeTemplate: string with get, set
    /// The api version string to send in the request (e.g. "1.0" or "2.0-preview.2")
    abstract apiVersion: string with get, set
    /// Dictionary of route template replacement values
    abstract routeValues: RestClientRequestParamsRouteValues option with get, set
    /// Data to post. In this case of a GET, this indicates query parameters.
    /// For other requests, this is the request body object (which will be serialized
    /// into a JSON string unless isRawData is set to true).
    abstract body: obj option with get, set
    /// Query parameters to add to the url. In the case of a GET, query parameters can
    /// be supplied via 'data' or 'queryParams'. For other verbs such as POST, the
    /// data object specifies the POST body, so queryParams is needed to indicate
    /// parameters to add to the query string of the url (not included in the post body).
    abstract queryParams: RestClientRequestParamsRouteValues option with get, set
    /// HTTP verb (GET by default if not specified)
    abstract ``method``: string option with get, set
    /// The http response (Accept) type. This is "json" (corresponds to application/json Accept header)
    /// unless otherwise specified. Other possible values are "html", "text", "zip", or "binary" or their accept
    /// header equivalents (e.g. application/zip).
    abstract httpResponseType: string option with get, set
    /// Allows the caller to specify custom request headers.
    abstract customHeaders: RestClientRequestParamsCustomHeaders option with get, set
    /// If true, indicates that the raw Response should be returned in the request's resulting promise
    /// rather than deserializing the response (the default).
    abstract returnRawResponse: bool option with get, set
    /// If true, this indicates that no processing should be done on the 'data' object
    /// before it is sent in the request. *This is rarely needed*. One case is when posting
    /// an HTML5 File object.
    abstract isRawData: bool option with get, set
    /// Current command for activity logging. This will override the RestClient's base option.
    abstract command: string option with get, set

/// Base class that should be used (derived from) to make requests to VSS REST apis
type [<AllowNullLiteral>] RestClientBase =
    /// Gets the root path of the Service
    abstract getRootPath: unit -> Promise<string>
    /// <summary>Issue a request to a VSS REST endpoint.</summary>
    /// <param name="requestParams">request options</param>
    abstract beginRequest: requestParams: RestClientRequestParams -> Promise<'T>
    /// <summary>Issue a request to a VSS REST endpoint at the specified location</summary>
    /// <param name="requestUrl">Resolved URL of the request</param>
    /// <param name="apiVersion">API version</param>
    /// <param name="requestParams">Optional request parameters</param>
    abstract _issueRequest: requestUrl: string * apiVersion: string * requestParams: RestClientRequestParams -> Promise<'T>

/// Base class that should be used (derived from) to make requests to VSS REST apis
type [<AllowNullLiteral>] RestClientBaseStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> RestClientBase

type [<AllowNullLiteral>] RestClientRequestParamsRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] RestClientRequestParamsCustomHeaders =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: headerName: string -> obj option with get, set

type [<RequireQualifiedAccess>] DayOfWeek =
    | Sunday = 0
    | Monday = 1
    | Tuesday = 2
    | Wednesday = 3
    | Thursday = 4
    | Friday = 5
    | Saturday = 6

type [<RequireQualifiedAccess>] SqlDbType =
    | BigInt = 0
    | Binary = 1
    | Bit = 2
    | Char = 3
    | DateTime = 4
    | Decimal = 5
    | Float = 6
    | Image = 7
    | Int = 8
    | Money = 9
    | NChar = 10
    | NText = 11
    | NVarChar = 12
    | Real = 13
    | UniqueIdentifier = 14
    | SmallDateTime = 15
    | SmallInt = 16
    | SmallMoney = 17
    | Text = 18
    | Timestamp = 19
    | TinyInt = 20
    | VarBinary = 21
    | VarChar = 22
    | Variant = 23
    | Xml = 25
    | Udt = 29
    | Structured = 30
    | Date = 31
    | Time = 32
    | DateTime2 = 33
    | DateTimeOffset = 34

type [<AllowNullLiteral>] IExports =
    /// <summary>Handle the raw text of a JSON response which may contain MSJSON style dates and
    /// deserialize (JSON.parse) the data in a way that restores Date objects rather than
    /// strings.
    ///
    /// MSJSON style dates are in the form:
    ///
    ///      "lastModified": "\/Date(1496158224000)\/"
    ///
    /// This format unnecessarily (but intentionally) escapes the "/" character. So the parsed
    /// JSON will have no trace of the escape character (\).</summary>
    /// <param name="text">The raw JSON text</param>
    abstract deserializeVssJsonObject: text: string -> 'T option

type [<AllowNullLiteral>] IExports =
    abstract Uri: UriStatic
    /// <summary>Take url segments and join them with a single slash character. Takes care of path segements that start and/or end
    /// with a slash to ensure that the resulting URL does not have double-slashes</summary>
    /// <param name="paths">Path segments to concatenate</param>
    abstract combineUrlPaths: [<ParamArray>] paths: ResizeArray<string> -> string
    /// <summary>Parse a route template into a structure that can be used to quickly do route replacements</summary>
    /// <param name="routeTemplate">MVC route template string (like "/foo/{id}/{*params}")</param>
    abstract parseRouteTemplate: routeTemplate: string -> IParsedRoute
    /// <summary>Take a set of routes and route values and form a url using the best match. The best match
    /// is the route with the highest number of replacements (of the given routeValues dictionary).
    /// In the event of a tie (same number of replacements) the route that came first wins.</summary>
    /// <param name="routeCollection">Array of parsed routes</param>
    /// <param name="routeValues">Replacement values</param>
    abstract routeUrl: routeCollection: ResizeArray<IParsedRoute> * routeValues: RouteUrlRouteValues -> string
    /// <summary>Take a set of routes and find the best match. The best match is the route with the highest number of replacements
    /// (of the given routeValues dictionary). In the event of a tie (same number of replacements) the route that came first wins.</summary>
    /// <param name="routeCollection">Array of parsed routes</param>
    /// <param name="routeValues">Replacement values</param>
    abstract getBestRouteMatch: routeCollection: ResizeArray<IParsedRoute> * routeValues: GetBestRouteMatchRouteValues -> IRouteMatchResult option
    /// <summary>Replace route values for a specific parsed route</summary>
    /// <param name="parsedRoute">The route to evaluate</param>
    /// <param name="routeValues">Dictionary of route replacement parameters</param>
    /// <param name="continueOnUnmatchedSegements">If true, continue with replacements even after a miss. By default (false), stop replacements once a parameter is not present.</param>
    abstract replaceParsedRouteValues: parsedRoute: IParsedRoute * routeValues: ReplaceParsedRouteValuesRouteValues * ?continueOnUnmatchedSegements: bool -> IRouteMatchResult option
    /// <summary>Take an MVC route template (like "/foo/{id}/{*params}") and replace the templated parts with values from the given dictionary</summary>
    /// <param name="routeTemplate">MVC route template (like "/foo/{id}/{*params}")</param>
    /// <param name="routeValues">Route value replacements</param>
    abstract replaceRouteValues: routeTemplate: string * routeValues: ReplaceRouteValuesRouteValues -> string

type [<AllowNullLiteral>] RouteUrlRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> string with get, set

type [<AllowNullLiteral>] GetBestRouteMatchRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> string with get, set

type [<AllowNullLiteral>] ReplaceParsedRouteValuesRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> U2<string, float> option with get, set

type [<AllowNullLiteral>] ReplaceRouteValuesRouteValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> U2<string, float> option with get, set

/// A single query parameter entry in a Uri
type [<AllowNullLiteral>] IQueryParameter =
    /// Unencoded name of the query parameter
    abstract name: string with get, set
    /// Unencoded value of the query parameter
    abstract value: string option with get, set

/// Options for parsing a Uri string
type [<AllowNullLiteral>] IUriParseOptions =
    /// If true, throw if the Uri is not absolute
    abstract absoluteUriRequired: bool option with get, set

type QueryParameterEntryValueType =
    U4<string, bool, float, DateTime> option

type QueryParameterValueType =
    U3<QueryParameterEntryValueType, Array<QueryParameterEntryValueType>, QueryParameterEntryValueType>

/// Class that represents a Uri and allows parsing/getting and setting of individual parts
type [<AllowNullLiteral>] Uri =
    /// The uri scheme such as http or https
    abstract scheme: string with get, set
    /// If true, do not emit the "//" separator after the scheme:
    /// Set to true for schemes like mailto (e.g. mailto:foo@bar)
    abstract noSchemeSeparator: bool with get, set
    /// The uri hostname (does not include port or scheme)
    abstract host: string with get, set
    /// The port number of the uri as supplied in the url. 0 if left out in the url (e.g. the default port for the scheme).
    abstract port: float with get, set
    /// The relative path of the uri
    abstract path: string with get, set
    /// The array of query parameters in the uri
    abstract queryParameters: ResizeArray<IQueryParameter> with get, set
    /// The hash string of the uri
    abstract hashString: string with get, set
    /// Set the absolute uri string for this Uri. Replaces all existing values
    abstract absoluteUri: string with get, set
    /// Gets the effective port number, returning the default port number if omitted for the given scheme.
    abstract getEffectivePort: unit -> float
    /// Set the query string for this Uri. Replaces existing value
    abstract queryString: string with get, set
    /// <summary>Get the value of the query parameter with the given key</summary>
    /// <param name="name">Query parameter name</param>
    abstract getQueryParam: name: string -> string option
    /// <summary>Adds a query string parameter to the current uri</summary>
    /// <param name="name">The Query parameter name</param>
    /// <param name="value">The Query parameter value</param>
    /// <param name="replaceExisting">If true, replace all existing parameters with the same name</param>
    abstract addQueryParam: name: string * value: string option * ?replaceExisting: bool -> unit
    /// <summary>Adds query string parameters to the current uri</summary>
    /// <param name="parameters">Query parameters to add</param>
    /// <param name="replaceExisting">If true, replace all existing parameters with the same name</param>
    /// <param name="keyPrefix">If specified, a value to prepend to all query parameter keys</param>
    abstract addQueryParams: parameters: UriAddQueryParamsParameters * ?replaceExisting: bool * ?keyPrefix: string -> unit
    /// <summary>Removes a query string parameter</summary>
    /// <param name="name">The Query parameter name</param>
    abstract removeQueryParam: name: string -> unit

type [<AllowNullLiteral>] UriAddQueryParamsParameters =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> QueryParameterValueType with get, set

/// Class that represents a Uri and allows parsing/getting and setting of individual parts
type [<AllowNullLiteral>] UriStatic =
    /// <summary>Create a new Uri.</summary>
    /// <param name="uri">Optional uri string to populate values with</param>
    /// <param name="options">Options for parsing the uri string</param>
    [<Emit "new $0($1...)">] abstract Create: ?uri: string * ?options: IUriParseOptions -> Uri

/// Represents a route parsed by parseRoute
type [<AllowNullLiteral>] IParsedRoute =
    /// Array of the segements in the route
    abstract segments: ResizeArray<IParsedRouteSegment> with get, set

/// And individual segment of the route (fixed text or a parameter)
type [<AllowNullLiteral>] IParsedRouteSegment =
    /// If present, the fixed text for this segement. Either text or paramName will be defined for a segment, never both.
    abstract text: string option with get, set
    /// If present, the name of the route value parameter to substitute for this segment. Either text or paramName will be defined for a segment, never both.
    abstract paramName: string option with get, set
    /// For parameters, whether or not this parameter is a wildcard (*) parameter, which means it allows multiple path segments (i.e. don't escape "/")
    abstract isWildCardParam: bool option with get, set
    /// Whether the parameter is required in order for the URL to be valid.
    abstract isRequiredParam: bool option with get, set

/// Result of a call to replace route values for a parsed route
type [<AllowNullLiteral>] IRouteMatchResult =
    /// Resulting URL from the template replacement. Does NOT include any query parameters that would be added from extra route values.
    abstract url: string with get, set
    /// Dictionary of the route value keys that were used as replacements
    abstract matchedParameters: IRouteMatchResultMatchedParameters with get, set
    /// The number of parameter replacements made
    abstract matchedParametersCount: float with get, set

type [<AllowNullLiteral>] IRouteMatchResultMatchedParameters =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> bool with get, set
module Gallery = ___Gallery_Gallery

/// Representation of a ContributionNode that can be used for serialized to clients.
type [<AllowNullLiteral>] ClientContribution =
    /// Description of the contribution/type
    abstract description: string with get, set
    /// Fully qualified identifier of the contribution/type
    abstract id: string with get, set
    /// Includes is a set of contributions that should have this contribution included in their targets list.
    abstract includes: ResizeArray<string> with get, set
    /// Properties/attributes of this contribution
    abstract properties: obj option with get, set
    /// The ids of the contribution(s) that this contribution targets. (parent contributions)
    abstract targets: ResizeArray<string> with get, set
    /// Id of the Contribution Type
    abstract ``type``: string with get, set

/// Representation of a ContributionNode that can be used for serialized to clients.
type [<AllowNullLiteral>] ClientContributionNode =
    /// List of ids for contributions which are children to the current contribution.
    abstract children: ResizeArray<string> with get, set
    /// Contribution associated with this node.
    abstract contribution: ClientContribution with get, set
    /// List of ids for contributions which are parents to the current contribution.
    abstract parents: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ClientContributionProviderDetails =
    /// Friendly name for the provider.
    abstract displayName: string with get, set
    /// Unique identifier for this provider. The provider name can be used to cache the contribution data and refer back to it when looking for changes
    abstract name: string with get, set
    /// Properties associated with the provider
    abstract properties: ClientContributionProviderDetailsProperties with get, set
    /// Version of contributions associated with this contribution provider.
    abstract version: string with get, set

/// A client data provider are the details needed to make the data provider request from the client.
type [<AllowNullLiteral>] ClientDataProviderQuery =
    inherit DataProviderQuery
    /// The Id of the service instance type that should be communicated with in order to resolve the data providers from the client given the query values.
    abstract queryServiceInstanceType: string with get, set

/// An individual contribution made by an extension
type [<AllowNullLiteral>] Contribution =
    inherit ContributionBase
    /// List of constraints (filters) that should be applied to the availability of this contribution
    abstract constraints: ResizeArray<ContributionConstraint> with get, set
    /// Includes is a set of contributions that should have this contribution included in their targets list.
    abstract includes: ResizeArray<string> with get, set
    /// Properties/attributes of this contribution
    abstract properties: obj option with get, set
    /// List of demanded claims in order for the user to see this contribution (like anonymous, public, member...).
    abstract restrictedTo: ResizeArray<string> with get, set
    /// The ids of the contribution(s) that this contribution targets. (parent contributions)
    abstract targets: ResizeArray<string> with get, set
    /// Id of the Contribution Type
    abstract ``type``: string with get, set

/// Base class shared by contributions and contribution types
type [<AllowNullLiteral>] ContributionBase =
    /// Description of the contribution/type
    abstract description: string with get, set
    /// Fully qualified identifier of the contribution/type
    abstract id: string with get, set
    /// VisibleTo can be used to restrict whom can reference a given contribution/type. This value should be a list of publishers or extensions access is restricted too.  Examples: "ms" - Means only the "ms" publisher can reference this. "ms.vss-web" - Means only the "vss-web" extension from the "ms" publisher can reference this.
    abstract visibleTo: ResizeArray<string> with get, set

/// Specifies a constraint that can be used to dynamically include/exclude a given contribution
type [<AllowNullLiteral>] ContributionConstraint =
    /// An optional property that can be specified to group constraints together. All constraints within a group are AND'd together (all must be evaluate to True in order for the contribution to be included). Different groups of constraints are OR'd (only one group needs to evaluate to True for the contribution to be included).
    abstract group: float with get, set
    /// Fully qualified identifier of a shared constraint
    abstract id: string with get, set
    /// If true, negate the result of the filter (include the contribution if the applied filter returns false instead of true)
    abstract inverse: bool with get, set
    /// Name of the IContributionFilter plugin
    abstract name: string with get, set
    /// Properties that are fed to the contribution filter class
    abstract properties: obj option with get, set
    /// Constraints can be optionally be applied to one or more of the relationships defined in the contribution. If no relationships are defined then all relationships are associated with the constraint. This means the default behaviour will elimiate the contribution from the tree completely if the constraint is applied.
    abstract relationships: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] ContributionLicensingBehaviorType =
    | OnlyIfLicensed = 0
    | OnlyIfUnlicensed = 1
    | AlwaysInclude = 2

/// A query that can be issued for contribution nodes
type [<AllowNullLiteral>] ContributionNodeQuery =
    /// The contribution ids of the nodes to find.
    abstract contributionIds: ResizeArray<string> with get, set
    /// Contextual information that can be leveraged by contribution constraints
    abstract dataProviderContext: DataProviderContext with get, set
    /// Indicator if contribution provider details should be included in the result.
    abstract includeProviderDetails: bool with get, set
    /// Query options tpo be used when fetching ContributionNodes
    abstract queryOptions: ContributionQueryOptions with get, set

/// Result of a contribution node query.  Wraps the resulting contribution nodes and provider details.
type [<AllowNullLiteral>] ContributionNodeQueryResult =
    /// Map of contribution ids to corresponding node.
    abstract nodes: ContributionNodeQueryResultNodes with get, set
    /// Map of provider ids to the corresponding provider details object.
    abstract providerDetails: ContributionNodeQueryResultProviderDetails with get, set

/// Description about a property of a contribution type
type [<AllowNullLiteral>] ContributionPropertyDescription =
    /// Description of the property
    abstract description: string with get, set
    /// Name of the property
    abstract name: string with get, set
    /// True if this property is required
    abstract required: bool with get, set
    /// The type of value used for this property
    abstract ``type``: ContributionPropertyType with get, set

type [<RequireQualifiedAccess>] ContributionPropertyType =
    | Unknown = 0
    | String = 1
    | Uri = 2
    | Guid = 4
    | Boolean = 8
    | Integer = 16
    | Double = 32
    | DateTime = 64
    | Dictionary = 128
    | Array = 256
    | Object = 512

type [<RequireQualifiedAccess>] ContributionQueryOptions =
    | None = 0
    | IncludeSelf = 16
    | IncludeChildren = 32
    | IncludeSubTree = 96
    | IncludeAll = 112
    | IgnoreConstraints = 256

/// A contribution type, given by a json schema
type [<AllowNullLiteral>] ContributionType =
    inherit ContributionBase
    /// Controls whether or not contributions of this type have the type indexed for queries. This allows clients to find all extensions that have a contribution of this type.  NOTE: Only TrustedPartners are allowed to specify indexed contribution types.
    abstract indexed: bool with get, set
    /// Friendly name of the contribution/type
    abstract name: string with get, set
    /// Describes the allowed properties for this contribution type
    abstract properties: ContributionTypeProperties with get, set

/// Contextual information that data providers can examine when populating their data
type [<AllowNullLiteral>] DataProviderContext =
    /// Generic property bag that contains context-specific properties that data providers can use when populating their data dictionary
    abstract properties: DataProviderContextProperties with get, set

type [<AllowNullLiteral>] DataProviderExceptionDetails =
    /// The type of the exception that was thrown.
    abstract exceptionType: string with get, set
    /// Message that is associated with the exception.
    abstract message: string with get, set
    /// The StackTrace from the exception turned into a string.
    abstract stackTrace: string with get, set

/// A query that can be issued for data provider data
type [<AllowNullLiteral>] DataProviderQuery =
    /// Contextual information to pass to the data providers
    abstract context: DataProviderContext with get, set
    /// The contribution ids of the data providers to resolve
    abstract contributionIds: ResizeArray<string> with get, set

/// Result structure from calls to GetDataProviderData
type [<AllowNullLiteral>] DataProviderResult =
    /// This is the set of data providers that were requested, but either they were defined as client providers, or as remote providers that failed and may be retried by the client.
    abstract clientProviders: DataProviderResultClientProviders with get, set
    /// Property bag of data keyed off of the data provider contribution id
    abstract data: DataProviderContextProperties with get, set
    /// Set of exceptions that occurred resolving the data providers.
    abstract exceptions: DataProviderResultExceptions with get, set
    /// List of data providers resolved in the data-provider query
    abstract resolvedProviders: ResizeArray<ResolvedDataProvider> with get, set
    /// Scope name applied to this data provider result.
    abstract scopeName: string with get, set
    /// Scope value applied to this data provider result.
    abstract scopeValue: string with get, set
    /// Property bag of shared data that was contributed to by any of the individual data providers
    abstract sharedData: DataProviderContextProperties with get, set

/// Base class for an event callback for an extension
type [<AllowNullLiteral>] ExtensionEventCallback =
    /// The uri of the endpoint that is hit when an event occurs
    abstract uri: string with get, set

/// Collection of event callbacks - endpoints called when particular extension events occur.
type [<AllowNullLiteral>] ExtensionEventCallbackCollection =
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension disable has occurred.
    abstract postDisable: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension enable has occurred.
    abstract postEnable: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension install has completed.
    abstract postInstall: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension uninstall has occurred.
    abstract postUninstall: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension update has occurred.
    abstract postUpdate: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension install is about to occur.  Response indicates whether to proceed or abort.
    abstract preInstall: ExtensionEventCallback with get, set
    /// For multi-version extensions, defines an endpoint that gets called via an OPTIONS request to determine the particular version of the extension to be used
    abstract versionCheck: ExtensionEventCallback with get, set

type [<RequireQualifiedAccess>] ExtensionFlags =
    | BuiltIn = 1
    | Trusted = 2

/// How an extension should handle including contributions based on licensing
type [<AllowNullLiteral>] ExtensionLicensing =
    /// A list of contributions which deviate from the default licensing behavior
    abstract overrides: ResizeArray<LicensingOverride> with get, set

/// Base class for extension properties which are shared by the extension manifest and the extension model
type [<AllowNullLiteral>] ExtensionManifest =
    /// Uri used as base for other relative uri's defined in extension
    abstract baseUri: string with get, set
    /// List of shared constraints defined by this extension
    abstract constraints: ResizeArray<ContributionConstraint> with get, set
    /// List of contributions made by this extension
    abstract contributions: ResizeArray<Contribution> with get, set
    /// List of contribution types defined by this extension
    abstract contributionTypes: ResizeArray<ContributionType> with get, set
    /// List of explicit demands required by this extension
    abstract demands: ResizeArray<string> with get, set
    /// Collection of endpoints that get called when particular extension events occur
    abstract eventCallbacks: ExtensionEventCallbackCollection with get, set
    /// Secondary location that can be used as base for other relative uri's defined in extension
    abstract fallbackBaseUri: string with get, set
    /// Language Culture Name set by the Gallery
    abstract language: string with get, set
    /// How this extension behaves with respect to licensing
    abstract licensing: ExtensionLicensing with get, set
    /// Version of the extension manifest format/content
    abstract manifestVersion: float with get, set
    /// Default user claims applied to all contributions (except the ones which have been specified restrictedTo explicitly) to control the visibility of a contribution.
    abstract restrictedTo: ResizeArray<string> with get, set
    /// List of all oauth scopes required by this extension
    abstract scopes: ResizeArray<string> with get, set
    /// The ServiceInstanceType(Guid) of the VSTS service that must be available to an account in order for the extension to be installed
    abstract serviceInstanceType: string with get, set

type [<RequireQualifiedAccess>] ExtensionStateFlags =
    | None = 0
    | Disabled = 1
    | BuiltIn = 2
    | MultiVersion = 4
    | UnInstalled = 8
    | VersionCheckError = 16
    | Trusted = 32
    | Error = 64
    | NeedsReauthorization = 128
    | AutoUpgradeError = 256
    | Warning = 512

/// Represents a VSTS extension along with its installation state
type [<AllowNullLiteral>] InstalledExtension =
    inherit ExtensionManifest
    /// The friendly extension id for this extension - unique for a given publisher.
    abstract extensionId: string with get, set
    /// The display name of the extension.
    abstract extensionName: string with get, set
    /// This is the set of files available from the extension.
    abstract files: ResizeArray<Gallery.ExtensionFile> with get, set
    /// Extension flags relevant to contribution consumers
    abstract flags: ExtensionFlags with get, set
    /// Information about this particular installation of the extension
    abstract installState: InstalledExtensionState with get, set
    /// This represents the date/time the extensions was last updated in the gallery. This doesnt mean this version was updated the value represents changes to any and all versions of the extension.
    abstract lastPublished: DateTime with get, set
    /// Unique id of the publisher of this extension
    abstract publisherId: string with get, set
    /// The display name of the publisher
    abstract publisherName: string with get, set
    /// Unique id for this extension (the same id is used for all versions of a single extension)
    abstract registrationId: string with get, set
    /// Version of this extension
    abstract version: string with get, set

/// The state of an installed extension
type [<AllowNullLiteral>] InstalledExtensionState =
    /// States of an installed extension
    abstract flags: ExtensionStateFlags with get, set
    /// List of installation issues
    abstract installationIssues: ResizeArray<InstalledExtensionStateIssue> with get, set
    /// The time at which this installation was last updated
    abstract lastUpdated: DateTime with get, set

/// Represents an installation issue
type [<AllowNullLiteral>] InstalledExtensionStateIssue =
    /// The error message
    abstract message: string with get, set
    /// Source of the installation issue, for example  "Demands"
    abstract source: string with get, set
    /// Installation issue type (Warning, Error)
    abstract ``type``: InstalledExtensionStateIssueType with get, set

type [<RequireQualifiedAccess>] InstalledExtensionStateIssueType =
    | Warning = 0
    | Error = 1

/// Maps a contribution to a licensing behavior
type [<AllowNullLiteral>] LicensingOverride =
    /// How the inclusion of this contribution should change based on licensing
    abstract behavior: ContributionLicensingBehaviorType with get, set
    /// Fully qualified contribution id which we want to define licensing behavior for
    abstract id: string with get, set

/// Entry for a specific data provider's resulting data
type [<AllowNullLiteral>] ResolvedDataProvider =
    /// The total time the data provider took to resolve its data (in milliseconds)
    abstract duration: float with get, set
    abstract error: string with get, set
    abstract id: string with get, set

type [<AllowNullLiteral>] ClientContributionProviderDetailsProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] ContributionNodeQueryResultNodes =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ClientContributionNode with get, set

type [<AllowNullLiteral>] ContributionNodeQueryResultProviderDetails =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ClientContributionProviderDetails with get, set

type [<AllowNullLiteral>] ContributionTypeProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ContributionPropertyDescription with get, set

type [<AllowNullLiteral>] DataProviderContextProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] DataProviderResultClientProviders =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ClientDataProviderQuery with get, set

type [<AllowNullLiteral>] DataProviderResultExceptions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> DataProviderExceptionDetails with get, set
module Contributions = ___Contributions_Contributions
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ContributionsRestClient: ContributionsRestClientStatic

type [<AllowNullLiteral>] ContributionsRestClient =
    inherit RestClientBase
    /// <summary>Query for contribution nodes and provider details according the parameters in the passed in query object.</summary>
    /// <param name="query">-</param>
    abstract queryContributionNodes: query: Contributions.ContributionNodeQuery -> Promise<Contributions.ContributionNodeQueryResult>
    /// <param name="query">-</param>
    /// <param name="scopeName">-</param>
    /// <param name="scopeValue">-</param>
    abstract queryDataProviders: query: Contributions.DataProviderQuery * ?scopeName: string * ?scopeValue: string -> Promise<Contributions.DataProviderResult>
    /// <param name="contributionIds">-</param>
    /// <param name="includeDisabledApps">-</param>
    /// <param name="assetTypes">-</param>
    abstract getInstalledExtensions: ?contributionIds: ResizeArray<string> * ?includeDisabledApps: bool * ?assetTypes: ResizeArray<string> -> Promise<ResizeArray<Contributions.InstalledExtension>>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="assetTypes">-</param>
    abstract getInstalledExtensionByName: publisherName: string * extensionName: string * ?assetTypes: ResizeArray<string> -> Promise<Contributions.InstalledExtension>

type [<AllowNullLiteral>] ContributionsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ContributionsRestClient
    abstract RESOURCE_AREA_ID: string
module Identities = ___Identities_Identities
module WebApi = ___WebApi_WebApi

type [<RequireQualifiedAccess>] ConnectedServiceKind =
    | Custom = 0
    | AzureSubscription = 1
    | Chef = 2
    | Generic = 3

type [<AllowNullLiteral>] IdentityData =
    abstract identityIds: ResizeArray<string> with get, set

type [<AllowNullLiteral>] Process =
    inherit ProcessReference
    abstract _links: obj option with get, set
    abstract description: string with get, set
    abstract id: string with get, set
    abstract isDefault: bool with get, set
    abstract ``type``: ProcessType with get, set

type [<RequireQualifiedAccess>] ProcessCustomizationType =
    | Unknown = -1
    | Xml = 0
    | Inherited = 1

type [<AllowNullLiteral>] ProcessReference =
    abstract name: string with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ProcessType =
    | System = 0
    | Custom = 1
    | Inherited = 2

/// Contains the image data for project avatar.
type [<AllowNullLiteral>] ProjectAvatar =
    /// The avatar image represented as a byte array.
    abstract image: ResizeArray<float> with get, set

type [<RequireQualifiedAccess>] ProjectChangeType =
    | Modified = 0
    | Deleted = 1
    | Added = 2

/// Contains information describing a project.
type [<AllowNullLiteral>] ProjectInfo =
    /// The abbreviated name of the project.
    abstract abbreviation: string with get, set
    /// The description of the project.
    abstract description: string with get, set
    /// The id of the project.
    abstract id: string with get, set
    /// The time that this project was last updated.
    abstract lastUpdateTime: DateTime with get, set
    /// The name of the project.
    abstract name: string with get, set
    /// A set of name-value pairs storing additional property data related to the project.
    abstract properties: ResizeArray<ProjectProperty> with get, set
    /// The current revision of the project.
    abstract revision: float with get, set
    /// The current state of the project.
    abstract state: obj option with get, set
    /// A Uri that can be used to refer to this project.
    abstract uri: string with get, set
    /// The version number of the project.
    abstract version: float with get, set
    /// Indicates whom the project is visible to.
    abstract visibility: ProjectVisibility with get, set

type [<AllowNullLiteral>] ProjectMessage =
    abstract project: ProjectInfo with get, set
    abstract projectChangeType: ProjectChangeType with get, set
    abstract shouldInvalidateSystemStore: bool with get, set

type [<AllowNullLiteral>] ProjectProperties =
    /// The team project Id
    abstract projectId: string with get, set
    /// The collection of team project properties
    abstract properties: ResizeArray<ProjectProperty> with get, set

/// A named value associated with a project.
type [<AllowNullLiteral>] ProjectProperty =
    /// The name of the property.
    abstract name: string with get, set
    /// The value of the property.
    abstract value: obj option with get, set

type [<RequireQualifiedAccess>] ProjectVisibility =
    | Unchanged = -1
    | Private = 0
    | Organization = 1
    | Public = 2
    | SystemPrivate = 3

type [<AllowNullLiteral>] Proxy =
    abstract authorization: ProxyAuthorization with get, set
    /// This is a description string
    abstract description: string with get, set
    /// The friendly name of the server
    abstract friendlyName: string with get, set
    abstract globalDefault: bool with get, set
    /// This is a string representation of the site that the proxy server is located in (e.g. "NA-WA-RED")
    abstract site: string with get, set
    abstract siteDefault: bool with get, set
    /// The URL of the proxy server
    abstract url: string with get, set

type [<AllowNullLiteral>] ProxyAuthorization =
    /// Gets or sets the endpoint used to obtain access tokens from the configured token service.
    abstract authorizationUrl: string with get, set
    /// Gets or sets the client identifier for this proxy.
    abstract clientId: string with get, set
    /// Gets or sets the user identity to authorize for on-prem.
    abstract identity: Identities.IdentityDescriptor with get, set
    /// Gets or sets the public key used to verify the identity of this proxy. Only specify on hosted.
    abstract publicKey: WebApi.PublicKey with get, set

type [<RequireQualifiedAccess>] SourceControlTypes =
    | Tfvc = 1
    | Git = 2

/// The Team Context for an operation.
type [<AllowNullLiteral>] TeamContext =
    /// The team project Id or name.  Ignored if ProjectId is set.
    abstract project: string with get, set
    /// The Team Project ID.  Required if Project is not set.
    abstract projectId: string with get, set
    /// The Team Id or name.  Ignored if TeamId is set.
    abstract team: string with get, set
    /// The Team Id
    abstract teamId: string with get, set

/// Represents a Team Project object.
type [<AllowNullLiteral>] TeamProject =
    inherit TeamProjectReference
    /// The links to other objects related to this object.
    abstract _links: obj option with get, set
    /// Set of capabilities this project has (such as process template & version control).
    abstract capabilities: TeamProjectCapabilities with get, set
    /// The shallow ref to the default team.
    abstract defaultTeam: WebApiTeamRef with get, set

/// Data contract for a TeamProjectCollection.
type [<AllowNullLiteral>] TeamProjectCollection =
    inherit TeamProjectCollectionReference
    /// The links to other objects related to this object.
    abstract _links: obj option with get, set
    /// Project collection description.
    abstract description: string with get, set
    /// Process customization type on this collection. It can be Xml or Inherited.
    abstract processCustomizationType: ProcessCustomizationType with get, set
    /// Project collection state.
    abstract state: string with get, set

/// Reference object for a TeamProjectCollection.
type [<AllowNullLiteral>] TeamProjectCollectionReference =
    /// Collection Id.
    abstract id: string with get, set
    /// Collection Name.
    abstract name: string with get, set
    /// Collection REST Url.
    abstract url: string with get, set

/// Represents a shallow reference to a TeamProject.
type [<AllowNullLiteral>] TeamProjectReference =
    /// Project abbreviation.
    abstract abbreviation: string with get, set
    /// Url to default team identity image.
    abstract defaultTeamImageUrl: string with get, set
    /// The project's description (if any).
    abstract description: string with get, set
    /// Project identifier.
    abstract id: string with get, set
    /// Project last update time.
    abstract lastUpdateTime: DateTime with get, set
    /// Project name.
    abstract name: string with get, set
    /// Project revision.
    abstract revision: float with get, set
    /// Project state.
    abstract state: obj option with get, set
    /// Url to the full version of the object.
    abstract url: string with get, set
    /// Project visibility.
    abstract visibility: ProjectVisibility with get, set

/// A data transfer object that stores the metadata associated with the creation of temporary data.
type [<AllowNullLiteral>] TemporaryDataCreatedDTO =
    inherit TemporaryDataDTO
    abstract expirationDate: DateTime with get, set
    abstract id: string with get, set
    abstract url: string with get, set

/// A data transfer object that stores the metadata associated with the temporary data.
type [<AllowNullLiteral>] TemporaryDataDTO =
    abstract expirationSeconds: float with get, set
    abstract origin: string with get, set
    abstract value: obj option with get, set

/// Updateable properties for a WebApiTeam.
type [<AllowNullLiteral>] UpdateTeam =
    /// New description for the team.
    abstract description: string with get, set
    /// New name for the team.
    abstract name: string with get, set

type [<AllowNullLiteral>] WebApiConnectedService =
    inherit WebApiConnectedServiceRef
    /// The user who did the OAuth authentication to created this service
    abstract authenticatedBy: WebApi.IdentityRef with get, set
    /// Extra description on the service.
    abstract description: string with get, set
    /// Friendly Name of service connection
    abstract friendlyName: string with get, set
    /// Id/Name of the connection service. For Ex: Subscription Id for Azure Connection
    abstract id: string with get, set
    /// The kind of service.
    abstract kind: string with get, set
    /// The project associated with this service
    abstract project: TeamProjectReference with get, set
    /// Optional uri to connect directly to the service such as https://windows.azure.com
    abstract serviceUri: string with get, set

type [<AllowNullLiteral>] WebApiConnectedServiceDetails =
    inherit WebApiConnectedServiceRef
    /// Meta data for service connection
    abstract connectedServiceMetaData: WebApiConnectedService with get, set
    /// Credential info
    abstract credentialsXml: string with get, set
    /// Optional uri to connect directly to the service such as https://windows.azure.com
    abstract endPoint: string with get, set

type [<AllowNullLiteral>] WebApiConnectedServiceRef =
    abstract id: string with get, set
    abstract url: string with get, set

/// The representation of data needed to create a tag definition which is sent across the wire.
type [<AllowNullLiteral>] WebApiCreateTagRequestData =
    /// Name of the tag definition that will be created.
    abstract name: string with get, set

type [<AllowNullLiteral>] WebApiProject =
    inherit TeamProjectReference
    /// Set of capabilities this project has
    abstract capabilities: TeamProjectCapabilities with get, set
    /// Reference to collection which contains this project
    abstract collection: WebApiProjectCollectionRef with get, set
    /// Default team for this project
    abstract defaultTeam: WebApiTeamRef with get, set

type [<AllowNullLiteral>] WebApiProjectCollection =
    inherit WebApiProjectCollectionRef
    /// Project collection description
    abstract description: string with get, set
    /// Project collection state
    abstract state: string with get, set

type [<AllowNullLiteral>] WebApiProjectCollectionRef =
    /// Collection Tfs Url (Host Url)
    abstract collectionUrl: string with get, set
    /// Collection Guid
    abstract id: string with get, set
    /// Collection Name
    abstract name: string with get, set
    /// Collection REST Url
    abstract url: string with get, set

/// The representation of a tag definition which is sent across the wire.
type [<AllowNullLiteral>] WebApiTagDefinition =
    /// Whether or not the tag definition is active.
    abstract active: bool with get, set
    /// ID of the tag definition.
    abstract id: string with get, set
    /// The name of the tag definition.
    abstract name: string with get, set
    /// Resource URL for the Tag Definition.
    abstract url: string with get, set

type [<AllowNullLiteral>] WebApiTeam =
    inherit WebApiTeamRef
    /// Team description
    abstract description: string with get, set
    /// Team identity.
    abstract identity: Identities.Identity with get, set
    /// Identity REST API Url to this team
    abstract identityUrl: string with get, set
    abstract projectId: string with get, set
    abstract projectName: string with get, set

type [<AllowNullLiteral>] WebApiTeamRef =
    /// Team (Identity) Guid. A Team Foundation ID.
    abstract id: string with get, set
    /// Team name
    abstract name: string with get, set
    /// Team REST API Url
    abstract url: string with get, set

type [<AllowNullLiteral>] TeamProjectCapabilitiesItem =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] TeamProjectCapabilities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> TeamProjectCapabilitiesItem with get, set
module Core = ___Core_Core
module Operations = ___Operations_Operations
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract CoreRestClient: CoreRestClientStatic

type [<AllowNullLiteral>] CoreRestClient =
    inherit RestClientBase
    /// <summary>Removes the avatar for the project.</summary>
    /// <param name="projectId">- The ID or name of the project.</param>
    abstract removeProjectAvatar: projectId: string -> Promise<unit>
    /// <summary>Sets the avatar for the project.</summary>
    /// <param name="avatarBlob">- The avatar blob data object to upload.</param>
    /// <param name="projectId">- The ID or name of the project.</param>
    abstract setProjectAvatar: avatarBlob: Core.ProjectAvatar * projectId: string -> Promise<unit>
    /// <param name="connectedServiceCreationData">-</param>
    /// <param name="projectId">-</param>
    abstract createConnectedService: connectedServiceCreationData: Core.WebApiConnectedServiceDetails * projectId: string -> Promise<Core.WebApiConnectedService>
    /// <param name="projectId">-</param>
    /// <param name="name">-</param>
    abstract getConnectedServiceDetails: projectId: string * name: string -> Promise<Core.WebApiConnectedServiceDetails>
    /// <param name="projectId">-</param>
    /// <param name="kind">-</param>
    abstract getConnectedServices: projectId: string * ?kind: Core.ConnectedServiceKind -> Promise<ResizeArray<Core.WebApiConnectedService>>
    /// <param name="mruData">-</param>
    /// <param name="mruName">-</param>
    abstract createIdentityMru: mruData: Core.IdentityData * mruName: string -> Promise<unit>
    /// <param name="mruData">-</param>
    /// <param name="mruName">-</param>
    abstract deleteIdentityMru: mruData: Core.IdentityData * mruName: string -> Promise<unit>
    /// <param name="mruName">-</param>
    abstract getIdentityMru: mruName: string -> Promise<ResizeArray<WebApi.IdentityRef>>
    /// <param name="mruData">-</param>
    /// <param name="mruName">-</param>
    abstract updateIdentityMru: mruData: Core.IdentityData * mruName: string -> Promise<unit>
    /// <summary>Get a list of members for a specific team.</summary>
    /// <param name="projectId">- The name or ID (GUID) of the team project the team belongs to.</param>
    /// <param name="teamId">- The name or ID (GUID) of the team .</param>
    /// <param name="top">-</param>
    /// <param name="skip">-</param>
    abstract getTeamMembersWithExtendedProperties: projectId: string * teamId: string * ?top: float * ?skip: float -> Promise<ResizeArray<WebApi.TeamMember>>
    /// <summary>Get a process by ID.</summary>
    /// <param name="processId">- ID for a process.</param>
    abstract getProcessById: processId: string -> Promise<Core.Process>
    /// Get a list of processes.
    abstract getProcesses: unit -> Promise<ResizeArray<Core.Process>>
    /// <summary>Get project collection with the specified id or name.</summary>
    /// <param name="collectionId">-</param>
    abstract getProjectCollection: collectionId: string -> Promise<Core.TeamProjectCollection>
    /// <summary>Get project collection references for this application.</summary>
    /// <param name="top">-</param>
    /// <param name="skip">-</param>
    abstract getProjectCollections: ?top: float * ?skip: float -> Promise<ResizeArray<Core.TeamProjectCollectionReference>>
    /// <summary>Gets the history of changes to the project.</summary>
    /// <param name="minRevision">- The minimum revision number to return in the history.</param>
    abstract getProjectHistoryEntries: ?minRevision: float -> Promise<ResizeArray<Core.ProjectInfo>>
    /// <summary>Get project with the specified id or name, optionally including capabilities.</summary>
    /// <param name="projectId">-</param>
    /// <param name="includeCapabilities">- Include capabilities (such as source control) in the team project result (default: false).</param>
    /// <param name="includeHistory">- Search within renamed projects (that had such name in the past).</param>
    abstract getProject: projectId: string * ?includeCapabilities: bool * ?includeHistory: bool -> Promise<Core.TeamProject>
    /// <summary>Get all projects in the organization that the authenticated user has access to.</summary>
    /// <param name="stateFilter">- Filter on team projects in a specific team project state (default: WellFormed).</param>
    /// <param name="top">-</param>
    /// <param name="skip">-</param>
    /// <param name="continuationToken">-</param>
    /// <param name="getDefaultTeamImageUrl">-</param>
    abstract getProjects: ?stateFilter: obj * ?top: float * ?skip: float * ?continuationToken: string * ?getDefaultTeamImageUrl: bool -> Promise<ResizeArray<Core.TeamProjectReference>>
    /// <summary>Queues a project to be created. Use the [GetOperation](../../operations/operations/get) to periodically check for create project status.</summary>
    /// <param name="projectToCreate">- The project to create.</param>
    abstract queueCreateProject: projectToCreate: Core.TeamProject -> Promise<Operations.OperationReference>
    /// <summary>Queues a project to be deleted. Use the [GetOperation](../../operations/operations/get) to periodically check for delete project status.</summary>
    /// <param name="projectId">- The project id of the project to delete.</param>
    abstract queueDeleteProject: projectId: string -> Promise<Operations.OperationReference>
    /// <summary>Update an existing project's name, abbreviation, description, or restore a project.</summary>
    /// <param name="projectUpdate">- The updates for the project. The state must be set to wellFormed to restore the project.</param>
    /// <param name="projectId">- The project id of the project to update.</param>
    abstract updateProject: projectUpdate: Core.TeamProject * projectId: string -> Promise<Operations.OperationReference>
    /// <summary>Get a collection of team project properties for multiple projects.</summary>
    /// <param name="projectIds">- A comma-delimited string of team project IDs</param>
    /// <param name="properties">-</param>
    abstract getProjectsProperties: projectIds: ResizeArray<string> * ?properties: ResizeArray<string> -> Promise<ResizeArray<Core.ProjectProperties>>
    /// <summary>Get a collection of team project properties.</summary>
    /// <param name="projectId">- The team project ID.</param>
    /// <param name="keys">- A comma-delimited string of team project property names. Wildcard characters ("?" and "*") are supported. If no key is specified, all properties will be returned.</param>
    abstract getProjectProperties: projectId: string * ?keys: ResizeArray<string> -> Promise<ResizeArray<Core.ProjectProperty>>
    /// <summary>Create, update, and delete team project properties.</summary>
    /// <param name="projectId">- The team project ID.</param>
    /// <param name="patchDocument">- A JSON Patch document that represents an array of property operations. See RFC 6902 for more details on JSON Patch. The accepted operation verbs are Add and Remove, where Add is used for both creating and updating properties. The path consists of a forward slash and a property name.</param>
    abstract setProjectProperties: projectId: string * patchDocument: WebApi.JsonPatchDocument -> Promise<unit>
    /// <param name="proxy">-</param>
    abstract createOrUpdateProxy: proxy: Core.Proxy -> Promise<Core.Proxy>
    /// <param name="proxyUrl">-</param>
    /// <param name="site">-</param>
    abstract deleteProxy: proxyUrl: string * ?site: string -> Promise<unit>
    /// <param name="proxyUrl">-</param>
    abstract getProxies: ?proxyUrl: string -> Promise<ResizeArray<Core.Proxy>>
    /// <summary>Get a list of all teams.</summary>
    /// <param name="mine">- If true, then return all teams requesting user is member. Otherwise return all teams user has read access.</param>
    /// <param name="top">- Maximum number of teams to return.</param>
    /// <param name="skip">- Number of teams to skip.</param>
    /// <param name="expandIdentity">- A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
    abstract getAllTeams: ?mine: bool * ?top: float * ?skip: float * ?expandIdentity: bool -> Promise<ResizeArray<Core.WebApiTeam>>
    /// <summary>Create a team in a team project.</summary>
    /// <param name="team">- The team data used to create the team.</param>
    /// <param name="projectId">- The name or ID (GUID) of the team project in which to create the team.</param>
    abstract createTeam: team: Core.WebApiTeam * projectId: string -> Promise<Core.WebApiTeam>
    /// <summary>Delete a team.</summary>
    /// <param name="projectId">- The name or ID (GUID) of the team project containing the team to delete.</param>
    /// <param name="teamId">- The name or ID of the team to delete.</param>
    abstract deleteTeam: projectId: string * teamId: string -> Promise<unit>
    /// <summary>Get a specific team.</summary>
    /// <param name="projectId">- The name or ID (GUID) of the team project containing the team.</param>
    /// <param name="teamId">- The name or ID (GUID) of the team.</param>
    /// <param name="expandIdentity">- A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
    abstract getTeam: projectId: string * teamId: string * ?expandIdentity: bool -> Promise<Core.WebApiTeam>
    /// <summary>Get a list of teams.</summary>
    /// <param name="projectId">-</param>
    /// <param name="mine">- If true return all the teams requesting user is member, otherwise return all the teams user has read access.</param>
    /// <param name="top">- Maximum number of teams to return.</param>
    /// <param name="skip">- Number of teams to skip.</param>
    /// <param name="expandIdentity">- A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
    abstract getTeams: projectId: string * ?mine: bool * ?top: float * ?skip: float * ?expandIdentity: bool -> Promise<ResizeArray<Core.WebApiTeam>>
    /// <summary>Update a team's name and/or description.</summary>
    /// <param name="teamData">-</param>
    /// <param name="projectId">- The name or ID (GUID) of the team project containing the team to update.</param>
    /// <param name="teamId">- The name of ID of the team to update.</param>
    abstract updateTeam: teamData: Core.WebApiTeam * projectId: string * teamId: string -> Promise<Core.WebApiTeam>

type [<AllowNullLiteral>] CoreRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> CoreRestClient
    abstract RESOURCE_AREA_ID: string

/// Model of a Dashboard.
type [<AllowNullLiteral>] Dashboard =
    abstract _links: obj option with get, set
    /// Description of the dashboard.
    abstract description: string with get, set
    /// Server defined version tracking value, used for edit collision detection.
    abstract eTag: string with get, set
    /// ID of the Dashboard. Provided by service at creation time.
    abstract id: string with get, set
    /// Name of the Dashboard.
    abstract name: string with get, set
    /// ID of the Owner for a dashboard. For any legacy dashboards, this would be the unique identifier for the team associated with the dashboard.
    abstract ownerId: string with get, set
    /// Position of the dashboard, within a dashboard group. If unset at creation time, position is decided by the service.
    abstract position: float with get, set
    /// Interval for client to automatically refresh the dashboard. Expressed in minutes.
    abstract refreshInterval: float with get, set
    abstract url: string with get, set
    /// The set of Widgets on the dashboard.
    abstract widgets: ResizeArray<Widget> with get, set

/// Describes a list of dashboards associated to an owner. Currently, teams own dashboard groups.
type [<AllowNullLiteral>] DashboardGroup =
    abstract _links: obj option with get, set
    /// A list of Dashboards held by the Dashboard Group
    abstract dashboardEntries: ResizeArray<DashboardGroupEntry> with get, set
    /// Deprecated: The old permission model describing the level of permissions for the current team. Pre-M125.
    abstract permission: GroupMemberPermission with get, set
    /// A permissions bit mask describing the security permissions of the current team for dashboards. When this permission is the value None, use GroupMemberPermission. Permissions are evaluated based on the presence of a value other than None, else the GroupMemberPermission will be saved.
    abstract teamDashboardPermission: TeamDashboardPermission with get, set
    abstract url: string with get, set

/// Dashboard group entry, wrapping around Dashboard (needed?)
type [<AllowNullLiteral>] DashboardGroupEntry =
    inherit Dashboard

/// Response from RestAPI when saving and editing DashboardGroupEntry
type [<AllowNullLiteral>] DashboardGroupEntryResponse =
    inherit DashboardGroupEntry

type [<AllowNullLiteral>] DashboardResponse =
    inherit DashboardGroupEntry

type [<RequireQualifiedAccess>] DashboardScope =
    | Collection_User = 0
    | Project_Team = 1

type [<RequireQualifiedAccess>] GroupMemberPermission =
    | None = 0
    | Edit = 1
    | Manage = 2
    | ManagePermissions = 3

/// Lightbox configuration
type [<AllowNullLiteral>] LightboxOptions =
    /// Height of desired lightbox, in pixels
    abstract height: float with get, set
    /// True to allow lightbox resizing, false to disallow lightbox resizing, defaults to false.
    abstract resizable: bool with get, set
    /// Width of desired lightbox, in pixels
    abstract width: float with get, set

/// versioning for an artifact as described at: http://semver.org/, of the form major.minor.patch.
type [<AllowNullLiteral>] SemanticVersion =
    /// Major version when you make incompatible API changes
    abstract major: float with get, set
    /// Minor version when you add functionality in a backwards-compatible manner
    abstract minor: float with get, set
    /// Patch version when you make backwards-compatible bug fixes
    abstract patch: float with get, set

type [<RequireQualifiedAccess>] TeamDashboardPermission =
    | None = 0
    | Read = 1
    | Create = 2
    | Edit = 4
    | Delete = 8
    | ManagePermissions = 16

/// Widget data
type [<AllowNullLiteral>] Widget =
    abstract _links: obj option with get, set
    /// Refers to the allowed sizes for the widget. This gets populated when user wants to configure the widget
    abstract allowedSizes: ResizeArray<WidgetSize> with get, set
    /// Read-Only Property from Dashboard Service. Indicates if settings are blocked for the current user.
    abstract areSettingsBlockedForUser: bool with get, set
    /// Refers to unique identifier of a feature artifact. Used for pinning+unpinning a specific artifact.
    abstract artifactId: string with get, set
    abstract configurationContributionId: string with get, set
    abstract configurationContributionRelativeId: string with get, set
    abstract contentUri: string with get, set
    /// The id of the underlying contribution defining the supplied Widget Configuration.
    abstract contributionId: string with get, set
    /// Optional partial dashboard content, to support exchanging dashboard-level version ETag for widget-level APIs
    abstract dashboard: Dashboard with get, set
    abstract eTag: string with get, set
    abstract id: string with get, set
    abstract isEnabled: bool with get, set
    abstract isNameConfigurable: bool with get, set
    abstract lightboxOptions: LightboxOptions with get, set
    abstract loadingImageUrl: string with get, set
    abstract name: string with get, set
    abstract position: WidgetPosition with get, set
    abstract settings: string with get, set
    abstract settingsVersion: SemanticVersion with get, set
    abstract size: WidgetSize with get, set
    abstract typeId: string with get, set
    abstract url: string with get, set

/// Contribution based information describing Dashboard Widgets.
type [<AllowNullLiteral>] WidgetMetadata =
    /// Sizes supported by the Widget.
    abstract allowedSizes: ResizeArray<WidgetSize> with get, set
    /// Opt-in boolean that indicates if the widget requires the Analytics Service to function. Widgets requiring the analytics service are hidden from the catalog if the Analytics Service is not available.
    abstract analyticsServiceRequired: bool with get, set
    /// Resource for an icon in the widget catalog.
    abstract catalogIconUrl: string with get, set
    /// Opt-in URL string pointing at widget information. Defaults to extension marketplace URL if omitted
    abstract catalogInfoUrl: string with get, set
    /// The id of the underlying contribution defining the supplied Widget custom configuration UI. Null if custom configuration UI is not available.
    abstract configurationContributionId: string with get, set
    /// The relative id of the underlying contribution defining the supplied Widget custom configuration UI. Null if custom configuration UI is not available.
    abstract configurationContributionRelativeId: string with get, set
    /// Indicates if the widget requires configuration before being added to dashboard.
    abstract configurationRequired: bool with get, set
    /// Uri for the widget content to be loaded from .
    abstract contentUri: string with get, set
    /// The id of the underlying contribution defining the supplied Widget.
    abstract contributionId: string with get, set
    /// Optional default settings to be copied into widget settings.
    abstract defaultSettings: string with get, set
    /// Summary information describing the widget.
    abstract description: string with get, set
    /// Widgets can be disabled by the app store.  We'll need to gracefully handle for: - persistence (Allow) - Requests (Tag as disabled, and provide context)
    abstract isEnabled: bool with get, set
    /// Opt-out boolean that indicates if the widget supports widget name/title configuration. Widgets ignoring the name should set it to false in the manifest.
    abstract isNameConfigurable: bool with get, set
    /// Opt-out boolean indicating if the widget is hidden from the catalog. Commonly, this is used to allow developers to disable creation of a deprecated widget. A widget must have a functional default state, or have a configuration experience, in order to be visible from the catalog.
    abstract isVisibleFromCatalog: bool with get, set
    /// Keywords associated with this widget, non-filterable and invisible
    abstract keywords: ResizeArray<string> with get, set
    /// Opt-in properties for customizing widget presentation in a "lightbox" dialog.
    abstract lightboxOptions: LightboxOptions with get, set
    /// Resource for a loading placeholder image on dashboard
    abstract loadingImageUrl: string with get, set
    /// User facing name of the widget type. Each widget must use a unique value here.
    abstract name: string with get, set
    /// Publisher Name of this kind of widget.
    abstract publisherName: string with get, set
    /// Data contract required for the widget to function and to work in its container.
    abstract supportedScopes: ResizeArray<WidgetScope> with get, set
    /// Tags associated with this widget, visible on each widget and filterable.
    abstract tags: ResizeArray<string> with get, set
    /// Contribution target IDs
    abstract targets: ResizeArray<string> with get, set
    /// Deprecated: locally unique developer-facing id of this kind of widget. ContributionId provides a globally unique identifier for widget types.
    abstract typeId: string with get, set

type [<AllowNullLiteral>] WidgetMetadataResponse =
    abstract uri: string with get, set
    abstract widgetMetadata: WidgetMetadata with get, set

type [<AllowNullLiteral>] WidgetPosition =
    abstract column: float with get, set
    abstract row: float with get, set

/// Response from RestAPI when saving and editing Widget
type [<AllowNullLiteral>] WidgetResponse =
    inherit Widget

type [<RequireQualifiedAccess>] WidgetScope =
    | Collection_User = 0
    | Project_Team = 1

type [<AllowNullLiteral>] WidgetSize =
    /// The Width of the widget, expressed in dashboard grid columns.
    abstract columnSpan: float with get, set
    /// The height of the widget, expressed in dashboard grid rows.
    abstract rowSpan: float with get, set

/// Wrapper class to support HTTP header generation using CreateResponse, ClientHeaderParameter and ClientResponseType in WidgetV2Controller
type [<AllowNullLiteral>] WidgetsVersionedList =
    abstract eTag: ResizeArray<string> with get, set
    abstract widgets: ResizeArray<Widget> with get, set

type [<AllowNullLiteral>] WidgetTypesResponse =
    abstract _links: obj option with get, set
    abstract uri: string with get, set
    abstract widgetTypes: ResizeArray<WidgetMetadata> with get, set
module TfsCore = ___Core_Core
module Dashboard = ___Dashboard_Dashboard
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract DashboardRestClient: DashboardRestClientStatic

type [<AllowNullLiteral>] DashboardRestClient =
    inherit RestClientBase
    /// <summary>Create the supplied dashboard.</summary>
    /// <param name="dashboard">- The initial state of the dashboard</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract createDashboard: dashboard: Dashboard.Dashboard * teamContext: TfsCore.TeamContext -> Promise<Dashboard.Dashboard>
    /// <summary>Delete a dashboard given its ID. This also deletes the widgets associated with this dashboard.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of the dashboard to delete.</param>
    abstract deleteDashboard: teamContext: TfsCore.TeamContext * dashboardId: string -> Promise<unit>
    /// <summary>Get a dashboard by its ID.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">-</param>
    abstract getDashboard: teamContext: TfsCore.TeamContext * dashboardId: string -> Promise<Dashboard.Dashboard>
    /// <summary>Get a list of dashboards.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getDashboards: teamContext: TfsCore.TeamContext -> Promise<Dashboard.DashboardGroup>
    /// <summary>Replace configuration for the specified dashboard. Replaces Widget list on Dashboard, only if property is supplied.</summary>
    /// <param name="dashboard">- The Configuration of the dashboard to replace.</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of the dashboard to replace.</param>
    abstract replaceDashboard: dashboard: Dashboard.Dashboard * teamContext: TfsCore.TeamContext * dashboardId: string -> Promise<Dashboard.Dashboard>
    /// <summary>Update the name and position of dashboards in the supplied group, and remove omitted dashboards. Does not modify dashboard content.</summary>
    /// <param name="group">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract replaceDashboards: group: Dashboard.DashboardGroup * teamContext: TfsCore.TeamContext -> Promise<Dashboard.DashboardGroup>
    /// <summary>Create a widget on the specified dashboard.</summary>
    /// <param name="widget">- State of the widget to add</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of dashboard the widget will be added to.</param>
    abstract createWidget: widget: Dashboard.Widget * teamContext: TfsCore.TeamContext * dashboardId: string -> Promise<Dashboard.Widget>
    /// <summary>Delete the specified widget.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of the dashboard containing the widget.</param>
    /// <param name="widgetId">- ID of the widget to update.</param>
    abstract deleteWidget: teamContext: TfsCore.TeamContext * dashboardId: string * widgetId: string -> Promise<Dashboard.Dashboard>
    /// <summary>Get the current state of the specified widget.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of the dashboard containing the widget.</param>
    /// <param name="widgetId">- ID of the widget to read.</param>
    abstract getWidget: teamContext: TfsCore.TeamContext * dashboardId: string * widgetId: string -> Promise<Dashboard.Widget>
    /// <summary>Override the  state of the specified widget.</summary>
    /// <param name="widget">- State to be written for the widget.</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of the dashboard containing the widget.</param>
    /// <param name="widgetId">- ID of the widget to update.</param>
    abstract replaceWidget: widget: Dashboard.Widget * teamContext: TfsCore.TeamContext * dashboardId: string * widgetId: string -> Promise<Dashboard.Widget>
    /// <summary>Perform a partial update of the specified widget.</summary>
    /// <param name="widget">- Description of the widget changes to apply. All non-null fields will be replaced.</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="dashboardId">- ID of the dashboard containing the widget.</param>
    /// <param name="widgetId">- ID of the widget to update.</param>
    abstract updateWidget: widget: Dashboard.Widget * teamContext: TfsCore.TeamContext * dashboardId: string * widgetId: string -> Promise<Dashboard.Widget>
    /// <summary>Get the widget metadata satisfying the specified contribution ID.</summary>
    /// <param name="contributionId">- The ID of Contribution for the Widget</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getWidgetMetadata: contributionId: string * ?project: string -> Promise<Dashboard.WidgetMetadataResponse>
    /// <summary>Get all available widget metadata in alphabetical order, including widgets marked with isVisibleFromCatalog == false.</summary>
    /// <param name="scope">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getWidgetTypes: scope: Dashboard.WidgetScope * ?project: string -> Promise<Dashboard.WidgetTypesResponse>

type [<AllowNullLiteral>] DashboardRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> DashboardRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] AuthorizationHeader =
    abstract name: string with get, set
    abstract value: string with get, set

/// Represents binding of data source for the service endpoint request.
type [<AllowNullLiteral>] DataSourceBindingBase =
    /// Pagination format supported by this data source(ContinuationToken/SkipTop).
    abstract callbackContextTemplate: string with get, set
    /// Subsequent calls needed?
    abstract callbackRequiredTemplate: string with get, set
    /// Gets or sets the name of the data source.
    abstract dataSourceName: string with get, set
    /// Gets or sets the endpoint Id.
    abstract endpointId: string with get, set
    /// Gets or sets the url of the service endpoint.
    abstract endpointUrl: string with get, set
    /// Gets or sets the authorization headers.
    abstract headers: ResizeArray<AuthorizationHeader> with get, set
    /// Defines the initial value of the query params
    abstract initialContextTemplate: string with get, set
    /// Gets or sets the parameters for the data source.
    abstract parameters: DataSourceBindingBaseParameters with get, set
    /// Gets or sets http request body
    abstract requestContent: string with get, set
    /// Gets or sets http request verb
    abstract requestVerb: string with get, set
    /// Gets or sets the result selector.
    abstract resultSelector: string with get, set
    /// Gets or sets the result template.
    abstract resultTemplate: string with get, set
    /// Gets or sets the target of the data source.
    abstract target: string with get, set

type [<AllowNullLiteral>] ProcessParameters =
    abstract dataSourceBindings: ResizeArray<DataSourceBindingBase> with get, set
    abstract inputs: ResizeArray<TaskInputDefinitionBase> with get, set
    abstract sourceDefinitions: ResizeArray<TaskSourceDefinitionBase> with get, set

type [<AllowNullLiteral>] TaskInputDefinitionBase =
    abstract aliases: ResizeArray<string> with get, set
    abstract defaultValue: string with get, set
    abstract groupName: string with get, set
    abstract helpMarkDown: string with get, set
    abstract label: string with get, set
    abstract name: string with get, set
    abstract options: DataSourceBindingBaseParameters with get, set
    abstract properties: DataSourceBindingBaseParameters with get, set
    abstract required: bool with get, set
    abstract ``type``: string with get, set
    abstract validation: TaskInputValidation with get, set
    abstract visibleRule: string with get, set

type [<AllowNullLiteral>] TaskInputValidation =
    /// Conditional expression
    abstract expression: string with get, set
    /// Message explaining how user can correct if validation fails
    abstract message: string with get, set

type [<AllowNullLiteral>] TaskSourceDefinitionBase =
    abstract authKey: string with get, set
    abstract endpoint: string with get, set
    abstract keySelector: string with get, set
    abstract selector: string with get, set
    abstract target: string with get, set

type [<AllowNullLiteral>] DataSourceBindingBaseParameters =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
module Gallery = ___Gallery_Gallery
module WebApi = ___WebApi_WebApi

type [<RequireQualifiedAccess>] AcquisitionAssignmentType =
    | None = 0
    | Me = 1
    | All = 2

type [<AllowNullLiteral>] AcquisitionOperation =
    /// State of the the AcquisitionOperation for the current user
    abstract operationState: AcquisitionOperationState with get, set
    /// AcquisitionOperationType: install, request, buy, etc...
    abstract operationType: AcquisitionOperationType with get, set
    /// Optional reason to justify current state. Typically used with Disallow state.
    abstract reason: string with get, set
    /// List of reasons indicating why the operation is not allowed.
    abstract reasons: ResizeArray<AcquisitionOperationDisallowReason> with get, set

type [<AllowNullLiteral>] AcquisitionOperationDisallowReason =
    /// User-friendly message clarifying the reason for disallowance
    abstract message: string with get, set
    /// Type of reason for disallowance - AlreadyInstalled, UnresolvedDemand, etc.
    abstract ``type``: string with get, set

type [<RequireQualifiedAccess>] AcquisitionOperationState =
    | Disallow = 0
    | Allow = 1
    | Completed = 3

type [<RequireQualifiedAccess>] AcquisitionOperationType =
    | Get = 0
    | Install = 1
    | Buy = 2
    | Try = 3
    | Request = 4
    | None = 5
    | PurchaseRequest = 6

/// Market item acquisition options (install, buy, etc) for an installation target.
type [<AllowNullLiteral>] AcquisitionOptions =
    /// Default Operation for the ItemId in this target
    abstract defaultOperation: AcquisitionOperation with get, set
    /// The item id that this options refer to
    abstract itemId: string with get, set
    /// Operations allowed for the ItemId in this target
    abstract operations: ResizeArray<AcquisitionOperation> with get, set
    /// Additional properties which can be added to the request.
    abstract properties: obj option with get, set
    /// The target that this options refer to
    abstract target: string with get, set

/// Representation of a ContributionNode that can be used for serialized to clients.
type [<AllowNullLiteral>] ClientContribution =
    /// Description of the contribution/type
    abstract description: string with get, set
    /// Fully qualified identifier of the contribution/type
    abstract id: string with get, set
    /// Includes is a set of contributions that should have this contribution included in their targets list.
    abstract includes: ResizeArray<string> with get, set
    /// Properties/attributes of this contribution
    abstract properties: obj option with get, set
    /// The ids of the contribution(s) that this contribution targets. (parent contributions)
    abstract targets: ResizeArray<string> with get, set
    /// Id of the Contribution Type
    abstract ``type``: string with get, set

/// Representation of a ContributionNode that can be used for serialized to clients.
type [<AllowNullLiteral>] ClientContributionNode =
    /// List of ids for contributions which are children to the current contribution.
    abstract children: ResizeArray<string> with get, set
    /// Contribution associated with this node.
    abstract contribution: ClientContribution with get, set
    /// List of ids for contributions which are parents to the current contribution.
    abstract parents: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ClientContributionProviderDetails =
    /// Friendly name for the provider.
    abstract displayName: string with get, set
    /// Unique identifier for this provider. The provider name can be used to cache the contribution data and refer back to it when looking for changes
    abstract name: string with get, set
    /// Properties associated with the provider
    abstract properties: ClientContributionProviderDetailsProperties with get, set
    /// Version of contributions associated with this contribution provider.
    abstract version: string with get, set

/// A client data provider are the details needed to make the data provider request from the client.
type [<AllowNullLiteral>] ClientDataProviderQuery =
    inherit DataProviderQuery
    /// The Id of the service instance type that should be communicated with in order to resolve the data providers from the client given the query values.
    abstract queryServiceInstanceType: string with get, set

/// An individual contribution made by an extension
type [<AllowNullLiteral>] Contribution =
    inherit ContributionBase
    /// List of constraints (filters) that should be applied to the availability of this contribution
    abstract constraints: ResizeArray<ContributionConstraint> with get, set
    /// Includes is a set of contributions that should have this contribution included in their targets list.
    abstract includes: ResizeArray<string> with get, set
    /// Properties/attributes of this contribution
    abstract properties: obj option with get, set
    /// List of demanded claims in order for the user to see this contribution (like anonymous, public, member...).
    abstract restrictedTo: ResizeArray<string> with get, set
    /// The ids of the contribution(s) that this contribution targets. (parent contributions)
    abstract targets: ResizeArray<string> with get, set
    /// Id of the Contribution Type
    abstract ``type``: string with get, set

/// Base class shared by contributions and contribution types
type [<AllowNullLiteral>] ContributionBase =
    /// Description of the contribution/type
    abstract description: string with get, set
    /// Fully qualified identifier of the contribution/type
    abstract id: string with get, set
    /// VisibleTo can be used to restrict whom can reference a given contribution/type. This value should be a list of publishers or extensions access is restricted too.  Examples: "ms" - Means only the "ms" publisher can reference this. "ms.vss-web" - Means only the "vss-web" extension from the "ms" publisher can reference this.
    abstract visibleTo: ResizeArray<string> with get, set

/// Specifies a constraint that can be used to dynamically include/exclude a given contribution
type [<AllowNullLiteral>] ContributionConstraint =
    /// An optional property that can be specified to group constraints together. All constraints within a group are AND'd together (all must be evaluate to True in order for the contribution to be included). Different groups of constraints are OR'd (only one group needs to evaluate to True for the contribution to be included).
    abstract group: float with get, set
    /// Fully qualified identifier of a shared constraint
    abstract id: string with get, set
    /// If true, negate the result of the filter (include the contribution if the applied filter returns false instead of true)
    abstract inverse: bool with get, set
    /// Name of the IContributionFilter plugin
    abstract name: string with get, set
    /// Properties that are fed to the contribution filter class
    abstract properties: obj option with get, set
    /// Constraints can be optionally be applied to one or more of the relationships defined in the contribution. If no relationships are defined then all relationships are associated with the constraint. This means the default behaviour will elimiate the contribution from the tree completely if the constraint is applied.
    abstract relationships: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] ContributionLicensingBehaviorType =
    | OnlyIfLicensed = 0
    | OnlyIfUnlicensed = 1
    | AlwaysInclude = 2

/// A query that can be issued for contribution nodes
type [<AllowNullLiteral>] ContributionNodeQuery =
    /// The contribution ids of the nodes to find.
    abstract contributionIds: ResizeArray<string> with get, set
    /// Contextual information that can be leveraged by contribution constraints
    abstract dataProviderContext: DataProviderContext with get, set
    /// Indicator if contribution provider details should be included in the result.
    abstract includeProviderDetails: bool with get, set
    /// Query options tpo be used when fetching ContributionNodes
    abstract queryOptions: ContributionQueryOptions with get, set

/// Result of a contribution node query.  Wraps the resulting contribution nodes and provider details.
type [<AllowNullLiteral>] ContributionNodeQueryResult =
    /// Map of contribution ids to corresponding node.
    abstract nodes: ContributionNodeQueryResultNodes with get, set
    /// Map of provider ids to the corresponding provider details object.
    abstract providerDetails: ContributionNodeQueryResultProviderDetails with get, set

/// Description about a property of a contribution type
type [<AllowNullLiteral>] ContributionPropertyDescription =
    /// Description of the property
    abstract description: string with get, set
    /// Name of the property
    abstract name: string with get, set
    /// True if this property is required
    abstract required: bool with get, set
    /// The type of value used for this property
    abstract ``type``: ContributionPropertyType with get, set

type [<RequireQualifiedAccess>] ContributionPropertyType =
    | Unknown = 0
    | String = 1
    | Uri = 2
    | Guid = 4
    | Boolean = 8
    | Integer = 16
    | Double = 32
    | DateTime = 64
    | Dictionary = 128
    | Array = 256
    | Object = 512

type [<AllowNullLiteral>] ContributionProviderDetails =
    /// Friendly name for the provider.
    abstract displayName: string with get, set
    /// Unique identifier for this provider. The provider name can be used to cache the contribution data and refer back to it when looking for changes
    abstract name: string with get, set
    /// Properties associated with the provider
    abstract properties: ClientContributionProviderDetailsProperties with get, set
    /// Version of contributions associated with this contribution provider.
    abstract version: string with get, set

type [<RequireQualifiedAccess>] ContributionQueryOptions =
    | None = 0
    | IncludeSelf = 16
    | IncludeChildren = 32
    | IncludeSubTree = 96
    | IncludeAll = 112
    | IgnoreConstraints = 256

/// A contribution type, given by a json schema
type [<AllowNullLiteral>] ContributionType =
    inherit ContributionBase
    /// Controls whether or not contributions of this type have the type indexed for queries. This allows clients to find all extensions that have a contribution of this type.  NOTE: Only TrustedPartners are allowed to specify indexed contribution types.
    abstract indexed: bool with get, set
    /// Friendly name of the contribution/type
    abstract name: string with get, set
    /// Describes the allowed properties for this contribution type
    abstract properties: ContributionTypeProperties with get, set

/// Contextual information that data providers can examine when populating their data
type [<AllowNullLiteral>] DataProviderContext =
    /// Generic property bag that contains context-specific properties that data providers can use when populating their data dictionary
    abstract properties: DataProviderContextProperties with get, set

type [<AllowNullLiteral>] DataProviderExceptionDetails =
    /// The type of the exception that was thrown.
    abstract exceptionType: string with get, set
    /// Message that is associated with the exception.
    abstract message: string with get, set
    /// The StackTrace from the exception turned into a string.
    abstract stackTrace: string with get, set

/// A query that can be issued for data provider data
type [<AllowNullLiteral>] DataProviderQuery =
    /// Contextual information to pass to the data providers
    abstract context: DataProviderContext with get, set
    /// The contribution ids of the data providers to resolve
    abstract contributionIds: ResizeArray<string> with get, set

/// Result structure from calls to GetDataProviderData
type [<AllowNullLiteral>] DataProviderResult =
    /// This is the set of data providers that were requested, but either they were defined as client providers, or as remote providers that failed and may be retried by the client.
    abstract clientProviders: DataProviderResultClientProviders with get, set
    /// Property bag of data keyed off of the data provider contribution id
    abstract data: DataProviderContextProperties with get, set
    /// Set of exceptions that occurred resolving the data providers.
    abstract exceptions: DataProviderResultExceptions with get, set
    /// List of data providers resolved in the data-provider query
    abstract resolvedProviders: ResizeArray<ResolvedDataProvider> with get, set
    /// Scope name applied to this data provider result.
    abstract scopeName: string with get, set
    /// Scope value applied to this data provider result.
    abstract scopeValue: string with get, set
    /// Property bag of shared data that was contributed to by any of the individual data providers
    abstract sharedData: DataProviderContextProperties with get, set

/// Data bag that any data provider can contribute to. This shared dictionary is returned in the data provider result.
type [<AllowNullLiteral>] DataProviderSharedData =
    interface end

/// Contract for handling the extension acquisition process
type [<AllowNullLiteral>] ExtensionAcquisitionRequest =
    /// How the item is being assigned
    abstract assignmentType: AcquisitionAssignmentType with get, set
    /// The id of the subscription used for purchase
    abstract billingId: string with get, set
    /// The marketplace id (publisherName.extensionName) for the item
    abstract itemId: string with get, set
    /// The type of operation, such as install, request, purchase
    abstract operationType: AcquisitionOperationType with get, set
    /// Additional properties which can be added to the request.
    abstract properties: obj option with get, set
    /// How many licenses should be purchased
    abstract quantity: float with get, set

/// Audit log for an extension
type [<AllowNullLiteral>] ExtensionAuditLog =
    /// Collection of audit log entries
    abstract entries: ResizeArray<ExtensionAuditLogEntry> with get, set
    /// Extension that the change was made for
    abstract extensionName: string with get, set
    /// Publisher that the extension is part of
    abstract publisherName: string with get, set

/// An audit log entry for an extension
type [<AllowNullLiteral>] ExtensionAuditLogEntry =
    /// Change that was made to extension
    abstract auditAction: string with get, set
    /// Date at which the change was made
    abstract auditDate: DateTime with get, set
    /// Extra information about the change
    abstract comment: string with get, set
    /// Represents the user who made the change
    abstract updatedBy: WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] ExtensionAuthorization =
    abstract id: string with get, set
    abstract scopes: ResizeArray<string> with get, set

/// Represents a single collection for extension data documents
type [<AllowNullLiteral>] ExtensionDataCollection =
    /// The name of the collection
    abstract collectionName: string with get, set
    /// A list of documents belonging to the collection
    abstract documents: ResizeArray<obj option> with get, set
    /// The type of the collection's scope, such as Default or User
    abstract scopeType: string with get, set
    /// The value of the collection's scope, such as Current or Me
    abstract scopeValue: string with get, set

/// Represents a query to receive a set of extension data collections
type [<AllowNullLiteral>] ExtensionDataCollectionQuery =
    /// A list of collections to query
    abstract collections: ResizeArray<ExtensionDataCollection> with get, set

type [<AllowNullLiteral>] ExtensionEvent =
    /// The extension which has been updated
    abstract extension: Gallery.PublishedExtension with get, set
    /// The current version of the extension that was updated
    abstract extensionVersion: string with get, set
    /// Name of the collection for which the extension was requested
    abstract host: ExtensionHost with get, set
    /// Gallery host url
    abstract links: ExtensionEventUrls with get, set
    /// Represents the user who initiated the update
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// The type of update that was made
    abstract updateType: ExtensionUpdateType with get, set

/// Base class for an event callback for an extension
type [<AllowNullLiteral>] ExtensionEventCallback =
    /// The uri of the endpoint that is hit when an event occurs
    abstract uri: string with get, set

/// Collection of event callbacks - endpoints called when particular extension events occur.
type [<AllowNullLiteral>] ExtensionEventCallbackCollection =
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension disable has occurred.
    abstract postDisable: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension enable has occurred.
    abstract postEnable: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension install has completed.
    abstract postInstall: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension uninstall has occurred.
    abstract postUninstall: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension update has occurred.
    abstract postUpdate: ExtensionEventCallback with get, set
    /// Optional.  Defines an endpoint that gets called via a POST request to notify that an extension install is about to occur.  Response indicates whether to proceed or abort.
    abstract preInstall: ExtensionEventCallback with get, set
    /// For multi-version extensions, defines an endpoint that gets called via an OPTIONS request to determine the particular version of the extension to be used
    abstract versionCheck: ExtensionEventCallback with get, set

type [<AllowNullLiteral>] ExtensionEventUrls =
    inherit ExtensionUrls
    /// Url of the extension management page
    abstract manageExtensionsPage: string with get, set

type [<RequireQualifiedAccess>] ExtensionFlags =
    | BuiltIn = 1
    | Trusted = 2

type [<AllowNullLiteral>] ExtensionHost =
    abstract id: string with get, set
    abstract name: string with get, set

/// How an extension should handle including contributions based on licensing
type [<AllowNullLiteral>] ExtensionLicensing =
    /// A list of contributions which deviate from the default licensing behavior
    abstract overrides: ResizeArray<LicensingOverride> with get, set

/// Base class for extension properties which are shared by the extension manifest and the extension model
type [<AllowNullLiteral>] ExtensionManifest =
    /// Uri used as base for other relative uri's defined in extension
    abstract baseUri: string with get, set
    /// List of shared constraints defined by this extension
    abstract constraints: ResizeArray<ContributionConstraint> with get, set
    /// List of contributions made by this extension
    abstract contributions: ResizeArray<Contribution> with get, set
    /// List of contribution types defined by this extension
    abstract contributionTypes: ResizeArray<ContributionType> with get, set
    /// List of explicit demands required by this extension
    abstract demands: ResizeArray<string> with get, set
    /// Collection of endpoints that get called when particular extension events occur
    abstract eventCallbacks: ExtensionEventCallbackCollection with get, set
    /// Secondary location that can be used as base for other relative uri's defined in extension
    abstract fallbackBaseUri: string with get, set
    /// Language Culture Name set by the Gallery
    abstract language: string with get, set
    /// How this extension behaves with respect to licensing
    abstract licensing: ExtensionLicensing with get, set
    /// Version of the extension manifest format/content
    abstract manifestVersion: float with get, set
    /// Default user claims applied to all contributions (except the ones which have been specified restrictedTo explicitly) to control the visibility of a contribution.
    abstract restrictedTo: ResizeArray<string> with get, set
    /// List of all oauth scopes required by this extension
    abstract scopes: ResizeArray<string> with get, set
    /// The ServiceInstanceType(Guid) of the VSTS service that must be available to an account in order for the extension to be installed
    abstract serviceInstanceType: string with get, set

/// A request for an extension (to be installed or have a license assigned)
type [<AllowNullLiteral>] ExtensionRequest =
    /// Required message supplied if the request is rejected
    abstract rejectMessage: string with get, set
    /// Date at which the request was made
    abstract requestDate: DateTime with get, set
    /// Represents the user who made the request
    abstract requestedBy: WebApi.IdentityRef with get, set
    /// Optional message supplied by the requester justifying the request
    abstract requestMessage: string with get, set
    /// Represents the state of the request
    abstract requestState: ExtensionRequestState with get, set
    /// Date at which the request was resolved
    abstract resolveDate: DateTime with get, set
    /// Represents the user who resolved the request
    abstract resolvedBy: WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] ExtensionRequestEvent =
    /// The extension which has been requested
    abstract extension: Gallery.PublishedExtension with get, set
    /// Information about the host for which this extension is requested
    abstract host: ExtensionHost with get, set
    /// Name of the collection for which the extension was requested
    abstract hostName: string with get, set
    /// Gallery host url
    abstract links: ExtensionRequestUrls with get, set
    /// The extension request object
    abstract request: ExtensionRequest with get, set
    /// The type of update that was made
    abstract updateType: ExtensionRequestUpdateType with get, set

type [<AllowNullLiteral>] ExtensionRequestsEvent =
    /// The extension which has been requested
    abstract extension: Gallery.PublishedExtension with get, set
    /// Information about the host for which this extension is requested
    abstract host: ExtensionHost with get, set
    /// Gallery host url
    abstract links: ExtensionRequestUrls with get, set
    /// The extension request object
    abstract requests: ResizeArray<ExtensionRequest> with get, set
    /// The type of update that was made
    abstract updateType: ExtensionRequestUpdateType with get, set

type [<RequireQualifiedAccess>] ExtensionRequestState =
    | Open = 0
    | Accepted = 1
    | Rejected = 2

type [<RequireQualifiedAccess>] ExtensionRequestUpdateType =
    | Created = 1
    | Approved = 2
    | Rejected = 3
    | Deleted = 4

type [<AllowNullLiteral>] ExtensionRequestUrls =
    inherit ExtensionUrls
    /// Link to view the extension request
    abstract requestPage: string with get, set

/// The state of an extension
type [<AllowNullLiteral>] ExtensionState =
    inherit InstalledExtensionState
    abstract extensionName: string with get, set
    /// The time at which the version was last checked
    abstract lastVersionCheck: DateTime with get, set
    abstract publisherName: string with get, set
    abstract version: string with get, set

type [<RequireQualifiedAccess>] ExtensionStateFlags =
    | None = 0
    | Disabled = 1
    | BuiltIn = 2
    | MultiVersion = 4
    | UnInstalled = 8
    | VersionCheckError = 16
    | Trusted = 32
    | Error = 64
    | NeedsReauthorization = 128
    | AutoUpgradeError = 256
    | Warning = 512

type [<RequireQualifiedAccess>] ExtensionUpdateType =
    | Installed = 1
    | Uninstalled = 2
    | Enabled = 3
    | Disabled = 4
    | VersionUpdated = 5
    | ActionRequired = 6
    | ActionResolved = 7

type [<AllowNullLiteral>] ExtensionUrls =
    /// Url of the extension icon
    abstract extensionIcon: string with get, set
    /// Link to view the extension details page
    abstract extensionPage: string with get, set

/// Represents a VSTS extension along with its installation state
type [<AllowNullLiteral>] InstalledExtension =
    inherit ExtensionManifest
    /// The friendly extension id for this extension - unique for a given publisher.
    abstract extensionId: string with get, set
    /// The display name of the extension.
    abstract extensionName: string with get, set
    /// This is the set of files available from the extension.
    abstract files: ResizeArray<Gallery.ExtensionFile> with get, set
    /// Extension flags relevant to contribution consumers
    abstract flags: ExtensionFlags with get, set
    /// Information about this particular installation of the extension
    abstract installState: InstalledExtensionState with get, set
    /// This represents the date/time the extensions was last updated in the gallery. This doesnt mean this version was updated the value represents changes to any and all versions of the extension.
    abstract lastPublished: DateTime with get, set
    /// Unique id of the publisher of this extension
    abstract publisherId: string with get, set
    /// The display name of the publisher
    abstract publisherName: string with get, set
    /// Unique id for this extension (the same id is used for all versions of a single extension)
    abstract registrationId: string with get, set
    /// Version of this extension
    abstract version: string with get, set

type [<AllowNullLiteral>] InstalledExtensionQuery =
    abstract assetTypes: ResizeArray<string> with get, set
    abstract monikers: ResizeArray<Gallery.ExtensionIdentifier> with get, set

/// The state of an installed extension
type [<AllowNullLiteral>] InstalledExtensionState =
    /// States of an installed extension
    abstract flags: ExtensionStateFlags with get, set
    /// List of installation issues
    abstract installationIssues: ResizeArray<InstalledExtensionStateIssue> with get, set
    /// The time at which this installation was last updated
    abstract lastUpdated: DateTime with get, set

/// Represents an installation issue
type [<AllowNullLiteral>] InstalledExtensionStateIssue =
    /// The error message
    abstract message: string with get, set
    /// Source of the installation issue, for example  "Demands"
    abstract source: string with get, set
    /// Installation issue type (Warning, Error)
    abstract ``type``: InstalledExtensionStateIssueType with get, set

type [<RequireQualifiedAccess>] InstalledExtensionStateIssueType =
    | Warning = 0
    | Error = 1

/// Maps a contribution to a licensing behavior
type [<AllowNullLiteral>] LicensingOverride =
    /// How the inclusion of this contribution should change based on licensing
    abstract behavior: ContributionLicensingBehaviorType with get, set
    /// Fully qualified contribution id which we want to define licensing behavior for
    abstract id: string with get, set

/// A request for an extension (to be installed or have a license assigned)
type [<AllowNullLiteral>] RequestedExtension =
    /// The unique name of the extension
    abstract extensionName: string with get, set
    /// A list of each request for the extension
    abstract extensionRequests: ResizeArray<ExtensionRequest> with get, set
    /// DisplayName of the publisher that owns the extension being published.
    abstract publisherDisplayName: string with get, set
    /// Represents the Publisher of the requested extension
    abstract publisherName: string with get, set
    /// The total number of requests for an extension
    abstract requestCount: float with get, set

/// Entry for a specific data provider's resulting data
type [<AllowNullLiteral>] ResolvedDataProvider =
    /// The total time the data provider took to resolve its data (in milliseconds)
    abstract duration: float with get, set
    abstract error: string with get, set
    abstract id: string with get, set

type [<AllowNullLiteral>] Scope =
    abstract description: string with get, set
    abstract title: string with get, set
    abstract value: string with get, set

/// Information about the extension
type [<AllowNullLiteral>] SupportedExtension =
    /// Unique Identifier for this extension
    abstract extension: string with get, set
    /// Unique Identifier for this publisher
    abstract publisher: string with get, set
    /// Supported version for this extension
    abstract version: string with get, set

type [<AllowNullLiteral>] ClientContributionProviderDetailsProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] ContributionNodeQueryResultNodes =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ClientContributionNode with get, set

type [<AllowNullLiteral>] ContributionNodeQueryResultProviderDetails =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ClientContributionProviderDetails with get, set

type [<AllowNullLiteral>] ContributionTypeProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ContributionPropertyDescription with get, set

type [<AllowNullLiteral>] DataProviderContextProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] DataProviderResultClientProviders =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ClientDataProviderQuery with get, set

type [<AllowNullLiteral>] DataProviderResultExceptions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> DataProviderExceptionDetails with get, set
module ExtensionManagement = ___ExtensionManagement_ExtensionManagement
module Gallery = ___Gallery_Gallery
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ExtensionManagementRestClient: ExtensionManagementRestClientStatic

type [<AllowNullLiteral>] ExtensionManagementRestClient =
    inherit RestClientBase
    /// <param name="itemId">-</param>
    /// <param name="testCommerce">-</param>
    /// <param name="isFreeOrTrialInstall">-</param>
    /// <param name="isAccountOwner">-</param>
    /// <param name="isLinked">-</param>
    /// <param name="isConnectedServer">-</param>
    /// <param name="isBuyOperationValid">-</param>
    abstract getAcquisitionOptions: itemId: string * ?testCommerce: bool * ?isFreeOrTrialInstall: bool * ?isAccountOwner: bool * ?isLinked: bool * ?isConnectedServer: bool * ?isBuyOperationValid: bool -> Promise<ExtensionManagement.AcquisitionOptions>
    /// <param name="acquisitionRequest">-</param>
    abstract requestAcquisition: acquisitionRequest: ExtensionManagement.ExtensionAcquisitionRequest -> Promise<ExtensionManagement.ExtensionAcquisitionRequest>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    abstract getAuditLog: publisherName: string * extensionName: string -> Promise<ExtensionManagement.ExtensionAuditLog>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="registrationId">-</param>
    abstract registerAuthorization: publisherName: string * extensionName: string * registrationId: string -> Promise<ExtensionManagement.ExtensionAuthorization>
    /// <param name="doc">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="scopeType">-</param>
    /// <param name="scopeValue">-</param>
    /// <param name="collectionName">-</param>
    abstract createDocumentByName: doc: obj option * publisherName: string * extensionName: string * scopeType: string * scopeValue: string * collectionName: string -> Promise<obj option>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="scopeType">-</param>
    /// <param name="scopeValue">-</param>
    /// <param name="collectionName">-</param>
    /// <param name="documentId">-</param>
    abstract deleteDocumentByName: publisherName: string * extensionName: string * scopeType: string * scopeValue: string * collectionName: string * documentId: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="scopeType">-</param>
    /// <param name="scopeValue">-</param>
    /// <param name="collectionName">-</param>
    /// <param name="documentId">-</param>
    abstract getDocumentByName: publisherName: string * extensionName: string * scopeType: string * scopeValue: string * collectionName: string * documentId: string -> Promise<obj option>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="scopeType">-</param>
    /// <param name="scopeValue">-</param>
    /// <param name="collectionName">-</param>
    abstract getDocumentsByName: publisherName: string * extensionName: string * scopeType: string * scopeValue: string * collectionName: string -> Promise<ResizeArray<obj option>>
    /// <param name="doc">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="scopeType">-</param>
    /// <param name="scopeValue">-</param>
    /// <param name="collectionName">-</param>
    abstract setDocumentByName: doc: obj option * publisherName: string * extensionName: string * scopeType: string * scopeValue: string * collectionName: string -> Promise<obj option>
    /// <param name="doc">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="scopeType">-</param>
    /// <param name="scopeValue">-</param>
    /// <param name="collectionName">-</param>
    abstract updateDocumentByName: doc: obj option * publisherName: string * extensionName: string * scopeType: string * scopeValue: string * collectionName: string -> Promise<obj option>
    /// <summary>Query for one or more data collections for the specified extension.  Note: the token used for authorization must have been issued on behalf of the specified extension.</summary>
    /// <param name="collectionQuery">-</param>
    /// <param name="publisherName">- Name of the publisher. Example: "fabrikam".</param>
    /// <param name="extensionName">- Name of the extension. Example: "ops-tools".</param>
    abstract queryCollectionsByName: collectionQuery: ExtensionManagement.ExtensionDataCollectionQuery * publisherName: string * extensionName: string -> Promise<ResizeArray<ExtensionManagement.ExtensionDataCollection>>
    /// <summary>List state and version information for all installed extensions.</summary>
    /// <param name="includeDisabled">- If true (the default), include disabled extensions in the results.</param>
    /// <param name="includeErrors">- If true, include installed extensions in an error state in the results.</param>
    /// <param name="includeInstallationIssues">-</param>
    /// <param name="forceRefresh">-</param>
    abstract getStates: ?includeDisabled: bool * ?includeErrors: bool * ?includeInstallationIssues: bool * ?forceRefresh: bool -> Promise<ResizeArray<ExtensionManagement.ExtensionState>>
    /// <param name="query">-</param>
    abstract queryExtensions: query: ExtensionManagement.InstalledExtensionQuery -> Promise<ResizeArray<ExtensionManagement.InstalledExtension>>
    /// <summary>List the installed extensions in the account / project collection.</summary>
    /// <param name="includeDisabledExtensions">- If true (the default), include disabled extensions in the results.</param>
    /// <param name="includeErrors">- If true, include installed extensions with errors.</param>
    /// <param name="assetTypes">-</param>
    /// <param name="includeInstallationIssues">-</param>
    abstract getInstalledExtensions: ?includeDisabledExtensions: bool * ?includeErrors: bool * ?assetTypes: ResizeArray<string> * ?includeInstallationIssues: bool -> Promise<ResizeArray<ExtensionManagement.InstalledExtension>>
    /// <summary>Update an installed extension. Typically this API is used to enable or disable an extension.</summary>
    /// <param name="extension">-</param>
    abstract updateInstalledExtension: extension: ExtensionManagement.InstalledExtension -> Promise<ExtensionManagement.InstalledExtension>
    /// <summary>Get an installed extension by its publisher and extension name.</summary>
    /// <param name="publisherName">- Name of the publisher. Example: "fabrikam".</param>
    /// <param name="extensionName">- Name of the extension. Example: "ops-tools".</param>
    /// <param name="assetTypes">-</param>
    abstract getInstalledExtensionByName: publisherName: string * extensionName: string * ?assetTypes: ResizeArray<string> -> Promise<ExtensionManagement.InstalledExtension>
    /// <summary>Install the specified extension into the account / project collection.</summary>
    /// <param name="publisherName">- Name of the publisher. Example: "fabrikam".</param>
    /// <param name="extensionName">- Name of the extension. Example: "ops-tools".</param>
    /// <param name="version">-</param>
    abstract installExtensionByName: publisherName: string * extensionName: string * ?version: string -> Promise<ExtensionManagement.InstalledExtension>
    /// <summary>Uninstall the specified extension from the account / project collection.</summary>
    /// <param name="publisherName">- Name of the publisher. Example: "fabrikam".</param>
    /// <param name="extensionName">- Name of the extension. Example: "ops-tools".</param>
    /// <param name="reason">-</param>
    /// <param name="reasonCode">-</param>
    abstract uninstallExtensionByName: publisherName: string * extensionName: string * ?reason: string * ?reasonCode: string -> Promise<unit>
    /// <param name="userId">-</param>
    abstract getPolicies: userId: string -> Promise<Gallery.UserExtensionPolicy>
    /// <param name="rejectMessage">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="requesterId">-</param>
    /// <param name="state">-</param>
    abstract resolveRequest: rejectMessage: string * publisherName: string * extensionName: string * requesterId: string * state: ExtensionManagement.ExtensionRequestState -> Promise<float>
    abstract getRequests: unit -> Promise<ResizeArray<ExtensionManagement.RequestedExtension>>
    /// <param name="rejectMessage">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="state">-</param>
    abstract resolveAllRequests: rejectMessage: string * publisherName: string * extensionName: string * state: ExtensionManagement.ExtensionRequestState -> Promise<float>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    abstract deleteRequest: publisherName: string * extensionName: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="requestMessage">-</param>
    abstract requestExtension: publisherName: string * extensionName: string * requestMessage: string -> Promise<ExtensionManagement.RequestedExtension>
    abstract getToken: unit -> Promise<string>

type [<AllowNullLiteral>] ExtensionManagementRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ExtensionManagementRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] FeatureFlag =
    abstract description: string with get, set
    abstract effectiveState: string with get, set
    abstract explicitState: string with get, set
    abstract name: string with get, set
    abstract uri: string with get, set

/// This is passed to the FeatureFlagController to edit the status of a feature flag
type [<AllowNullLiteral>] FeatureFlagPatch =
    abstract state: string with get, set
module FeatureAvailability = ___FeatureAvailability_FeatureAvailability
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract FeatureAvailabilityRestClient: FeatureAvailabilityRestClientStatic

type [<AllowNullLiteral>] FeatureAvailabilityRestClient =
    inherit RestClientBase
    /// <summary>Retrieve a listing of all feature flags and their current states for a user</summary>
    /// <param name="userEmail">- The email of the user to check</param>
    abstract getAllFeatureFlags: ?userEmail: string -> Promise<ResizeArray<FeatureAvailability.FeatureFlag>>
    /// <summary>Retrieve information on a single feature flag and its current states</summary>
    /// <param name="name">- The name of the feature to retrieve</param>
    /// <param name="checkFeatureExists">- Check if feature exists</param>
    abstract getFeatureFlagByName: name: string * ?checkFeatureExists: bool -> Promise<FeatureAvailability.FeatureFlag>
    /// <summary>Retrieve information on a single feature flag and its current states for a user</summary>
    /// <param name="name">- The name of the feature to retrieve</param>
    /// <param name="userEmail">- The email of the user to check</param>
    /// <param name="checkFeatureExists">- Check if feature exists</param>
    abstract getFeatureFlagByNameAndUserEmail: name: string * userEmail: string * ?checkFeatureExists: bool -> Promise<FeatureAvailability.FeatureFlag>
    /// <summary>Retrieve information on a single feature flag and its current states for a user</summary>
    /// <param name="name">- The name of the feature to retrieve</param>
    /// <param name="userId">- The id of the user to check</param>
    /// <param name="checkFeatureExists">- Check if feature exists</param>
    abstract getFeatureFlagByNameAndUserId: name: string * userId: string * ?checkFeatureExists: bool -> Promise<FeatureAvailability.FeatureFlag>
    /// <summary>Change the state of an individual feature flag for a name</summary>
    /// <param name="state">- State that should be set</param>
    /// <param name="name">- The name of the feature to change</param>
    /// <param name="userEmail">-</param>
    /// <param name="checkFeatureExists">- Checks if the feature exists before setting the state</param>
    /// <param name="setAtApplicationLevelAlso">-</param>
    abstract updateFeatureFlag: state: FeatureAvailability.FeatureFlagPatch * name: string * ?userEmail: string * ?checkFeatureExists: bool * ?setAtApplicationLevelAlso: bool -> Promise<FeatureAvailability.FeatureFlag>

type [<AllowNullLiteral>] FeatureAvailabilityRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> FeatureAvailabilityRestClient

/// A feature that can be enabled or disabled
type [<AllowNullLiteral>] ContributedFeature =
    /// Named links describing the feature
    abstract _links: obj option with get, set
    /// If true, the feature is enabled unless overridden at some scope
    abstract defaultState: bool with get, set
    /// Rules for setting the default value if not specified by any setting/scope. Evaluated in order until a rule returns an Enabled or Disabled state (not Undefined)
    abstract defaultValueRules: ResizeArray<ContributedFeatureValueRule> with get, set
    /// The description of the feature
    abstract description: string with get, set
    /// Extra properties for the feature
    abstract featureProperties: ContributedFeatureFeatureProperties with get, set
    /// Handler for listening to setter calls on feature value. These listeners are only invoked after a successful set has occurred
    abstract featureStateChangedListeners: ResizeArray<ContributedFeatureListener> with get, set
    /// The full contribution id of the feature
    abstract id: string with get, set
    /// If this is set to true, then the id for this feature will be added to the list of claims for the request.
    abstract includeAsClaim: bool with get, set
    /// The friendly name of the feature
    abstract name: string with get, set
    /// Suggested order to display feature in.
    abstract order: float with get, set
    /// Rules for overriding a feature value. These rules are run before explicit user/host state values are checked. They are evaluated in order until a rule returns an Enabled or Disabled state (not Undefined)
    abstract overrideRules: ResizeArray<ContributedFeatureValueRule> with get, set
    /// The scopes/levels at which settings can set the enabled/disabled state of this feature
    abstract scopes: ResizeArray<ContributedFeatureSettingScope> with get, set
    /// The service instance id of the service that owns this feature
    abstract serviceInstanceType: string with get, set
    /// Tags associated with the feature.
    abstract tags: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] ContributedFeatureEnabledValue =
    | Undefined = -1
    | Disabled = 0
    | Enabled = 1

type [<AllowNullLiteral>] ContributedFeatureHandlerSettings =
    /// Name of the handler to run
    abstract name: string with get, set
    /// Properties to feed to the handler
    abstract properties: ContributedFeatureFeatureProperties with get, set

/// An identifier and properties used to pass into a handler for a listener or plugin
type [<AllowNullLiteral>] ContributedFeatureListener =
    inherit ContributedFeatureHandlerSettings

/// The scope to which a feature setting applies
type [<AllowNullLiteral>] ContributedFeatureSettingScope =
    /// The name of the settings scope to use when reading/writing the setting
    abstract settingScope: string with get, set
    /// Whether this is a user-scope or this is a host-wide (all users) setting
    abstract userScoped: bool with get, set

/// A contributed feature/state pair
type [<AllowNullLiteral>] ContributedFeatureState =
    /// The full contribution id of the feature
    abstract featureId: string with get, set
    /// True if the effective state was set by an override rule (indicating that the state cannot be managed by the end user)
    abstract overridden: bool with get, set
    /// Reason that the state was set (by a plugin/rule).
    abstract reason: string with get, set
    /// The scope at which this state applies
    abstract scope: ContributedFeatureSettingScope with get, set
    /// The current state of this feature
    abstract state: ContributedFeatureEnabledValue with get, set

/// A query for the effective contributed feature states for a list of feature ids
type [<AllowNullLiteral>] ContributedFeatureStateQuery =
    /// The list of feature ids to query
    abstract featureIds: ResizeArray<string> with get, set
    /// The query result containing the current feature states for each of the queried feature ids
    abstract featureStates: ContributedFeatureStateQueryFeatureStates with get, set
    /// A dictionary of scope values (project name, etc.) to use in the query (if querying across scopes)
    abstract scopeValues: ContributedFeatureStateQueryScopeValues with get, set

/// A rule for dynamically getting the enabled/disabled state of a feature
type [<AllowNullLiteral>] ContributedFeatureValueRule =
    inherit ContributedFeatureHandlerSettings

type [<AllowNullLiteral>] ContributedFeatureFeatureProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] ContributedFeatureStateQueryFeatureStates =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ContributedFeatureState with get, set

type [<AllowNullLiteral>] ContributedFeatureStateQueryScopeValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
module FeatureManagement = ___FeatureManagement_FeatureManagement
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract FeatureManagementRestClient: FeatureManagementRestClientStatic

type [<AllowNullLiteral>] FeatureManagementRestClient =
    inherit RestClientBase
    /// <summary>Get a specific feature by its id</summary>
    /// <param name="featureId">- The contribution id of the feature</param>
    abstract getFeature: featureId: string -> Promise<FeatureManagement.ContributedFeature>
    /// <summary>Get a list of all defined features</summary>
    /// <param name="targetContributionId">- Optional target contribution. If null/empty, return all features. If specified include the features that target the specified contribution.</param>
    abstract getFeatures: ?targetContributionId: string -> Promise<ResizeArray<FeatureManagement.ContributedFeature>>
    /// <summary>Get the state of the specified feature for the given user/all-users scope</summary>
    /// <param name="featureId">- Contribution id of the feature</param>
    /// <param name="userScope">- User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.</param>
    abstract getFeatureState: featureId: string * userScope: string -> Promise<FeatureManagement.ContributedFeatureState>
    /// <summary>Set the state of a feature</summary>
    /// <param name="feature">- Posted feature state object. Should specify the effective value.</param>
    /// <param name="featureId">- Contribution id of the feature</param>
    /// <param name="userScope">- User-Scope at which to set the value. Should be "me" for the current user or "host" for all users.</param>
    /// <param name="reason">- Reason for changing the state</param>
    /// <param name="reasonCode">- Short reason code</param>
    abstract setFeatureState: feature: FeatureManagement.ContributedFeatureState * featureId: string * userScope: string * ?reason: string * ?reasonCode: string -> Promise<FeatureManagement.ContributedFeatureState>
    /// <summary>Get the state of the specified feature for the given named scope</summary>
    /// <param name="featureId">- Contribution id of the feature</param>
    /// <param name="userScope">- User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.</param>
    /// <param name="scopeName">- Scope at which to get the feature setting for (e.g. "project" or "team")</param>
    /// <param name="scopeValue">- Value of the scope (e.g. the project or team id)</param>
    abstract getFeatureStateForScope: featureId: string * userScope: string * scopeName: string * scopeValue: string -> Promise<FeatureManagement.ContributedFeatureState>
    /// <summary>Set the state of a feature at a specific scope</summary>
    /// <param name="feature">- Posted feature state object. Should specify the effective value.</param>
    /// <param name="featureId">- Contribution id of the feature</param>
    /// <param name="userScope">- User-Scope at which to set the value. Should be "me" for the current user or "host" for all users.</param>
    /// <param name="scopeName">- Scope at which to get the feature setting for (e.g. "project" or "team")</param>
    /// <param name="scopeValue">- Value of the scope (e.g. the project or team id)</param>
    /// <param name="reason">- Reason for changing the state</param>
    /// <param name="reasonCode">- Short reason code</param>
    abstract setFeatureStateForScope: feature: FeatureManagement.ContributedFeatureState * featureId: string * userScope: string * scopeName: string * scopeValue: string * ?reason: string * ?reasonCode: string -> Promise<FeatureManagement.ContributedFeatureState>
    /// <summary>Get the effective state for a list of feature ids</summary>
    /// <param name="query">- Features to query along with current scope values</param>
    abstract queryFeatureStates: query: FeatureManagement.ContributedFeatureStateQuery -> Promise<FeatureManagement.ContributedFeatureStateQuery>
    /// <summary>Get the states of the specified features for the default scope</summary>
    /// <param name="query">- Query describing the features to query.</param>
    /// <param name="userScope">-</param>
    abstract queryFeatureStatesForDefaultScope: query: FeatureManagement.ContributedFeatureStateQuery * userScope: string -> Promise<FeatureManagement.ContributedFeatureStateQuery>
    /// <summary>Get the states of the specified features for the specific named scope</summary>
    /// <param name="query">- Query describing the features to query.</param>
    /// <param name="userScope">-</param>
    /// <param name="scopeName">-</param>
    /// <param name="scopeValue">-</param>
    abstract queryFeatureStatesForNamedScope: query: FeatureManagement.ContributedFeatureStateQuery * userScope: string * scopeName: string * scopeValue: string -> Promise<FeatureManagement.ContributedFeatureStateQuery>

type [<AllowNullLiteral>] FeatureManagementRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> FeatureManagementRestClient

type [<RequireQualifiedAccess>] ContainerItemStatus =
    | Created = 1
    | PendingUpload = 2

type [<RequireQualifiedAccess>] ContainerItemType =
    | Any = 0
    | Folder = 1
    | File = 2

type [<RequireQualifiedAccess>] ContainerOptions =
    | None = 0

/// Represents a container that encapsulates a hierarchical file system.
type [<AllowNullLiteral>] FileContainer =
    /// Uri of the artifact associated with the container.
    abstract artifactUri: string with get, set
    /// Download Url for the content of this item.
    abstract contentLocation: string with get, set
    /// Owner.
    abstract createdBy: string with get, set
    /// Creation date.
    abstract dateCreated: DateTime with get, set
    /// Description.
    abstract description: string with get, set
    /// Id.
    abstract id: float with get, set
    /// Location of the item resource.
    abstract itemLocation: string with get, set
    /// ItemStore Locator for this container.
    abstract locatorPath: string with get, set
    /// Name.
    abstract name: string with get, set
    /// Options the container can have.
    abstract options: ContainerOptions with get, set
    /// Project Id.
    abstract scopeIdentifier: string with get, set
    /// Security token of the artifact associated with the container.
    abstract securityToken: string with get, set
    /// Identifier of the optional encryption key.
    abstract signingKeyId: string with get, set
    /// Total size of the files in bytes.
    abstract size: float with get, set

/// Represents an item in a container.
type [<AllowNullLiteral>] FileContainerItem =
    /// Container Id.
    abstract containerId: float with get, set
    abstract contentId: ResizeArray<float> with get, set
    /// Download Url for the content of this item.
    abstract contentLocation: string with get, set
    /// Creator.
    abstract createdBy: string with get, set
    /// Creation date.
    abstract dateCreated: DateTime with get, set
    /// Last modified date.
    abstract dateLastModified: DateTime with get, set
    /// Encoding of the file. Zero if not a file.
    abstract fileEncoding: float with get, set
    /// Hash value of the file. Null if not a file.
    abstract fileHash: ResizeArray<float> with get, set
    /// Id of the file content.
    abstract fileId: float with get, set
    /// Length of the file. Zero if not of a file.
    abstract fileLength: float with get, set
    /// Type of the file. Zero if not a file.
    abstract fileType: float with get, set
    /// Location of the item resource.
    abstract itemLocation: string with get, set
    /// Type of the item: Folder, File or String.
    abstract itemType: ContainerItemType with get, set
    /// Modifier.
    abstract lastModifiedBy: string with get, set
    /// Unique path that identifies the item.
    abstract path: string with get, set
    /// Project Id.
    abstract scopeIdentifier: string with get, set
    /// Status of the item: Created or Pending Upload.
    abstract status: ContainerItemStatus with get, set
    abstract ticket: string with get, set
module FileContainer = ___FileContainer_FileContainer
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract FileContainerRestClient: FileContainerRestClientStatic

type [<AllowNullLiteral>] FileContainerRestClient =
    inherit RestClientBase
    /// <summary>Creates the specified items in in the referenced container.</summary>
    /// <param name="items">-</param>
    /// <param name="containerId">-</param>
    /// <param name="scope">- A guid representing the scope of the container. This is often the project id.</param>
    abstract createItems: items: WebApi.VssJsonCollectionWrapperV<ResizeArray<FileContainer.FileContainerItem>> * containerId: float * ?scope: string -> Promise<ResizeArray<FileContainer.FileContainerItem>>
    /// <summary>Deletes the specified items in a container.</summary>
    /// <param name="containerId">- Container Id.</param>
    /// <param name="itemPath">- Path to delete.</param>
    /// <param name="scope">- A guid representing the scope of the container. This is often the project id.</param>
    abstract deleteItem: containerId: float * itemPath: string * ?scope: string -> Promise<unit>
    /// <summary>Gets containers filtered by a comma separated list of artifact uris within the same scope, if not specified returns all containers</summary>
    /// <param name="scope">- A guid representing the scope of the container. This is often the project id.</param>
    /// <param name="artifactUris">-</param>
    abstract getContainers: ?scope: string * ?artifactUris: string -> Promise<ResizeArray<FileContainer.FileContainer>>
    /// <param name="containerId">-</param>
    /// <param name="scope">-</param>
    /// <param name="itemPath">-</param>
    /// <param name="metadata">-</param>
    /// <param name="format">-</param>
    /// <param name="downloadFileName">-</param>
    /// <param name="includeDownloadTickets">-</param>
    /// <param name="isShallow">-</param>
    abstract getItems: containerId: float * ?scope: string * ?itemPath: string * ?metadata: bool * ?format: string * ?downloadFileName: string * ?includeDownloadTickets: bool * ?isShallow: bool -> Promise<ResizeArray<FileContainer.FileContainerItem>>

type [<AllowNullLiteral>] FileContainerRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> FileContainerRestClient

type [<RequireQualifiedAccess>] InputDataType =
    | None = 0
    | String = 10
    | Number = 20
    | Boolean = 30
    | Guid = 40
    | Uri = 50

/// Describes an input for subscriptions.
type [<AllowNullLiteral>] InputDescriptor =
    /// The ids of all inputs that the value of this input is dependent on.
    abstract dependencyInputIds: ResizeArray<string> with get, set
    /// Description of what this input is used for
    abstract description: string with get, set
    /// The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.
    abstract groupName: string with get, set
    /// If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.
    abstract hasDynamicValueInformation: bool with get, set
    /// Identifier for the subscription input
    abstract id: string with get, set
    /// Mode in which the value of this input should be entered
    abstract inputMode: InputMode with get, set
    /// Gets whether this input is confidential, such as for a password or application key
    abstract isConfidential: bool with get, set
    /// Localized name which can be shown as a label for the subscription input
    abstract name: string with get, set
    /// Custom properties for the input which can be used by the service provider
    abstract properties: InputDescriptorProperties with get, set
    /// Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.
    abstract ``type``: string with get, set
    /// Gets whether this input is included in the default generated action description.
    abstract useInDefaultDescription: bool with get, set
    /// Information to use to validate this input's value
    abstract validation: InputValidation with get, set
    /// A hint for input value. It can be used in the UI as the input placeholder.
    abstract valueHint: string with get, set
    /// Information about possible values for this input
    abstract values: InputValues with get, set

/// Defines a filter for subscription inputs. The filter matches a set of inputs if any (one or more) of the groups evaluates to true.
type [<AllowNullLiteral>] InputFilter =
    /// Groups of input filter expressions. This filter matches a set of inputs if any (one or more) of the groups evaluates to true.
    abstract conditions: ResizeArray<InputFilterCondition> with get, set

/// An expression which can be applied to filter a list of subscription inputs
type [<AllowNullLiteral>] InputFilterCondition =
    /// Whether or not to do a case sensitive match
    abstract caseSensitive: bool with get, set
    /// The Id of the input to filter on
    abstract inputId: string with get, set
    /// The "expected" input value to compare with the actual input value
    abstract inputValue: string with get, set
    /// The operator applied between the expected and actual input value
    abstract operator: InputFilterOperator with get, set

type [<RequireQualifiedAccess>] InputFilterOperator =
    | Equals = 0
    | NotEquals = 1

type [<RequireQualifiedAccess>] InputMode =
    | None = 0
    | TextBox = 10
    | PasswordBox = 20
    | Combo = 30
    | RadioButtons = 40
    | CheckBox = 50
    | TextArea = 60

/// Describes what values are valid for a subscription input
type [<AllowNullLiteral>] InputValidation =
    /// Gets or sets the data data type to validate.
    abstract dataType: InputDataType with get, set
    /// Gets or sets if this is a required field.
    abstract isRequired: bool with get, set
    /// Gets or sets the maximum length of this descriptor.
    abstract maxLength: float with get, set
    /// Gets or sets the minimum value for this descriptor.
    abstract maxValue: float with get, set
    /// Gets or sets the minimum length of this descriptor.
    abstract minLength: float with get, set
    /// Gets or sets the minimum value for this descriptor.
    abstract minValue: float with get, set
    /// Gets or sets the pattern to validate.
    abstract pattern: string with get, set
    /// Gets or sets the error on pattern mismatch.
    abstract patternMismatchErrorMessage: string with get, set

/// Information about a single value for an input
type [<AllowNullLiteral>] InputValue =
    /// Any other data about this input
    abstract data: InputDescriptorProperties with get, set
    /// The text to show for the display of this value
    abstract displayValue: string with get, set
    /// The value to store for this input
    abstract value: string with get, set

/// Information about the possible/allowed values for a given subscription input
type [<AllowNullLiteral>] InputValues =
    /// The default value to use for this input
    abstract defaultValue: string with get, set
    /// Errors encountered while computing dynamic values.
    abstract error: InputValuesError with get, set
    /// The id of the input
    abstract inputId: string with get, set
    /// Should this input be disabled
    abstract isDisabled: bool with get, set
    /// Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)
    abstract isLimitedToPossibleValues: bool with get, set
    /// Should this input be made read-only
    abstract isReadOnly: bool with get, set
    /// Possible values that this input can take
    abstract possibleValues: ResizeArray<InputValue> with get, set

/// Error information related to a subscription input value.
type [<AllowNullLiteral>] InputValuesError =
    /// The error message.
    abstract message: string with get, set

type [<AllowNullLiteral>] InputValuesQuery =
    abstract currentValues: InputValuesQueryCurrentValues with get, set
    /// The input values to return on input, and the result from the consumer on output.
    abstract inputValues: ResizeArray<InputValues> with get, set
    /// Subscription containing information about the publisher/consumer and the current input values
    abstract resource: obj option with get, set

type [<AllowNullLiteral>] InputDescriptorProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] InputValuesQueryCurrentValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
module WebApi = ___WebApi_WebApi

type [<RequireQualifiedAccess>] AcquisitionAssignmentType =
    | None = 0
    | Me = 1
    | All = 2

type [<AllowNullLiteral>] AcquisitionOperation =
    /// State of the the AcquisitionOperation for the current user
    abstract operationState: AcquisitionOperationState with get, set
    /// AcquisitionOperationType: install, request, buy, etc...
    abstract operationType: AcquisitionOperationType with get, set
    /// Optional reason to justify current state. Typically used with Disallow state.
    abstract reason: string with get, set

type [<RequireQualifiedAccess>] AcquisitionOperationState =
    | Disallow = 0
    | Allow = 1
    | Completed = 3

type [<RequireQualifiedAccess>] AcquisitionOperationType =
    | Get = 0
    | Install = 1
    | Buy = 2
    | Try = 3
    | Request = 4
    | None = 5
    | PurchaseRequest = 6

/// Market item acquisition options (install, buy, etc) for an installation target.
type [<AllowNullLiteral>] AcquisitionOptions =
    /// Default Operation for the ItemId in this target
    abstract defaultOperation: AcquisitionOperation with get, set
    /// The item id that this options refer to
    abstract itemId: string with get, set
    /// Operations allowed for the ItemId in this target
    abstract operations: ResizeArray<AcquisitionOperation> with get, set
    /// The target that this options refer to
    abstract target: string with get, set

type [<AllowNullLiteral>] Answers =
    /// Gets or sets the vs marketplace extension name
    abstract vsMarketplaceExtensionName: string with get, set
    /// Gets or sets the vs marketplace publisher name
    abstract vsMarketplacePublisherName: string with get, set

type [<AllowNullLiteral>] AssetDetails =
    /// Gets or sets the Answers, which contains vs marketplace extension name and publisher name
    abstract answers: Answers with get, set
    /// Gets or sets the VS publisher Id
    abstract publisherNaturalIdentifier: string with get, set

type [<AllowNullLiteral>] AzurePublisher =
    abstract azurePublisherId: string with get, set
    abstract publisherName: string with get, set

type [<AllowNullLiteral>] AzureRestApiRequestModel =
    /// Gets or sets the Asset details
    abstract assetDetails: AssetDetails with get, set
    /// Gets or sets the asset id
    abstract assetId: string with get, set
    /// Gets or sets the asset version
    abstract assetVersion: float with get, set
    /// Gets or sets the customer support email
    abstract customerSupportEmail: string with get, set
    /// Gets or sets the integration contact email
    abstract integrationContactEmail: string with get, set
    /// Gets or sets the asset version
    abstract operation: string with get, set
    /// Gets or sets the plan identifier if any.
    abstract planId: string with get, set
    /// Gets or sets the publisher id
    abstract publisherId: string with get, set
    /// Gets or sets the resource type
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] AzureRestApiResponseModel =
    inherit AzureRestApiRequestModel
    /// Gets or sets the Asset operation status
    abstract operationStatus: RestApiResponseStatusModel with get, set

/// This is the set of categories in response to the get category query
type [<AllowNullLiteral>] CategoriesResult =
    abstract categories: ResizeArray<ExtensionCategory> with get, set

/// Definition of one title of a category
type [<AllowNullLiteral>] CategoryLanguageTitle =
    /// The language for which the title is applicable
    abstract lang: string with get, set
    /// The language culture id of the lang parameter
    abstract lcid: float with get, set
    /// Actual title to be shown on the UI
    abstract title: string with get, set

/// The structure of a Concern Rather than defining a separate data structure having same fields as QnAItem, we are inheriting from the QnAItem.
type [<AllowNullLiteral>] Concern =
    inherit QnAItem
    /// Category of the concern
    abstract category: ConcernCategory with get, set

type [<RequireQualifiedAccess>] ConcernCategory =
    | General = 1
    | Abusive = 2
    | Spam = 4

/// Stores Last Contact Date
type [<AllowNullLiteral>] CustomerLastContact =
    /// account for which customer was last contacted
    abstract account: string with get, set
    /// Date on which the customer was last contacted
    abstract lastContactDate: DateTime with get, set

type [<RequireQualifiedAccess>] DraftPatchOperation =
    | Publish = 1
    | Cancel = 2

type [<RequireQualifiedAccess>] DraftStateType =
    | Unpublished = 1
    | Published = 2
    | Cancelled = 3
    | Error = 4

type [<AllowNullLiteral>] EventCounts =
    /// Average rating on the day for extension
    abstract averageRating: float with get, set
    /// Number of times the extension was bought in hosted scenario (applies only to VSTS extensions)
    abstract buyCount: float with get, set
    /// Number of times the extension was bought in connected scenario (applies only to VSTS extensions)
    abstract connectedBuyCount: float with get, set
    /// Number of times the extension was installed in connected scenario (applies only to VSTS extensions)
    abstract connectedInstallCount: float with get, set
    /// Number of times the extension was installed
    abstract installCount: float with get, set
    /// Number of times the extension was installed as a trial (applies only to VSTS extensions)
    abstract tryCount: float with get, set
    /// Number of times the extension was uninstalled (applies only to VSTS extensions)
    abstract uninstallCount: float with get, set
    /// Number of times the extension was downloaded (applies to VSTS extensions and VSCode marketplace click installs)
    abstract webDownloadCount: float with get, set
    /// Number of detail page views
    abstract webPageViews: float with get, set

/// Contract for handling the extension acquisition process
type [<AllowNullLiteral>] ExtensionAcquisitionRequest =
    /// How the item is being assigned
    abstract assignmentType: AcquisitionAssignmentType with get, set
    /// The id of the subscription used for purchase
    abstract billingId: string with get, set
    /// The marketplace id (publisherName.extensionName) for the item
    abstract itemId: string with get, set
    /// The type of operation, such as install, request, purchase
    abstract operationType: AcquisitionOperationType with get, set
    /// Additional properties which can be added to the request.
    abstract properties: obj option with get, set
    /// How many licenses should be purchased
    abstract quantity: float with get, set
    /// A list of target guids where the item should be acquired (installed, requested, etc.), such as account id
    abstract targets: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ExtensionBadge =
    abstract description: string with get, set
    abstract imgUri: string with get, set
    abstract link: string with get, set

type [<AllowNullLiteral>] ExtensionCategory =
    /// The name of the products with which this category is associated to.
    abstract associatedProducts: ResizeArray<string> with get, set
    abstract categoryId: float with get, set
    /// This is the internal name for a category
    abstract categoryName: string with get, set
    /// This parameter is obsolete. Refer to LanguageTitles for langauge specific titles
    abstract language: string with get, set
    /// The list of all the titles of this category in various languages
    abstract languageTitles: ResizeArray<CategoryLanguageTitle> with get, set
    /// This is the internal name of the parent if this is associated with a parent
    abstract parentCategoryName: string with get, set

type [<AllowNullLiteral>] ExtensionDailyStat =
    /// Stores the event counts
    abstract counts: EventCounts with get, set
    /// Generic key/value pair to store extended statistics. Used for sending paid extension stats like Upgrade, Downgrade, Cancel trend etc.
    abstract extendedStats: ExtensionDailyStatExtendedStats with get, set
    /// Timestamp of this data point
    abstract statisticDate: DateTime with get, set
    /// Version of the extension
    abstract version: string with get, set

type [<AllowNullLiteral>] ExtensionDailyStats =
    /// List of extension statistics data points
    abstract dailyStats: ResizeArray<ExtensionDailyStat> with get, set
    /// Id of the extension, this will never be sent back to the client. For internal use only.
    abstract extensionId: string with get, set
    /// Name of the extension
    abstract extensionName: string with get, set
    /// Name of the publisher
    abstract publisherName: string with get, set
    /// Count of stats
    abstract statCount: float with get, set

type [<RequireQualifiedAccess>] ExtensionDeploymentTechnology =
    | Exe = 1
    | Msi = 2
    | Vsix = 3
    | ReferralLink = 4

type [<AllowNullLiteral>] ExtensionDraft =
    abstract assets: ResizeArray<ExtensionDraftAsset> with get, set
    abstract createdDate: DateTime with get, set
    abstract draftState: DraftStateType with get, set
    abstract extensionName: string with get, set
    abstract id: string with get, set
    abstract lastUpdated: DateTime with get, set
    abstract payload: ExtensionPayload with get, set
    abstract product: string with get, set
    abstract publisherName: string with get, set
    abstract validationErrors: ResizeArray<ExtensionDraftValidationErrors> with get, set
    abstract validationWarnings: ResizeArray<ExtensionDraftValidationErrors> with get, set

type [<AllowNullLiteral>] ExtensionDraftAsset =
    inherit ExtensionFile

type [<AllowNullLiteral>] ExtensionDraftPatch =
    abstract extensionData: UnpackagedExtensionData with get, set
    abstract operation: DraftPatchOperation with get, set

/// Stores details of each event
type [<AllowNullLiteral>] ExtensionEvent =
    /// Id which identifies each data point uniquely
    abstract id: float with get, set
    abstract properties: obj option with get, set
    /// Timestamp of when the event occurred
    abstract statisticDate: DateTime with get, set
    /// Version of the extension
    abstract version: string with get, set

/// Container object for all extension events. Stores all install and uninstall events related to an extension. The events container is generic so can store data of any type of event. New event types can be added without altering the contract.
type [<AllowNullLiteral>] ExtensionEvents =
    /// Generic container for events data. The dictionary key denotes the type of event and the list contains properties related to that event
    abstract events: ExtensionEventsEvents with get, set
    /// Id of the extension, this will never be sent back to the client. This field will mainly be used when EMS calls into Gallery REST API to update install/uninstall events for various extensions in one go.
    abstract extensionId: string with get, set
    /// Name of the extension
    abstract extensionName: string with get, set
    /// Name of the publisher
    abstract publisherName: string with get, set

type [<AllowNullLiteral>] ExtensionFile =
    abstract assetType: string with get, set
    abstract language: string with get, set
    abstract source: string with get, set

/// The FilterResult is the set of extensions that matched a particular query filter.
type [<AllowNullLiteral>] ExtensionFilterResult =
    /// This is the set of applications that matched the query filter supplied.
    abstract extensions: ResizeArray<PublishedExtension> with get, set
    /// The PagingToken is returned from a request when more records exist that match the result than were requested or could be returned. A follow-up query with this paging token can be used to retrieve more results.
    abstract pagingToken: string with get, set
    /// This is the additional optional metadata for the given result. E.g. Total count of results which is useful in case of paged results
    abstract resultMetadata: ResizeArray<ExtensionFilterResultMetadata> with get, set

/// ExtensionFilterResultMetadata is one set of metadata for the result e.g. Total count. There can be multiple metadata items for one metadata.
type [<AllowNullLiteral>] ExtensionFilterResultMetadata =
    /// The metadata items for the category
    abstract metadataItems: ResizeArray<MetadataItem> with get, set
    /// Defines the category of metadata items
    abstract metadataType: string with get, set

/// Represents the component pieces of an extensions fully qualified name, along with the fully qualified name.
type [<AllowNullLiteral>] ExtensionIdentifier =
    /// The ExtensionName component part of the fully qualified ExtensionIdentifier
    abstract extensionName: string with get, set
    /// The PublisherName component part of the fully qualified ExtensionIdentifier
    abstract publisherName: string with get, set

type [<RequireQualifiedAccess>] ExtensionLifecycleEventType =
    | Uninstall = 1
    | Install = 2
    | Review = 3
    | Acquisition = 4
    | Sales = 5
    | Other = 999

/// Package that will be used to create or update a published extension
type [<AllowNullLiteral>] ExtensionPackage =
    /// Base 64 encoded extension package
    abstract extensionManifest: string with get, set

type [<AllowNullLiteral>] ExtensionPayload =
    abstract description: string with get, set
    abstract displayName: string with get, set
    abstract fileName: string with get, set
    abstract installationTargets: ResizeArray<InstallationTarget> with get, set
    abstract isPreview: bool with get, set
    abstract isSignedByMicrosoft: bool with get, set
    abstract isValid: bool with get, set
    abstract metadata: ResizeArray<ExtensionDraftValidationErrors> with get, set
    abstract ``type``: ExtensionDeploymentTechnology with get, set

/// Policy with a set of permissions on extension operations
type [<AllowNullLiteral>] ExtensionPolicy =
    /// Permissions on 'Install' operation
    abstract install: ExtensionPolicyFlags with get, set
    /// Permission on 'Request' operation
    abstract request: ExtensionPolicyFlags with get, set

type [<RequireQualifiedAccess>] ExtensionPolicyFlags =
    | None = 0
    | Private = 1
    | Public = 2
    | Preview = 4
    | Released = 8
    | FirstParty = 16
    | All = 31

/// An ExtensionQuery is used to search the gallery for a set of extensions that match one of many filter values.
type [<AllowNullLiteral>] ExtensionQuery =
    /// When retrieving extensions with a query; frequently the caller only needs a small subset of the assets. The caller may specify a list of asset types that should be returned if the extension contains it. All other assets will not be returned.
    abstract assetTypes: ResizeArray<string> with get, set
    /// Each filter is a unique query and will have matching set of extensions returned from the request. Each result will have the same index in the resulting array that the filter had in the incoming query.
    abstract filters: ResizeArray<QueryFilter> with get, set
    /// The Flags are used to determine which set of information the caller would like returned for the matched extensions.
    abstract flags: ExtensionQueryFlags with get, set

type [<RequireQualifiedAccess>] ExtensionQueryFilterType =
    | Tag = 1
    | DisplayName = 2
    | Private = 3
    | Id = 4
    | Category = 5
    | ContributionType = 6
    | Name = 7
    | InstallationTarget = 8
    | Featured = 9
    | SearchText = 10
    | FeaturedInCategory = 11
    | ExcludeWithFlags = 12
    | IncludeWithFlags = 13
    | Lcid = 14
    | InstallationTargetVersion = 15
    | InstallationTargetVersionRange = 16
    | VsixMetadata = 17
    | PublisherName = 18
    | PublisherDisplayName = 19
    | IncludeWithPublisherFlags = 20
    | OrganizationSharedWith = 21

type [<RequireQualifiedAccess>] ExtensionQueryFlags =
    | None = 0
    | IncludeVersions = 1
    | IncludeFiles = 2
    | IncludeCategoryAndTags = 4
    | IncludeSharedAccounts = 8
    | IncludeVersionProperties = 16
    | ExcludeNonValidated = 32
    | IncludeInstallationTargets = 64
    | IncludeAssetUri = 128
    | IncludeStatistics = 256
    | IncludeLatestVersionOnly = 512
    | UseFallbackAssetUri = 1024
    | IncludeMetadata = 2048
    | IncludeMinimalPayloadForVsIde = 4096
    | IncludeLcids = 8192
    | IncludeSharedOrganizations = 16384
    | AllAttributes = 16863

/// This is the set of extensions that matched a supplied query through the filters given.
type [<AllowNullLiteral>] ExtensionQueryResult =
    /// For each filter supplied in the query, a filter result will be returned in the query result.
    abstract results: ResizeArray<ExtensionFilterResult> with get, set

type [<AllowNullLiteral>] ExtensionShare =
    abstract id: string with get, set
    abstract isOrg: bool with get, set
    abstract name: string with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ExtensionStatistic =
    abstract statisticName: string with get, set
    abstract value: float with get, set

type [<RequireQualifiedAccess>] ExtensionStatisticOperation =
    | None = 0
    | Set = 1
    | Increment = 2
    | Decrement = 3
    | Delete = 4

type [<AllowNullLiteral>] ExtensionStatisticUpdate =
    abstract extensionName: string with get, set
    abstract operation: ExtensionStatisticOperation with get, set
    abstract publisherName: string with get, set
    abstract statistic: ExtensionStatistic with get, set

type [<RequireQualifiedAccess>] ExtensionStatsAggregateType =
    | Daily = 1

type [<AllowNullLiteral>] ExtensionVersion =
    abstract assetUri: string with get, set
    abstract badges: ResizeArray<ExtensionBadge> with get, set
    abstract fallbackAssetUri: string with get, set
    abstract files: ResizeArray<ExtensionFile> with get, set
    abstract flags: ExtensionVersionFlags with get, set
    abstract lastUpdated: DateTime with get, set
    abstract properties: ResizeArray<ExtensionDraftValidationErrors> with get, set
    abstract validationResultMessage: string with get, set
    abstract version: string with get, set
    abstract versionDescription: string with get, set

type [<RequireQualifiedAccess>] ExtensionVersionFlags =
    | None = 0
    | Validated = 1

/// One condition in a QueryFilter.
type [<AllowNullLiteral>] FilterCriteria =
    abstract filterType: float with get, set
    /// The value used in the match based on the filter type.
    abstract value: string with get, set

type [<AllowNullLiteral>] InstallationTarget =
    abstract target: string with get, set
    abstract targetVersion: string with get, set

/// MetadataItem is one value of metadata under a given category of metadata
type [<AllowNullLiteral>] MetadataItem =
    /// The count of the metadata item
    abstract count: float with get, set
    /// The name of the metadata item
    abstract name: string with get, set

/// Information needed for sending mail notification
type [<AllowNullLiteral>] NotificationsData =
    /// Notification data needed
    abstract data: ExtensionDailyStatExtendedStats with get, set
    /// List of users who should get the notification
    abstract identities: ExtensionDailyStatExtendedStats with get, set
    /// Type of Mail Notification.Can be Qna , review or CustomerContact
    abstract ``type``: NotificationTemplateType with get, set

type [<RequireQualifiedAccess>] NotificationTemplateType =
    | ReviewNotification = 1
    | QnaNotification = 2
    | CustomerContactNotification = 3
    | PublisherMemberUpdateNotification = 4

type [<RequireQualifiedAccess>] PagingDirection =
    | Backward = 1
    | Forward = 2

/// This is the set of categories in response to the get category query
type [<AllowNullLiteral>] ProductCategoriesResult =
    abstract categories: ResizeArray<ProductCategory> with get, set

/// This is the interface object to be used by Root Categories and Category Tree APIs for Visual Studio Ide.
type [<AllowNullLiteral>] ProductCategory =
    abstract children: ResizeArray<ProductCategory> with get, set
    /// Indicator whether this is a leaf or there are children under this category
    abstract hasChildren: bool with get, set
    /// Individual Guid of the Category
    abstract id: string with get, set
    /// Category Title in the requested language
    abstract title: string with get, set

type [<AllowNullLiteral>] PublishedExtension =
    abstract categories: ResizeArray<string> with get, set
    abstract deploymentType: ExtensionDeploymentTechnology with get, set
    abstract displayName: string with get, set
    abstract extensionId: string with get, set
    abstract extensionName: string with get, set
    abstract flags: PublishedExtensionFlags with get, set
    abstract installationTargets: ResizeArray<InstallationTarget> with get, set
    abstract lastUpdated: DateTime with get, set
    abstract longDescription: string with get, set
    /// Date on which the extension was first uploaded.
    abstract publishedDate: DateTime with get, set
    abstract publisher: PublisherFacts with get, set
    /// Date on which the extension first went public.
    abstract releaseDate: DateTime with get, set
    abstract sharedWith: ResizeArray<ExtensionShare> with get, set
    abstract shortDescription: string with get, set
    abstract statistics: ResizeArray<ExtensionStatistic> with get, set
    abstract tags: ResizeArray<string> with get, set
    abstract versions: ResizeArray<ExtensionVersion> with get, set

type [<RequireQualifiedAccess>] PublishedExtensionFlags =
    | None = 0
    | Disabled = 1
    | BuiltIn = 2
    | Validated = 4
    | Trusted = 8
    | Paid = 16
    | Public = 256
    | MultiVersion = 512
    | System = 1024
    | Preview = 2048
    | Unpublished = 4096
    | Trial = 8192
    | Locked = 16384
    | Hidden = 32768

type [<AllowNullLiteral>] Publisher =
    inherit PublisherBase
    abstract _links: obj option with get, set

/// Keeping base class separate since publisher DB model class and publisher contract class share these common properties
type [<AllowNullLiteral>] PublisherBase =
    abstract displayName: string with get, set
    abstract emailAddress: ResizeArray<string> with get, set
    abstract extensions: ResizeArray<PublishedExtension> with get, set
    abstract flags: PublisherFlags with get, set
    abstract lastUpdated: DateTime with get, set
    abstract longDescription: string with get, set
    abstract publisherId: string with get, set
    abstract publisherName: string with get, set
    abstract shortDescription: string with get, set
    abstract state: PublisherState with get, set

/// High-level information about the publisher, like id's and names
type [<AllowNullLiteral>] PublisherFacts =
    abstract displayName: string with get, set
    abstract flags: PublisherFlags with get, set
    abstract publisherId: string with get, set
    abstract publisherName: string with get, set

/// The FilterResult is the set of publishers that matched a particular query filter.
type [<AllowNullLiteral>] PublisherFilterResult =
    /// This is the set of applications that matched the query filter supplied.
    abstract publishers: ResizeArray<Publisher> with get, set

type [<RequireQualifiedAccess>] PublisherFlags =
    | UnChanged = 1073741824
    | None = 0
    | Disabled = 1
    | Verified = 2
    | Certified = 4
    | ServiceFlags = 7

type [<RequireQualifiedAccess>] PublisherPermissions =
    | Read = 1
    | UpdateExtension = 2
    | CreatePublisher = 4
    | PublishExtension = 8
    | Admin = 16
    | TrustedPartner = 32
    | PrivateRead = 64
    | DeleteExtension = 128
    | EditSettings = 256
    | ViewPermissions = 512
    | ManagePermissions = 1024
    | DeletePublisher = 2048

/// An PublisherQuery is used to search the gallery for a set of publishers that match one of many filter values.
type [<AllowNullLiteral>] PublisherQuery =
    /// Each filter is a unique query and will have matching set of publishers returned from the request. Each result will have the same index in the resulting array that the filter had in the incoming query.
    abstract filters: ResizeArray<QueryFilter> with get, set
    /// The Flags are used to determine which set of information the caller would like returned for the matched publishers.
    abstract flags: PublisherQueryFlags with get, set

type [<RequireQualifiedAccess>] PublisherQueryFlags =
    | None = 0
    | IncludeExtensions = 1
    | IncludeEmailAddress = 2

/// This is the set of publishers that matched a supplied query through the filters given.
type [<AllowNullLiteral>] PublisherQueryResult =
    /// For each filter supplied in the query, a filter result will be returned in the query result.
    abstract results: ResizeArray<PublisherFilterResult> with get, set

type [<RequireQualifiedAccess>] PublisherRoleAccess =
    | Assigned = 1
    | Inherited = 2

type [<AllowNullLiteral>] PublisherRoleAssignment =
    /// Designates the role as explicitly assigned or inherited.
    abstract access: PublisherRoleAccess with get, set
    /// User friendly description of access assignment.
    abstract accessDisplayName: string with get, set
    /// The user to whom the role is assigned.
    abstract identity: WebApi.IdentityRef with get, set
    /// The role assigned to the user.
    abstract role: PublisherSecurityRole with get, set

type [<AllowNullLiteral>] PublisherSecurityRole =
    /// Permissions the role is allowed.
    abstract allowPermissions: float with get, set
    /// Permissions the role is denied.
    abstract denyPermissions: float with get, set
    /// Description of user access defined by the role
    abstract description: string with get, set
    /// User friendly name of the role.
    abstract displayName: string with get, set
    /// Globally unique identifier for the role.
    abstract identifier: string with get, set
    /// Unique name of the role in the scope.
    abstract name: string with get, set
    /// Returns the id of the ParentScope.
    abstract scope: string with get, set

type [<RequireQualifiedAccess>] PublisherState =
    | None = 0
    | VerificationPending = 1
    | CertificationPending = 2
    | CertificationRejected = 4
    | CertificationRevoked = 8

type [<AllowNullLiteral>] PublisherUserRoleAssignmentRef =
    /// The name of the role assigned.
    abstract roleName: string with get, set
    /// Identifier of the user given the role assignment.
    abstract uniqueName: string with get, set
    /// Unique id of the user given the role assignment.
    abstract userId: string with get, set

/// The core structure of a QnA item
type [<AllowNullLiteral>] QnAItem =
    /// Time when the review was first created
    abstract createdDate: DateTime with get, set
    /// Unique identifier of a QnA item
    abstract id: float with get, set
    /// Get status of item
    abstract status: QnAItemStatus with get, set
    /// Text description of the QnA item
    abstract text: string with get, set
    /// Time when the review was edited/updated
    abstract updatedDate: DateTime with get, set
    /// User details for the item.
    abstract user: UserIdentityRef with get, set

type [<RequireQualifiedAccess>] QnAItemStatus =
    | None = 0
    | UserEditable = 1
    | PublisherCreated = 2

/// A filter used to define a set of extensions to return during a query.
type [<AllowNullLiteral>] QueryFilter =
    /// The filter values define the set of values in this query. They are applied based on the QueryFilterType.
    abstract criteria: ResizeArray<FilterCriteria> with get, set
    /// The PagingDirection is applied to a paging token if one exists. If not the direction is ignored, and Forward from the start of the resultset is used. Direction should be left out of the request unless a paging token is used to help prevent future issues.
    abstract direction: PagingDirection with get, set
    /// The page number requested by the user. If not provided 1 is assumed by default.
    abstract pageNumber: float with get, set
    /// The page size defines the number of results the caller wants for this filter. The count can't exceed the overall query size limits.
    abstract pageSize: float with get, set
    /// The paging token is a distinct type of filter and the other filter fields are ignored. The paging token represents the continuation of a previously executed query. The information about where in the result and what fields are being filtered are embeded in the token.
    abstract pagingToken: string with get, set
    /// Defines the type of sorting to be applied on the results. The page slice is cut of the sorted results only.
    abstract sortBy: float with get, set
    /// Defines the order of sorting, 1 for Ascending, 2 for Descending, else default ordering based on the SortBy value
    abstract sortOrder: float with get, set

/// The structure of the question / thread
type [<AllowNullLiteral>] Question =
    inherit QnAItem
    /// List of answers in for the question / thread
    abstract responses: ResizeArray<Response> with get, set

type [<AllowNullLiteral>] QuestionsResult =
    /// Flag indicating if there are more QnA threads to be shown (for paging)
    abstract hasMoreQuestions: bool with get, set
    /// List of the QnA threads
    abstract questions: ResizeArray<Question> with get, set

type [<AllowNullLiteral>] RatingCountPerRating =
    /// Rating value
    abstract rating: float with get, set
    /// Count of total ratings
    abstract ratingCount: float with get, set

/// The structure of a response
type [<AllowNullLiteral>] Response =
    inherit QnAItem

type [<RequireQualifiedAccess>] RestApiResponseStatus =
    | Completed = 0
    | Failed = 1
    | Inprogress = 2
    | Skipped = 3

/// REST Api Response
type [<AllowNullLiteral>] RestApiResponseStatusModel =
    /// Gets or sets the operation details
    abstract operationDetails: obj option with get, set
    /// Gets or sets the operation id
    abstract operationId: string with get, set
    /// Gets or sets the completed status percentage
    abstract percentageCompleted: float with get, set
    /// Gets or sets the status
    abstract status: RestApiResponseStatus with get, set
    /// Gets or sets the status message
    abstract statusMessage: string with get, set

type [<AllowNullLiteral>] Review =
    /// Admin Reply, if any, for this review
    abstract adminReply: ReviewReply with get, set
    /// Unique identifier of a review item
    abstract id: float with get, set
    /// Flag for soft deletion
    abstract isDeleted: bool with get, set
    abstract isIgnored: bool with get, set
    /// Version of the product for which review was submitted
    abstract productVersion: string with get, set
    /// Rating provided by the user
    abstract rating: float with get, set
    /// Reply, if any, for this review
    abstract reply: ReviewReply with get, set
    /// Text description of the review
    abstract text: string with get, set
    /// Title of the review
    abstract title: string with get, set
    /// Time when the review was edited/updated
    abstract updatedDate: DateTime with get, set
    /// Name of the user
    abstract userDisplayName: string with get, set
    /// Id of the user who submitted the review
    abstract userId: string with get, set

type [<RequireQualifiedAccess>] ReviewEventOperation =
    | Create = 1
    | Update = 2
    | Delete = 3

/// Properties associated with Review event
type [<AllowNullLiteral>] ReviewEventProperties =
    /// Operation performed on Event - Create\\Update
    abstract eventOperation: ReviewEventOperation with get, set
    /// Flag to see if reply is admin reply
    abstract isAdminReply: bool with get, set
    /// Flag to record if the review is ignored
    abstract isIgnored: bool with get, set
    /// Rating at the time of event
    abstract rating: float with get, set
    /// Reply update date
    abstract replyDate: DateTime with get, set
    /// Publisher reply text or admin reply text
    abstract replyText: string with get, set
    /// User who responded to the review
    abstract replyUserId: string with get, set
    /// Review Event Type - Review
    abstract resourceType: ReviewResourceType with get, set
    /// Review update date
    abstract reviewDate: DateTime with get, set
    /// ReviewId of the review  on which the operation is performed
    abstract reviewId: float with get, set
    /// Text in Review Text
    abstract reviewText: string with get, set
    /// User display name at the time of review
    abstract userDisplayName: string with get, set
    /// User who gave review
    abstract userId: string with get, set

type [<RequireQualifiedAccess>] ReviewFilterOptions =
    | None = 0
    | FilterEmptyReviews = 1
    | FilterEmptyUserNames = 2

type [<AllowNullLiteral>] ReviewPatch =
    /// Denotes the patch operation type
    abstract operation: ReviewPatchOperation with get, set
    /// Use when patch operation is FlagReview
    abstract reportedConcern: UserReportedConcern with get, set
    /// Use when patch operation is EditReview
    abstract reviewItem: Review with get, set

type [<RequireQualifiedAccess>] ReviewPatchOperation =
    | FlagReview = 1
    | UpdateReview = 2
    | ReplyToReview = 3
    | AdminResponseForReview = 4
    | DeleteAdminReply = 5
    | DeletePublisherReply = 6

type [<AllowNullLiteral>] ReviewReply =
    /// Id of the reply
    abstract id: float with get, set
    /// Flag for soft deletion
    abstract isDeleted: bool with get, set
    /// Version of the product when the reply was submitted or updated
    abstract productVersion: string with get, set
    /// Content of the reply
    abstract replyText: string with get, set
    /// Id of the review, to which this reply belongs
    abstract reviewId: float with get, set
    /// Title of the reply
    abstract title: string with get, set
    /// Date the reply was submitted or updated
    abstract updatedDate: DateTime with get, set
    /// Id of the user who left the reply
    abstract userId: string with get, set

type [<RequireQualifiedAccess>] ReviewResourceType =
    | Review = 1
    | PublisherReply = 2
    | AdminReply = 3

type [<AllowNullLiteral>] ReviewsResult =
    /// Flag indicating if there are more reviews to be shown (for paging)
    abstract hasMoreReviews: bool with get, set
    /// List of reviews
    abstract reviews: ResizeArray<Review> with get, set
    /// Count of total review items
    abstract totalReviewCount: float with get, set

type [<AllowNullLiteral>] ReviewSummary =
    /// Average Rating
    abstract averageRating: float with get, set
    /// Count of total ratings
    abstract ratingCount: float with get, set
    /// Split of count across rating
    abstract ratingSplit: ResizeArray<RatingCountPerRating> with get, set

type [<RequireQualifiedAccess>] SortByType =
    | Relevance = 0
    | LastUpdatedDate = 1
    | Title = 2
    | Publisher = 3
    | InstallCount = 4
    | PublishedDate = 5
    | AverageRating = 6
    | TrendingDaily = 7
    | TrendingWeekly = 8
    | TrendingMonthly = 9
    | ReleaseDate = 10
    | Author = 11
    | WeightedRating = 12

type [<RequireQualifiedAccess>] SortOrderType =
    | Default = 0
    | Ascending = 1
    | Descending = 2

type [<AllowNullLiteral>] UnpackagedExtensionData =
    abstract categories: ResizeArray<string> with get, set
    abstract description: string with get, set
    abstract displayName: string with get, set
    abstract draftId: string with get, set
    abstract extensionName: string with get, set
    abstract installationTargets: ResizeArray<InstallationTarget> with get, set
    abstract isConvertedToMarkdown: bool with get, set
    abstract isPreview: bool with get, set
    abstract pricingCategory: string with get, set
    abstract product: string with get, set
    abstract publisherName: string with get, set
    abstract qnAEnabled: bool with get, set
    abstract referralUrl: string with get, set
    abstract repositoryUrl: string with get, set
    abstract tags: ResizeArray<string> with get, set
    abstract version: string with get, set
    abstract vsixId: string with get, set

/// Represents the extension policy applied to a given user
type [<AllowNullLiteral>] UserExtensionPolicy =
    /// User display name that this policy refers to
    abstract displayName: string with get, set
    /// The extension policy applied to the user
    abstract permissions: ExtensionPolicy with get, set
    /// User id that this policy refers to
    abstract userId: string with get, set

/// Identity reference with name and guid
type [<AllowNullLiteral>] UserIdentityRef =
    /// User display name
    abstract displayName: string with get, set
    /// User VSID
    abstract id: string with get, set

type [<AllowNullLiteral>] UserReportedConcern =
    /// Category of the concern
    abstract category: ConcernCategory with get, set
    /// User comment associated with the report
    abstract concernText: string with get, set
    /// Id of the review which was reported
    abstract reviewId: float with get, set
    /// Date the report was submitted
    abstract submittedDate: DateTime with get, set
    /// Id of the user who reported a review
    abstract userId: string with get, set

type [<AllowNullLiteral>] ExtensionDailyStatExtendedStats =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] ExtensionDraftValidationErrors =
    abstract key: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] ExtensionEventsEvents =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<ExtensionEvent> with get, set
module Gallery = ___Gallery_Gallery
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract GalleryRestClient: GalleryRestClientStatic

type [<AllowNullLiteral>] GalleryRestClient =
    inherit RestClientBase
    /// <param name="extensionId">-</param>
    /// <param name="accountName">-</param>
    abstract shareExtensionById: extensionId: string * accountName: string -> Promise<unit>
    /// <param name="extensionId">-</param>
    /// <param name="accountName">-</param>
    abstract unshareExtensionById: extensionId: string * accountName: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="accountName">-</param>
    abstract shareExtension: publisherName: string * extensionName: string * accountName: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="accountName">-</param>
    abstract unshareExtension: publisherName: string * extensionName: string * accountName: string -> Promise<unit>
    /// <param name="itemId">-</param>
    /// <param name="installationTarget">-</param>
    /// <param name="testCommerce">-</param>
    /// <param name="isFreeOrTrialInstall">-</param>
    abstract getAcquisitionOptions: itemId: string * installationTarget: string * ?testCommerce: bool * ?isFreeOrTrialInstall: bool -> Promise<Gallery.AcquisitionOptions>
    /// <param name="acquisitionRequest">-</param>
    abstract requestAcquisition: acquisitionRequest: Gallery.ExtensionAcquisitionRequest -> Promise<Gallery.ExtensionAcquisitionRequest>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    /// <param name="assetType">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="acceptDefault">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract getAssetByName: publisherName: string * extensionName: string * version: string * assetType: string * ?accountToken: string * ?acceptDefault: bool * ?accountTokenHeader: String -> Promise<ArrayBuffer>
    /// <param name="extensionId">-</param>
    /// <param name="version">-</param>
    /// <param name="assetType">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="acceptDefault">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract getAsset: extensionId: string * version: string * assetType: string * ?accountToken: string * ?acceptDefault: bool * ?accountTokenHeader: String -> Promise<ArrayBuffer>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    /// <param name="assetType">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract getAssetAuthenticated: publisherName: string * extensionName: string * version: string * assetType: string * ?accountToken: string * ?accountTokenHeader: String -> Promise<ArrayBuffer>
    /// <param name="publisherName">-</param>
    /// <param name="azurePublisherId">-</param>
    abstract associateAzurePublisher: publisherName: string * azurePublisherId: string -> Promise<Gallery.AzurePublisher>
    /// <param name="publisherName">-</param>
    abstract queryAssociatedAzurePublisher: publisherName: string -> Promise<Gallery.AzurePublisher>
    /// <param name="languages">-</param>
    abstract getCategories: ?languages: string -> Promise<ResizeArray<string>>
    /// <param name="categoryName">-</param>
    /// <param name="languages">-</param>
    /// <param name="product">-</param>
    abstract getCategoryDetails: categoryName: string * ?languages: string * ?product: string -> Promise<Gallery.CategoriesResult>
    /// <param name="product">-</param>
    /// <param name="categoryId">-</param>
    /// <param name="lcid">-</param>
    /// <param name="source">-</param>
    /// <param name="productVersion">-</param>
    /// <param name="skus">-</param>
    /// <param name="subSkus">-</param>
    abstract getCategoryTree: product: string * categoryId: string * ?lcid: float * ?source: string * ?productVersion: string * ?skus: string * ?subSkus: string -> Promise<Gallery.ProductCategory>
    /// <param name="product">-</param>
    /// <param name="lcid">-</param>
    /// <param name="source">-</param>
    /// <param name="productVersion">-</param>
    /// <param name="skus">-</param>
    /// <param name="subSkus">-</param>
    abstract getRootCategories: product: string * ?lcid: float * ?source: string * ?productVersion: string * ?skus: string * ?subSkus: string -> Promise<Gallery.ProductCategoriesResult>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    abstract getCertificate: publisherName: string * extensionName: string * ?version: string -> Promise<ArrayBuffer>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    abstract getContentVerificationLog: publisherName: string * extensionName: string -> Promise<ArrayBuffer>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    abstract createDraftForEditExtension: publisherName: string * extensionName: string -> Promise<Gallery.ExtensionDraft>
    /// <param name="draftPatch">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="draftId">-</param>
    abstract performEditExtensionDraftOperation: draftPatch: Gallery.ExtensionDraftPatch * publisherName: string * extensionName: string * draftId: string -> Promise<Gallery.ExtensionDraft>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="draftId">-</param>
    /// <param name="fileName">- Header to pass the filename of the uploaded data</param>
    abstract updatePayloadInDraftForEditExtension: content: obj option * publisherName: string * extensionName: string * draftId: string * ?fileName: String -> Promise<Gallery.ExtensionDraft>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="draftId">-</param>
    /// <param name="assetType">-</param>
    abstract addAssetForEditExtensionDraft: content: string * publisherName: string * extensionName: string * draftId: string * assetType: string -> Promise<Gallery.ExtensionDraftAsset>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">-</param>
    /// <param name="product">- Header to pass the product type of the payload file</param>
    /// <param name="fileName">- Header to pass the filename of the uploaded data</param>
    abstract createDraftForNewExtension: content: obj option * publisherName: string * product: String * ?fileName: String -> Promise<Gallery.ExtensionDraft>
    /// <param name="draftPatch">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="draftId">-</param>
    abstract performNewExtensionDraftOperation: draftPatch: Gallery.ExtensionDraftPatch * publisherName: string * draftId: string -> Promise<Gallery.ExtensionDraft>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">-</param>
    /// <param name="draftId">-</param>
    /// <param name="fileName">- Header to pass the filename of the uploaded data</param>
    abstract updatePayloadInDraftForNewExtension: content: obj option * publisherName: string * draftId: string * ?fileName: String -> Promise<Gallery.ExtensionDraft>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">-</param>
    /// <param name="draftId">-</param>
    /// <param name="assetType">-</param>
    abstract addAssetForNewExtensionDraft: content: string * publisherName: string * draftId: string * assetType: string -> Promise<Gallery.ExtensionDraftAsset>
    /// <param name="publisherName">-</param>
    /// <param name="draftId">-</param>
    /// <param name="assetType">-</param>
    /// <param name="extensionName">-</param>
    abstract getAssetFromEditExtensionDraft: publisherName: string * draftId: string * assetType: string * extensionName: string -> Promise<ArrayBuffer>
    /// <param name="publisherName">-</param>
    /// <param name="draftId">-</param>
    /// <param name="assetType">-</param>
    abstract getAssetFromNewExtensionDraft: publisherName: string * draftId: string * assetType: string -> Promise<ArrayBuffer>
    /// <summary>Get install/uninstall events of an extension. If both count and afterDate parameters are specified, count takes precedence.</summary>
    /// <param name="publisherName">- Name of the publisher</param>
    /// <param name="extensionName">- Name of the extension</param>
    /// <param name="count">- Count of events to fetch, applies to each event type.</param>
    /// <param name="afterDate">- Fetch events that occurred on or after this date</param>
    /// <param name="include">- Filter options. Supported values: install, uninstall, review, acquisition, sales. Default is to fetch all types of events</param>
    /// <param name="includeProperty">- Event properties to include. Currently only 'lastContactDetails' is supported for uninstall events</param>
    abstract getExtensionEvents: publisherName: string * extensionName: string * ?count: float * ?afterDate: DateTime * ?``include``: string * ?includeProperty: string -> Promise<Gallery.ExtensionEvents>
    /// <summary>API endpoint to publish extension install/uninstall events. This is meant to be invoked by EMS only for sending us data related to install/uninstall of an extension.</summary>
    /// <param name="extensionEvents">-</param>
    abstract publishExtensionEvents: extensionEvents: ResizeArray<Gallery.ExtensionEvents> -> Promise<unit>
    /// <param name="extensionQuery">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract queryExtensions: extensionQuery: Gallery.ExtensionQuery * ?accountToken: string * ?accountTokenHeader: String -> Promise<Gallery.ExtensionQueryResult>
    /// <param name="content">- Content to upload</param>
    abstract createExtension: content: obj option -> Promise<Gallery.PublishedExtension>
    /// <param name="extensionId">-</param>
    /// <param name="version">-</param>
    abstract deleteExtensionById: extensionId: string * ?version: string -> Promise<unit>
    /// <param name="extensionId">-</param>
    /// <param name="version">-</param>
    /// <param name="flags">-</param>
    abstract getExtensionById: extensionId: string * ?version: string * ?flags: Gallery.ExtensionQueryFlags -> Promise<Gallery.PublishedExtension>
    /// <param name="extensionId">-</param>
    abstract updateExtensionById: extensionId: string -> Promise<Gallery.PublishedExtension>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">-</param>
    abstract createExtensionWithPublisher: content: obj option * publisherName: string -> Promise<Gallery.PublishedExtension>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    abstract deleteExtension: publisherName: string * extensionName: string * ?version: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    /// <param name="flags">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract getExtension: publisherName: string * extensionName: string * ?version: string * ?flags: Gallery.ExtensionQueryFlags * ?accountToken: string * ?accountTokenHeader: String -> Promise<Gallery.PublishedExtension>
    /// <summary>REST endpoint to update an extension.</summary>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">- Name of the publisher</param>
    /// <param name="extensionName">- Name of the extension</param>
    /// <param name="bypassScopeCheck">- This parameter decides if the scope change check needs to be invoked or not</param>
    abstract updateExtension: content: obj option * publisherName: string * extensionName: string * ?bypassScopeCheck: bool -> Promise<Gallery.PublishedExtension>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="flags">-</param>
    abstract updateExtensionProperties: publisherName: string * extensionName: string * flags: Gallery.PublishedExtensionFlags -> Promise<Gallery.PublishedExtension>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="hostType">-</param>
    /// <param name="hostName">-</param>
    abstract shareExtensionWithHost: publisherName: string * extensionName: string * hostType: string * hostName: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="hostType">-</param>
    /// <param name="hostName">-</param>
    abstract unshareExtensionWithHost: publisherName: string * extensionName: string * hostType: string * hostName: string -> Promise<unit>
    /// <param name="azureRestApiRequestModel">-</param>
    abstract extensionValidator: azureRestApiRequestModel: Gallery.AzureRestApiRequestModel -> Promise<unit>
    /// <summary>Send Notification</summary>
    /// <param name="notificationData">- Denoting the data needed to send notification</param>
    abstract sendNotifications: notificationData: Gallery.NotificationsData -> Promise<unit>
    /// <summary>This endpoint gets hit when you download a VSTS extension from the Web UI</summary>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="acceptDefault">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract getPackage: publisherName: string * extensionName: string * version: string * ?accountToken: string * ?acceptDefault: bool * ?accountTokenHeader: String -> Promise<ArrayBuffer>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    /// <param name="assetType">-</param>
    /// <param name="assetToken">-</param>
    /// <param name="accountToken">-</param>
    /// <param name="acceptDefault">-</param>
    /// <param name="accountTokenHeader">- Header to pass the account token</param>
    abstract getAssetWithToken: publisherName: string * extensionName: string * version: string * assetType: string * ?assetToken: string * ?accountToken: string * ?acceptDefault: bool * ?accountTokenHeader: String -> Promise<ArrayBuffer>
    /// <summary>Delete publisher asset like logo</summary>
    /// <param name="publisherName">- Internal name of the publisher</param>
    /// <param name="assetType">- Type of asset. Default value is 'logo'.</param>
    abstract deletePublisherAsset: publisherName: string * ?assetType: string -> Promise<unit>
    /// <summary>Get publisher asset like logo as a stream</summary>
    /// <param name="publisherName">- Internal name of the publisher</param>
    /// <param name="assetType">- Type of asset. Default value is 'logo'.</param>
    abstract getPublisherAsset: publisherName: string * ?assetType: string -> Promise<ArrayBuffer>
    /// <summary>Update publisher asset like logo. It accepts asset file as an octet stream and file name is passed in header values.</summary>
    /// <param name="content">- Content to upload</param>
    /// <param name="publisherName">- Internal name of the publisher</param>
    /// <param name="assetType">- Type of asset. Default value is 'logo'.</param>
    /// <param name="fileName">- Header to pass the filename of the uploaded data</param>
    abstract updatePublisherAsset: content: obj option * publisherName: string * ?assetType: string * ?fileName: String -> Promise<GalleryRestClientUpdatePublisherAssetPromise>
    /// <param name="publisherQuery">-</param>
    abstract queryPublishers: publisherQuery: Gallery.PublisherQuery -> Promise<Gallery.PublisherQueryResult>
    /// <param name="publisher">-</param>
    abstract createPublisher: publisher: Gallery.Publisher -> Promise<Gallery.Publisher>
    /// <param name="publisherName">-</param>
    abstract deletePublisher: publisherName: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="flags">-</param>
    abstract getPublisher: publisherName: string * ?flags: float -> Promise<Gallery.Publisher>
    /// <param name="publisher">-</param>
    /// <param name="publisherName">-</param>
    abstract updatePublisher: publisher: Gallery.Publisher * publisherName: string -> Promise<Gallery.Publisher>
    /// <summary>Endpoint to add/modify publisher membership. Currently Supports only addition/modification of 1 user at a time Works only for adding members of same tenant.</summary>
    /// <param name="roleAssignments">- List of user identifiers(email address) and role to be added. Currently only one entry is supported.</param>
    /// <param name="publisherName">- The name/id of publisher to which users have to be added</param>
    /// <param name="limitToCallerIdentityDomain">- Should cross tenant addtions be allowed or not.</param>
    abstract updatePublisherMembers: roleAssignments: ResizeArray<Gallery.PublisherUserRoleAssignmentRef> * publisherName: string * ?limitToCallerIdentityDomain: bool -> Promise<ResizeArray<Gallery.PublisherRoleAssignment>>
    /// <summary>Returns a list of questions with their responses associated with an extension.</summary>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    /// <param name="count">- Number of questions to retrieve (defaults to 10).</param>
    /// <param name="page">- Page number from which set of questions are to be retrieved.</param>
    /// <param name="afterDate">- If provided, results questions are returned which were posted after this date</param>
    abstract getQuestions: publisherName: string * extensionName: string * ?count: float * ?page: float * ?afterDate: DateTime -> Promise<Gallery.QuestionsResult>
    /// <summary>Flags a concern with an existing question for an extension.</summary>
    /// <param name="concern">- User reported concern with a question for the extension.</param>
    /// <param name="pubName">- Name of the publisher who published the extension.</param>
    /// <param name="extName">- Name of the extension.</param>
    /// <param name="questionId">- Identifier of the question to be updated for the extension.</param>
    abstract reportQuestion: concern: Gallery.Concern * pubName: string * extName: string * questionId: float -> Promise<Gallery.Concern>
    /// <summary>Creates a new question for an extension.</summary>
    /// <param name="question">- Question to be created for the extension.</param>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    abstract createQuestion: question: Gallery.Question * publisherName: string * extensionName: string -> Promise<Gallery.Question>
    /// <summary>Deletes an existing question and all its associated responses for an extension. (soft delete)</summary>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    /// <param name="questionId">- Identifier of the question to be deleted for the extension.</param>
    abstract deleteQuestion: publisherName: string * extensionName: string * questionId: float -> Promise<unit>
    /// <summary>Updates an existing question for an extension.</summary>
    /// <param name="question">- Updated question to be set for the extension.</param>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    /// <param name="questionId">- Identifier of the question to be updated for the extension.</param>
    abstract updateQuestion: question: Gallery.Question * publisherName: string * extensionName: string * questionId: float -> Promise<Gallery.Question>
    /// <summary>Creates a new response for a given question for an extension.</summary>
    /// <param name="response">- Response to be created for the extension.</param>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    /// <param name="questionId">- Identifier of the question for which response is to be created for the extension.</param>
    abstract createResponse: response: Gallery.Response * publisherName: string * extensionName: string * questionId: float -> Promise<Gallery.Response>
    /// <summary>Deletes a response for an extension. (soft delete)</summary>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    /// <param name="questionId">- Identifies the question whose response is to be deleted.</param>
    /// <param name="responseId">- Identifies the response to be deleted.</param>
    abstract deleteResponse: publisherName: string * extensionName: string * questionId: float * responseId: float -> Promise<unit>
    /// <summary>Updates an existing response for a given question for an extension.</summary>
    /// <param name="response">- Updated response to be set for the extension.</param>
    /// <param name="publisherName">- Name of the publisher who published the extension.</param>
    /// <param name="extensionName">- Name of the extension.</param>
    /// <param name="questionId">- Identifier of the question for which response is to be updated for the extension.</param>
    /// <param name="responseId">- Identifier of the response which has to be updated.</param>
    abstract updateResponse: response: Gallery.Response * publisherName: string * extensionName: string * questionId: float * responseId: float -> Promise<Gallery.Response>
    /// <summary>Returns extension reports</summary>
    /// <param name="publisherName">- Name of the publisher who published the extension</param>
    /// <param name="extensionName">- Name of the extension</param>
    /// <param name="days">- Last n days report. If afterDate and days are specified, days will take priority</param>
    /// <param name="count">- Number of events to be returned</param>
    /// <param name="afterDate">- Use if you want to fetch events newer than the specified date</param>
    abstract getExtensionReports: publisherName: string * extensionName: string * ?days: float * ?count: float * ?afterDate: DateTime -> Promise<obj option>
    /// <summary>Returns a list of reviews associated with an extension</summary>
    /// <param name="publisherName">- Name of the publisher who published the extension</param>
    /// <param name="extensionName">- Name of the extension</param>
    /// <param name="count">- Number of reviews to retrieve (defaults to 5)</param>
    /// <param name="filterOptions">- FilterOptions to filter out empty reviews etcetera, defaults to none</param>
    /// <param name="beforeDate">- Use if you want to fetch reviews older than the specified date, defaults to null</param>
    /// <param name="afterDate">- Use if you want to fetch reviews newer than the specified date, defaults to null</param>
    abstract getReviews: publisherName: string * extensionName: string * ?count: float * ?filterOptions: Gallery.ReviewFilterOptions * ?beforeDate: DateTime * ?afterDate: DateTime -> Promise<Gallery.ReviewsResult>
    /// <summary>Returns a summary of the reviews</summary>
    /// <param name="pubName">- Name of the publisher who published the extension</param>
    /// <param name="extName">- Name of the extension</param>
    /// <param name="beforeDate">- Use if you want to fetch summary of reviews older than the specified date, defaults to null</param>
    /// <param name="afterDate">- Use if you want to fetch summary of reviews newer than the specified date, defaults to null</param>
    abstract getReviewsSummary: pubName: string * extName: string * ?beforeDate: DateTime * ?afterDate: DateTime -> Promise<Gallery.ReviewSummary>
    /// <summary>Creates a new review for an extension</summary>
    /// <param name="review">- Review to be created for the extension</param>
    /// <param name="pubName">- Name of the publisher who published the extension</param>
    /// <param name="extName">- Name of the extension</param>
    abstract createReview: review: Gallery.Review * pubName: string * extName: string -> Promise<Gallery.Review>
    /// <summary>Deletes a review</summary>
    /// <param name="pubName">- Name of the pubilsher who published the extension</param>
    /// <param name="extName">- Name of the extension</param>
    /// <param name="reviewId">- Id of the review which needs to be updated</param>
    abstract deleteReview: pubName: string * extName: string * reviewId: float -> Promise<unit>
    /// <summary>Updates or Flags a review</summary>
    /// <param name="reviewPatch">- ReviewPatch object which contains the changes to be applied to the review</param>
    /// <param name="pubName">- Name of the pubilsher who published the extension</param>
    /// <param name="extName">- Name of the extension</param>
    /// <param name="reviewId">- Id of the review which needs to be updated</param>
    abstract updateReview: reviewPatch: Gallery.ReviewPatch * pubName: string * extName: string * reviewId: float -> Promise<Gallery.ReviewPatch>
    /// <param name="category">-</param>
    abstract createCategory: category: Gallery.ExtensionCategory -> Promise<Gallery.ExtensionCategory>
    /// <summary>Get all setting entries for the given user/all-users scope</summary>
    /// <param name="userScope">- User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.</param>
    /// <param name="key">- Optional key under which to filter all the entries</param>
    abstract getGalleryUserSettings: userScope: string * ?key: string -> Promise<GalleryRestClientGetGalleryUserSettingsPromise>
    /// <summary>Set all setting entries for the given user/all-users scope</summary>
    /// <param name="entries">- A key-value pair of all settings that need to be set</param>
    /// <param name="userScope">- User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.</param>
    abstract setGalleryUserSettings: entries: GalleryRestClientSetGalleryUserSettingsEntries * userScope: string -> Promise<unit>
    /// <param name="keyType">-</param>
    /// <param name="expireCurrentSeconds">-</param>
    abstract generateKey: keyType: string * ?expireCurrentSeconds: float -> Promise<unit>
    /// <param name="keyType">-</param>
    abstract getSigningKey: keyType: string -> Promise<string>
    /// <param name="extensionStatisticsUpdate">-</param>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    abstract updateExtensionStatistics: extensionStatisticsUpdate: Gallery.ExtensionStatisticUpdate * publisherName: string * extensionName: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="days">-</param>
    /// <param name="aggregate">-</param>
    /// <param name="afterDate">-</param>
    abstract getExtensionDailyStats: publisherName: string * extensionName: string * ?days: float * ?aggregate: Gallery.ExtensionStatsAggregateType * ?afterDate: DateTime -> Promise<Gallery.ExtensionDailyStats>
    /// <summary>This route/location id only supports HTTP POST anonymously, so that the page view daily stat can be incremented from Marketplace client. Trying to call GET on this route should result in an exception. Without this explicit implementation, calling GET on this public route invokes the above GET implementation GetExtensionDailyStats.</summary>
    /// <param name="publisherName">- Name of the publisher</param>
    /// <param name="extensionName">- Name of the extension</param>
    /// <param name="version">- Version of the extension</param>
    abstract getExtensionDailyStatsAnonymous: publisherName: string * extensionName: string * version: string -> Promise<Gallery.ExtensionDailyStats>
    /// <summary>Increments a daily statistic associated with the extension</summary>
    /// <param name="publisherName">- Name of the publisher</param>
    /// <param name="extensionName">- Name of the extension</param>
    /// <param name="version">- Version of the extension</param>
    /// <param name="statType">- Type of stat to increment</param>
    abstract incrementExtensionDailyStat: publisherName: string * extensionName: string * version: string * statType: string -> Promise<unit>
    /// <param name="publisherName">-</param>
    /// <param name="extensionName">-</param>
    /// <param name="version">-</param>
    abstract getVerificationLog: publisherName: string * extensionName: string * version: string -> Promise<ArrayBuffer>

type [<AllowNullLiteral>] GalleryRestClientSetGalleryUserSettingsEntries =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] GalleryRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> GalleryRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] GalleryRestClientUpdatePublisherAssetPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] GalleryRestClientGetGalleryUserSettingsPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set
type GitVersionDescriptor = __Git.GitVersionDescriptor
type TfvcVersionDescriptor = __Git.TfvcVersionDescriptor

/// Extensions to the code editor should implement this interface, which will be called when the exension is loaded.
type [<AllowNullLiteral>] ICodeEditorContribution =
    abstract register: editorEndpoints: ICodeEditorContributionEndpoints -> unit

type [<AllowNullLiteral>] ResourceChangedCallback =
    [<Emit "$0($1...)">] abstract Invoke: resource: IResource -> unit

/// These functions will be made available to extensions to interact with the code editor.
type [<AllowNullLiteral>] ICodeEditorContributionEndpoints =
    /// Get a resource URI for the specified resource.
    abstract getResourceUriFromResourceVersion: version: IResourceVersion -> Promise<string>
    /// Get resource version from specified resource URI.
    abstract getResourceVersion: uri: string -> Promise<IResourceVersion>
    /// Get the list of currently registered JSON schemas.
    abstract getJsonSchemas: unit -> Promise<ResizeArray<IJsonSchemaRegistration>>
    /// Register a callback to be informed when a change happens to the current resource:
    ///   - a new file is loaded
    ///   - the user edits the file in the web UI
    ///   - the detected language changes (ie after an extension registered a new language, and the file was detected to have that language)
    abstract onResourceChanged: callback: ResourceChangedCallback -> unit
    /// Register a language with the code editor.
    abstract registerLanguage: registration: ILanguageRegistration -> unit
    /// Register schemas with the code editor's built-in JSON language
    abstract registerJsonSchemas: schemas: ResizeArray<IJsonSchemaRegistration> -> unit

type [<AllowNullLiteral>] IResource =
    abstract uri: string with get, set
    abstract getValue: unit -> Promise<string>
    abstract languageId: string with get, set
    abstract versionInfo: IResourceVersion with get, set

type IResourceVersion =
    U2<IGitResourceVersion, ITfvcResourceVersion>

/// Identifies a file in Git.
type [<AllowNullLiteral>] IGitResourceVersion =
    abstract repositoryId: string with get, set
    abstract versionControlType: string with get, set
    abstract version: GitVersionDescriptor with get, set
    abstract path: string with get, set

type [<StringEnum>] [<RequireQualifiedAccess>] VersionControlType =
    | Git
    | Tfvc

/// Identifies a file in TFVC.
type [<AllowNullLiteral>] ITfvcResourceVersion =
    abstract versionControlType: string with get, set
    abstract version: TfvcVersionDescriptor with get, set
    abstract path: string with get, set

/// Everything needed to register a language.
/// See https://github.com/Microsoft/monaco-languages/ for examples.
type [<AllowNullLiteral>] ILanguageRegistration =
    abstract extensionPoint: ILanguageExtensionPoint with get, set
    abstract configuration: LanguageConfiguration with get, set
    abstract monarchLanguage: IMonarchLanguage with get, set

/// Describes a JSON schema
type [<AllowNullLiteral>] IJsonSchemaRegistration =
    /// URI of the schema
    abstract uri: string with get, set
    /// File patterns the schema applies to.
    abstract fileMatch: ResizeArray<string> option with get, set
    /// The JSON schema.
    /// See https://github.com/Microsoft/vscode-json-languageservice/blob/master/src/jsonSchema.ts
    abstract schema: obj option with get, set

/// A monaco language extension point.
/// See https://github.com/Microsoft/monaco-editor/blob/master/monaco.d.ts
type [<AllowNullLiteral>] ILanguageExtensionPoint =
    abstract id: string with get, set
    abstract extensions: ResizeArray<string> option with get, set
    abstract filenames: ResizeArray<string> option with get, set
    abstract filenamePatterns: ResizeArray<string> option with get, set
    abstract firstLine: string option with get, set
    abstract aliases: ResizeArray<string> option with get, set
    abstract mimetypes: ResizeArray<string> option with get, set
    abstract configuration: string option with get, set

/// A Monarch language definition
type [<AllowNullLiteral>] IMonarchLanguage =
    interface end

/// Describes how comments for a language work.
type [<AllowNullLiteral>] CommentRule =
    /// The line comment token, like `// this is a comment`
    abstract lineComment: string option with get, set
    /// The block comment character pair, like `/* block comment *&#47;`
    abstract blockComment: CharacterPair option with get, set

/// The language configuration interface defines the contract between extensions and
/// various editor features, like automatic bracket insertion, automatic indentation etc.
type [<AllowNullLiteral>] LanguageConfiguration =
    /// The language's comment settings.
    abstract comments: CommentRule option with get, set
    /// The language's brackets.
    /// This configuration implicitly affects pressing Enter around these brackets.
    abstract brackets: ResizeArray<CharacterPair> option with get, set
    /// The language's word definition.
    /// If the language supports Unicode identifiers (e.g. JavaScript), it is preferable
    /// to provide a word definition that uses exclusion of known separators.
    /// e.g.: A regex that matches anything except known separators (and dot is allowed to occur in a floating point number):
    ///    /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g
    abstract wordPattern: RegExp option with get, set
    /// The language's indentation settings.
    abstract indentationRules: IndentationRule option with get, set
    /// The language's rules to be evaluated when pressing Enter.
    abstract onEnterRules: ResizeArray<OnEnterRule> option with get, set
    /// The language's auto closing pairs. The 'close' character is automatically inserted with the
    /// 'open' character is typed. If not set, the configured brackets will be used.
    abstract autoClosingPairs: ResizeArray<IAutoClosingPairConditional> option with get, set
    /// The language's surrounding pairs. When the 'open' character is typed on a selection, the
    /// selected string is surrounded by the open and close characters. If not set, the autoclosing pairs
    /// settings will be used.
    abstract surroundingPairs: ResizeArray<IAutoClosingPair> option with get, set
    /// The language's folding rules.
    abstract folding: FoldingRules option with get, set

/// Describes indentation rules for a language.
type [<AllowNullLiteral>] IndentationRule =
    /// If a line matches this pattern, then all the lines after it should be unindendented once (until another rule matches).
    abstract decreaseIndentPattern: RegExp with get, set
    /// If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).
    abstract increaseIndentPattern: RegExp with get, set
    /// If a line matches this pattern, then **only the next line** after it should be indented once.
    abstract indentNextLinePattern: RegExp option with get, set
    /// If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.
    abstract unIndentedLinePattern: RegExp option with get, set

/// Describes language specific folding markers such as '#region' and '#endregion'.
/// The start and end regexes will be tested against the contents of all lines and must be designed efficiently:
/// - the regex should start with '^'
/// - regexp flags (i, g) are ignored
type [<AllowNullLiteral>] FoldingMarkers =
    abstract start: RegExp with get, set
    abstract ``end``: RegExp with get, set

/// Describes folding rules for a language.
type [<AllowNullLiteral>] FoldingRules =
    /// Used by the indentation based strategy to decide wheter empty lines belong to the previous or the next block.
    /// A language adheres to the off-side rule if blocks in that language are expressed by their indentation.
    /// See [wikipedia](https://en.wikipedia.org/wiki/Off-side_rule) for more information.
    /// If not set, `false` is used and empty lines belong to the previous block.
    abstract offSide: bool option with get, set
    /// Region markers used by the language.
    abstract markers: FoldingMarkers option with get, set

/// Describes a rule to be evaluated when pressing Enter.
type [<AllowNullLiteral>] OnEnterRule =
    /// This rule will only execute if the text before the cursor matches this regular expression.
    abstract beforeText: RegExp with get, set
    /// This rule will only execute if the text after the cursor matches this regular expression.
    abstract afterText: RegExp option with get, set
    /// The action to execute.
    abstract action: EnterAction with get, set

/// Describes what to do when pressing Enter.
type [<AllowNullLiteral>] EnterAction =
    /// Describe what to do with the indentation.
    abstract indentAction: IndentAction with get, set
    /// Describe whether to outdent current line.
    abstract outdentCurrentLine: bool option with get, set
    /// Describes text to be appended after the new line and after the indentation.
    abstract appendText: string option with get, set
    /// Describes the number of characters to remove from the new line's indentation.
    abstract removeText: float option with get, set

/// Definition of documentation comments (e.g. Javadoc/JSdoc)
type [<AllowNullLiteral>] IDocComment =
    /// The string that starts a doc comment (e.g. '/**')
    abstract ``open``: string with get, set
    /// The string that appears on the last line and closes the doc comment (e.g. ' * /').
    abstract close: string with get, set

type CharacterPair =
    string * string

type [<AllowNullLiteral>] IAutoClosingPair =
    abstract ``open``: string with get, set
    abstract close: string with get, set

type [<AllowNullLiteral>] IAutoClosingPairConditional =
    inherit IAutoClosingPair
    abstract notIn: ResizeArray<string> option with get, set

type [<RequireQualifiedAccess>] IndentAction =
    | None = 0
    | Indent = 1
    | IndentOutdent = 2
    | Outdent = 3
module TfsCore = ___Core_Core
module Policy = ___Policy_Policy
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] AssociatedWorkItem =
    abstract assignedTo: string with get, set
    /// Id of associated the work item.
    abstract id: float with get, set
    abstract state: string with get, set
    abstract title: string with get, set
    /// REST Url of the work item.
    abstract url: string with get, set
    abstract webUrl: string with get, set
    abstract workItemType: string with get, set

type [<AllowNullLiteral>] AsyncGitOperationNotification =
    abstract operationId: float with get, set

type [<AllowNullLiteral>] AsyncRefOperationCommitLevelEventNotification =
    inherit AsyncGitOperationNotification
    abstract commitId: string with get, set

type [<AllowNullLiteral>] AsyncRefOperationCompletedNotification =
    inherit AsyncGitOperationNotification
    abstract newRefName: string with get, set

type [<AllowNullLiteral>] AsyncRefOperationConflictNotification =
    inherit AsyncRefOperationCommitLevelEventNotification

type [<AllowNullLiteral>] AsyncRefOperationGeneralFailureNotification =
    inherit AsyncGitOperationNotification

type [<AllowNullLiteral>] AsyncRefOperationProgressNotification =
    inherit AsyncRefOperationCommitLevelEventNotification
    abstract progress: float with get, set

type [<AllowNullLiteral>] AsyncRefOperationTimeoutNotification =
    inherit AsyncGitOperationNotification

/// Meta data for a file attached to an artifact.
type [<AllowNullLiteral>] Attachment =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// The person that uploaded this attachment.
    abstract author: WebApi.IdentityRef with get, set
    /// Content hash of on-disk representation of file content. Its calculated by the server by using SHA1 hash function.
    abstract contentHash: string with get, set
    /// The time the attachment was uploaded.
    abstract createdDate: DateTime with get, set
    /// The description of the attachment.
    abstract description: string with get, set
    /// The display name of the attachment. Can't be null or empty.
    abstract displayName: string with get, set
    /// Id of the attachment.
    abstract id: float with get, set
    /// Extended properties.
    abstract properties: obj option with get, set
    /// The url to download the content of the attachment.
    abstract url: string with get, set

/// Real time event (SignalR) for an auto-complete update on a pull request
type [<AllowNullLiteral>] AutoCompleteUpdatedEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for a source/target branch update on a pull request
type [<AllowNullLiteral>] BranchUpdatedEvent =
    inherit RealTimePullRequestEvent
    /// If true, the source branch of the pull request was updated
    abstract isSourceUpdate: bool with get, set

type [<AllowNullLiteral>] Change<'T> =
    /// The type of change that was made to the item.
    abstract changeType: VersionControlChangeType with get, set
    /// Current version.
    abstract item: 'T with get, set
    /// Content of the item after the change.
    abstract newContent: ItemContent with get, set
    /// Path of the item on the server.
    abstract sourceServerItem: string with get, set
    /// URL to retrieve the item.
    abstract url: string with get, set

type [<AllowNullLiteral>] ChangeCountDictionary =
    interface end

type [<AllowNullLiteral>] ChangeList<'T> =
    abstract allChangesIncluded: bool with get, set
    abstract changeCounts: ChangeListChangeCounts with get, set
    abstract changes: ResizeArray<Change<'T>> with get, set
    abstract comment: string with get, set
    abstract commentTruncated: bool with get, set
    abstract creationDate: DateTime with get, set
    abstract notes: ResizeArray<CheckinNote> with get, set
    abstract owner: string with get, set
    abstract ownerDisplayName: string with get, set
    abstract ownerId: string with get, set
    abstract sortDate: DateTime with get, set
    abstract version: string with get, set

/// Criteria used in a search for change lists
type [<AllowNullLiteral>] ChangeListSearchCriteria =
    /// If provided, a version descriptor to compare against base
    abstract compareVersion: string with get, set
    /// If true, don't include delete history entries
    abstract excludeDeletes: bool with get, set
    /// Whether or not to follow renames for the given item being queried
    abstract followRenames: bool with get, set
    /// If provided, only include history entries created after this date (string)
    abstract fromDate: string with get, set
    /// If provided, a version descriptor for the earliest change list to include
    abstract fromVersion: string with get, set
    /// Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.
    abstract itemPath: string with get, set
    /// List of item paths to search under. If this member is used then itemPath will be ignored.
    abstract itemPaths: ResizeArray<string> with get, set
    /// Version of the items to search
    abstract itemVersion: string with get, set
    /// Number of results to skip (used when clicking more...)
    abstract skip: float with get, set
    /// If provided, only include history entries created before this date (string)
    abstract toDate: string with get, set
    /// If provided, the maximum number of history entries to return
    abstract top: float with get, set
    /// If provided, a version descriptor for the latest change list to include
    abstract toVersion: string with get, set
    /// Alias or display name of user who made the changes
    abstract user: string with get, set

type [<AllowNullLiteral>] CheckinNote =
    abstract name: string with get, set
    abstract value: string with get, set

/// Represents a comment which is one of potentially many in a comment thread.
type [<AllowNullLiteral>] Comment =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// The author of the comment.
    abstract author: WebApi.IdentityRef with get, set
    /// The comment type at the time of creation.
    abstract commentType: CommentType with get, set
    /// The comment content.
    abstract content: string with get, set
    /// The comment ID. IDs start at 1 and are unique to a pull request.
    abstract id: float with get, set
    /// Whether or not this comment was soft-deleted.
    abstract isDeleted: bool with get, set
    /// The date the comment's content was last updated.
    abstract lastContentUpdatedDate: DateTime with get, set
    /// The date the comment was last updated.
    abstract lastUpdatedDate: DateTime with get, set
    /// The ID of the parent comment. This is used for replies.
    abstract parentCommentId: float with get, set
    /// The date the comment was first published.
    abstract publishedDate: DateTime with get, set
    /// A list of the users who have liked this comment.
    abstract usersLiked: ResizeArray<WebApi.IdentityRef> with get, set

/// Comment iteration context is used to identify which diff was being viewed when the thread was created.
type [<AllowNullLiteral>] CommentIterationContext =
    /// The iteration of the file on the left side of the diff when the thread was created. If this value is equal to SecondComparingIteration, then this version is the common commit between the source and target branches of the pull request.
    abstract firstComparingIteration: float with get, set
    /// The iteration of the file on the right side of the diff when the thread was created.
    abstract secondComparingIteration: float with get, set

type [<AllowNullLiteral>] CommentPosition =
    /// The line number of a thread's position. Starts at 1.
    abstract line: float with get, set
    /// The character offset of a thread's position inside of a line. Starts at 0.
    abstract offset: float with get, set

/// Represents a comment thread of a pull request. A thread contains meta data about the file it was left on along with one or more comments (an initial comment and the subsequent replies).
type [<AllowNullLiteral>] CommentThread =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// A list of the comments.
    abstract comments: ResizeArray<Comment> with get, set
    /// The comment thread id.
    abstract id: float with get, set
    /// Set of identities related to this thread
    abstract identities: CommentThreadIdentities with get, set
    /// Specify if the thread is deleted which happens when all comments are deleted.
    abstract isDeleted: bool with get, set
    /// The time this thread was last updated.
    abstract lastUpdatedDate: DateTime with get, set
    /// Optional properties associated with the thread as a collection of key-value pairs.
    abstract properties: obj option with get, set
    /// The time this thread was published.
    abstract publishedDate: DateTime with get, set
    /// The status of the comment thread.
    abstract status: CommentThreadStatus with get, set
    /// Specify thread context such as position in left/right file.
    abstract threadContext: CommentThreadContext with get, set

type [<AllowNullLiteral>] CommentThreadContext =
    /// File path relative to the root of the repository. It's up to the client to use any path format.
    abstract filePath: string with get, set
    /// Position of last character of the thread's span in left file.
    abstract leftFileEnd: CommentPosition with get, set
    /// Position of first character of the thread's span in left file.
    abstract leftFileStart: CommentPosition with get, set
    /// Position of last character of the thread's span in right file.
    abstract rightFileEnd: CommentPosition with get, set
    /// Position of first character of the thread's span in right file.
    abstract rightFileStart: CommentPosition with get, set

type [<RequireQualifiedAccess>] CommentThreadStatus =
    | Unknown = 0
    | Active = 1
    | Fixed = 2
    | WontFix = 3
    | Closed = 4
    | ByDesign = 5
    | Pending = 6

/// Comment tracking criteria is used to identify which iteration context the thread has been tracked to (if any) along with some detail about the original position and filename.
type [<AllowNullLiteral>] CommentTrackingCriteria =
    /// The iteration of the file on the left side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.
    abstract firstComparingIteration: float with get, set
    /// Original filepath the thread was created on before tracking. This will be different than the current thread filepath if the file in question was renamed in a later iteration.
    abstract origFilePath: string with get, set
    /// Original position of last character of the thread's span in left file.
    abstract origLeftFileEnd: CommentPosition with get, set
    /// Original position of first character of the thread's span in left file.
    abstract origLeftFileStart: CommentPosition with get, set
    /// Original position of last character of the thread's span in right file.
    abstract origRightFileEnd: CommentPosition with get, set
    /// Original position of first character of the thread's span in right file.
    abstract origRightFileStart: CommentPosition with get, set
    /// The iteration of the file on the right side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.
    abstract secondComparingIteration: float with get, set

type [<RequireQualifiedAccess>] CommentType =
    | Unknown = 0
    | Text = 1
    | CodeChange = 2
    | System = 3

/// Real time event (SignalR) for a completion errors on a pull request
type [<AllowNullLiteral>] CompletionErrorsEvent =
    inherit RealTimePullRequestEvent
    /// The error message associated with the completion error
    abstract errorMessage: string with get, set

/// Real time event (SignalR) for a discussions update on a pull request
type [<AllowNullLiteral>] DiscussionsUpdatedEvent =
    inherit RealTimePullRequestEvent

type [<AllowNullLiteral>] FileContentMetadata =
    abstract contentType: string with get, set
    abstract encoding: float with get, set
    abstract extension: string with get, set
    abstract fileName: string with get, set
    abstract isBinary: bool with get, set
    abstract isImage: bool with get, set
    abstract vsLink: string with get, set

/// Provides properties that describe file differences
type [<AllowNullLiteral>] FileDiff =
    /// The collection of line diff blocks
    abstract lineDiffBlocks: ResizeArray<LineDiffBlock> with get, set
    /// Original path of item if different from current path.
    abstract originalPath: string with get, set
    /// Current path of item
    abstract path: string with get, set

/// Provides parameters that describe inputs for the file diff
type [<AllowNullLiteral>] FileDiffParams =
    /// Original path of the file
    abstract originalPath: string with get, set
    /// Current path of the file
    abstract path: string with get, set

/// Provides properties that describe inputs for the file diffs
type [<AllowNullLiteral>] FileDiffsCriteria =
    /// Commit ID of the base version
    abstract baseVersionCommit: string with get, set
    /// List of parameters for each of the files for which we need to get the file diff
    abstract fileDiffParams: ResizeArray<FileDiffParams> with get, set
    /// Commit ID of the target version
    abstract targetVersionCommit: string with get, set

/// A Git annotated tag.
type [<AllowNullLiteral>] GitAnnotatedTag =
    /// The tagging Message
    abstract message: string with get, set
    /// The name of the annotated tag.
    abstract name: string with get, set
    /// The objectId (Sha1Id) of the tag.
    abstract objectId: string with get, set
    /// User info and date of tagging.
    abstract taggedBy: GitUserDate with get, set
    /// Tagged git object.
    abstract taggedObject: GitObject with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] GitAsyncOperationStatus =
    | Queued = 1
    | InProgress = 2
    | Completed = 3
    | Failed = 4
    | Abandoned = 5

type [<AllowNullLiteral>] GitAsyncRefOperation =
    abstract _links: obj option with get, set
    abstract detailedStatus: GitAsyncRefOperationDetail with get, set
    abstract parameters: GitAsyncRefOperationParameters with get, set
    abstract status: GitAsyncOperationStatus with get, set
    /// A URL that can be used to make further requests for status about the operation
    abstract url: string with get, set

/// Information about the progress of a cherry pick or revert operation.
type [<AllowNullLiteral>] GitAsyncRefOperationDetail =
    /// Indicates if there was a conflict generated when trying to cherry pick or revert the changes.
    abstract conflict: bool with get, set
    /// The current commit from the list of commits that are being cherry picked or reverted.
    abstract currentCommitId: string with get, set
    /// Detailed information about why the cherry pick or revert failed to complete.
    abstract failureMessage: string with get, set
    /// A number between 0 and 1 indicating the percent complete of the operation.
    abstract progress: float with get, set
    /// Provides a status code that indicates the reason the cherry pick or revert failed.
    abstract status: GitAsyncRefOperationFailureStatus with get, set
    /// Indicates if the operation went beyond the maximum time allowed for a cherry pick or revert operation.
    abstract timedout: bool with get, set

type [<RequireQualifiedAccess>] GitAsyncRefOperationFailureStatus =
    | None = 0
    | InvalidRefName = 1
    | RefNameConflict = 2
    | CreateBranchPermissionRequired = 3
    | WritePermissionRequired = 4
    | TargetBranchDeleted = 5
    | GitObjectTooLarge = 6
    | OperationIndentityNotFound = 7
    | AsyncOperationNotFound = 8
    | Other = 9
    | EmptyCommitterSignature = 10

/// Parameters that are provided in the request body when requesting to cherry pick or revert.
type [<AllowNullLiteral>] GitAsyncRefOperationParameters =
    /// Proposed target branch name for the cherry pick or revert operation.
    abstract generatedRefName: string with get, set
    /// The target branch for the cherry pick or revert operation.
    abstract ontoRefName: string with get, set
    /// The git repository for the cherry pick or revert operation.
    abstract repository: GitRepository with get, set
    /// Details about the source of the cherry pick or revert operation (e.g. A pull request or a specific commit).
    abstract source: GitAsyncRefOperationSource with get, set

/// GitAsyncRefOperationSource specifies the pull request or list of commits to use when making a cherry pick and revert operation request. Only one should be provided.
type [<AllowNullLiteral>] GitAsyncRefOperationSource =
    /// A list of commits to cherry pick or revert
    abstract commitList: ResizeArray<GitCommitRef> with get, set
    /// Id of the pull request to cherry pick or revert
    abstract pullRequestId: float with get, set

type [<AllowNullLiteral>] GitBaseVersionDescriptor =
    inherit GitVersionDescriptor
    /// Version string identifier (name of tag/branch, SHA1 of commit)
    abstract baseVersion: string with get, set
    /// Version options - Specify additional modifiers to version (e.g Previous)
    abstract baseVersionOptions: GitVersionOptions with get, set
    /// Version type (branch, tag, or commit). Determines how Id is interpreted
    abstract baseVersionType: GitVersionType with get, set

type [<AllowNullLiteral>] GitBlobRef =
    abstract _links: obj option with get, set
    /// SHA1 hash of git object
    abstract objectId: string with get, set
    /// Size of blob content (in bytes)
    abstract size: float with get, set
    abstract url: string with get, set

/// Ahead and behind counts for a particular ref.
type [<AllowNullLiteral>] GitBranchStats =
    /// Number of commits ahead.
    abstract aheadCount: float with get, set
    /// Number of commits behind.
    abstract behindCount: float with get, set
    /// Current commit.
    abstract commit: GitCommitRef with get, set
    /// True if this is the result for the base version.
    abstract isBaseVersion: bool with get, set
    /// Name of the ref.
    abstract name: string with get, set

type [<AllowNullLiteral>] GitChange =
    inherit Change<GitItem>
    /// ID of the change within the group of changes.
    abstract changeId: float with get, set
    /// New Content template to be used when pushing new changes.
    abstract newContentTemplate: GitTemplate with get, set
    /// Original path of item if different from current path.
    abstract originalPath: string with get, set

/// This object is returned from Cherry Pick operations and provides the id and status of the operation
type [<AllowNullLiteral>] GitCherryPick =
    inherit GitAsyncRefOperation
    abstract cherryPickId: float with get, set

type [<AllowNullLiteral>] GitCommit =
    inherit GitCommitRef
    abstract treeId: string with get, set

type [<AllowNullLiteral>] GitCommitChanges =
    abstract changeCounts: ChangeCountDictionary with get, set
    abstract changes: ResizeArray<GitChange> with get, set

type [<AllowNullLiteral>] GitCommitDiffs =
    abstract aheadCount: float with get, set
    abstract allChangesIncluded: bool with get, set
    abstract baseCommit: string with get, set
    abstract behindCount: float with get, set
    abstract changeCounts: ChangeListChangeCounts with get, set
    abstract changes: ResizeArray<GitChange> with get, set
    abstract commonCommit: string with get, set
    abstract targetCommit: string with get, set

/// Provides properties that describe a Git commit and associated metadata.
type [<AllowNullLiteral>] GitCommitRef =
    /// A collection of related REST reference links.
    abstract _links: obj option with get, set
    /// Author of the commit.
    abstract author: GitUserDate with get, set
    /// Counts of the types of changes (edits, deletes, etc.) included with the commit.
    abstract changeCounts: ChangeCountDictionary with get, set
    /// An enumeration of the changes included with the commit.
    abstract changes: ResizeArray<GitChange> with get, set
    /// Comment or message of the commit.
    abstract comment: string with get, set
    /// Indicates if the comment is truncated from the full Git commit comment message.
    abstract commentTruncated: bool with get, set
    /// ID (SHA-1) of the commit.
    abstract commitId: string with get, set
    /// Committer of the commit.
    abstract committer: GitUserDate with get, set
    /// An enumeration of the parent commit IDs for this commit.
    abstract parents: ResizeArray<string> with get, set
    /// The push associated with this commit.
    abstract push: GitPushRef with get, set
    /// Remote URL path to the commit.
    abstract remoteUrl: string with get, set
    /// A list of status metadata from services and extensions that may associate additional information to the commit.
    abstract statuses: ResizeArray<GitStatus> with get, set
    /// REST URL for this resource.
    abstract url: string with get, set
    /// A list of workitems associated with this commit.
    abstract workItems: ResizeArray<WebApi.ResourceRef> with get, set

type [<AllowNullLiteral>] GitCommitToCreate =
    abstract baseRef: GitRef with get, set
    abstract comment: string with get, set
    abstract pathActions: ResizeArray<GitPathAction> with get, set

type [<AllowNullLiteral>] GitConflict =
    abstract _links: obj option with get, set
    abstract conflictId: float with get, set
    abstract conflictPath: string with get, set
    abstract conflictType: GitConflictType with get, set
    abstract mergeBaseCommit: GitCommitRef with get, set
    abstract mergeOrigin: GitMergeOriginRef with get, set
    abstract mergeSourceCommit: GitCommitRef with get, set
    abstract mergeTargetCommit: GitCommitRef with get, set
    abstract resolutionError: GitResolutionError with get, set
    abstract resolutionStatus: GitResolutionStatus with get, set
    abstract resolvedBy: WebApi.IdentityRef with get, set
    abstract resolvedDate: DateTime with get, set
    abstract url: string with get, set

/// Data object for AddAdd conflict
type [<AllowNullLiteral>] GitConflictAddAdd =
    inherit GitConflict
    abstract resolution: GitResolutionMergeContent with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract targetBlob: GitBlobRef with get, set

/// Data object for RenameAdd conflict
type [<AllowNullLiteral>] GitConflictAddRename =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionPathConflict with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract targetBlob: GitBlobRef with get, set
    abstract targetOriginalPath: string with get, set

/// Data object for EditDelete conflict
type [<AllowNullLiteral>] GitConflictDeleteEdit =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionPickOneAction with get, set
    abstract targetBlob: GitBlobRef with get, set

/// Data object for RenameDelete conflict
type [<AllowNullLiteral>] GitConflictDeleteRename =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionPickOneAction with get, set
    abstract targetBlob: GitBlobRef with get, set
    abstract targetNewPath: string with get, set

/// Data object for FileDirectory conflict
type [<AllowNullLiteral>] GitConflictDirectoryFile =
    inherit GitConflict
    abstract resolution: GitResolutionPathConflict with get, set
    abstract sourceTree: GitTreeRef with get, set
    abstract targetBlob: GitBlobRef with get, set

/// Data object for DeleteEdit conflict
type [<AllowNullLiteral>] GitConflictEditDelete =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionPickOneAction with get, set
    abstract sourceBlob: GitBlobRef with get, set

/// Data object for EditEdit conflict
type [<AllowNullLiteral>] GitConflictEditEdit =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionMergeContent with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract targetBlob: GitBlobRef with get, set

/// Data object for DirectoryFile conflict
type [<AllowNullLiteral>] GitConflictFileDirectory =
    inherit GitConflict
    abstract resolution: GitResolutionPathConflict with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract targetTree: GitTreeRef with get, set

/// Data object for Rename1to2 conflict
type [<AllowNullLiteral>] GitConflictRename1to2 =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionRename1to2 with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract sourceNewPath: string with get, set
    abstract targetBlob: GitBlobRef with get, set
    abstract targetNewPath: string with get, set

/// Data object for Rename2to1 conflict
type [<AllowNullLiteral>] GitConflictRename2to1 =
    inherit GitConflict
    abstract resolution: GitResolutionPathConflict with get, set
    abstract sourceNewBlob: GitBlobRef with get, set
    abstract sourceOriginalBlob: GitBlobRef with get, set
    abstract sourceOriginalPath: string with get, set
    abstract targetNewBlob: GitBlobRef with get, set
    abstract targetOriginalBlob: GitBlobRef with get, set
    abstract targetOriginalPath: string with get, set

/// Data object for AddRename conflict
type [<AllowNullLiteral>] GitConflictRenameAdd =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionPathConflict with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract sourceOriginalPath: string with get, set
    abstract targetBlob: GitBlobRef with get, set

/// Data object for DeleteRename conflict
type [<AllowNullLiteral>] GitConflictRenameDelete =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract resolution: GitResolutionPickOneAction with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract sourceNewPath: string with get, set

/// Data object for RenameRename conflict
type [<AllowNullLiteral>] GitConflictRenameRename =
    inherit GitConflict
    abstract baseBlob: GitBlobRef with get, set
    abstract originalPath: string with get, set
    abstract resolution: GitResolutionMergeContent with get, set
    abstract sourceBlob: GitBlobRef with get, set
    abstract targetBlob: GitBlobRef with get, set

type [<RequireQualifiedAccess>] GitConflictType =
    | None = 0
    | AddAdd = 1
    | AddRename = 2
    | DeleteEdit = 3
    | DeleteRename = 4
    | DirectoryFile = 5
    | DirectoryChild = 6
    | EditDelete = 7
    | EditEdit = 8
    | FileDirectory = 9
    | Rename1to2 = 10
    | Rename2to1 = 11
    | RenameAdd = 12
    | RenameDelete = 13
    | RenameRename = 14

type [<AllowNullLiteral>] GitConflictUpdateResult =
    /// Conflict ID that was provided by input
    abstract conflictId: float with get, set
    /// Reason for failing
    abstract customMessage: string with get, set
    /// New state of the conflict after updating
    abstract updatedConflict: GitConflict with get, set
    /// Status of the update on the server
    abstract updateStatus: GitConflictUpdateStatus with get, set

type [<RequireQualifiedAccess>] GitConflictUpdateStatus =
    | Succeeded = 0
    | BadRequest = 1
    | InvalidResolution = 2
    | UnsupportedConflictType = 3
    | NotFound = 4

type [<AllowNullLiteral>] GitDeletedRepository =
    abstract createdDate: DateTime with get, set
    abstract deletedBy: WebApi.IdentityRef with get, set
    abstract deletedDate: DateTime with get, set
    abstract id: string with get, set
    abstract name: string with get, set
    abstract project: TfsCore.TeamProjectReference with get, set

type [<AllowNullLiteral>] GitFilePathsCollection =
    abstract commitId: string with get, set
    abstract paths: ResizeArray<string> with get, set
    abstract url: string with get, set

/// Status information about a requested fork operation.
type [<AllowNullLiteral>] GitForkOperationStatusDetail =
    /// All valid steps for the forking process
    abstract allSteps: ResizeArray<string> with get, set
    /// Index into AllSteps for the current step
    abstract currentStep: float with get, set
    /// Error message if the operation failed.
    abstract errorMessage: string with get, set

/// Information about a fork ref.
type [<AllowNullLiteral>] GitForkRef =
    inherit GitRef
    /// The repository ID of the fork.
    abstract repository: GitRepository with get, set

/// Request to sync data between two forks.
type [<AllowNullLiteral>] GitForkSyncRequest =
    /// Collection of related links
    abstract _links: obj option with get, set
    abstract detailedStatus: GitForkOperationStatusDetail with get, set
    /// Unique identifier for the operation.
    abstract operationId: float with get, set
    /// Fully-qualified identifier for the source repository.
    abstract source: GlobalGitRepositoryKey with get, set
    /// If supplied, the set of ref mappings to use when performing a "sync" or create. If missing, all refs will be synchronized.
    abstract sourceToTargetRefs: ResizeArray<SourceToTargetRef> with get, set
    abstract status: GitAsyncOperationStatus with get, set

/// Parameters for creating a fork request
type [<AllowNullLiteral>] GitForkSyncRequestParameters =
    /// Fully-qualified identifier for the source repository.
    abstract source: GlobalGitRepositoryKey with get, set
    /// If supplied, the set of ref mappings to use when performing a "sync" or create. If missing, all refs will be synchronized.
    abstract sourceToTargetRefs: ResizeArray<SourceToTargetRef> with get, set

type [<AllowNullLiteral>] GitForkTeamProjectReference =
    inherit TfsCore.TeamProjectReference

type [<RequireQualifiedAccess>] GitHistoryMode =
    | SimplifiedHistory = 0
    | FirstParent = 1
    | FullHistory = 2
    | FullHistorySimplifyMerges = 3

type [<AllowNullLiteral>] GitImportFailedEvent =
    abstract sourceRepositoryName: string with get, set
    abstract targetRepository: GitRepository with get, set

/// Parameter for creating a git import request when source is Git version control
type [<AllowNullLiteral>] GitImportGitSource =
    /// Tells if this is a sync request or not
    abstract overwrite: bool with get, set
    /// Url for the source repo
    abstract url: string with get, set

/// A request to import data from a remote source control system.
type [<AllowNullLiteral>] GitImportRequest =
    /// Links to related resources.
    abstract _links: obj option with get, set
    /// Detailed status of the import, including the current step and an error message, if applicable.
    abstract detailedStatus: GitImportStatusDetail with get, set
    /// The unique identifier for this import request.
    abstract importRequestId: float with get, set
    /// Parameters for creating the import request.
    abstract parameters: GitImportRequestParameters with get, set
    /// The target repository for this import.
    abstract repository: GitRepository with get, set
    /// Current status of the import.
    abstract status: GitAsyncOperationStatus with get, set
    /// A link back to this import request resource.
    abstract url: string with get, set

/// Parameters for creating an import request
type [<AllowNullLiteral>] GitImportRequestParameters =
    /// Option to delete service endpoint when import is done
    abstract deleteServiceEndpointAfterImportIsDone: bool with get, set
    /// Source for importing git repository
    abstract gitSource: GitImportGitSource with get, set
    /// Service Endpoint for connection to external endpoint
    abstract serviceEndpointId: string with get, set
    /// Source for importing tfvc repository
    abstract tfvcSource: GitImportTfvcSource with get, set

/// Additional status information about an import request.
type [<AllowNullLiteral>] GitImportStatusDetail =
    /// All valid steps for the import process
    abstract allSteps: ResizeArray<string> with get, set
    /// Index into AllSteps for the current step
    abstract currentStep: float with get, set
    /// Error message if the operation failed.
    abstract errorMessage: string with get, set

type [<AllowNullLiteral>] GitImportSucceededEvent =
    abstract sourceRepositoryName: string with get, set
    abstract targetRepository: GitRepository with get, set

/// Parameter for creating a git import request when source is tfvc version control
type [<AllowNullLiteral>] GitImportTfvcSource =
    /// Set true to import History, false otherwise
    abstract importHistory: bool with get, set
    /// Get history for last n days (max allowed value is 180 days)
    abstract importHistoryDurationInDays: float with get, set
    /// Path which we want to import (this can be copied from Path Control in Explorer)
    abstract path: string with get, set

type [<AllowNullLiteral>] GitItem =
    inherit ItemModel
    /// SHA1 of commit item was fetched at
    abstract commitId: string with get, set
    /// Type of object (Commit, Tree, Blob, Tag, ...)
    abstract gitObjectType: GitObjectType with get, set
    /// Shallow ref to commit that last changed this item Only populated if latestProcessedChange is requested May not be accurate if latest change is not yet cached
    abstract latestProcessedChange: GitCommitRef with get, set
    /// Git object id
    abstract objectId: string with get, set
    /// Git object id
    abstract originalObjectId: string with get, set

type [<AllowNullLiteral>] GitItemDescriptor =
    /// Path to item
    abstract path: string with get, set
    /// Specifies whether to include children (OneLevel), all descendants (Full), or None
    abstract recursionLevel: VersionControlRecursionType with get, set
    /// Version string (interpretation based on VersionType defined in subclass
    abstract version: string with get, set
    /// Version modifiers (e.g. previous)
    abstract versionOptions: GitVersionOptions with get, set
    /// How to interpret version (branch,tag,commit)
    abstract versionType: GitVersionType with get, set

type [<AllowNullLiteral>] GitItemRequestData =
    /// Whether to include metadata for all items
    abstract includeContentMetadata: bool with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    /// Collection of items to fetch, including path, version, and recursion level
    abstract itemDescriptors: ResizeArray<GitItemDescriptor> with get, set
    /// Whether to include shallow ref to commit that last changed each item
    abstract latestProcessedChange: bool with get, set

type [<AllowNullLiteral>] GitLastChangeItem =
    /// Gets or sets the commit Id this item was modified most recently for the provided version.
    abstract commitId: string with get, set
    /// Gets or sets the path of the item.
    abstract path: string with get, set

type [<AllowNullLiteral>] GitLastChangeTreeItems =
    /// The list of commits referenced by Items, if they were requested.
    abstract commits: ResizeArray<GitCommitRef> with get, set
    /// The last change of items.
    abstract items: ResizeArray<GitLastChangeItem> with get, set
    /// The last explored time, in case the result is not comprehensive. Null otherwise.
    abstract lastExploredTime: DateTime with get, set

type [<AllowNullLiteral>] GitMerge =
    inherit GitMergeParameters
    /// Reference links.
    abstract _links: obj option with get, set
    /// Detailed status of the merge operation.
    abstract detailedStatus: GitMergeOperationStatusDetail with get, set
    /// Unique identifier for the merge operation.
    abstract mergeOperationId: float with get, set
    /// Status of the merge operation.
    abstract status: GitAsyncOperationStatus with get, set

/// Status information about a requested merge operation.
type [<AllowNullLiteral>] GitMergeOperationStatusDetail =
    /// Error message if the operation failed.
    abstract failureMessage: string with get, set
    /// The commitId of the resultant merge commit.
    abstract mergeCommitId: string with get, set

type [<AllowNullLiteral>] GitMergeOriginRef =
    abstract pullRequestId: float with get, set

/// Parameters required for performing git merge.
type [<AllowNullLiteral>] GitMergeParameters =
    /// Comment or message of the commit.
    abstract comment: string with get, set
    /// An enumeration of the parent commit IDs for the merge  commit.
    abstract parents: ResizeArray<string> with get, set

/// Git object identifier and type information.
type [<AllowNullLiteral>] GitObject =
    /// Object Id (Sha1Id).
    abstract objectId: string with get, set
    /// Type of object (Commit, Tree, Blob, Tag)
    abstract objectType: GitObjectType with get, set

type [<RequireQualifiedAccess>] GitObjectType =
    | Bad = 0
    | Commit = 1
    | Tree = 2
    | Blob = 3
    | Tag = 4
    | Ext2 = 5
    | OfsDelta = 6
    | RefDelta = 7

type [<AllowNullLiteral>] GitPathAction =
    abstract action: GitPathActions with get, set
    abstract base64Content: string with get, set
    abstract path: string with get, set
    abstract rawTextContent: string with get, set
    abstract targetPath: string with get, set

type [<RequireQualifiedAccess>] GitPathActions =
    | None = 0
    | Edit = 1
    | Delete = 2
    | Add = 3
    | Rename = 4

type [<AllowNullLiteral>] GitPathToItemsCollection =
    abstract items: GitPathToItemsCollectionItems with get, set

type [<AllowNullLiteral>] GitPolicyConfigurationResponse =
    /// The HTTP client methods find the continuation token header in the response and populate this field.
    abstract continuationToken: string option with get, set
    abstract policyConfigurations: ResizeArray<Policy.PolicyConfiguration> with get, set

/// Represents all the data associated with a pull request.
type [<AllowNullLiteral>] GitPullRequest =
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// A string which uniquely identifies this pull request. To generate an artifact ID for a pull request, use this template: \`\`\`vstfs:///Git/PullRequestId/\{projectId\}/\{repositoryId\}/\{pullRequestId\}\`\`\`
    abstract artifactId: string with get, set
    /// If set, auto-complete is enabled for this pull request and this is the identity that enabled it.
    abstract autoCompleteSetBy: WebApi.IdentityRef with get, set
    /// The user who closed the pull request.
    abstract closedBy: WebApi.IdentityRef with get, set
    /// The date when the pull request was closed (completed, abandoned, or merged externally).
    abstract closedDate: DateTime with get, set
    /// The code review ID of the pull request. Used internally.
    abstract codeReviewId: float with get, set
    /// The commits contained in the pull request.
    abstract commits: ResizeArray<GitCommitRef> with get, set
    /// Options which affect how the pull request will be merged when it is completed.
    abstract completionOptions: GitPullRequestCompletionOptions with get, set
    /// The most recent date at which the pull request entered the queue to be completed. Used internally.
    abstract completionQueueTime: DateTime with get, set
    /// The identity of the user who created the pull request.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The date when the pull request was created.
    abstract creationDate: DateTime with get, set
    /// The description of the pull request.
    abstract description: string with get, set
    /// If this is a PR from a fork this will contain information about its source.
    abstract forkSource: GitForkRef with get, set
    /// Draft / WIP pull request.
    abstract isDraft: bool with get, set
    /// The labels associated with the pull request.
    abstract labels: ResizeArray<TfsCore.WebApiTagDefinition> with get, set
    /// The commit of the most recent pull request merge. If empty, the most recent merge is in progress or was unsuccessful.
    abstract lastMergeCommit: GitCommitRef with get, set
    /// The commit at the head of the source branch at the time of the last pull request merge.
    abstract lastMergeSourceCommit: GitCommitRef with get, set
    /// The commit at the head of the target branch at the time of the last pull request merge.
    abstract lastMergeTargetCommit: GitCommitRef with get, set
    /// If set, pull request merge failed for this reason.
    abstract mergeFailureMessage: string with get, set
    /// The type of failure (if any) of the pull request merge.
    abstract mergeFailureType: PullRequestMergeFailureType with get, set
    /// The ID of the job used to run the pull request merge. Used internally.
    abstract mergeId: string with get, set
    /// Options used when the pull request merge runs. These are separate from completion options since completion happens only once and a new merge will run every time the source branch of the pull request changes.
    abstract mergeOptions: GitPullRequestMergeOptions with get, set
    /// The current status of the pull request merge.
    abstract mergeStatus: PullRequestAsyncStatus with get, set
    /// The ID of the pull request.
    abstract pullRequestId: float with get, set
    /// Used internally.
    abstract remoteUrl: string with get, set
    /// The repository containing the target branch of the pull request.
    abstract repository: GitRepository with get, set
    /// A list of reviewers on the pull request along with the state of their votes.
    abstract reviewers: ResizeArray<IdentityRefWithVote> with get, set
    /// The name of the source branch of the pull request.
    abstract sourceRefName: string with get, set
    /// The status of the pull request.
    abstract status: PullRequestStatus with get, set
    /// If true, this pull request supports multiple iterations. Iteration support means individual pushes to the source branch of the pull request can be reviewed and comments left in one iteration will be tracked across future iterations.
    abstract supportsIterations: bool with get, set
    /// The name of the target branch of the pull request.
    abstract targetRefName: string with get, set
    /// The title of the pull request.
    abstract title: string with get, set
    /// Used internally.
    abstract url: string with get, set
    /// Any work item references associated with this pull request.
    abstract workItemRefs: ResizeArray<WebApi.ResourceRef> with get, set

/// Change made in a pull request.
type [<AllowNullLiteral>] GitPullRequestChange =
    inherit GitChange
    /// ID used to track files through multiple changes.
    abstract changeTrackingId: float with get, set

/// Represents a comment thread of a pull request. A thread contains meta data about the file it was left on (if any) along with one or more comments (an initial comment and the subsequent replies).
type [<AllowNullLiteral>] GitPullRequestCommentThread =
    inherit CommentThread
    /// Extended context information unique to pull requests
    abstract pullRequestThreadContext: GitPullRequestCommentThreadContext with get, set

/// Comment thread context contains details about what diffs were being viewed at the time of thread creation and whether or not the thread has been tracked from that original diff.
type [<AllowNullLiteral>] GitPullRequestCommentThreadContext =
    /// Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.
    abstract changeTrackingId: float with get, set
    /// The iteration context being viewed when the thread was created.
    abstract iterationContext: CommentIterationContext with get, set
    /// The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.
    abstract trackingCriteria: CommentTrackingCriteria with get, set

/// Preferences about how the pull request should be completed.
type [<AllowNullLiteral>] GitPullRequestCompletionOptions =
    /// If true, policies will be explicitly bypassed while the pull request is completed.
    abstract bypassPolicy: bool with get, set
    /// If policies are bypassed, this reason is stored as to why bypass was used.
    abstract bypassReason: string with get, set
    /// If true, the source branch of the pull request will be deleted after completion.
    abstract deleteSourceBranch: bool with get, set
    /// If set, this will be used as the commit message of the merge commit.
    abstract mergeCommitMessage: string with get, set
    /// Specify the strategy used to merge the pull request during completion. If MergeStrategy is not set to any value, a no-FF merge will be created if SquashMerge == false. If MergeStrategy is not set to any value, the pull request commits will be squash if SquashMerge == true. The SquashMerge member is deprecated. It is recommended that you explicitly set MergeStrategy in all cases. If an explicit value is provided for MergeStrategy, the SquashMerge member will be ignored.
    abstract mergeStrategy: GitPullRequestMergeStrategy with get, set
    /// SquashMerge is deprecated. You should explicity set the value of MergeStrategy. If MergeStrategy is set to any value, the SquashMerge value will be ignored. If MergeStrategy is not set, the merge strategy will be no-fast-forward if this flag is false, or squash if true.
    abstract squashMerge: bool with get, set
    /// If true, we will attempt to transition any work items linked to the pull request into the next logical state (i.e. Active -\> Resolved)
    abstract transitionWorkItems: bool with get, set
    /// If true, the current completion attempt was triggered via auto-complete. Used internally.
    abstract triggeredByAutoComplete: bool with get, set

/// Provides properties that describe a Git pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.
type [<AllowNullLiteral>] GitPullRequestIteration =
    /// A collection of related REST reference links.
    abstract _links: obj option with get, set
    /// Author of the pull request iteration.
    abstract author: WebApi.IdentityRef with get, set
    /// Changes included with the pull request iteration.
    abstract changeList: ResizeArray<GitPullRequestChange> with get, set
    /// The commits included with the pull request iteration.
    abstract commits: ResizeArray<GitCommitRef> with get, set
    /// The first common Git commit of the source and target refs.
    abstract commonRefCommit: GitCommitRef with get, set
    /// The creation date of the pull request iteration.
    abstract createdDate: DateTime with get, set
    /// Description of the pull request iteration.
    abstract description: string with get, set
    /// Indicates if the Commits property contains a truncated list of commits in this pull request iteration.
    abstract hasMoreCommits: bool with get, set
    /// ID of the pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.
    abstract id: float with get, set
    /// If the iteration reason is Retarget, this is the refName of the new target
    abstract newTargetRefName: string with get, set
    /// If the iteration reason is Retarget, this is the original target refName
    abstract oldTargetRefName: string with get, set
    /// The Git push information associated with this pull request iteration.
    abstract push: GitPushRef with get, set
    /// The reason for which the pull request iteration was created.
    abstract reason: IterationReason with get, set
    /// The source Git commit of this iteration.
    abstract sourceRefCommit: GitCommitRef with get, set
    /// The target Git commit of this iteration.
    abstract targetRefCommit: GitCommitRef with get, set
    /// The updated date of the pull request iteration.
    abstract updatedDate: DateTime with get, set

/// Collection of changes made in a pull request.
type [<AllowNullLiteral>] GitPullRequestIterationChanges =
    /// Changes made in the iteration.
    abstract changeEntries: ResizeArray<GitPullRequestChange> with get, set
    /// Value to specify as skip to get the next page of changes.  This will be zero if there are no more changes.
    abstract nextSkip: float with get, set
    /// Value to specify as top to get the next page of changes.  This will be zero if there are no more changes.
    abstract nextTop: float with get, set

/// The options which are used when a pull request merge is created.
type [<AllowNullLiteral>] GitPullRequestMergeOptions =
    abstract detectRenameFalsePositives: bool with get, set
    /// If true, rename detection will not be performed during the merge.
    abstract disableRenames: bool with get, set

type [<RequireQualifiedAccess>] GitPullRequestMergeStrategy =
    | NoFastForward = 1
    | Squash = 2
    | Rebase = 3
    | RebaseMerge = 4

/// A set of pull request queries and their results.
type [<AllowNullLiteral>] GitPullRequestQuery =
    /// The queries to perform.
    abstract queries: ResizeArray<GitPullRequestQueryInput> with get, set
    /// The results of the queries. This matches the QueryInputs list so Results[n] are the results of QueryInputs[n]. Each entry in the list is a dictionary of commit-\>pull requests.
    abstract results: ResizeArray<GitPullRequestQueryResults> with get, set

/// Pull request query input parameters.
type [<AllowNullLiteral>] GitPullRequestQueryInput =
    /// The list of commit IDs to search for.
    abstract items: ResizeArray<string> with get, set
    /// The type of query to perform.
    abstract ``type``: GitPullRequestQueryType with get, set

type [<RequireQualifiedAccess>] GitPullRequestQueryType =
    | NotSet = 0
    | LastMergeCommit = 1
    | Commit = 2

type [<AllowNullLiteral>] GitPullRequestReviewFileContentInfo =
    abstract _links: obj option with get, set
    /// The file change path.
    abstract path: string with get, set
    /// Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.
    abstract shA1Hash: string with get, set

type [<RequireQualifiedAccess>] GitPullRequestReviewFileType =
    | ChangeEntry = 0
    | Attachment = 1

/// Pull requests can be searched for matching this criteria.
type [<AllowNullLiteral>] GitPullRequestSearchCriteria =
    /// If set, search for pull requests that were created by this identity.
    abstract creatorId: string with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    /// If set, search for pull requests whose target branch is in this repository.
    abstract repositoryId: string with get, set
    /// If set, search for pull requests that have this identity as a reviewer.
    abstract reviewerId: string with get, set
    /// If set, search for pull requests from this branch.
    abstract sourceRefName: string with get, set
    /// If set, search for pull requests whose source branch is in this repository.
    abstract sourceRepositoryId: string with get, set
    /// If set, search for pull requests that are in this state. Defaults to Active if unset.
    abstract status: PullRequestStatus with get, set
    /// If set, search for pull requests into this branch.
    abstract targetRefName: string with get, set

/// This class contains the metadata of a service/extension posting pull request status. Status can be associated with a pull request or an iteration.
type [<AllowNullLiteral>] GitPullRequestStatus =
    inherit GitStatus
    /// ID of the iteration to associate status with. Minimum value is 1.
    abstract iterationId: float with get, set
    /// Custom properties of the status.
    abstract properties: obj option with get, set

type [<AllowNullLiteral>] GitPush =
    inherit GitPushRef
    abstract commits: ResizeArray<GitCommitRef> with get, set
    abstract refUpdates: ResizeArray<GitRefUpdate> with get, set
    abstract repository: GitRepository with get, set

type [<AllowNullLiteral>] GitPushEventData =
    abstract afterId: string with get, set
    abstract beforeId: string with get, set
    abstract branch: string with get, set
    abstract commits: ResizeArray<GitCommit> with get, set
    abstract repository: GitRepository with get, set

type [<AllowNullLiteral>] GitPushRef =
    abstract _links: obj option with get, set
    abstract date: DateTime with get, set
    abstract pushCorrelationId: string with get, set
    abstract pushedBy: WebApi.IdentityRef with get, set
    abstract pushId: float with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] GitPushSearchCriteria =
    abstract fromDate: DateTime with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    abstract includeRefUpdates: bool with get, set
    abstract pusherId: string with get, set
    abstract refName: string with get, set
    abstract toDate: DateTime with get, set

type [<AllowNullLiteral>] GitQueryBranchStatsCriteria =
    abstract baseCommit: GitVersionDescriptor with get, set
    abstract targetCommits: ResizeArray<GitVersionDescriptor> with get, set

type [<AllowNullLiteral>] GitQueryCommitsCriteria =
    /// Number of entries to skip
    abstract ``$skip``: float with get, set
    /// Maximum number of entries to retrieve
    abstract ``$top``: float with get, set
    /// Alias or display name of the author
    abstract author: string with get, set
    /// Only applicable when ItemVersion specified. If provided, start walking history starting at this commit.
    abstract compareVersion: GitVersionDescriptor with get, set
    /// Only applies when an itemPath is specified. This determines whether to exclude delete entries of the specified path.
    abstract excludeDeletes: bool with get, set
    /// If provided, a lower bound for filtering commits alphabetically
    abstract fromCommitId: string with get, set
    /// If provided, only include history entries created after this date (string)
    abstract fromDate: string with get, set
    /// What Git history mode should be used. This only applies to the search criteria when Ids = null and an itemPath is specified.
    abstract historyMode: GitHistoryMode with get, set
    /// If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.
    abstract ids: ResizeArray<string> with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    /// Whether to include the push information
    abstract includePushData: bool with get, set
    /// Whether to include the image Url for committers and authors
    abstract includeUserImageUrl: bool with get, set
    /// Whether to include linked work items
    abstract includeWorkItems: bool with get, set
    /// Path of item to search under
    abstract itemPath: string with get, set
    /// If provided, identifies the commit or branch to search
    abstract itemVersion: GitVersionDescriptor with get, set
    /// If provided, an upper bound for filtering commits alphabetically
    abstract toCommitId: string with get, set
    /// If provided, only include history entries created before this date (string)
    abstract toDate: string with get, set
    /// Alias or display name of the committer
    abstract user: string with get, set

type [<AllowNullLiteral>] GitQueryRefsCriteria =
    /// List of commit Ids to be searched
    abstract commitIds: ResizeArray<string> with get, set
    /// List of complete or partial names for refs to be searched
    abstract refNames: ResizeArray<string> with get, set
    /// Type of search on refNames, if provided
    abstract searchType: GitRefSearchType with get, set

type [<AllowNullLiteral>] GitRecycleBinRepositoryDetails =
    /// Setting to false will undo earlier deletion and restore the repository.
    abstract deleted: bool with get, set

type [<AllowNullLiteral>] GitRef =
    abstract _links: obj option with get, set
    abstract creator: WebApi.IdentityRef with get, set
    abstract isLocked: bool with get, set
    abstract isLockedBy: WebApi.IdentityRef with get, set
    abstract name: string with get, set
    abstract objectId: string with get, set
    abstract peeledObjectId: string with get, set
    abstract statuses: ResizeArray<GitStatus> with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] GitRefFavorite =
    abstract _links: obj option with get, set
    abstract id: float with get, set
    abstract identityId: string with get, set
    abstract name: string with get, set
    abstract repositoryId: string with get, set
    abstract ``type``: RefFavoriteType with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] GitRefSearchType =
    | Exact = 0
    | StartsWith = 1
    | Contains = 2

type [<AllowNullLiteral>] GitRefUpdate =
    abstract isLocked: bool with get, set
    abstract name: string with get, set
    abstract newObjectId: string with get, set
    abstract oldObjectId: string with get, set
    abstract repositoryId: string with get, set

type [<RequireQualifiedAccess>] GitRefUpdateMode =
    | BestEffort = 0
    | AllOrNone = 1

type [<AllowNullLiteral>] GitRefUpdateResult =
    /// Custom message for the result object For instance, Reason for failing.
    abstract customMessage: string with get, set
    /// Whether the ref is locked or not
    abstract isLocked: bool with get, set
    /// Ref name
    abstract name: string with get, set
    /// New object ID
    abstract newObjectId: string with get, set
    /// Old object ID
    abstract oldObjectId: string with get, set
    /// Name of the plugin that rejected the updated.
    abstract rejectedBy: string with get, set
    /// Repository ID
    abstract repositoryId: string with get, set
    /// True if the ref update succeeded, false otherwise
    abstract success: bool with get, set
    /// Status of the update from the TFS server.
    abstract updateStatus: GitRefUpdateStatus with get, set

type [<RequireQualifiedAccess>] GitRefUpdateStatus =
    | Succeeded = 0
    | ForcePushRequired = 1
    | StaleOldObjectId = 2
    | InvalidRefName = 3
    | Unprocessed = 4
    | UnresolvableToCommit = 5
    | WritePermissionRequired = 6
    | ManageNotePermissionRequired = 7
    | CreateBranchPermissionRequired = 8
    | CreateTagPermissionRequired = 9
    | RejectedByPlugin = 10
    | Locked = 11
    | RefNameConflict = 12
    | RejectedByPolicy = 13
    | SucceededNonExistentRef = 14
    | SucceededCorruptRef = 15

type [<AllowNullLiteral>] GitRepository =
    abstract _links: obj option with get, set
    abstract defaultBranch: string with get, set
    abstract id: string with get, set
    /// True if the repository was created as a fork
    abstract isFork: bool with get, set
    abstract name: string with get, set
    abstract parentRepository: GitRepositoryRef with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract remoteUrl: string with get, set
    /// Compressed size (bytes) of the repository.
    abstract size: float with get, set
    abstract sshUrl: string with get, set
    abstract url: string with get, set
    abstract validRemoteUrls: ResizeArray<string> with get, set
    abstract webUrl: string with get, set

type [<AllowNullLiteral>] GitRepositoryCreateOptions =
    abstract name: string with get, set
    abstract parentRepository: GitRepositoryRef with get, set
    abstract project: TfsCore.TeamProjectReference with get, set

type [<AllowNullLiteral>] GitRepositoryRef =
    /// Team Project Collection where this Fork resides
    abstract collection: TfsCore.TeamProjectCollectionReference with get, set
    abstract id: string with get, set
    /// True if the repository was created as a fork
    abstract isFork: bool with get, set
    abstract name: string with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract remoteUrl: string with get, set
    abstract sshUrl: string with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] GitRepositoryStats =
    abstract activePullRequestsCount: float with get, set
    abstract branchesCount: float with get, set
    abstract commitsCount: float with get, set
    abstract repositoryId: string with get, set

type [<AllowNullLiteral>] GitResolution =
    /// User who created the resolution.
    abstract author: WebApi.IdentityRef with get, set

type [<RequireQualifiedAccess>] GitResolutionError =
    | None = 0
    | MergeContentNotFound = 1
    | PathInUse = 2
    | InvalidPath = 3
    | UnknownAction = 4
    | UnknownMergeType = 5
    | OtherError = 255

type [<AllowNullLiteral>] GitResolutionMergeContent =
    inherit GitResolution
    abstract mergeType: GitResolutionMergeType with get, set
    abstract userMergedBlob: GitBlobRef with get, set
    abstract userMergedContent: ResizeArray<float> with get, set

type [<RequireQualifiedAccess>] GitResolutionMergeType =
    | Undecided = 0
    | TakeSourceContent = 1
    | TakeTargetContent = 2
    | AutoMerged = 3
    | UserMerged = 4

type [<AllowNullLiteral>] GitResolutionPathConflict =
    inherit GitResolution
    abstract action: GitResolutionPathConflictAction with get, set
    abstract renamePath: string with get, set

type [<RequireQualifiedAccess>] GitResolutionPathConflictAction =
    | Undecided = 0
    | KeepSourceRenameTarget = 1
    | KeepSourceDeleteTarget = 2
    | KeepTargetRenameSource = 3
    | KeepTargetDeleteSource = 4

type [<AllowNullLiteral>] GitResolutionPickOneAction =
    inherit GitResolution
    abstract action: GitResolutionWhichAction with get, set

type [<AllowNullLiteral>] GitResolutionRename1to2 =
    inherit GitResolutionMergeContent
    abstract action: GitResolutionRename1to2Action with get, set

type [<RequireQualifiedAccess>] GitResolutionRename1to2Action =
    | Undecided = 0
    | KeepSourcePath = 1
    | KeepTargetPath = 2
    | KeepBothFiles = 3

type [<RequireQualifiedAccess>] GitResolutionStatus =
    | Unresolved = 0
    | PartiallyResolved = 1
    | Resolved = 2

type [<RequireQualifiedAccess>] GitResolutionWhichAction =
    | Undecided = 0
    | PickSourceAction = 1
    | PickTargetAction = 2

type [<AllowNullLiteral>] GitRevert =
    inherit GitAsyncRefOperation
    abstract revertId: float with get, set

/// This class contains the metadata of a service/extension posting a status.
type [<AllowNullLiteral>] GitStatus =
    /// Reference links.
    abstract _links: obj option with get, set
    /// Context of the status.
    abstract context: GitStatusContext with get, set
    /// Identity that created the status.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Creation date and time of the status.
    abstract creationDate: DateTime with get, set
    /// Status description. Typically describes current state of the status.
    abstract description: string with get, set
    /// Status identifier.
    abstract id: float with get, set
    /// State of the status.
    abstract state: GitStatusState with get, set
    /// URL with status details.
    abstract targetUrl: string with get, set
    /// Last update date and time of the status.
    abstract updatedDate: DateTime with get, set

/// Status context that uniquely identifies the status.
type [<AllowNullLiteral>] GitStatusContext =
    /// Genre of the status. Typically name of the service/tool generating the status, can be empty.
    abstract genre: string with get, set
    /// Name identifier of the status, cannot be null or empty.
    abstract name: string with get, set

type [<RequireQualifiedAccess>] GitStatusState =
    | NotSet = 0
    | Pending = 1
    | Succeeded = 2
    | Failed = 3
    | Error = 4
    | NotApplicable = 5

/// An object describing the git suggestion.  Git suggestions are currently limited to suggested pull requests.
type [<AllowNullLiteral>] GitSuggestion =
    /// Specific properties describing the suggestion.
    abstract properties: GitSuggestionProperties with get, set
    /// The type of suggestion (e.g. pull request).
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] GitTargetVersionDescriptor =
    inherit GitVersionDescriptor
    /// Version string identifier (name of tag/branch, SHA1 of commit)
    abstract targetVersion: string with get, set
    /// Version options - Specify additional modifiers to version (e.g Previous)
    abstract targetVersionOptions: GitVersionOptions with get, set
    /// Version type (branch, tag, or commit). Determines how Id is interpreted
    abstract targetVersionType: GitVersionType with get, set

type [<AllowNullLiteral>] GitTemplate =
    /// Name of the Template
    abstract name: string with get, set
    /// Type of the Template
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] GitTreeDiff =
    /// ObjectId of the base tree of this diff.
    abstract baseTreeId: string with get, set
    /// List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yeild more diff entries. If the continuation token is not returned all the diff entries have been included in this response.
    abstract diffEntries: ResizeArray<GitTreeDiffEntry> with get, set
    /// ObjectId of the target tree of this diff.
    abstract targetTreeId: string with get, set
    /// REST Url to this resource.
    abstract url: string with get, set

type [<AllowNullLiteral>] GitTreeDiffEntry =
    /// SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.
    abstract baseObjectId: string with get, set
    /// Type of change that affected this entry.
    abstract changeType: VersionControlChangeType with get, set
    /// Object type of the tree entry. Blob, Tree or Commit("submodule")
    abstract objectType: GitObjectType with get, set
    /// Relative path in base and target trees.
    abstract path: string with get, set
    /// SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.
    abstract targetObjectId: string with get, set

type [<AllowNullLiteral>] GitTreeDiffResponse =
    /// The HTTP client methods find the continuation token header in the response and populate this field.
    abstract continuationToken: ResizeArray<string> with get, set
    abstract treeDiff: GitTreeDiff with get, set

type [<AllowNullLiteral>] GitTreeEntryRef =
    /// Blob or tree
    abstract gitObjectType: GitObjectType with get, set
    /// Mode represented as octal string
    abstract mode: string with get, set
    /// SHA1 hash of git object
    abstract objectId: string with get, set
    /// Path relative to parent tree object
    abstract relativePath: string with get, set
    /// Size of content
    abstract size: float with get, set
    /// url to retrieve tree or blob
    abstract url: string with get, set

type [<AllowNullLiteral>] GitTreeRef =
    abstract _links: obj option with get, set
    /// SHA1 hash of git object
    abstract objectId: string with get, set
    /// Sum of sizes of all children
    abstract size: float with get, set
    /// Blobs and trees under this tree
    abstract treeEntries: ResizeArray<GitTreeEntryRef> with get, set
    /// Url to tree
    abstract url: string with get, set

/// User info and date for Git operations.
type [<AllowNullLiteral>] GitUserDate =
    /// Date of the Git operation.
    abstract date: DateTime with get, set
    /// Email address of the user performing the Git operation.
    abstract email: string with get, set
    /// Url for the user's avatar.
    abstract imageUrl: string with get, set
    /// Name of the user performing the Git operation.
    abstract name: string with get, set

type [<AllowNullLiteral>] GitVersionDescriptor =
    /// Version string identifier (name of tag/branch, SHA1 of commit)
    abstract version: string with get, set
    /// Version options - Specify additional modifiers to version (e.g Previous)
    abstract versionOptions: GitVersionOptions with get, set
    /// Version type (branch, tag, or commit). Determines how Id is interpreted
    abstract versionType: GitVersionType with get, set

type [<RequireQualifiedAccess>] GitVersionOptions =
    | None = 0
    | PreviousChange = 1
    | FirstParent = 2

type [<RequireQualifiedAccess>] GitVersionType =
    | Branch = 0
    | Tag = 1
    | Commit = 2

/// Globally unique key for a repository.
type [<AllowNullLiteral>] GlobalGitRepositoryKey =
    /// Team Project Collection ID of the collection for the repository.
    abstract collectionId: string with get, set
    /// Team Project ID of the project for the repository.
    abstract projectId: string with get, set
    /// ID of the repository.
    abstract repositoryId: string with get, set

type [<AllowNullLiteral>] HistoryEntry<'T> =
    /// The Change list (changeset/commit/shelveset) for this point in history
    abstract changeList: ChangeList<'T> with get, set
    /// The change made to the item from this change list (only relevant for File history, not folders)
    abstract itemChangeType: VersionControlChangeType with get, set
    /// The path of the item at this point in history (only relevant for File history, not folders)
    abstract serverItem: string with get, set

/// Identity information including a vote on a pull request.
type [<AllowNullLiteral>] IdentityRefWithVote =
    inherit WebApi.IdentityRef
    /// Indicates if this reviewer is flagged for attention on this pull request.
    abstract isFlagged: bool with get, set
    /// Indicates if this is a required reviewer for this pull request. \<br /\> Branches can have policies that require particular reviewers are required for pull requests.
    abstract isRequired: bool with get, set
    /// URL to retrieve information about this identity
    abstract reviewerUrl: string with get, set
    /// Vote on a pull request:\<br /\> 10 - approved 5 - approved with suggestions 0 - no vote -5 - waiting for author -10 - rejected
    abstract vote: float with get, set
    /// Groups or teams that that this reviewer contributed to. \<br /\> Groups and teams can be reviewers on pull requests but can not vote directly.  When a member of the group or team votes, that vote is rolled up into the group or team vote.  VotedFor is a list of such votes.
    abstract votedFor: ResizeArray<IdentityRefWithVote> with get, set

type [<AllowNullLiteral>] ImportRepositoryValidation =
    abstract gitSource: GitImportGitSource with get, set
    abstract password: string with get, set
    abstract tfvcSource: GitImportTfvcSource with get, set
    abstract username: string with get, set

type [<AllowNullLiteral>] IncludedGitCommit =
    abstract commitId: string with get, set
    abstract commitTime: DateTime with get, set
    abstract parentCommitIds: ResizeArray<string> with get, set
    abstract repositoryId: string with get, set

/// Real time event (SignalR) for IsDraft update on a pull request
type [<AllowNullLiteral>] IsDraftUpdatedEvent =
    inherit RealTimePullRequestEvent

type [<AllowNullLiteral>] ItemContent =
    abstract content: string with get, set
    abstract contentType: ItemContentType with get, set

type [<RequireQualifiedAccess>] ItemContentType =
    | RawText = 0
    | Base64Encoded = 1

/// Optional details to include when returning an item model
type [<AllowNullLiteral>] ItemDetailsOptions =
    /// If true, include metadata about the file type
    abstract includeContentMetadata: bool with get, set
    /// Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items
    abstract recursionLevel: VersionControlRecursionType with get, set

type [<AllowNullLiteral>] ItemModel =
    abstract _links: obj option with get, set
    abstract content: string with get, set
    abstract contentMetadata: FileContentMetadata with get, set
    abstract isFolder: bool with get, set
    abstract isSymLink: bool with get, set
    abstract path: string with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] IterationReason =
    | Push = 0
    | ForcePush = 1
    | Create = 2
    | Rebase = 4
    | Unknown = 8
    | Retarget = 16

/// Real time event (SignalR) for updated labels on a pull request
type [<AllowNullLiteral>] LabelsUpdatedEvent =
    inherit RealTimePullRequestEvent

/// The class to represent the line diff block
type [<AllowNullLiteral>] LineDiffBlock =
    /// Type of change that was made to the block.
    abstract changeType: LineDiffBlockChangeType with get, set
    /// Line number where this block starts in modified file.
    abstract modifiedLineNumberStart: float with get, set
    /// Count of lines in this block in modified file.
    abstract modifiedLinesCount: float with get, set
    /// Line number where this block starts in original file.
    abstract originalLineNumberStart: float with get, set
    /// Count of lines in this block in original file.
    abstract originalLinesCount: float with get, set

type [<RequireQualifiedAccess>] LineDiffBlockChangeType =
    | None = 0
    | Add = 1
    | Delete = 2
    | Edit = 3

/// Real time event (SignalR) for a merge completed on a pull request
type [<AllowNullLiteral>] MergeCompletedEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for a policy evaluation update on a pull request
type [<AllowNullLiteral>] PolicyEvaluationUpdatedEvent =
    inherit RealTimePullRequestEvent

type [<RequireQualifiedAccess>] PullRequestAsyncStatus =
    | NotSet = 0
    | Queued = 1
    | Conflicts = 2
    | Succeeded = 3
    | RejectedByPolicy = 4
    | Failure = 5

/// Real time event (SignalR) for pull request creation
type [<AllowNullLiteral>] PullRequestCreatedEvent =
    inherit RealTimePullRequestEvent

type [<RequireQualifiedAccess>] PullRequestMergeFailureType =
    | None = 0
    | Unknown = 1
    | CaseSensitive = 2
    | ObjectTooLarge = 3

type [<RequireQualifiedAccess>] PullRequestStatus =
    | NotSet = 0
    | Active = 1
    | Abandoned = 2
    | Completed = 3
    | All = 4

/// Initial config contract sent to extensions creating tabs on the pull request page
type [<AllowNullLiteral>] PullRequestTabExtensionConfig =
    abstract pullRequestId: float with get, set
    abstract repositoryId: string with get, set

/// Base contract for a real time pull request event (SignalR)
type [<AllowNullLiteral>] RealTimePullRequestEvent =
    /// The id of this event. Can be used to track send/receive state between client and server.
    abstract eventId: string with get, set
    /// The id of the pull request this event was generated for.
    abstract pullRequestId: float with get, set

type [<RequireQualifiedAccess>] RefFavoriteType =
    | Invalid = 0
    | Folder = 1
    | Ref = 2

/// Real time event (SignalR) for when the target branch of a pull request is changed
type [<AllowNullLiteral>] RetargetEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for an update to reviewers on a pull request
type [<AllowNullLiteral>] ReviewersUpdatedEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for reviewer votes being reset on a pull request
type [<AllowNullLiteral>] ReviewersVotesResetEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for a reviewer vote update on a pull request
type [<AllowNullLiteral>] ReviewerVoteUpdatedEvent =
    inherit RealTimePullRequestEvent

/// Context used while sharing a pull request.
type [<AllowNullLiteral>] ShareNotificationContext =
    /// Optional user note or message.
    abstract message: string with get, set
    /// Identities of users who will receive a share notification.
    abstract receivers: ResizeArray<WebApi.IdentityRef> with get, set

type [<AllowNullLiteral>] SourceToTargetRef =
    /// The source ref to copy. For example, refs/heads/master.
    abstract sourceRef: string with get, set
    /// The target ref to update. For example, refs/heads/master.
    abstract targetRef: string with get, set

/// Real time event (SignalR) for an added status on a pull request
type [<AllowNullLiteral>] StatusAddedEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for deleted statuses on a pull request
type [<AllowNullLiteral>] StatusesDeletedEvent =
    inherit RealTimePullRequestEvent

/// Real time event (SignalR) for a status update on a pull request
type [<AllowNullLiteral>] StatusUpdatedEvent =
    inherit RealTimePullRequestEvent

/// Represents a Supported IDE entity.
type [<AllowNullLiteral>] SupportedIde =
    /// The download URL for the IDE.
    abstract downloadUrl: string with get, set
    /// The type of the IDE.
    abstract ideType: SupportedIdeType with get, set
    /// The name of the IDE.
    abstract name: string with get, set
    /// The URL to open the protocol handler for the IDE.
    abstract protocolHandlerUrl: string with get, set
    /// A list of SupportedPlatforms.
    abstract supportedPlatforms: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] SupportedIdeType =
    | Unknown = 0
    | AndroidStudio = 1
    | AppCode = 2
    | CLion = 3
    | DataGrip = 4
    | Eclipse = 13
    | IntelliJ = 5
    | MPS = 6
    | PhpStorm = 7
    | PyCharm = 8
    | RubyMine = 9
    | Tower = 10
    | VisualStudio = 11
    | VSCode = 14
    | WebStorm = 12

/// Class representing a branch object.
type [<AllowNullLiteral>] TfvcBranch =
    inherit TfvcBranchRef
    /// List of children for the branch.
    abstract children: ResizeArray<TfvcBranch> with get, set
    /// List of branch mappings.
    abstract mappings: ResizeArray<TfvcBranchMapping> with get, set
    /// Path of the branch's parent.
    abstract parent: TfvcShallowBranchRef with get, set
    /// List of paths of the related branches.
    abstract relatedBranches: ResizeArray<TfvcShallowBranchRef> with get, set

/// A branch mapping.
type [<AllowNullLiteral>] TfvcBranchMapping =
    /// Depth of the branch.
    abstract depth: string with get, set
    /// Server item for the branch.
    abstract serverItem: string with get, set
    /// Type of the branch.
    abstract ``type``: string with get, set

/// Metadata for a branchref.
type [<AllowNullLiteral>] TfvcBranchRef =
    inherit TfvcShallowBranchRef
    /// A collection of REST reference links.
    abstract _links: obj option with get, set
    /// Creation date of the branch.
    abstract createdDate: DateTime with get, set
    /// Branch description.
    abstract description: string with get, set
    /// Is the branch deleted?
    abstract isDeleted: bool with get, set
    /// Alias or display name of user
    abstract owner: WebApi.IdentityRef with get, set
    /// URL to retrieve the item.
    abstract url: string with get, set

/// A change.
type [<AllowNullLiteral>] TfvcChange =
    inherit Change<TfvcItem>
    /// List of merge sources in case of rename or branch creation.
    abstract mergeSources: ResizeArray<TfvcMergeSource> with get, set
    /// Version at which a (shelved) change was pended against
    abstract pendingVersion: float with get, set

/// A collection of changes.
type [<AllowNullLiteral>] TfvcChangeset =
    inherit TfvcChangesetRef
    /// Changeset Account Id also known as Organization Id.
    abstract accountId: string with get, set
    /// List of associated changes.
    abstract changes: ResizeArray<TfvcChange> with get, set
    /// List of Checkin Notes for the changeset.
    abstract checkinNotes: ResizeArray<CheckinNote> with get, set
    /// Changeset collection Id.
    abstract collectionId: string with get, set
    /// True if more changes are available.
    abstract hasMoreChanges: bool with get, set
    /// Policy Override for the changeset.
    abstract policyOverride: TfvcPolicyOverrideInfo with get, set
    /// Team Project Ids for the changeset.
    abstract teamProjectIds: ResizeArray<string> with get, set
    /// List of work items associated with the changeset.
    abstract workItems: ResizeArray<AssociatedWorkItem> with get, set

/// Metadata for a changeset.
type [<AllowNullLiteral>] TfvcChangesetRef =
    /// A collection of REST reference links.
    abstract _links: obj option with get, set
    /// Alias or display name of user.
    abstract author: WebApi.IdentityRef with get, set
    /// Changeset Id.
    abstract changesetId: float with get, set
    /// Alias or display name of user.
    abstract checkedInBy: WebApi.IdentityRef with get, set
    /// Comment for the changeset.
    abstract comment: string with get, set
    /// Was the Comment result truncated?
    abstract commentTruncated: bool with get, set
    /// Creation date of the changeset.
    abstract createdDate: DateTime with get, set
    /// URL to retrieve the item.
    abstract url: string with get, set

/// Criteria used in a search for change lists.
type [<AllowNullLiteral>] TfvcChangesetSearchCriteria =
    /// Alias or display name of user who made the changes.
    abstract author: string with get, set
    /// Whether or not to follow renames for the given item being queried.
    abstract followRenames: bool with get, set
    /// If provided, only include changesets created after this date (string).
    abstract fromDate: string with get, set
    /// If provided, only include changesets after this changesetID.
    abstract fromId: float with get, set
    /// Whether to include the _links field on the shallow references.
    abstract includeLinks: bool with get, set
    /// Path of item to search under.
    abstract itemPath: string with get, set
    abstract mappings: ResizeArray<TfvcMappingFilter> with get, set
    /// If provided, only include changesets created before this date (string).
    abstract toDate: string with get, set
    /// If provided, a version descriptor for the latest change list to include.
    abstract toId: float with get, set

/// Request body for Get batched changesets.
type [<AllowNullLiteral>] TfvcChangesetsRequestData =
    /// List of changeset Ids.
    abstract changesetIds: ResizeArray<float> with get, set
    /// Max length of the comment.
    abstract commentLength: float with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set

type [<AllowNullLiteral>] TfvcCheckinEventData =
    abstract changeset: TfvcChangeset with get, set
    abstract project: TfsCore.TeamProjectReference with get, set

type [<AllowNullLiteral>] TfvcHistoryEntry =
    inherit HistoryEntry<TfvcItem>
    /// The encoding of the item at this point in history (only relevant for File history, not folders)
    abstract encoding: float with get, set
    /// The file id of the item at this point in history (only relevant for File history, not folders)
    abstract fileId: float with get, set

/// Metadata for an item.
type [<AllowNullLiteral>] TfvcItem =
    inherit ItemModel
    /// Item changed datetime.
    abstract changeDate: DateTime with get, set
    /// Greater than 0 if item is deleted.
    abstract deletionId: float with get, set
    /// File encoding from database, -1 represents binary.
    abstract encoding: float with get, set
    /// MD5 hash as a base 64 string, applies to files only.
    abstract hashValue: string with get, set
    /// True if item is a branch.
    abstract isBranch: bool with get, set
    /// True if there is a change pending.
    abstract isPendingChange: bool with get, set
    /// The size of the file, if applicable.
    abstract size: float with get, set
    /// Changeset version Id.
    abstract version: float with get, set

/// Item path and Version descriptor properties
type [<AllowNullLiteral>] TfvcItemDescriptor =
    /// Item path.
    abstract path: string with get, set
    /// Defaults to OneLevel.
    abstract recursionLevel: VersionControlRecursionType with get, set
    /// Specify the desired version, can be null or empty string only if VersionType is latest or tip.
    abstract version: string with get, set
    /// Defaults to None.
    abstract versionOption: TfvcVersionOption with get, set
    /// Defaults to Latest.
    abstract versionType: TfvcVersionType with get, set

/// Metadata for an item including the previous hash value for files.
type [<AllowNullLiteral>] TfvcItemPreviousHash =
    inherit TfvcItem
    /// MD5 hash as a base 64 string, applies to files only.
    abstract previousHashValue: string with get, set

/// Request body used by Get Items Batch
type [<AllowNullLiteral>] TfvcItemRequestData =
    /// If true, include metadata about the file type
    abstract includeContentMetadata: bool with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    abstract itemDescriptors: ResizeArray<TfvcItemDescriptor> with get, set

/// Metadata for a label.
type [<AllowNullLiteral>] TfvcLabel =
    inherit TfvcLabelRef
    /// List of items.
    abstract items: ResizeArray<TfvcItem> with get, set

/// Metadata for a Label.
type [<AllowNullLiteral>] TfvcLabelRef =
    /// Collection of reference links.
    abstract _links: obj option with get, set
    /// Label description.
    abstract description: string with get, set
    /// Label Id.
    abstract id: float with get, set
    /// Label scope.
    abstract labelScope: string with get, set
    /// Last modified datetime for the label.
    abstract modifiedDate: DateTime with get, set
    /// Label name.
    abstract name: string with get, set
    /// Label owner.
    abstract owner: WebApi.IdentityRef with get, set
    /// Label Url.
    abstract url: string with get, set

type [<AllowNullLiteral>] TfvcLabelRequestData =
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    abstract itemLabelFilter: string with get, set
    abstract labelScope: string with get, set
    abstract maxItemCount: float with get, set
    abstract name: string with get, set
    abstract owner: string with get, set

/// MappingFilter can be used to include or exclude specific paths.
type [<AllowNullLiteral>] TfvcMappingFilter =
    /// True if ServerPath should be excluded.
    abstract exclude: bool with get, set
    /// Path to be included or excluded.
    abstract serverPath: string with get, set

type [<AllowNullLiteral>] TfvcMergeSource =
    /// Indicates if this a rename source. If false, it is a merge source.
    abstract isRename: bool with get, set
    /// The server item of the merge source.
    abstract serverItem: string with get, set
    /// Start of the version range.
    abstract versionFrom: float with get, set
    /// End of the version range.
    abstract versionTo: float with get, set

/// Policy failure information.
type [<AllowNullLiteral>] TfvcPolicyFailureInfo =
    /// Policy failure message.
    abstract message: string with get, set
    /// Name of the policy that failed.
    abstract policyName: string with get, set

/// Information on the policy override.
type [<AllowNullLiteral>] TfvcPolicyOverrideInfo =
    /// Overidden policy comment.
    abstract comment: string with get, set
    /// Information on the failed policy that was overridden.
    abstract policyFailures: ResizeArray<TfvcPolicyFailureInfo> with get, set

/// This is the shallow branchref class.
type [<AllowNullLiteral>] TfvcShallowBranchRef =
    /// Path for the branch.
    abstract path: string with get, set

/// Metadata for a shelveset.
type [<AllowNullLiteral>] TfvcShelveset =
    inherit TfvcShelvesetRef
    /// List of changes.
    abstract changes: ResizeArray<TfvcChange> with get, set
    /// List of checkin notes.
    abstract notes: ResizeArray<CheckinNote> with get, set
    /// Policy override information if applicable.
    abstract policyOverride: TfvcPolicyOverrideInfo with get, set
    /// List of associated workitems.
    abstract workItems: ResizeArray<AssociatedWorkItem> with get, set

/// Metadata for a shallow shelveset.
type [<AllowNullLiteral>] TfvcShelvesetRef =
    /// List of reference links for the shelveset.
    abstract _links: obj option with get, set
    /// Shelveset comment.
    abstract comment: string with get, set
    /// Shelveset comment truncated as applicable.
    abstract commentTruncated: bool with get, set
    /// Shelveset create date.
    abstract createdDate: DateTime with get, set
    /// Shelveset Id.
    abstract id: string with get, set
    /// Shelveset name.
    abstract name: string with get, set
    /// Shelveset Owner.
    abstract owner: WebApi.IdentityRef with get, set
    /// Shelveset Url.
    abstract url: string with get, set

type [<AllowNullLiteral>] TfvcShelvesetRequestData =
    /// Whether to include policyOverride and notes Only applies when requesting a single deep shelveset
    abstract includeDetails: bool with get, set
    /// Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.
    abstract includeLinks: bool with get, set
    /// Whether to include workItems
    abstract includeWorkItems: bool with get, set
    /// Max number of changes to include
    abstract maxChangeCount: float with get, set
    /// Max length of comment
    abstract maxCommentLength: float with get, set
    /// Shelveset name
    abstract name: string with get, set
    /// Owner's ID. Could be a name or a guid.
    abstract owner: string with get, set

type [<AllowNullLiteral>] TfvcStatistics =
    /// Id of the last changeset the stats are based on.
    abstract changesetId: float with get, set
    /// Count of files at the requested scope.
    abstract fileCountTotal: float with get, set

/// Version descriptor properties.
type [<AllowNullLiteral>] TfvcVersionDescriptor =
    /// Version object.
    abstract version: string with get, set
    abstract versionOption: TfvcVersionOption with get, set
    abstract versionType: TfvcVersionType with get, set

type [<RequireQualifiedAccess>] TfvcVersionOption =
    | None = 0
    | Previous = 1
    | UseRename = 2

type [<RequireQualifiedAccess>] TfvcVersionType =
    | None = 0
    | Changeset = 1
    | Shelveset = 2
    | Change = 3
    | Date = 4
    | Latest = 5
    | Tip = 6
    | MergeSource = 7

/// Real time event (SignalR) for a title/description update on a pull request
type [<AllowNullLiteral>] TitleDescriptionUpdatedEvent =
    inherit RealTimePullRequestEvent

type [<AllowNullLiteral>] UpdateRefsRequest =
    abstract refUpdateRequests: ResizeArray<GitRefUpdate> with get, set
    abstract updateMode: GitRefUpdateMode with get, set

type [<RequireQualifiedAccess>] VersionControlChangeType =
    | None = 0
    | Add = 1
    | Edit = 2
    | Encoding = 4
    | Rename = 8
    | Delete = 16
    | Undelete = 32
    | Branch = 64
    | Merge = 128
    | Lock = 256
    | Rollback = 512
    | SourceRename = 1024
    | TargetRename = 2048
    | Property = 4096
    | All = 8191

type [<AllowNullLiteral>] VersionControlProjectInfo =
    abstract defaultSourceControlType: TfsCore.SourceControlTypes with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract supportsGit: bool with get, set
    abstract supportsTFVC: bool with get, set

type [<RequireQualifiedAccess>] VersionControlRecursionType =
    | None = 0
    | OneLevel = 1
    | OneLevelPlusNestedEmptyFolders = 4
    | Full = 120

type [<AllowNullLiteral>] ChangeListChangeCounts =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> float with get, set

type [<AllowNullLiteral>] CommentThreadIdentities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] GitPathToItemsCollectionItems =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<GitItem> with get, set

type [<AllowNullLiteral>] GitPullRequestQueryResults =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<GitPullRequest> with get, set

type [<AllowNullLiteral>] GitSuggestionProperties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set
module TfsCore = ___Core_Core
module Git = ___Git_Git
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract GitRestClient: GitRestClientStatic

type [<AllowNullLiteral>] GitRestClient =
    inherit RestClientBase
    /// <summary>Create an annotated tag.</summary>
    /// <param name="tagObject">- Object containing details of tag to be created.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    abstract createAnnotatedTag: tagObject: Git.GitAnnotatedTag * project: string * repositoryId: string -> Promise<Git.GitAnnotatedTag>
    /// <summary>Get an annotated tag.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    /// <param name="objectId">- ObjectId (Sha1Id) of tag to get.</param>
    abstract getAnnotatedTag: project: string * repositoryId: string * objectId: string -> Promise<Git.GitAnnotatedTag>
    /// <summary>Get a single blob.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="sha1">- SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="download">- If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
    /// <param name="fileName">- Provide a fileName to use for a download.</param>
    /// <param name="resolveLfs">- If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
    abstract getBlob: repositoryId: string * sha1: string * ?project: string * ?download: bool * ?fileName: string * ?resolveLfs: bool -> Promise<Git.GitBlobRef>
    /// <summary>Get a single blob.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="sha1">- SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="download">- If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
    /// <param name="fileName">- Provide a fileName to use for a download.</param>
    /// <param name="resolveLfs">- If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
    abstract getBlobContent: repositoryId: string * sha1: string * ?project: string * ?download: bool * ?fileName: string * ?resolveLfs: bool -> Promise<ArrayBuffer>
    /// <summary>Gets one or more blobs in a zip file download.</summary>
    /// <param name="blobIds">- Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="filename">-</param>
    abstract getBlobsZip: blobIds: ResizeArray<string> * repositoryId: string * ?project: string * ?filename: string -> Promise<ArrayBuffer>
    /// <summary>Get a single blob.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="sha1">- SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="download">- If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
    /// <param name="fileName">- Provide a fileName to use for a download.</param>
    /// <param name="resolveLfs">- If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
    abstract getBlobZip: repositoryId: string * sha1: string * ?project: string * ?download: bool * ?fileName: string * ?resolveLfs: bool -> Promise<ArrayBuffer>
    /// <summary>Retrieve statistics about a single branch.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="name">- Name of the branch.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="baseVersionDescriptor">- Identifies the commit or branch to use as the base.</param>
    abstract getBranch: repositoryId: string * name: string * ?project: string * ?baseVersionDescriptor: Git.GitVersionDescriptor -> Promise<Git.GitBranchStats>
    /// <summary>Retrieve statistics about all branches within a repository.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="baseVersionDescriptor">- Identifies the commit or branch to use as the base.</param>
    abstract getBranches: repositoryId: string * ?project: string * ?baseVersionDescriptor: Git.GitVersionDescriptor -> Promise<ResizeArray<Git.GitBranchStats>>
    /// <param name="searchCriteria">-</param>
    /// <param name="repositoryId">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getBranchStatsBatch: searchCriteria: Git.GitQueryBranchStatsCriteria * repositoryId: string * ?project: string -> Promise<ResizeArray<Git.GitBranchStats>>
    /// <summary>Retrieve changes for a particular commit.</summary>
    /// <param name="commitId">- The id of the commit.</param>
    /// <param name="repositoryId">- The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- The maximum number of changes to return.</param>
    /// <param name="skip">- The number of changes to skip.</param>
    abstract getChanges: commitId: string * repositoryId: string * ?project: string * ?top: float * ?skip: float -> Promise<Git.GitCommitChanges>
    /// <summary>Given a commitId, returns a list of commits that are in the same cherry-pick family.</summary>
    /// <param name="repositoryNameOrId">-</param>
    /// <param name="commitId">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeLinks">-</param>
    abstract getCherryPickRelationships: repositoryNameOrId: string * commitId: string * ?project: string * ?includeLinks: bool -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Cherry pick a specific commit or commits that are associated to a pull request into a new branch.</summary>
    /// <param name="cherryPickToCreate">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    abstract createCherryPick: cherryPickToCreate: Git.GitAsyncRefOperationParameters * project: string * repositoryId: string -> Promise<Git.GitCherryPick>
    /// <summary>Retrieve information about a cherry pick by cherry pick Id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="cherryPickId">- ID of the cherry pick.</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    abstract getCherryPick: project: string * cherryPickId: float * repositoryId: string -> Promise<Git.GitCherryPick>
    /// <summary>Retrieve information about a cherry pick for a specific branch.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    /// <param name="refName">- The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.</param>
    abstract getCherryPickForRefName: project: string * repositoryId: string * refName: string -> Promise<Git.GitCherryPick>
    /// <summary>Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="diffCommonCommit">- If true, diff between common and target commits. If false, diff between base and target commits.</param>
    /// <param name="top">- Maximum number of changes to return. Defaults to 100.</param>
    /// <param name="skip">- Number of changes to skip</param>
    /// <param name="baseVersionDescriptor">- Descriptor for base commit.</param>
    /// <param name="targetVersionDescriptor">- Descriptor for target commit.</param>
    abstract getCommitDiffs: repositoryId: string * ?project: string * ?diffCommonCommit: bool * ?top: float * ?skip: float * ?baseVersionDescriptor: Git.GitBaseVersionDescriptor * ?targetVersionDescriptor: Git.GitTargetVersionDescriptor -> Promise<Git.GitCommitDiffs>
    /// <summary>Retrieve a particular commit.</summary>
    /// <param name="commitId">- The id of the commit.</param>
    /// <param name="repositoryId">- The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="changeCount">- The number of changes to include in the result.</param>
    abstract getCommit: commitId: string * repositoryId: string * ?project: string * ?changeCount: float -> Promise<Git.GitCommit>
    /// <summary>Retrieve git commits for a project</summary>
    /// <param name="repositoryId">- The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
    /// <param name="searchCriteria">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getCommits: repositoryId: string * searchCriteria: Git.GitQueryCommitsCriteria * ?project: string -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Retrieve a list of commits associated with a particular push.</summary>
    /// <param name="repositoryId">- The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
    /// <param name="pushId">- The id of the push.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- The maximum number of commits to return ("get the top x commits").</param>
    /// <param name="skip">- The number of commits to skip.</param>
    /// <param name="includeLinks">- Set to false to avoid including REST Url links for resources. Defaults to true.</param>
    abstract getPushCommits: repositoryId: string * pushId: float * ?project: string * ?top: float * ?skip: float * ?includeLinks: bool -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Retrieve git commits for a project matching the search criteria</summary>
    /// <param name="searchCriteria">- Search options</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="skip">- Number of commits to skip.</param>
    /// <param name="top">- Maximum number of commits to return.</param>
    /// <param name="includeStatuses">- True to include additional commit status information.</param>
    abstract getCommitsBatch: searchCriteria: Git.GitQueryCommitsCriteria * repositoryId: string * ?project: string * ?skip: float * ?top: float * ?includeStatuses: bool -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Retrieve deleted git repositories.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getDeletedRepositories: project: string -> Promise<ResizeArray<Git.GitDeletedRepository>>
    /// <summary>Get the file diffs for each of the specified files</summary>
    /// <param name="fileDiffsCriteria">- List of file parameters objects</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The name or ID of the repository</param>
    abstract getFileDiffs: fileDiffsCriteria: Git.FileDiffsCriteria * project: string * repositoryId: string -> Promise<ResizeArray<Git.FileDiff>>
    /// <summary>Retrieve all forks of a repository in the collection.</summary>
    /// <param name="repositoryNameOrId">- The name or ID of the repository.</param>
    /// <param name="collectionId">- Team project collection ID.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeLinks">- True to include links.</param>
    abstract getForks: repositoryNameOrId: string * collectionId: string * ?project: string * ?includeLinks: bool -> Promise<ResizeArray<Git.GitRepositoryRef>>
    /// <summary>Request that another repository's refs be fetched into this one. It syncs two existing forks. To create a fork, please see the \<a href="https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1"\> repositories endpoint\</a\></summary>
    /// <param name="syncParams">- Source repository and ref mapping.</param>
    /// <param name="repositoryNameOrId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeLinks">- True to include links</param>
    abstract createForkSyncRequest: syncParams: Git.GitForkSyncRequestParameters * repositoryNameOrId: string * ?project: string * ?includeLinks: bool -> Promise<Git.GitForkSyncRequest>
    /// <summary>Get a specific fork sync operation's details.</summary>
    /// <param name="repositoryNameOrId">- The name or ID of the repository.</param>
    /// <param name="forkSyncOperationId">- OperationId of the sync request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeLinks">- True to include links.</param>
    abstract getForkSyncRequest: repositoryNameOrId: string * forkSyncOperationId: float * ?project: string * ?includeLinks: bool -> Promise<Git.GitForkSyncRequest>
    /// <summary>Retrieve all requested fork sync operations on this repository.</summary>
    /// <param name="repositoryNameOrId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeAbandoned">- True to include abandoned requests.</param>
    /// <param name="includeLinks">- True to include links.</param>
    abstract getForkSyncRequests: repositoryNameOrId: string * ?project: string * ?includeAbandoned: bool * ?includeLinks: bool -> Promise<ResizeArray<Git.GitForkSyncRequest>>
    /// <summary>Create an import request.</summary>
    /// <param name="importRequest">- The import request to create.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    abstract createImportRequest: importRequest: Git.GitImportRequest * project: string * repositoryId: string -> Promise<Git.GitImportRequest>
    /// <summary>Retrieve a particular import request.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="importRequestId">- The unique identifier for the import request.</param>
    abstract getImportRequest: project: string * repositoryId: string * importRequestId: float -> Promise<Git.GitImportRequest>
    /// <summary>Retrieve import requests for a repository.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="includeAbandoned">- True to include abandoned import requests in the results.</param>
    abstract queryImportRequests: project: string * repositoryId: string * ?includeAbandoned: bool -> Promise<ResizeArray<Git.GitImportRequest>>
    /// <summary>Retry or abandon a failed import request.</summary>
    /// <param name="importRequestToUpdate">- The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="importRequestId">- The unique identifier for the import request to update.</param>
    abstract updateImportRequest: importRequestToUpdate: Git.GitImportRequest * project: string * repositoryId: string * importRequestId: float -> Promise<Git.GitImportRequest>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="path">- The item path.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- The path scope.  The default is null.</param>
    /// <param name="recursionLevel">- The recursion level of this request. The default is 'none', no recursion.</param>
    /// <param name="includeContentMetadata">- Set to true to include content metadata.  Default is false.</param>
    /// <param name="latestProcessedChange">- Set to true to include the latest changes.  Default is false.</param>
    /// <param name="download">- Set to true to download the response as a file.  Default is false.</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is the default branch for the repository.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    /// <param name="resolveLfs">- Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
    abstract getItem: repositoryId: string * path: string * ?project: string * ?scopePath: string * ?recursionLevel: Git.VersionControlRecursionType * ?includeContentMetadata: bool * ?latestProcessedChange: bool * ?download: bool * ?versionDescriptor: Git.GitVersionDescriptor * ?includeContent: bool * ?resolveLfs: bool -> Promise<Git.GitItem>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="path">- The item path.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- The path scope.  The default is null.</param>
    /// <param name="recursionLevel">- The recursion level of this request. The default is 'none', no recursion.</param>
    /// <param name="includeContentMetadata">- Set to true to include content metadata.  Default is false.</param>
    /// <param name="latestProcessedChange">- Set to true to include the latest changes.  Default is false.</param>
    /// <param name="download">- Set to true to download the response as a file.  Default is false.</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is the default branch for the repository.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    /// <param name="resolveLfs">- Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
    abstract getItemContent: repositoryId: string * path: string * ?project: string * ?scopePath: string * ?recursionLevel: Git.VersionControlRecursionType * ?includeContentMetadata: bool * ?latestProcessedChange: bool * ?download: bool * ?versionDescriptor: Git.GitVersionDescriptor * ?includeContent: bool * ?resolveLfs: bool -> Promise<ArrayBuffer>
    /// <summary>Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- The path scope.  The default is null.</param>
    /// <param name="recursionLevel">- The recursion level of this request. The default is 'none', no recursion.</param>
    /// <param name="includeContentMetadata">- Set to true to include content metadata.  Default is false.</param>
    /// <param name="latestProcessedChange">- Set to true to include the latest changes.  Default is false.</param>
    /// <param name="download">- Set to true to download the response as a file.  Default is false.</param>
    /// <param name="includeLinks">- Set to true to include links to items.  Default is false.</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is the default branch for the repository.</param>
    abstract getItems: repositoryId: string * ?project: string * ?scopePath: string * ?recursionLevel: Git.VersionControlRecursionType * ?includeContentMetadata: bool * ?latestProcessedChange: bool * ?download: bool * ?includeLinks: bool * ?versionDescriptor: Git.GitVersionDescriptor -> Promise<ResizeArray<Git.GitItem>>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="path">- The item path.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- The path scope.  The default is null.</param>
    /// <param name="recursionLevel">- The recursion level of this request. The default is 'none', no recursion.</param>
    /// <param name="includeContentMetadata">- Set to true to include content metadata.  Default is false.</param>
    /// <param name="latestProcessedChange">- Set to true to include the latest changes.  Default is false.</param>
    /// <param name="download">- Set to true to download the response as a file.  Default is false.</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is the default branch for the repository.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    /// <param name="resolveLfs">- Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
    abstract getItemText: repositoryId: string * path: string * ?project: string * ?scopePath: string * ?recursionLevel: Git.VersionControlRecursionType * ?includeContentMetadata: bool * ?latestProcessedChange: bool * ?download: bool * ?versionDescriptor: Git.GitVersionDescriptor * ?includeContent: bool * ?resolveLfs: bool -> Promise<string>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="path">- The item path.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- The path scope.  The default is null.</param>
    /// <param name="recursionLevel">- The recursion level of this request. The default is 'none', no recursion.</param>
    /// <param name="includeContentMetadata">- Set to true to include content metadata.  Default is false.</param>
    /// <param name="latestProcessedChange">- Set to true to include the latest changes.  Default is false.</param>
    /// <param name="download">- Set to true to download the response as a file.  Default is false.</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is the default branch for the repository.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    /// <param name="resolveLfs">- Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
    abstract getItemZip: repositoryId: string * path: string * ?project: string * ?scopePath: string * ?recursionLevel: Git.VersionControlRecursionType * ?includeContentMetadata: bool * ?latestProcessedChange: bool * ?download: bool * ?versionDescriptor: Git.GitVersionDescriptor * ?includeContent: bool * ?resolveLfs: bool -> Promise<ArrayBuffer>
    /// <summary>Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path</summary>
    /// <param name="requestData">- Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
    /// <param name="repositoryId">- The name or ID of the repository</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getItemsBatch: requestData: Git.GitItemRequestData * repositoryId: string * ?project: string -> Promise<ResizeArray<ResizeArray<Git.GitItem>>>
    /// <summary>Find the merge bases of two commits, optionally across forks. If otherRepositoryId is not specified, the merge bases will only be calculated within the context of the local repositoryNameOrId.</summary>
    /// <param name="repositoryNameOrId">- ID or name of the local repository.</param>
    /// <param name="commitId">- First commit, usually the tip of the target branch of the potential merge.</param>
    /// <param name="otherCommitId">- Other commit, usually the tip of the source branch of the potential merge.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="otherCollectionId">- The collection ID where otherCommitId lives.</param>
    /// <param name="otherRepositoryId">- The repository ID where otherCommitId lives.</param>
    abstract getMergeBases: repositoryNameOrId: string * commitId: string * otherCommitId: string * ?project: string * ?otherCollectionId: string * ?otherRepositoryId: string -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Request a git merge operation. Currently we support merging only 2 commits.</summary>
    /// <param name="mergeParameters">- Parents commitIds and merge commit messsage.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryNameOrId">- The name or ID of the repository.</param>
    /// <param name="includeLinks">- True to include links</param>
    abstract createMergeRequest: mergeParameters: Git.GitMergeParameters * project: string * repositoryNameOrId: string * ?includeLinks: bool -> Promise<Git.GitMerge>
    /// <summary>Get a specific merge operation's details.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryNameOrId">- The name or ID of the repository.</param>
    /// <param name="mergeOperationId">- OperationId of the merge request.</param>
    /// <param name="includeLinks">- True to include links</param>
    abstract getMergeRequest: project: string * repositoryNameOrId: string * mergeOperationId: float * ?includeLinks: bool -> Promise<Git.GitMerge>
    /// <summary>Attach a new file to a pull request.</summary>
    /// <param name="content">- Content to upload</param>
    /// <param name="fileName">- The name of the file.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createAttachment: content: obj option * fileName: string * repositoryId: string * pullRequestId: float * ?project: string -> Promise<Git.Attachment>
    /// <summary>Delete a pull request attachment.</summary>
    /// <param name="fileName">- The name of the attachment to delete.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteAttachment: fileName: string * repositoryId: string * pullRequestId: float * ?project: string -> Promise<unit>
    /// <summary>Get the file content of a pull request attachment.</summary>
    /// <param name="fileName">- The name of the attachment.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getAttachmentContent: fileName: string * repositoryId: string * pullRequestId: float * ?project: string -> Promise<ArrayBuffer>
    /// <summary>Get a list of files attached to a given pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getAttachments: repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<Git.Attachment>>
    /// <summary>Get the file content of a pull request attachment.</summary>
    /// <param name="fileName">- The name of the attachment.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getAttachmentZip: fileName: string * repositoryId: string * pullRequestId: float * ?project: string -> Promise<ArrayBuffer>
    /// <summary>Add a like on a comment.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- The ID of the thread that contains the comment.</param>
    /// <param name="commentId">- The ID of the comment.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createLike: repositoryId: string * pullRequestId: float * threadId: float * commentId: float * ?project: string -> Promise<unit>
    /// <summary>Delete a like on a comment.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- The ID of the thread that contains the comment.</param>
    /// <param name="commentId">- The ID of the comment.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteLike: repositoryId: string * pullRequestId: float * threadId: float * commentId: float * ?project: string -> Promise<unit>
    /// <summary>Get likes for a comment.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- The ID of the thread that contains the comment.</param>
    /// <param name="commentId">- The ID of the comment.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getLikes: repositoryId: string * pullRequestId: float * threadId: float * commentId: float * ?project: string -> Promise<ResizeArray<WebApi.IdentityRef>>
    /// <summary>Get the commits for the specified iteration of a pull request.</summary>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the iteration from which to get the commits.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- Maximum number of commits to return. The maximum number of commits that can be returned per batch is 500.</param>
    /// <param name="skip">- Number of commits to skip.</param>
    abstract getPullRequestIterationCommits: repositoryId: string * pullRequestId: float * iterationId: float * ?project: string * ?top: float * ?skip: float -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Get the commits for the specified pull request.</summary>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestCommits: repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<Git.GitCommitRef>>
    /// <summary>Retrieve one conflict for a pull request by ID</summary>
    /// <param name="repositoryId">-</param>
    /// <param name="pullRequestId">-</param>
    /// <param name="conflictId">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestConflict: repositoryId: string * pullRequestId: float * conflictId: float * ?project: string -> Promise<Git.GitConflict>
    /// <summary>Retrieve all conflicts for a pull request</summary>
    /// <param name="repositoryId">-</param>
    /// <param name="pullRequestId">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="skip">-</param>
    /// <param name="top">-</param>
    /// <param name="includeObsolete">-</param>
    /// <param name="excludeResolved">-</param>
    /// <param name="onlyResolved">-</param>
    abstract getPullRequestConflicts: repositoryId: string * pullRequestId: float * ?project: string * ?skip: float * ?top: float * ?includeObsolete: bool * ?excludeResolved: bool * ?onlyResolved: bool -> Promise<ResizeArray<Git.GitConflict>>
    /// <summary>Update merge conflict resolution</summary>
    /// <param name="conflict">-</param>
    /// <param name="repositoryId">-</param>
    /// <param name="pullRequestId">-</param>
    /// <param name="conflictId">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestConflict: conflict: Git.GitConflict * repositoryId: string * pullRequestId: float * conflictId: float * ?project: string -> Promise<Git.GitConflict>
    /// <summary>Update multiple merge conflict resolutions</summary>
    /// <param name="conflictUpdates">-</param>
    /// <param name="repositoryId">-</param>
    /// <param name="pullRequestId">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestConflicts: conflictUpdates: ResizeArray<Git.GitConflict> * repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<Git.GitConflictUpdateResult>>
    /// <summary>Retrieve the changes made in a pull request between two iterations.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration. \<br /\> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
    /// <param name="skip">- Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
    /// <param name="compareTo">- ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
    abstract getPullRequestIterationChanges: repositoryId: string * pullRequestId: float * iterationId: float * ?project: string * ?top: float * ?skip: float * ?compareTo: float -> Promise<Git.GitPullRequestIterationChanges>
    /// <summary>Get the specified iteration for a pull request.</summary>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration to return.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestIteration: repositoryId: string * pullRequestId: float * iterationId: float * ?project: string -> Promise<Git.GitPullRequestIteration>
    /// <summary>Get the list of iterations for the specified pull request.</summary>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeCommits">- If true, include the commits associated with each iteration in the response.</param>
    abstract getPullRequestIterations: repositoryId: string * pullRequestId: float * ?project: string * ?includeCommits: bool -> Promise<ResizeArray<Git.GitPullRequestIteration>>
    /// <summary>Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.</summary>
    /// <param name="status">- Pull request status to create.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createPullRequestIterationStatus: status: Git.GitPullRequestStatus * repositoryId: string * pullRequestId: float * iterationId: float * ?project: string -> Promise<Git.GitPullRequestStatus>
    /// <summary>Delete pull request iteration status.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration.</param>
    /// <param name="statusId">- ID of the pull request status.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deletePullRequestIterationStatus: repositoryId: string * pullRequestId: float * iterationId: float * statusId: float * ?project: string -> Promise<unit>
    /// <summary>Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration.</param>
    /// <param name="statusId">- ID of the pull request status.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestIterationStatus: repositoryId: string * pullRequestId: float * iterationId: float * statusId: float * ?project: string -> Promise<Git.GitPullRequestStatus>
    /// <summary>Get all the statuses associated with a pull request iteration.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestIterationStatuses: repositoryId: string * pullRequestId: float * iterationId: float * ?project: string -> Promise<ResizeArray<Git.GitPullRequestStatus>>
    /// <summary>Update pull request iteration statuses collection. The only supported operation type is \`remove\`.</summary>
    /// <param name="patchDocument">- Operations to apply to the pull request statuses in JSON Patch format.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="iterationId">- ID of the pull request iteration.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestIterationStatuses: patchDocument: WebApi.JsonPatchDocument * repositoryId: string * pullRequestId: float * iterationId: float * ?project: string -> Promise<unit>
    /// <summary>Create a label for a specified pull request. The only required field is the name of the new label.</summary>
    /// <param name="label">- Label to assign to the pull request.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- Project ID or project name.</param>
    abstract createPullRequestLabel: label: TfsCore.WebApiCreateTagRequestData * repositoryId: string * pullRequestId: float * ?project: string * ?projectId: string -> Promise<TfsCore.WebApiTagDefinition>
    /// <summary>Removes a label from the set of those assigned to the pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="labelIdOrName">- The name or ID of the label requested.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- Project ID or project name.</param>
    abstract deletePullRequestLabels: repositoryId: string * pullRequestId: float * labelIdOrName: string * ?project: string * ?projectId: string -> Promise<unit>
    /// <summary>Retrieves a single label that has been assigned to a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="labelIdOrName">- The name or ID of the label requested.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- Project ID or project name.</param>
    abstract getPullRequestLabel: repositoryId: string * pullRequestId: float * labelIdOrName: string * ?project: string * ?projectId: string -> Promise<TfsCore.WebApiTagDefinition>
    /// <summary>Get all the labels assigned to a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- Project ID or project name.</param>
    abstract getPullRequestLabels: repositoryId: string * pullRequestId: float * ?project: string * ?projectId: string -> Promise<ResizeArray<TfsCore.WebApiTagDefinition>>
    /// <summary>Get external properties of the pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestProperties: repositoryId: string * pullRequestId: float * ?project: string -> Promise<obj option>
    /// <summary>Create or update pull request external properties. The patch operation can be \`add\`, \`replace\` or \`remove\`. For \`add\` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For \`replace\` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For \`remove\` operation, the path cannot be empty. If the path does not exist, no action will be performed.</summary>
    /// <param name="patchDocument">- Properties to add, replace or remove in JSON Patch format.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestProperties: patchDocument: WebApi.JsonPatchDocument * repositoryId: string * pullRequestId: float * ?project: string -> Promise<obj option>
    /// <summary>This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -\> pull requests.</summary>
    /// <param name="queries">- The list of queries to perform.</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestQuery: queries: Git.GitPullRequestQuery * repositoryId: string * ?project: string -> Promise<Git.GitPullRequestQuery>
    /// <summary>Add a reviewer to a pull request or cast a vote.</summary>
    /// <param name="reviewer">- Reviewer's vote.\<br /\>If the reviewer's ID is included here, it must match the reviewerID parameter.\<br /\>Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="reviewerId">- ID of the reviewer.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createPullRequestReviewer: reviewer: Git.IdentityRefWithVote * repositoryId: string * pullRequestId: float * reviewerId: string * ?project: string -> Promise<Git.IdentityRefWithVote>
    /// <summary>Add reviewers to a pull request.</summary>
    /// <param name="reviewers">- Reviewers to add to the pull request.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createPullRequestReviewers: reviewers: ResizeArray<WebApi.IdentityRef> * repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<Git.IdentityRefWithVote>>
    /// <summary>Remove a reviewer from a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="reviewerId">- ID of the reviewer to remove.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deletePullRequestReviewer: repositoryId: string * pullRequestId: float * reviewerId: string * ?project: string -> Promise<unit>
    /// <summary>Retrieve information about a particular reviewer on a pull request</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="reviewerId">- ID of the reviewer.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestReviewer: repositoryId: string * pullRequestId: float * reviewerId: string * ?project: string -> Promise<Git.IdentityRefWithVote>
    /// <summary>Retrieve the reviewers for a pull request</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestReviewers: repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<Git.IdentityRefWithVote>>
    /// <summary>Edit a reviewer entry. These fields are patchable: isFlagged</summary>
    /// <param name="reviewer">- Reviewer data.\<br /\>If the reviewer's ID is included here, it must match the reviewerID parameter.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="reviewerId">- ID of the reviewer.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestReviewer: reviewer: Git.IdentityRefWithVote * repositoryId: string * pullRequestId: float * reviewerId: string * ?project: string -> Promise<Git.IdentityRefWithVote>
    /// <summary>Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.</summary>
    /// <param name="patchVotes">- IDs of the reviewers whose votes will be reset to zero</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestReviewers: patchVotes: ResizeArray<Git.IdentityRefWithVote> * repositoryId: string * pullRequestId: float * ?project: string -> Promise<unit>
    /// <summary>Retrieve a pull request.</summary>
    /// <param name="pullRequestId">- The ID of the pull request to retrieve.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestById: pullRequestId: float * ?project: string -> Promise<Git.GitPullRequest>
    /// <summary>Retrieve all pull requests matching a specified criteria.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="searchCriteria">- Pull requests will be returned that match this search criteria.</param>
    /// <param name="maxCommentLength">- Not used.</param>
    /// <param name="skip">- The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
    /// <param name="top">- The number of pull requests to retrieve.</param>
    abstract getPullRequestsByProject: project: string * searchCriteria: Git.GitPullRequestSearchCriteria * ?maxCommentLength: float * ?skip: float * ?top: float -> Promise<ResizeArray<Git.GitPullRequest>>
    /// <summary>Create a pull request.</summary>
    /// <param name="gitPullRequestToCreate">- The pull request to create.</param>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="supportsIterations">- If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
    abstract createPullRequest: gitPullRequestToCreate: Git.GitPullRequest * repositoryId: string * ?project: string * ?supportsIterations: bool -> Promise<Git.GitPullRequest>
    /// <summary>Retrieve a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- The ID of the pull request to retrieve.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="maxCommentLength">- Not used.</param>
    /// <param name="skip">- Not used.</param>
    /// <param name="top">- Not used.</param>
    /// <param name="includeCommits">- If true, the pull request will be returned with the associated commits.</param>
    /// <param name="includeWorkItemRefs">- If true, the pull request will be returned with the associated work item references.</param>
    abstract getPullRequest: repositoryId: string * pullRequestId: float * ?project: string * ?maxCommentLength: float * ?skip: float * ?top: float * ?includeCommits: bool * ?includeWorkItemRefs: bool -> Promise<Git.GitPullRequest>
    /// <summary>Retrieve all pull requests matching a specified criteria.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="searchCriteria">- Pull requests will be returned that match this search criteria.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="maxCommentLength">- Not used.</param>
    /// <param name="skip">- The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
    /// <param name="top">- The number of pull requests to retrieve.</param>
    abstract getPullRequests: repositoryId: string * searchCriteria: Git.GitPullRequestSearchCriteria * ?project: string * ?maxCommentLength: float * ?skip: float * ?top: float -> Promise<ResizeArray<Git.GitPullRequest>>
    /// <summary>Update a pull request</summary>
    /// <param name="gitPullRequestToUpdate">- The pull request content that should be updated.</param>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request to update.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequest: gitPullRequestToUpdate: Git.GitPullRequest * repositoryId: string * pullRequestId: float * ?project: string -> Promise<Git.GitPullRequest>
    /// <summary>Sends an e-mail notification about a specific pull request to a set of recipients</summary>
    /// <param name="userMessage">-</param>
    /// <param name="repositoryId">- ID of the git repository.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract sharePullRequest: userMessage: Git.ShareNotificationContext * repositoryId: string * pullRequestId: float * ?project: string -> Promise<unit>
    /// <summary>Create a pull request status.</summary>
    /// <param name="status">- Pull request status to create.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createPullRequestStatus: status: Git.GitPullRequestStatus * repositoryId: string * pullRequestId: float * ?project: string -> Promise<Git.GitPullRequestStatus>
    /// <summary>Delete pull request status.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="statusId">- ID of the pull request status.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deletePullRequestStatus: repositoryId: string * pullRequestId: float * statusId: float * ?project: string -> Promise<unit>
    /// <summary>Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="statusId">- ID of the pull request status.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestStatus: repositoryId: string * pullRequestId: float * statusId: float * ?project: string -> Promise<Git.GitPullRequestStatus>
    /// <summary>Get all the statuses associated with a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestStatuses: repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<Git.GitPullRequestStatus>>
    /// <summary>Update pull request statuses collection. The only supported operation type is \`remove\`.</summary>
    /// <param name="patchDocument">- Operations to apply to the pull request statuses in JSON Patch format.</param>
    /// <param name="repositoryId">- The repository ID of the pull request’s target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePullRequestStatuses: patchDocument: WebApi.JsonPatchDocument * repositoryId: string * pullRequestId: float * ?project: string -> Promise<unit>
    /// <summary>Create a comment on a specific thread in a pull request (up to 500 comments can be created per thread).</summary>
    /// <param name="comment">- The comment to create. Comments can be up to 150,000 characters.</param>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread that the desired comment is in.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createComment: comment: Git.Comment * repositoryId: string * pullRequestId: float * threadId: float * ?project: string -> Promise<Git.Comment>
    /// <summary>Delete a comment associated with a specific thread in a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread that the desired comment is in.</param>
    /// <param name="commentId">- ID of the comment.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteComment: repositoryId: string * pullRequestId: float * threadId: float * commentId: float * ?project: string -> Promise<unit>
    /// <summary>Retrieve a comment associated with a specific thread in a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread that the desired comment is in.</param>
    /// <param name="commentId">- ID of the comment.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getComment: repositoryId: string * pullRequestId: float * threadId: float * commentId: float * ?project: string -> Promise<Git.Comment>
    /// <summary>Retrieve all comments associated with a specific thread in a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getComments: repositoryId: string * pullRequestId: float * threadId: float * ?project: string -> Promise<ResizeArray<Git.Comment>>
    /// <summary>Update a comment associated with a specific thread in a pull request.</summary>
    /// <param name="comment">- The comment content that should be updated. Comments can be up to 150,000 characters.</param>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread that the desired comment is in.</param>
    /// <param name="commentId">- ID of the comment to update.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateComment: comment: Git.Comment * repositoryId: string * pullRequestId: float * threadId: float * commentId: float * ?project: string -> Promise<Git.Comment>
    /// <summary>Create a thread in a pull request.</summary>
    /// <param name="commentThread">- The thread to create. Thread must contain at least one comment.</param>
    /// <param name="repositoryId">- Repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createThread: commentThread: Git.GitPullRequestCommentThread * repositoryId: string * pullRequestId: float * ?project: string -> Promise<Git.GitPullRequestCommentThread>
    /// <summary>Retrieve a thread in a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="iteration">- If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
    /// <param name="baseIteration">- If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
    abstract getPullRequestThread: repositoryId: string * pullRequestId: float * threadId: float * ?project: string * ?iteration: float * ?baseIteration: float -> Promise<Git.GitPullRequestCommentThread>
    /// <summary>Retrieve all threads in a pull request.</summary>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="iteration">- If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
    /// <param name="baseIteration">- If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
    abstract getThreads: repositoryId: string * pullRequestId: float * ?project: string * ?iteration: float * ?baseIteration: float -> Promise<ResizeArray<Git.GitPullRequestCommentThread>>
    /// <summary>Update a thread in a pull request.</summary>
    /// <param name="commentThread">- The thread content that should be updated.</param>
    /// <param name="repositoryId">- The repository ID of the pull request's target branch.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="threadId">- ID of the thread to update.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateThread: commentThread: Git.GitPullRequestCommentThread * repositoryId: string * pullRequestId: float * threadId: float * ?project: string -> Promise<Git.GitPullRequestCommentThread>
    /// <summary>Retrieve a list of work items associated with a pull request.</summary>
    /// <param name="repositoryId">- ID or name of the repository.</param>
    /// <param name="pullRequestId">- ID of the pull request.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getPullRequestWorkItemRefs: repositoryId: string * pullRequestId: float * ?project: string -> Promise<ResizeArray<WebApi.ResourceRef>>
    /// <summary>Push changes to the repository.</summary>
    /// <param name="push">-</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createPush: push: Git.GitPush * repositoryId: string * ?project: string -> Promise<Git.GitPush>
    /// <summary>Retrieves a particular push.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="pushId">- ID of the push.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeCommits">- The number of commits to include in the result.</param>
    /// <param name="includeRefUpdates">- If true, include the list of refs that were updated by the push.</param>
    abstract getPush: repositoryId: string * pushId: float * ?project: string * ?includeCommits: float * ?includeRefUpdates: bool -> Promise<Git.GitPush>
    /// <summary>Retrieves pushes associated with the specified repository.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="skip">- Number of pushes to skip.</param>
    /// <param name="top">- Number of pushes to return.</param>
    /// <param name="searchCriteria">- Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
    abstract getPushes: repositoryId: string * ?project: string * ?skip: float * ?top: float * ?searchCriteria: Git.GitPushSearchCriteria -> Promise<ResizeArray<Git.GitPush>>
    /// <summary>Destroy (hard delete) a soft-deleted Git repository.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The ID of the repository.</param>
    abstract deleteRepositoryFromRecycleBin: project: string * repositoryId: string -> Promise<unit>
    /// <summary>Retrieve soft-deleted git repositories from the recycle bin.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getRecycleBinRepositories: project: string -> Promise<ResizeArray<Git.GitDeletedRepository>>
    /// <summary>Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.</summary>
    /// <param name="repositoryDetails">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The ID of the repository.</param>
    abstract restoreRepositoryFromRecycleBin: repositoryDetails: Git.GitRecycleBinRepositoryDetails * project: string * repositoryId: string -> Promise<Git.GitRepository>
    /// <summary>Queries the provided repository for its refs and returns them.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="filter">- [optional] A filter to apply to the refs (starts with).</param>
    /// <param name="includeLinks">- [optional] Specifies if referenceLinks should be included in the result. default is false.</param>
    /// <param name="includeStatuses">- [optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
    /// <param name="includeMyBranches">- [optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
    /// <param name="latestStatusesOnly">- [optional] True to include only the tip commit status for each ref. This option requires \`includeStatuses\` to be true. The default value is false.</param>
    /// <param name="peelTags">- [optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
    /// <param name="filterContains">- [optional] A filter to apply to the refs (contains).</param>
    abstract getRefs: repositoryId: string * ?project: string * ?filter: string * ?includeLinks: bool * ?includeStatuses: bool * ?includeMyBranches: bool * ?latestStatusesOnly: bool * ?peelTags: bool * ?filterContains: string -> Promise<ResizeArray<Git.GitRef>>
    /// <summary>Lock or Unlock a branch.</summary>
    /// <param name="newRefInfo">- The ref update action (lock/unlock) to perform</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="filter">- The name of the branch to lock/unlock</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- ID or name of the team project. Optional if specifying an ID for repository.</param>
    abstract updateRef: newRefInfo: Git.GitRefUpdate * repositoryId: string * filter: string * ?project: string * ?projectId: string -> Promise<Git.GitRef>
    /// <summary>Creating, updating, or deleting refs(branches).</summary>
    /// <param name="refUpdates">- List of ref updates to attempt to perform</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- ID or name of the team project. Optional if specifying an ID for repository.</param>
    abstract updateRefs: refUpdates: ResizeArray<Git.GitRefUpdate> * repositoryId: string * ?project: string * ?projectId: string -> Promise<ResizeArray<Git.GitRefUpdateResult>>
    /// <summary>Creates a ref favorite</summary>
    /// <param name="favorite">- The ref favorite to create.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createFavorite: favorite: Git.GitRefFavorite * project: string -> Promise<Git.GitRefFavorite>
    /// <summary>Deletes the refs favorite specified</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="favoriteId">- The Id of the ref favorite to delete.</param>
    abstract deleteRefFavorite: project: string * favoriteId: float -> Promise<unit>
    /// <summary>Gets the refs favorite for a favorite Id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="favoriteId">- The Id of the requested ref favorite.</param>
    abstract getRefFavorite: project: string * favoriteId: float -> Promise<Git.GitRefFavorite>
    /// <summary>Gets the refs favorites for a repo and an identity.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- The id of the repository.</param>
    /// <param name="identityId">- The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.</param>
    abstract getRefFavorites: project: string * ?repositoryId: string * ?identityId: string -> Promise<ResizeArray<Git.GitRefFavorite>>
    /// <summary>Create a git repository in a team project.</summary>
    /// <param name="gitRepositoryToCreate">- Specify the repo name, team project and/or parent repository. Team project information can be ommitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="sourceRef">- [optional] Specify the source refs to use while creating a fork repo</param>
    abstract createRepository: gitRepositoryToCreate: Git.GitRepositoryCreateOptions * ?project: string * ?sourceRef: string -> Promise<Git.GitRepository>
    /// <summary>Delete a git repository</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteRepository: repositoryId: string * ?project: string -> Promise<unit>
    /// <summary>Retrieve git repositories.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeLinks">- [optional] True to include reference links. The default value is false.</param>
    /// <param name="includeAllUrls">- [optional] True to include all remote URLs. The default value is false.</param>
    /// <param name="includeHidden">- [optional] True to include hidden repositories. The default value is false.</param>
    abstract getRepositories: ?project: string * ?includeLinks: bool * ?includeAllUrls: bool * ?includeHidden: bool -> Promise<ResizeArray<Git.GitRepository>>
    /// <summary>Retrieve a git repository.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getRepository: repositoryId: string * ?project: string -> Promise<Git.GitRepository>
    /// <summary>Retrieve a git repository.</summary>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="includeParent">- True to include parent repository. Only available in authenticated calls.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getRepositoryWithParent: repositoryId: string * includeParent: bool * ?project: string -> Promise<Git.GitRepository>
    /// <summary>Updates the Git repository with either a new repo name or a new default branch.</summary>
    /// <param name="newRepositoryInfo">- Specify a new repo name or a new default branch of the repository</param>
    /// <param name="repositoryId">- The name or ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateRepository: newRepositoryInfo: Git.GitRepository * repositoryId: string * ?project: string -> Promise<Git.GitRepository>
    /// <summary>Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.</summary>
    /// <param name="revertToCreate">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    abstract createRevert: revertToCreate: Git.GitAsyncRefOperationParameters * project: string * repositoryId: string -> Promise<Git.GitRevert>
    /// <summary>Retrieve information about a revert operation by revert Id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="revertId">- ID of the revert operation.</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    abstract getRevert: project: string * revertId: float * repositoryId: string -> Promise<Git.GitRevert>
    /// <summary>Retrieve information about a revert operation for a specific branch.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    /// <param name="refName">- The GitAsyncRefOperationParameters generatedRefName used for the revert operation.</param>
    abstract getRevertForRefName: project: string * repositoryId: string * refName: string -> Promise<Git.GitRevert>
    /// <summary>Create Git commit status.</summary>
    /// <param name="gitCommitStatusToCreate">- Git commit status object to create.</param>
    /// <param name="commitId">- ID of the Git commit.</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createCommitStatus: gitCommitStatusToCreate: Git.GitStatus * commitId: string * repositoryId: string * ?project: string -> Promise<Git.GitStatus>
    /// <summary>Get statuses associated with the Git commit.</summary>
    /// <param name="commitId">- ID of the Git commit.</param>
    /// <param name="repositoryId">- ID of the repository.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- Optional. The number of statuses to retrieve. Default is 1000.</param>
    /// <param name="skip">- Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
    /// <param name="latestOnly">- The flag indicates whether to get only latest statuses grouped by \`Context.Name\` and \`Context.Genre\`.</param>
    abstract getStatuses: commitId: string * repositoryId: string * ?project: string * ?top: float * ?skip: float * ?latestOnly: bool -> Promise<ResizeArray<Git.GitStatus>>
    /// <summary>Retrieve a pull request suggestion for a particular repository or team project.</summary>
    /// <param name="repositoryId">- ID of the git repository.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getSuggestions: repositoryId: string * ?project: string -> Promise<ResizeArray<Git.GitSuggestion>>
    /// <summary>The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.</summary>
    /// <param name="repositoryId">- Repository Id.</param>
    /// <param name="sha1">- SHA1 hash of the tree object.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- Project Id.</param>
    /// <param name="recursive">- Search recursively. Include trees underneath this tree. Default is false.</param>
    /// <param name="fileName">- Name to use if a .zip file is returned. Default is the object ID.</param>
    abstract getTree: repositoryId: string * sha1: string * ?project: string * ?projectId: string * ?recursive: bool * ?fileName: string -> Promise<Git.GitTreeRef>
    /// <summary>The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.</summary>
    /// <param name="repositoryId">- Repository Id.</param>
    /// <param name="sha1">- SHA1 hash of the tree object.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="projectId">- Project Id.</param>
    /// <param name="recursive">- Search recursively. Include trees underneath this tree. Default is false.</param>
    /// <param name="fileName">- Name to use if a .zip file is returned. Default is the object ID.</param>
    abstract getTreeZip: repositoryId: string * sha1: string * ?project: string * ?projectId: string * ?recursive: bool * ?fileName: string -> Promise<ArrayBuffer>

type [<AllowNullLiteral>] GitRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> GitRestClient
    abstract RESOURCE_AREA_ID: string
type GitRepository = ___Git_Git.GitRepository

type [<StringEnum>] [<RequireQualifiedAccess>] GitServiceIds =
    | [<CompiledName "ms.vss-code-web.vc-repository-service">] VersionControlRepositoryService

/// Host service for accessing repository information.
type [<AllowNullLiteral>] IVersionControlRepositoryService =
    /// Gets the currently selected Git repository. Returns null if a Git repository is not currently selected.
    abstract getCurrentGitRepository: unit -> Promise<GitRepository option>
module Identities = ___Identities_Identities

type [<AllowNullLiteral>] GraphCachePolicies =
    /// Size of the cache
    abstract cacheSize: float with get, set

/// Subject descriptor of a Graph entity
type [<AllowNullLiteral>] GraphDescriptorResult =
    /// This field contains zero or more interesting links about the graph descriptor. These links may be invoked to obtain additional relationships or more detailed information about this graph descriptor.
    abstract _links: obj option with get, set
    abstract value: string with get, set

/// Represents a set of data used to communicate with a federated provider on behalf of a particular user.
type [<AllowNullLiteral>] GraphFederatedProviderData =
    /// The access token that can be used to communicated with the federated provider on behalf on the target identity, if we were able to successfully acquire one, otherwise \<code\>null\</code\>, if we were not.
    abstract accessToken: string with get, set
    /// The name of the federated provider, e.g. "github.com".
    abstract providerName: string with get, set
    /// The descriptor of the graph subject to which this federated provider data corresponds.
    abstract subjectDescriptor: string with get, set
    /// The version number of this federated provider data, which corresponds to when it was last updated. Can be used to prevent returning stale provider data from the cache when the caller is aware of a newer version, such as to prevent local cache poisoning from a remote cache or store. This is the app layer equivalent of the data layer sequence ID.
    abstract version: float with get, set

type [<AllowNullLiteral>] GraphGlobalExtendedPropertyBatch =
    abstract propertyNameFilters: ResizeArray<string> with get, set
    abstract subjectDescriptors: ResizeArray<string> with get, set

/// Graph group entity
type [<AllowNullLiteral>] GraphGroup =
    inherit GraphMember
    /// A short phrase to help human readers disambiguate groups with similar names
    abstract description: string with get, set
    abstract isCrossProject: bool with get, set
    abstract isDeleted: bool with get, set
    abstract isGlobalScope: bool with get, set
    abstract isRestrictedVisible: bool with get, set
    abstract localScopeId: string with get, set
    abstract scopeId: string with get, set
    abstract scopeName: string with get, set
    abstract scopeType: string with get, set
    abstract securingHostId: string with get, set
    abstract specialType: string with get, set

/// Do not attempt to use this type to create a new group. This type does not contain sufficient fields to create a new group.
type [<AllowNullLiteral>] GraphGroupCreationContext =
    /// Optional: If provided, we will use this identifier for the storage key of the created group
    abstract storageKey: string with get, set

/// Use this type to create a new group using the mail address as a reference to an existing group from an external AD or AAD backed provider. This is the subset of GraphGroup fields required for creation of a group for the AAD and AD use case.
type [<AllowNullLiteral>] GraphGroupMailAddressCreationContext =
    inherit GraphGroupCreationContext
    /// This should be the mail address or the group in the source AD or AAD provider. Example: jamal\@contoso.com Team Services will communicate with the source provider to fill all other fields on creation.
    abstract mailAddress: string with get, set

/// Use this type to create a new group using the OriginID as a reference to an existing group from an external AD or AAD backed provider. This is the subset of GraphGroup fields required for creation of a group for the AD and AAD use case.
type [<AllowNullLiteral>] GraphGroupOriginIdCreationContext =
    inherit GraphGroupCreationContext
    /// This should be the object id or sid of the group from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Team Services will communicate with the source provider to fill all other fields on creation.
    abstract originId: string with get, set

/// Use this type to create a new Vsts group that is not backed by an external provider.
type [<AllowNullLiteral>] GraphGroupVstsCreationContext =
    inherit GraphGroupCreationContext
    /// For internal use only in back compat scenarios.
    abstract crossProject: bool with get, set
    /// Used by VSTS groups; if set this will be the group description, otherwise ignored
    abstract description: string with get, set
    abstract descriptor: string with get, set
    /// Used by VSTS groups; if set this will be the group DisplayName, otherwise ignored
    abstract displayName: string with get, set
    /// For internal use only in back compat scenarios.
    abstract restrictedVisibility: bool with get, set
    /// For internal use only in back compat scenarios.
    abstract specialGroupType: string with get, set

type [<AllowNullLiteral>] GraphMember =
    inherit GraphSubject
    /// This represents the name of the container of origin for a graph member. (For MSA this is "Windows Live ID", for AD the name of the domain, for AAD the tenantID of the directory, for VSTS groups the ScopeId, etc)
    abstract domain: string with get, set
    /// The email address of record for a given graph member. This may be different than the principal name.
    abstract mailAddress: string with get, set
    /// This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.
    abstract principalName: string with get, set

/// Relationship between a container and a member
type [<AllowNullLiteral>] GraphMembership =
    /// This field contains zero or more interesting links about the graph membership. These links may be invoked to obtain additional relationships or more detailed information about this graph membership.
    abstract _links: obj option with get, set
    abstract containerDescriptor: string with get, set
    abstract memberDescriptor: string with get, set

/// Status of a Graph membership (active/inactive)
type [<AllowNullLiteral>] GraphMembershipState =
    /// This field contains zero or more interesting links about the graph membership state. These links may be invoked to obtain additional relationships or more detailed information about this graph membership state.
    abstract _links: obj option with get, set
    /// When true, the membership is active
    abstract active: bool with get, set

type [<AllowNullLiteral>] GraphMembershipTraversal =
    /// Reason why the subject could not be traversed completely
    abstract incompletenessReason: string with get, set
    /// When true, the subject is traversed completely
    abstract isComplete: bool with get, set
    /// The traversed subject descriptor
    abstract subjectDescriptor: string with get, set
    /// Subject descriptor ids of the traversed members
    abstract traversedSubjectIds: ResizeArray<string> with get, set
    /// Subject descriptors of the traversed members
    abstract traversedSubjects: ResizeArray<string> with get, set

/// Who is the provider for this user and what is the identifier and domain that is used to uniquely identify the user.
type [<AllowNullLiteral>] GraphProviderInfo =
    /// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
    abstract descriptor: string with get, set
    /// This represents the name of the container of origin for a graph member. (For MSA this is "Windows Live ID", for AAD the tenantID of the directory.)
    abstract domain: string with get, set
    /// The type of source provider for the origin identifier (ex: "aad", "msa")
    abstract origin: string with get, set
    /// The unique identifier from the system of origin. (For MSA this is the PUID in hex notation, for AAD this is the object id.)
    abstract originId: string with get, set

/// Container where a graph entity is defined (organization, project, team)
type [<AllowNullLiteral>] GraphScope =
    inherit GraphSubject
    /// The subject descriptor that references the administrators group for this scope. Only members of this group can change the contents of this scope or assign other users permissions to access this scope.
    abstract administratorDescriptor: string with get, set
    /// When true, this scope is also a securing host for one or more scopes.
    abstract isGlobal: bool with get, set
    /// The subject descriptor for the closest account or organization in the ancestor tree of this scope.
    abstract parentDescriptor: string with get, set
    /// The type of this scope. Typically ServiceHost or TeamProject.
    abstract scopeType: Identities.GroupScopeType with get, set
    /// The subject descriptor for the containing organization in the ancestor tree of this scope.
    abstract securingHostDescriptor: string with get, set

/// This type is the subset of fields that can be provided by the user to create a Vsts scope. Scope creation is currently limited to internal back-compat scenarios. End users that attempt to create a scope with this API will fail.
type [<AllowNullLiteral>] GraphScopeCreationContext =
    /// Set this field to override the default description of this scope's admin group.
    abstract adminGroupDescription: string with get, set
    /// All scopes have an Administrator Group that controls access to the contents of the scope. Set this field to use a non-default group name for that administrators group.
    abstract adminGroupName: string with get, set
    /// Set this optional field if this scope is created on behalf of a user other than the user making the request. This should be the Id of the user that is not the requester.
    abstract creatorId: string with get, set
    /// The scope must be provided with a unique name within the parent scope. This means the created scope can have a parent or child with the same name, but no siblings with the same name.
    abstract name: string with get, set
    /// The type of scope being created.
    abstract scopeType: Identities.GroupScopeType with get, set
    /// An optional ID that uniquely represents the scope within it's parent scope. If this parameter is not provided, Vsts will generate on automatically.
    abstract storageKey: string with get, set

/// Storage key of a Graph entity
type [<AllowNullLiteral>] GraphStorageKeyResult =
    /// This field contains zero or more interesting links about the graph storage key. These links may be invoked to obtain additional relationships or more detailed information about this graph storage key.
    abstract _links: obj option with get, set
    abstract value: string with get, set

/// Top-level graph entity
type [<AllowNullLiteral>] GraphSubject =
    inherit GraphSubjectBase
    /// [Internal Use Only] The legacy descriptor is here in case you need to access old version IMS using identity descriptor.
    abstract legacyDescriptor: string with get, set
    /// The type of source provider for the origin identifier (ex:AD, AAD, MSA)
    abstract origin: string with get, set
    /// The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.
    abstract originId: string with get, set
    /// This field identifies the type of the graph subject (ex: Group, Scope, User).
    abstract subjectKind: string with get, set

type [<AllowNullLiteral>] GraphSubjectBase =
    /// This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.
    abstract _links: obj option with get, set
    /// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
    abstract descriptor: string with get, set
    /// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
    abstract displayName: string with get, set
    /// This url is the full route to the source resource of this graph subject.
    abstract url: string with get, set

/// Batching of subjects to lookup using the Graph API
type [<AllowNullLiteral>] GraphSubjectLookup =
    abstract lookupKeys: ResizeArray<GraphSubjectLookupKey> with get, set

type [<AllowNullLiteral>] GraphSubjectLookupKey =
    abstract descriptor: string with get, set

/// Subject to search using the Graph API
type [<AllowNullLiteral>] GraphSubjectQuery =
    /// Search term to search for Azure Devops users or/and groups
    abstract query: string with get, set
    /// Optional parameter. Specify a non-default scope (collection, project) to search for users or groups within the scope.
    abstract scopeDescriptor: string with get, set
    /// "User" or "Group" can be specified, both or either
    abstract subjectKind: ResizeArray<string> with get, set

type [<AllowNullLiteral>] GraphSystemSubject =
    inherit GraphSubject

type [<RequireQualifiedAccess>] GraphTraversalDirection =
    | Unknown = 0
    | Down = 1
    | Up = 2

/// Graph user entity
type [<AllowNullLiteral>] GraphUser =
    inherit GraphMember
    /// The short, generally unique name for the user in the backing directory. For AAD users, this corresponds to the mail nickname, which is often but not necessarily similar to the part of the user's mail address before the \@ sign. For GitHub users, this corresponds to the GitHub user handle.
    abstract directoryAlias: string with get, set
    /// When true, the group has been deleted in the identity provider
    abstract isDeletedInOrigin: bool with get, set
    abstract metadataUpdateDate: DateTime with get, set
    /// The meta type of the user in the origin, such as "member", "guest", etc. See UserMetaType for the set of possible values.
    abstract metaType: string with get, set

/// Do not attempt to use this type to create a new user. Use one of the subclasses instead. This type does not contain sufficient fields to create a new user.
type [<AllowNullLiteral>] GraphUserCreationContext =
    /// Optional: If provided, we will use this identifier for the storage key of the created user
    abstract storageKey: string with get, set

/// Use this type to create a new user using the mail address as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its mail address in the backing provider.
type [<AllowNullLiteral>] GraphUserMailAddressCreationContext =
    inherit GraphUserCreationContext
    abstract mailAddress: string with get, set

/// Use this type to create a new user using the OriginID as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its unique ID in the backing provider.
type [<AllowNullLiteral>] GraphUserOriginIdCreationContext =
    inherit GraphUserCreationContext
    /// This should be the name of the origin provider. Example: github.com
    abstract origin: string with get, set
    /// This should be the object id or sid of the user from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Team Services will communicate with the source provider to fill all other fields on creation.
    abstract originId: string with get, set

/// Use this type to update an existing user using the OriginID as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its unique ID in the backing provider.
type [<AllowNullLiteral>] GraphUserOriginIdUpdateContext =
    inherit GraphUserUpdateContext
    /// This should be the object id or sid of the user from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Azure Devops will communicate with the source provider to fill all other fields on creation.
    abstract originId: string with get, set

/// Use this type to create a new user using the principal name as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its principal name in the backing provider.
type [<AllowNullLiteral>] GraphUserPrincipalNameCreationContext =
    inherit GraphUserCreationContext
    /// This should be the principal name or upn of the user in the source AD or AAD provider. Example: jamal\@contoso.com Team Services will communicate with the source provider to fill all other fields on creation.
    abstract principalName: string with get, set

/// Do not attempt to use this type to update user. Use one of the subclasses instead. This type does not contain sufficient fields to create a new user.
type [<AllowNullLiteral>] GraphUserUpdateContext =
    /// Storage key should not be specified in case of updating user
    abstract storageKey: string with get, set

type [<AllowNullLiteral>] PagedGraphGroups =
    /// This will be non-null if there is another page of data. There will never be more than one continuation token returned by a request.
    abstract continuationToken: ResizeArray<string> with get, set
    /// The enumerable list of groups found within a page.
    abstract graphGroups: ResizeArray<GraphGroup> with get, set

type [<AllowNullLiteral>] PagedGraphUsers =
    /// This will be non-null if there is another page of data. There will never be more than one continuation token returned by a request.
    abstract continuationToken: ResizeArray<string> with get, set
    /// The enumerable set of users found within a page.
    abstract graphUsers: ResizeArray<GraphUser> with get, set

type [<AllowNullLiteral>] RequestAccessPayLoad =
    abstract message: string with get, set
    abstract urlRequested: string with get, set
module Graph = ___Graph_Graph
module Profile = ___Profile_Profile
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract GraphRestClient: GraphRestClientStatic

type [<AllowNullLiteral>] GraphRestClient =
    inherit RestClientBase
    /// <param name="subjectDescriptor">-</param>
    abstract deleteAvatar: subjectDescriptor: string -> Promise<unit>
    /// <param name="subjectDescriptor">-</param>
    /// <param name="size">-</param>
    /// <param name="format">-</param>
    abstract getAvatar: subjectDescriptor: string * ?size: Profile.AvatarSize * ?format: string -> Promise<Profile.Avatar>
    /// <param name="avatar">-</param>
    /// <param name="subjectDescriptor">-</param>
    abstract setAvatar: avatar: Profile.Avatar * subjectDescriptor: string -> Promise<unit>
    abstract getCachePolicies: unit -> Promise<Graph.GraphCachePolicies>
    /// <summary>Resolve a storage key to a descriptor</summary>
    /// <param name="storageKey">- Storage key of the subject (user, group, scope, etc.) to resolve</param>
    abstract getDescriptor: storageKey: string -> Promise<Graph.GraphDescriptorResult>
    /// <summary>Acquires the full set of federated provider authentication data available for the given graph subject and provider name.</summary>
    /// <param name="subjectDescriptor">- the descriptor of the graph subject that we should acquire data for</param>
    /// <param name="providerName">- the name of the provider to acquire data for, e.g. "github.com"</param>
    /// <param name="versionHint">- a version hint that can be used for optimistic cache concurrency and to support retries on access token failures; note that this is a hint only and does not guarantee a particular version on the response</param>
    abstract getFederatedProviderData: subjectDescriptor: string * providerName: string * ?versionHint: float -> Promise<Graph.GraphFederatedProviderData>
    /// <summary>Create a new Azure DevOps group or materialize an existing AAD group.</summary>
    /// <param name="creationContext">- The subset of the full graph group used to uniquely find the graph subject in an external provider.</param>
    /// <param name="scopeDescriptor">- A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization. Valid only for VSTS groups.</param>
    /// <param name="groupDescriptors">- A comma separated list of descriptors referencing groups you want the graph group to join</param>
    abstract createGroup: creationContext: Graph.GraphGroupCreationContext * ?scopeDescriptor: string * ?groupDescriptors: ResizeArray<string> -> Promise<Graph.GraphGroup>
    /// <summary>Removes an Azure DevOps group from all of its parent groups.</summary>
    /// <param name="groupDescriptor">- The descriptor of the group to delete.</param>
    abstract deleteGroup: groupDescriptor: string -> Promise<unit>
    /// <summary>Get a group by its descriptor.</summary>
    /// <param name="groupDescriptor">- The descriptor of the desired graph group.</param>
    abstract getGroup: groupDescriptor: string -> Promise<Graph.GraphGroup>
    /// <summary>Update the properties of an Azure DevOps group.</summary>
    /// <param name="groupDescriptor">- The descriptor of the group to modify.</param>
    /// <param name="patchDocument">- The JSON+Patch document containing the fields to alter.</param>
    abstract updateGroup: groupDescriptor: string * patchDocument: WebApi.JsonPatchDocument -> Promise<Graph.GraphGroup>
    /// <param name="memberLookup">-</param>
    abstract lookupMembers: memberLookup: Graph.GraphSubjectLookup -> Promise<GraphRestClientLookupMembersPromise>
    /// <summary>This endpoint returns a result for any member that has ever been valid in the system, even if the member has since been deleted or has had all their memberships deleted. The current validity of the member is indicated through its disabled property, which is omitted when false.</summary>
    /// <param name="memberDescriptor">- The descriptor of the desired member.</param>
    abstract getMemberByDescriptor: memberDescriptor: string -> Promise<Graph.GraphMember>
    /// <summary>Create a new membership between a container and subject.</summary>
    /// <param name="subjectDescriptor">- A descriptor to a group or user that can be the child subject in the relationship.</param>
    /// <param name="containerDescriptor">- A descriptor to a group that can be the container in the relationship.</param>
    abstract addMembership: subjectDescriptor: string * containerDescriptor: string -> Promise<Graph.GraphMembership>
    /// <summary>Check to see if a membership relationship between a container and subject exists.</summary>
    /// <param name="subjectDescriptor">- The group or user that is a child subject of the relationship.</param>
    /// <param name="containerDescriptor">- The group that is the container in the relationship.</param>
    abstract checkMembershipExistence: subjectDescriptor: string * containerDescriptor: string -> Promise<bool>
    /// <summary>Get a membership relationship between a container and subject.</summary>
    /// <param name="subjectDescriptor">- A descriptor to the child subject in the relationship.</param>
    /// <param name="containerDescriptor">- A descriptor to the container in the relationship.</param>
    abstract getMembership: subjectDescriptor: string * containerDescriptor: string -> Promise<Graph.GraphMembership>
    /// <summary>Deletes a membership between a container and subject.</summary>
    /// <param name="subjectDescriptor">- A descriptor to a group or user that is the child subject in the relationship.</param>
    /// <param name="containerDescriptor">- A descriptor to a group that is the container in the relationship.</param>
    abstract removeMembership: subjectDescriptor: string * containerDescriptor: string -> Promise<unit>
    /// <summary>Get all the memberships where this descriptor is a member in the relationship.</summary>
    /// <param name="subjectDescriptor">- Fetch all direct memberships of this descriptor.</param>
    /// <param name="direction">- Defaults to Up.</param>
    /// <param name="depth">- The maximum number of edges to traverse up or down the membership tree. Currently the only supported value is '1'.</param>
    abstract listMemberships: subjectDescriptor: string * ?direction: Graph.GraphTraversalDirection * ?depth: float -> Promise<ResizeArray<Graph.GraphMembership>>
    /// <summary>Check whether a subject is active or inactive.</summary>
    /// <param name="subjectDescriptor">- Descriptor of the subject (user, group, scope, etc.) to check state of</param>
    abstract getMembershipState: subjectDescriptor: string -> Promise<Graph.GraphMembershipState>
    /// <summary>Traverse memberships of the given subject descriptors.</summary>
    /// <param name="membershipTraversalLookup">- Fetch the descendants/ancestors of the list of descriptors depending on direction.</param>
    /// <param name="direction">- The default value is Unknown.</param>
    /// <param name="depth">- The default value is '1'.</param>
    abstract lookupMembershipTraversals: membershipTraversalLookup: Graph.GraphSubjectLookup * ?direction: Graph.GraphTraversalDirection * ?depth: float -> Promise<GraphRestClientLookupMembershipTraversalsPromise>
    /// <summary>Traverse memberships of the given subject descriptor.</summary>
    /// <param name="subjectDescriptor">- Fetch the descendants/ancestors of this descriptor depending on direction.</param>
    /// <param name="direction">- The default value is Unknown.</param>
    /// <param name="depth">- The default value is '1'.</param>
    abstract traverseMemberships: subjectDescriptor: string * ?direction: Graph.GraphTraversalDirection * ?depth: float -> Promise<Graph.GraphMembershipTraversal>
    /// <param name="userDescriptor">-</param>
    abstract getProviderInfo: userDescriptor: string -> Promise<Graph.GraphProviderInfo>
    /// <param name="jsondocument">-</param>
    abstract requestAccess: jsondocument: obj option -> Promise<unit>
    /// <param name="creationContext">-</param>
    /// <param name="scopeDescriptor">-</param>
    abstract createScope: creationContext: Graph.GraphScopeCreationContext * ?scopeDescriptor: string -> Promise<Graph.GraphScope>
    /// <param name="scopeDescriptor">-</param>
    abstract deleteScope: scopeDescriptor: string -> Promise<unit>
    /// <summary>Get a scope identified by its descriptor</summary>
    /// <param name="scopeDescriptor">- A descriptor that uniquely identifies a scope.</param>
    abstract getScope: scopeDescriptor: string -> Promise<Graph.GraphScope>
    /// <param name="scopeDescriptor">-</param>
    /// <param name="patchDocument">-</param>
    abstract updateScope: scopeDescriptor: string * patchDocument: WebApi.JsonPatchDocument -> Promise<unit>
    /// <summary>Resolve a descriptor to a storage key.</summary>
    /// <param name="subjectDescriptor">-</param>
    abstract getStorageKey: subjectDescriptor: string -> Promise<Graph.GraphStorageKeyResult>
    /// <summary>Resolve descriptors to users, groups or scopes (Subjects) in a batch.</summary>
    /// <param name="subjectLookup">- A list of descriptors that specifies a subset of subjects to retrieve. Each descriptor uniquely identifies the subject across all instance scopes, but only at a single point in time.</param>
    abstract lookupSubjects: subjectLookup: Graph.GraphSubjectLookup -> Promise<GraphRestClientLookupSubjectsPromise>
    /// <summary>Search for Azure Devops users, or/and groups. Results will be returned in a batch with no more than 100 graph subjects.</summary>
    /// <param name="subjectQuery">- The query that we'll be using to search includes the following: Query: the search term. The search will be prefix matching only. SubjectKind: "User" or "Group" can be specified, both or either ScopeDescriptor: Non-default scope can be specified, i.e. project scope descriptor</param>
    abstract querySubjects: subjectQuery: Graph.GraphSubjectQuery -> Promise<ResizeArray<Graph.GraphSubject>>
    /// <param name="subjectDescriptor">-</param>
    abstract getSubject: subjectDescriptor: string -> Promise<Graph.GraphSubject>
    /// <summary>Materialize an existing AAD or MSA user into the VSTS account.</summary>
    /// <param name="creationContext">- The subset of the full graph user used to uniquely find the graph subject in an external provider.</param>
    /// <param name="groupDescriptors">- A comma separated list of descriptors of groups you want the graph user to join</param>
    abstract createUser: creationContext: Graph.GraphUserCreationContext * ?groupDescriptors: ResizeArray<string> -> Promise<Graph.GraphUser>
    /// <summary>Disables a user.</summary>
    /// <param name="userDescriptor">- The descriptor of the user to delete.</param>
    abstract deleteUser: userDescriptor: string -> Promise<unit>
    /// <summary>Get a user by its descriptor.</summary>
    /// <param name="userDescriptor">- The descriptor of the desired user.</param>
    abstract getUser: userDescriptor: string -> Promise<Graph.GraphUser>
    /// <summary>Map an existing user to a different identity</summary>
    /// <param name="updateContext">- The subset of the full graph user used to uniquely find the graph subject in an external provider.</param>
    /// <param name="userDescriptor">- the descriptor of the user to update</param>
    abstract updateUser: updateContext: Graph.GraphUserUpdateContext * userDescriptor: string -> Promise<Graph.GraphUser>

type [<AllowNullLiteral>] GraphRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> GraphRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] GraphRestClientLookupMembersPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> Graph.GraphMember with get, set

type [<AllowNullLiteral>] GraphRestClientLookupMembershipTraversalsPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> Graph.GraphMembershipTraversal with get, set

type [<AllowNullLiteral>] GraphRestClientLookupSubjectsPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> Graph.GraphSubject with get, set

/// Container class for changed identities
type [<AllowNullLiteral>] ChangedIdentities =
    /// Changed Identities
    abstract identities: ResizeArray<Identity> with get, set
    /// More data available, set to true if pagesize is specified.
    abstract moreData: bool with get, set
    /// Last Identity SequenceId
    abstract sequenceContext: ChangedIdentitiesContext with get, set

/// Context class for changed identities
type [<AllowNullLiteral>] ChangedIdentitiesContext =
    /// Last Group SequenceId
    abstract groupSequenceId: float with get, set
    /// Last Identity SequenceId
    abstract identitySequenceId: float with get, set
    /// Last Group OrganizationIdentitySequenceId
    abstract organizationIdentitySequenceId: float with get, set
    /// Page size
    abstract pageSize: float with get, set

type [<AllowNullLiteral>] CreateScopeInfo =
    abstract adminGroupDescription: string with get, set
    abstract adminGroupName: string with get, set
    abstract creatorId: string with get, set
    abstract parentScopeId: string with get, set
    abstract scopeName: string with get, set
    abstract scopeType: GroupScopeType with get, set

type [<AllowNullLiteral>] FrameworkIdentityInfo =
    abstract displayName: string with get, set
    abstract identifier: string with get, set
    abstract identityType: FrameworkIdentityType with get, set
    abstract role: string with get, set

type [<RequireQualifiedAccess>] FrameworkIdentityType =
    | None = 0
    | ServiceIdentity = 1
    | AggregateIdentity = 2
    | ImportedIdentity = 3

type [<AllowNullLiteral>] GroupMembership =
    abstract active: bool with get, set
    abstract descriptor: IdentityDescriptor with get, set
    abstract id: string with get, set
    abstract queriedId: string with get, set

type [<RequireQualifiedAccess>] GroupScopeType =
    | Generic = 0
    | ServiceHost = 1
    | TeamProject = 2

type [<AllowNullLiteral>] Identity =
    inherit IdentityBase

/// Base Identity class to allow "trimmed" identity class in the GetConnectionData API Makes sure that on-the-wire representations of the derived classes are compatible with each other (e.g. Server responds with PublicIdentity object while client deserializes it as Identity object) Derived classes should not have additional [DataMember] properties
type [<AllowNullLiteral>] IdentityBase =
    /// The custom display name for the identity (if any). Setting this property to an empty string will clear the existing custom display name. Setting this property to null will not affect the existing persisted value (since null values do not get sent over the wire or to the database)
    abstract customDisplayName: string with get, set
    abstract descriptor: IdentityDescriptor with get, set
    abstract id: string with get, set
    abstract isActive: bool with get, set
    abstract isContainer: bool with get, set
    abstract masterId: string with get, set
    abstract memberIds: ResizeArray<string> with get, set
    abstract memberOf: ResizeArray<IdentityDescriptor> with get, set
    abstract members: ResizeArray<IdentityDescriptor> with get, set
    abstract metaTypeId: float with get, set
    abstract properties: obj option with get, set
    /// The display name for the identity as specified by the source identity provider.
    abstract providerDisplayName: string with get, set
    abstract resourceVersion: float with get, set
    abstract socialDescriptor: string with get, set
    abstract subjectDescriptor: string with get, set
    abstract uniqueUserId: float with get, set

type [<AllowNullLiteral>] IdentityBatchInfo =
    abstract descriptors: ResizeArray<IdentityDescriptor> with get, set
    abstract identityIds: ResizeArray<string> with get, set
    abstract includeRestrictedVisibility: bool with get, set
    abstract propertyNames: ResizeArray<string> with get, set
    abstract queryMembership: QueryMembership with get, set
    abstract socialDescriptors: ResizeArray<string> with get, set
    abstract subjectDescriptors: ResizeArray<string> with get, set

/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
type [<AllowNullLiteral>] IdentityDescriptor =
    /// The unique identifier for this identity, not exceeding 256 chars, which will be persisted.
    abstract identifier: string with get, set
    /// Type of descriptor (for example, Windows, Passport, etc.).
    abstract identityType: string with get, set

type [<AllowNullLiteral>] IdentityRightsTransferData =
    abstract userPrincipalNameMappings: IdentityRightsTransferDataUserPrincipalNameMappings with get, set

type [<AllowNullLiteral>] IdentityScope =
    abstract administrators: IdentityDescriptor with get, set
    abstract id: string with get, set
    abstract isActive: bool with get, set
    abstract isGlobal: bool with get, set
    abstract localScopeId: string with get, set
    abstract name: string with get, set
    abstract parentId: string with get, set
    abstract scopeType: GroupScopeType with get, set
    abstract securingHostId: string with get, set
    abstract subjectDescriptor: string with get, set

/// Identity information.
type [<AllowNullLiteral>] IdentitySelf =
    /// The UserPrincipalName (UPN) of the account. This value comes from the source provider.
    abstract accountName: string with get, set
    /// The display name. For AAD accounts with multiple tenants this is the display name of the profile in the home tenant.
    abstract displayName: string with get, set
    /// This represents the name of the container of origin. For AAD accounts this is the tenantID of the home tenant. For MSA accounts this is the string "Windows Live ID".
    abstract domain: string with get, set
    /// This is the VSID of the home tenant profile. If the profile is signed into the home tenant or if the profile has no tenants then this Id is the same as the Id returned by the profile/profiles/me endpoint. Going forward it is recommended that you use the combined values of Origin, OriginId and Domain to uniquely identify a user rather than this Id.
    abstract id: string with get, set
    /// The type of source provider for the origin identifier. For MSA accounts this is "msa". For AAD accounts this is "aad".
    abstract origin: string with get, set
    /// The unique identifier from the system of origin. If there are multiple tenants this is the unique identifier of the account in the home tenant. (For MSA this is the PUID in hex notation, for AAD this is the object id.)
    abstract originId: string with get, set
    /// For AAD accounts this is all of the tenants that this account is a member of.
    abstract tenants: ResizeArray<TenantInfo> with get, set

type [<AllowNullLiteral>] IdentitySnapshot =
    abstract groups: ResizeArray<Identity> with get, set
    abstract identityIds: ResizeArray<string> with get, set
    abstract memberships: ResizeArray<GroupMembership> with get, set
    abstract scopeId: string with get, set
    abstract scopes: ResizeArray<IdentityScope> with get, set

type [<AllowNullLiteral>] IdentityUpdateData =
    abstract id: string with get, set
    abstract index: float with get, set
    abstract updated: bool with get, set

type [<AllowNullLiteral>] PagedIdentities =
    abstract continuationToken: ResizeArray<string> with get, set
    abstract identities: ResizeArray<Identity> with get, set

type [<RequireQualifiedAccess>] QueryMembership =
    | None = 0
    | Direct = 1
    | Expanded = 2
    | ExpandedUp = 3
    | ExpandedDown = 4

type [<RequireQualifiedAccess>] ReadIdentitiesOptions =
    | None = 0
    | FilterIllegalMemberships = 1

type [<AllowNullLiteral>] SwapIdentityInfo =
    abstract id1: string with get, set
    abstract id2: string with get, set

type [<AllowNullLiteral>] TenantInfo =
    abstract homeTenant: bool with get, set
    abstract tenantId: string with get, set
    abstract tenantName: string with get, set
    abstract verifiedDomains: ResizeArray<string> with get, set

type [<AllowNullLiteral>] IdentityRightsTransferDataUserPrincipalNameMappings =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
type IIdentity = __IdentityService.IIdentity
type IdentitiesGetConnectionsResponseModel = __IdentityService.IdentitiesGetConnectionsResponseModel

type [<AllowNullLiteral>] IExports =
    abstract PeoplePickerProvider: PeoplePickerProviderStatic

type [<AllowNullLiteral>] IPeoplePickerProvider =
    /// Add identities to the MRU
    abstract addIdentitiesToMRU: (ResizeArray<IIdentity> -> Promise<bool>) option with get, set
    /// Request Entity information given an entityId
    abstract getEntityFromUniqueAttribute: (string -> U2<IIdentity, PromiseLike<IIdentity>>) with get, set
    /// If no input is in the search box when clicked, provide a set of identities to show (used for MRU)
    abstract onEmptyInputFocus: (unit -> U2<ResizeArray<IIdentity>, PromiseLike<ResizeArray<IIdentity>>> option) option with get, set
    /// Given a list of currently selected items and a filter string, return a list of suggestions to put in the suggestion list
    abstract onFilterIdentities: (string -> ResizeArray<IIdentity> -> U2<ResizeArray<IIdentity>, PromiseLike<ResizeArray<IIdentity>>> option) with get, set
    /// Request connection information about a given Entity.
    abstract onRequestConnectionInformation: (IIdentity -> bool -> U2<IdentitiesGetConnectionsResponseModel, PromiseLike<IdentitiesGetConnectionsResponseModel>>) with get, set
    /// Remove identities from the MRU
    abstract removeIdentitiesFromMRU: (ResizeArray<IIdentity> -> Promise<bool>) option with get, set

type [<AllowNullLiteral>] PeoplePickerProvider =
    inherit IPeoplePickerProvider
    /// Add identities to the MRU
    abstract addIdentitiesToMRU: (ResizeArray<IIdentity> -> Promise<bool>) with get, set
    /// Request Entity information given an entityId
    abstract getEntityFromUniqueAttribute: (string -> U2<IIdentity, PromiseLike<IIdentity>>) with get, set
    /// If no input is in the search box when clicked, provide a set of identities to show (used for MRU)
    abstract onEmptyInputFocus: (unit -> U2<ResizeArray<IIdentity>, PromiseLike<ResizeArray<IIdentity>>>) with get, set
    /// Given a list of currently selected items and a filter string, return a list of suggestions to put in the suggestion list
    abstract onFilterIdentities: (string -> ResizeArray<IIdentity> -> U2<ResizeArray<IIdentity>, Promise<ResizeArray<IIdentity>>>) with get, set
    /// Request connection information about a given Entity.
    abstract onRequestConnectionInformation: (IIdentity -> bool -> U2<IdentitiesGetConnectionsResponseModel, PromiseLike<IdentitiesGetConnectionsResponseModel>>) with get, set
    /// Remove identities from the MRU
    abstract removeIdentitiesFromMRU: (ResizeArray<IIdentity> -> Promise<bool>) with get, set

type [<AllowNullLiteral>] PeoplePickerProviderStatic =
    [<Emit "new $0($1...)">] abstract Create: unit -> PeoplePickerProvider

type [<StringEnum>] [<RequireQualifiedAccess>] IdentityServiceIds =
    | [<CompiledName "ms.vss-features.identity-service">] IdentityService

type [<AllowNullLiteral>] IIdentity =
    abstract entityId: string with get, set
    abstract entityType: string with get, set
    abstract originDirectory: string with get, set
    abstract originId: string with get, set

type [<AllowNullLiteral>] IdentitiesGetConnectionsResponseModel =
    abstract successors: ResizeArray<IIdentity> option with get, set
    abstract managers: ResizeArray<IIdentity> option with get, set
    abstract directReports: ResizeArray<IIdentity> option with get, set

type [<AllowNullLiteral>] IdentitiesSearchRequestModel =
    abstract query: string with get, set
    abstract identityTypes: ResizeArray<string> option with get, set
    abstract operationScopes: ResizeArray<string> option with get, set
    abstract queryTypeHint: string option with get, set
    abstract pagingToken: string option with get, set
    abstract properties: ResizeArray<string> option with get, set
    abstract filterByAncestorEntityIds: ResizeArray<string> option with get, set
    abstract filterByEntityIds: ResizeArray<string> option with get, set
    abstract options: obj option with get, set

type [<AllowNullLiteral>] IVssIdentityService =
    /// Get a list of the Most Recently Used (MRU) identities
    abstract getIdentityMruAsync: unit -> Promise<ResizeArray<IIdentity>>
    /// <summary>Given a search request model, return a list of Entities. If the filterIdentity callback is added, additionally filter the values before returning</summary>
    /// <param name="query">The query to search the identities type with.</param>
    /// <param name="identityTypes">The types of identities to search (default "user" and "group")</param>
    /// <param name="operationScopes">The scope you would like to search (default "ims", "source")</param>
    /// <param name="queryTypeHint">A hint of what property your query is trying to search</param>
    /// <param name="options">Additional options to pass into the search</param>
    /// <param name="filterIdentity">A filter passed in to alter the results of the identities found</param>
    abstract searchIdentitiesAsync: query: string * ?identityTypes: ResizeArray<string> * ?operationScopes: ResizeArray<string> * ?queryTypeHint: string * ?options: obj * ?filterIdentity: (ResizeArray<IIdentity> -> ResizeArray<IIdentity>) -> Promise<ResizeArray<IIdentity>>
    /// <summary>Add a list of identities to the MRU</summary>
    /// <param name="identities">list of IdentityRefs to add to the MRU</param>
    abstract addMruIdentitiesAsync: identities: ResizeArray<IIdentity> -> Promise<bool>
    /// Remove a list of identities from the MRU
    abstract removeMruIdentitiesAsync: identity: ResizeArray<IIdentity> -> Promise<bool>
    /// <summary>Gets a list of connections for a given identity</summary>
    /// <param name="identity">Entity to look up connections</param>
    abstract getConnections: identity: IIdentity * ?getDirectReports: bool -> Promise<IdentitiesGetConnectionsResponseModel>
module Identities = ___Identities_Identities
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] AccessMapping =
    abstract accessPoint: string with get, set
    abstract displayName: string with get, set
    abstract moniker: string with get, set
    /// The service which owns this access mapping e.g. TFS, ELS, etc.
    abstract serviceOwner: string with get, set
    /// Part of the access mapping which applies context after the access point of the server.
    abstract virtualDirectory: string with get, set

/// Data transfer class that holds information needed to set up a connection with a VSS server.
type [<AllowNullLiteral>] ConnectionData =
    /// The Id of the authenticated user who made this request. More information about the user can be obtained by passing this Id to the Identity service
    abstract authenticatedUser: Identities.Identity with get, set
    /// The Id of the authorized user who made this request. More information about the user can be obtained by passing this Id to the Identity service
    abstract authorizedUser: Identities.Identity with get, set
    /// The id for the server.
    abstract deploymentId: string with get, set
    /// The type for the server Hosted/OnPremises.
    abstract deploymentType: WebApi.DeploymentFlags with get, set
    /// The instance id for this host.
    abstract instanceId: string with get, set
    /// The last user access for this instance.  Null if not requested specifically.
    abstract lastUserAccess: DateTime with get, set
    /// Data that the location service holds.
    abstract locationServiceData: LocationServiceData with get, set
    /// The virtual directory of the host we are talking to.
    abstract webApplicationRelativeDirectory: string with get, set

type [<RequireQualifiedAccess>] InheritLevel =
    | None = 0
    | Deployment = 1
    | Account = 2
    | Collection = 4
    | All = 7

type [<AllowNullLiteral>] LocationMapping =
    abstract accessMappingMoniker: string with get, set
    abstract location: string with get, set

/// Data transfer class used to transfer data about the location service data over the web service.
type [<AllowNullLiteral>] LocationServiceData =
    /// Data about the access mappings contained by this location service.
    abstract accessMappings: ResizeArray<AccessMapping> with get, set
    /// Data that the location service holds.
    abstract clientCacheFresh: bool with get, set
    /// The time to live on the location service cache.
    abstract clientCacheTimeToLive: float with get, set
    /// The default access mapping moniker for the server.
    abstract defaultAccessMappingMoniker: string with get, set
    /// The obsolete id for the last change that took place on the server (use LastChangeId64).
    abstract lastChangeId: float with get, set
    /// The non-truncated 64-bit id for the last change that took place on the server.
    abstract lastChangeId64: float with get, set
    /// Data about the service definitions contained by this location service.
    abstract serviceDefinitions: ResizeArray<ServiceDefinition> with get, set
    /// The identifier of the deployment which is hosting this location data (e.g. SPS, TFS, ELS, Napa, etc.)
    abstract serviceOwner: string with get, set

type [<RequireQualifiedAccess>] RelativeToSetting =
    | Context = 0
    | WebApplication = 2
    | FullyQualified = 3

type [<AllowNullLiteral>] ResourceAreaInfo =
    abstract id: string with get, set
    abstract locationUrl: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] ServiceDefinition =
    abstract description: string with get, set
    abstract displayName: string with get, set
    abstract identifier: string with get, set
    abstract inheritLevel: InheritLevel with get, set
    abstract locationMappings: ResizeArray<LocationMapping> with get, set
    /// Maximum api version that this resource supports (current server version for this resource). Copied from \<c\>ApiResourceLocation\</c\>.
    abstract maxVersion: string with get, set
    /// Minimum api version that this resource supports. Copied from \<c\>ApiResourceLocation\</c\>.
    abstract minVersion: string with get, set
    abstract parentIdentifier: string with get, set
    abstract parentServiceType: string with get, set
    abstract properties: obj option with get, set
    abstract relativePath: string with get, set
    abstract relativeToSetting: RelativeToSetting with get, set
    /// The latest version of this resource location that is in "Release" (non-preview) mode. Copied from \<c\>ApiResourceLocation\</c\>.
    abstract releasedVersion: string with get, set
    /// The current resource version supported by this resource location. Copied from \<c\>ApiResourceLocation\</c\>.
    abstract resourceVersion: float with get, set
    /// The service which owns this definition e.g. TFS, ELS, etc.
    abstract serviceOwner: string with get, set
    abstract serviceType: string with get, set
    abstract status: ServiceStatus with get, set
    abstract toolId: string with get, set

type [<RequireQualifiedAccess>] ServiceStatus =
    | Assigned = 0
    | Active = 1
    | Moving = 2
module Locations = ___Locations_Locations
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract LocationsRestClient: LocationsRestClientStatic

type [<AllowNullLiteral>] LocationsRestClient =
    inherit RestClientBase
    /// <summary>This was copied and adapted from TeamFoundationConnectionService.Connect()</summary>
    /// <param name="connectOptions">-</param>
    /// <param name="lastChangeId">- Obsolete 32-bit LastChangeId</param>
    /// <param name="lastChangeId64">- Non-truncated 64-bit LastChangeId</param>
    abstract getConnectionData: ?connectOptions: WebApi.ConnectOptions * ?lastChangeId: float * ?lastChangeId64: float -> Promise<Locations.ConnectionData>
    /// <param name="areaId">-</param>
    /// <param name="enterpriseName">-</param>
    /// <param name="organizationName">-</param>
    abstract getResourceArea: areaId: string * ?enterpriseName: string * ?organizationName: string -> Promise<Locations.ResourceAreaInfo>
    /// <param name="areaId">-</param>
    /// <param name="hostId">-</param>
    abstract getResourceAreaByHost: areaId: string * hostId: string -> Promise<Locations.ResourceAreaInfo>
    /// <param name="enterpriseName">-</param>
    /// <param name="organizationName">-</param>
    abstract getResourceAreas: ?enterpriseName: string * ?organizationName: string -> Promise<ResizeArray<Locations.ResourceAreaInfo>>
    /// <param name="hostId">-</param>
    abstract getResourceAreasByHost: hostId: string -> Promise<ResizeArray<Locations.ResourceAreaInfo>>
    /// <param name="serviceType">-</param>
    /// <param name="identifier">-</param>
    abstract deleteServiceDefinition: serviceType: string * identifier: string -> Promise<unit>
    /// <summary>Finds a given service definition.</summary>
    /// <param name="serviceType">-</param>
    /// <param name="identifier">-</param>
    /// <param name="allowFaultIn">- If true, we will attempt to fault in a host instance mapping if in SPS.</param>
    /// <param name="previewFaultIn">- If true, we will calculate and return a host instance mapping, but not persist it.</param>
    abstract getServiceDefinition: serviceType: string * identifier: string * ?allowFaultIn: bool * ?previewFaultIn: bool -> Promise<Locations.ServiceDefinition>
    /// <param name="serviceType">-</param>
    abstract getServiceDefinitions: ?serviceType: string -> Promise<ResizeArray<Locations.ServiceDefinition>>
    /// <param name="serviceDefinitions">-</param>
    abstract updateServiceDefinitions: serviceDefinitions: WebApi.VssJsonCollectionWrapperV<ResizeArray<Locations.ServiceDefinition>> -> Promise<unit>

type [<AllowNullLiteral>] LocationsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> LocationsRestClient
module FormInput = ___FormInput_FormInput
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] ActorFilter =
    inherit RoleBasedFilter

type [<AllowNullLiteral>] ActorNotificationReason =
    inherit NotificationReason
    abstract matchedRoles: ResizeArray<string> with get, set

/// Artifact filter options. Used in "follow" subscriptions.
type [<AllowNullLiteral>] ArtifactFilter =
    inherit BaseSubscriptionFilter
    abstract artifactId: string with get, set
    abstract artifactType: string with get, set
    abstract artifactUri: string with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] BaseSubscriptionFilter =
    abstract eventType: string with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] BatchNotificationOperation =
    abstract notificationOperation: NotificationOperation with get, set
    abstract notificationQueryConditions: ResizeArray<NotificationQueryCondition> with get, set

type [<AllowNullLiteral>] BlockFilter =
    inherit RoleBasedFilter

type [<AllowNullLiteral>] BlockSubscriptionChannel =
    abstract ``type``: string with get, set

type [<RequireQualifiedAccess>] DefaultGroupDeliveryPreference =
    | NoDelivery = -1
    | EachMember = 2

type [<AllowNullLiteral>] DiagnosticIdentity =
    abstract displayName: string with get, set
    abstract emailAddress: string with get, set
    abstract id: string with get, set

type [<AllowNullLiteral>] DiagnosticNotification =
    abstract eventId: float with get, set
    abstract eventType: string with get, set
    abstract id: float with get, set
    abstract messages: ResizeArray<NotificationDiagnosticLogMessage> with get, set
    abstract recipients: DiagnosticNotificationRecipients with get, set
    abstract result: string with get, set
    abstract stats: DiagnosticNotificationStats with get, set
    abstract subscriptionId: string with get, set

type [<AllowNullLiteral>] DiagnosticRecipient =
    abstract recipient: DiagnosticIdentity with get, set
    abstract status: string with get, set

type [<AllowNullLiteral>] EmailHtmlSubscriptionChannel =
    inherit SubscriptionChannelWithAddress
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] EmailPlaintextSubscriptionChannel =
    inherit SubscriptionChannelWithAddress
    abstract ``type``: string with get, set

type [<RequireQualifiedAccess>] EvaluationOperationStatus =
    | NotSet = 0
    | Queued = 1
    | InProgress = 2
    | Cancelled = 3
    | Succeeded = 4
    | Failed = 5
    | TimedOut = 6
    | NotFound = 7

type [<AllowNullLiteral>] EventBacklogStatus =
    abstract captureTime: DateTime with get, set
    abstract jobId: string with get, set
    abstract lastEventBatchStartTime: DateTime with get, set
    abstract lastEventProcessedTime: DateTime with get, set
    abstract lastJobBatchStartTime: DateTime with get, set
    abstract lastJobProcessedTime: DateTime with get, set
    abstract oldestPendingEventTime: DateTime with get, set
    abstract publisher: string with get, set
    abstract unprocessedEvents: float with get, set

type [<AllowNullLiteral>] EventBatch =
    abstract endTime: obj option with get, set
    abstract eventCounts: DiagnosticNotificationStats with get, set
    abstract eventIds: string with get, set
    abstract notificationCounts: DiagnosticNotificationStats with get, set
    abstract preProcessEndTime: obj option with get, set
    abstract preProcessStartTime: obj option with get, set
    abstract processEndTime: obj option with get, set
    abstract processStartTime: obj option with get, set
    abstract startTime: obj option with get, set
    abstract subscriptionCounts: DiagnosticNotificationStats with get, set

type [<AllowNullLiteral>] EventProcessingLog =
    inherit NotificationJobDiagnosticLog
    abstract batches: ResizeArray<EventBatch> with get, set
    abstract matcherResults: ResizeArray<MatcherResult> with get, set

type [<RequireQualifiedAccess>] EventPublisherQueryFlags =
    | None = 0
    | IncludeRemoteServices = 2

/// Encapsulates events result properties. It defines the total number of events used and the number of matched events.
type [<AllowNullLiteral>] EventsEvaluationResult =
    /// Count of events evaluated.
    abstract count: float with get, set
    /// Count of matched events.
    abstract matchedCount: float with get, set

/// A transform request specify the properties of a notification event to be transformed.
type [<AllowNullLiteral>] EventTransformRequest =
    /// Event payload.
    abstract eventPayload: string with get, set
    /// Event type.
    abstract eventType: string with get, set
    /// System inputs.
    abstract systemInputs: EventTransformRequestSystemInputs with get, set

/// Result of transforming a notification event.
type [<AllowNullLiteral>] EventTransformResult =
    /// Transformed html content.
    abstract content: string with get, set
    /// Calculated data.
    abstract data: obj option with get, set
    /// Calculated system inputs.
    abstract systemInputs: EventTransformRequestSystemInputs with get, set

type [<RequireQualifiedAccess>] EventTypeQueryFlags =
    | None = 0
    | IncludeFields = 1

type [<AllowNullLiteral>] ExpressionFilter =
    inherit BaseSubscriptionFilter
    abstract criteria: ExpressionFilterModel with get, set
    abstract ``type``: string with get, set

/// Subscription Filter Clause represents a single clause in a subscription filter e.g. If the subscription has the following criteria "Project Name = [Current Project] AND Assigned To = [Me] it will be represented as two Filter Clauses Clause 1: Index = 1, Logical Operator: NULL  , FieldName = 'Project Name', Operator = '=', Value = '[Current Project]' Clause 2: Index = 2, Logical Operator: 'AND' , FieldName = 'Assigned To' , Operator = '=', Value = '[Me]'
type [<AllowNullLiteral>] ExpressionFilterClause =
    abstract fieldName: string with get, set
    /// The order in which this clause appeared in the filter query
    abstract index: float with get, set
    /// Logical Operator 'AND', 'OR' or NULL (only for the first clause in the filter)
    abstract logicalOperator: string with get, set
    abstract operator: string with get, set
    abstract value: string with get, set

/// Represents a hierarchy of SubscritionFilterClauses that have been grouped together through either adding a group in the WebUI or using parethesis in the Subscription condition string
type [<AllowNullLiteral>] ExpressionFilterGroup =
    /// The index of the last FilterClause in this group
    abstract ``end``: float with get, set
    /// Level of the group, since groups can be nested for each nested group the level will increase by 1
    abstract level: float with get, set
    /// The index of the first FilterClause in this group
    abstract start: float with get, set

type [<AllowNullLiteral>] ExpressionFilterModel =
    /// Flat list of clauses in this subscription
    abstract clauses: ResizeArray<ExpressionFilterClause> with get, set
    /// Grouping of clauses in the subscription
    abstract groups: ResizeArray<ExpressionFilterGroup> with get, set
    /// Max depth of the Subscription tree
    abstract maxGroupLevel: float with get, set

type [<AllowNullLiteral>] FieldInputValues =
    inherit FormInput.InputValues
    abstract operators: ResizeArray<float> with get, set

type [<AllowNullLiteral>] FieldValuesQuery =
    inherit FormInput.InputValuesQuery
    abstract inputValues: ResizeArray<FieldInputValues> with get, set
    abstract scope: string with get, set

type [<AllowNullLiteral>] GeneratedNotification =
    abstract recipients: ResizeArray<DiagnosticIdentity> with get, set

type [<AllowNullLiteral>] GroupSubscriptionChannel =
    inherit SubscriptionChannelWithAddress
    abstract ``type``: string with get, set

/// Abstraction interface for the diagnostic log.  Primarily for deserialization.
type [<AllowNullLiteral>] INotificationDiagnosticLog =
    /// Identifier used for correlating to other diagnostics that may have been recorded elsewhere.
    abstract activityId: string with get, set
    /// Description of what subscription or notification job is being logged.
    abstract description: string with get, set
    /// Time the log ended.
    abstract endTime: DateTime with get, set
    /// Unique instance identifier.
    abstract id: string with get, set
    /// Type of information being logged.
    abstract logType: string with get, set
    /// List of log messages.
    abstract messages: ResizeArray<NotificationDiagnosticLogMessage> with get, set
    /// Dictionary of log properties and settings for the job.
    abstract properties: EventTransformRequestSystemInputs with get, set
    /// This identifier depends on the logType.  For notification jobs, this will be the job Id. For subscription tracing, this will be a special root Guid with the subscription Id encoded.
    abstract source: string with get, set
    /// Time the log started.
    abstract startTime: DateTime with get, set

type [<AllowNullLiteral>] ISubscriptionChannel =
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ISubscriptionFilter =
    abstract eventType: string with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] MatcherResult =
    abstract matcher: string with get, set
    abstract stats: MatcherResultStats with get, set

type [<AllowNullLiteral>] MessageQueueSubscriptionChannel =
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] NotificationAdminSettings =
    /// The default group delivery preference for groups in this collection
    abstract defaultGroupDeliveryPreference: DefaultGroupDeliveryPreference with get, set

type [<AllowNullLiteral>] NotificationAdminSettingsUpdateParameters =
    abstract defaultGroupDeliveryPreference: DefaultGroupDeliveryPreference with get, set

type [<AllowNullLiteral>] NotificationBacklogStatus =
    abstract captureTime: DateTime with get, set
    abstract channel: string with get, set
    abstract jobId: string with get, set
    abstract lastJobBatchStartTime: DateTime with get, set
    abstract lastJobProcessedTime: DateTime with get, set
    abstract lastNotificationBatchStartTime: DateTime with get, set
    abstract lastNotificationProcessedTime: DateTime with get, set
    abstract oldestPendingNotificationTime: DateTime with get, set
    abstract publisher: string with get, set
    /// Null status is unprocessed
    abstract status: string with get, set
    abstract unprocessedNotifications: float with get, set

type [<AllowNullLiteral>] NotificationBatch =
    abstract endTime: obj option with get, set
    abstract notificationCount: float with get, set
    abstract notificationIds: string with get, set
    abstract problematicNotifications: ResizeArray<DiagnosticNotification> with get, set
    abstract startTime: obj option with get, set

type [<AllowNullLiteral>] NotificationDeliveryLog =
    inherit NotificationJobDiagnosticLog
    abstract batches: ResizeArray<NotificationBatch> with get, set

/// Abstract base class for all of the diagnostic logs.
type [<AllowNullLiteral>] NotificationDiagnosticLog =
    /// Identifier used for correlating to other diagnostics that may have been recorded elsewhere.
    abstract activityId: string with get, set
    abstract description: string with get, set
    abstract endTime: DateTime with get, set
    abstract errors: float with get, set
    /// Unique instance identifier.
    abstract id: string with get, set
    abstract logType: string with get, set
    abstract messages: ResizeArray<NotificationDiagnosticLogMessage> with get, set
    abstract properties: EventTransformRequestSystemInputs with get, set
    /// This identifier depends on the logType.  For notification jobs, this will be the job Id. For subscription tracing, this will be a special root Guid with the subscription Id encoded.
    abstract source: string with get, set
    abstract startTime: DateTime with get, set
    abstract warnings: float with get, set

type [<AllowNullLiteral>] NotificationDiagnosticLogMessage =
    /// Corresponds to .Net TraceLevel enumeration
    abstract level: float with get, set
    abstract message: string with get, set
    abstract time: obj option with get, set

type [<AllowNullLiteral>] NotificationEventBacklogStatus =
    abstract eventBacklogStatus: ResizeArray<EventBacklogStatus> with get, set
    abstract notificationBacklogStatus: ResizeArray<NotificationBacklogStatus> with get, set

/// Encapsulates the properties of a filterable field. A filterable field is a field in an event that can used to filter notifications for a certain event type.
type [<AllowNullLiteral>] NotificationEventField =
    /// Gets or sets the type of this field.
    abstract fieldType: NotificationEventFieldType with get, set
    /// Gets or sets the unique identifier of this field.
    abstract id: string with get, set
    /// Gets or sets the name of this field.
    abstract name: string with get, set
    /// Gets or sets the path to the field in the event object. This path can be either Json Path or XPath, depending on if the event will be serialized into Json or XML
    abstract path: string with get, set
    /// Gets or sets the scopes that this field supports. If not specified then the event type scopes apply.
    abstract supportedScopes: ResizeArray<string> with get, set

/// Encapsulates the properties of a field type. It includes a unique id for the operator and a localized string for display name
type [<AllowNullLiteral>] NotificationEventFieldOperator =
    /// Gets or sets the display name of an operator
    abstract displayName: string with get, set
    /// Gets or sets the id of an operator
    abstract id: string with get, set

/// Encapsulates the properties of a field type. It describes the data type of a field, the operators it support and how to populate it in the UI
type [<AllowNullLiteral>] NotificationEventFieldType =
    /// Gets or sets the unique identifier of this field type.
    abstract id: string with get, set
    abstract operatorConstraints: ResizeArray<OperatorConstraint> with get, set
    /// Gets or sets the list of operators that this type supports.
    abstract operators: ResizeArray<NotificationEventFieldOperator> with get, set
    abstract subscriptionFieldType: SubscriptionFieldType with get, set
    /// Gets or sets the value definition of this field like the getValuesMethod and template to display in the UI
    abstract value: ValueDefinition with get, set

/// Encapsulates the properties of a notification event publisher.
type [<AllowNullLiteral>] NotificationEventPublisher =
    abstract id: string with get, set
    abstract subscriptionManagementInfo: SubscriptionManagement with get, set
    abstract url: string with get, set

/// Encapsulates the properties of an event role.  An event Role is used for role based subscription for example for a buildCompletedEvent, one role is request by field
type [<AllowNullLiteral>] NotificationEventRole =
    /// Gets or sets an Id for that role, this id is used by the event.
    abstract id: string with get, set
    /// Gets or sets the Name for that role, this name is used for UI display.
    abstract name: string with get, set
    /// Gets or sets whether this role can be a group or just an individual user
    abstract supportsGroups: bool with get, set

/// Encapsulates the properties of an event type. It defines the fields, that can be used for filtering, for that event type.
type [<AllowNullLiteral>] NotificationEventType =
    abstract category: NotificationEventTypeCategory with get, set
    /// Gets or sets the color representing this event type. Example: rgb(128,245,211) or #fafafa
    abstract color: string with get, set
    abstract customSubscriptionsAllowed: bool with get, set
    abstract eventPublisher: NotificationEventPublisher with get, set
    abstract fields: NotificationEventTypeFields with get, set
    abstract hasInitiator: bool with get, set
    /// Gets or sets the icon representing this event type. Can be a URL or a CSS class. Example: css://some-css-class
    abstract icon: string with get, set
    /// Gets or sets the unique identifier of this event definition.
    abstract id: string with get, set
    /// Gets or sets the name of this event definition.
    abstract name: string with get, set
    abstract roles: ResizeArray<NotificationEventRole> with get, set
    /// Gets or sets the scopes that this event type supports
    abstract supportedScopes: ResizeArray<string> with get, set
    /// Gets or sets the rest end point to get this event type details (fields, fields types)
    abstract url: string with get, set

/// Encapsulates the properties of a category. A category will be used by the UI to group event types
type [<AllowNullLiteral>] NotificationEventTypeCategory =
    /// Gets or sets the unique identifier of this category.
    abstract id: string with get, set
    /// Gets or sets the friendly name of this category.
    abstract name: string with get, set

type [<AllowNullLiteral>] NotificationJobDiagnosticLog =
    inherit NotificationDiagnosticLog
    abstract result: string with get, set
    abstract stats: MatcherResultStats with get, set

type [<RequireQualifiedAccess>] NotificationOperation =
    | None = 0
    | SuspendUnprocessed = 1

type [<AllowNullLiteral>] NotificationQueryCondition =
    abstract eventInitiator: string with get, set
    abstract eventType: string with get, set
    abstract subscriber: string with get, set
    abstract subscriptionId: string with get, set

type [<AllowNullLiteral>] NotificationReason =
    abstract notificationReasonType: NotificationReasonType with get, set
    abstract targetIdentities: ResizeArray<WebApi.IdentityRef> with get, set

type [<RequireQualifiedAccess>] NotificationReasonType =
    | Unknown = 0
    | Follows = 1
    | Personal = 2
    | PersonalAlias = 3
    | DirectMember = 4
    | IndirectMember = 5
    | GroupAlias = 6
    | SubscriptionAlias = 7
    | SingleRole = 8
    | DirectMemberGroupRole = 9
    | InDirectMemberGroupRole = 10
    | AliasMemberGroupRole = 11

/// Encapsulates notifications result properties. It defines the number of notifications and the recipients of notifications.
type [<AllowNullLiteral>] NotificationsEvaluationResult =
    /// Count of generated notifications
    abstract count: float with get, set

type [<AllowNullLiteral>] NotificationStatistic =
    abstract date: DateTime with get, set
    abstract hitCount: float with get, set
    abstract path: string with get, set
    abstract ``type``: NotificationStatisticType with get, set
    abstract user: WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] NotificationStatisticsQuery =
    abstract conditions: ResizeArray<NotificationStatisticsQueryConditions> with get, set

type [<AllowNullLiteral>] NotificationStatisticsQueryConditions =
    abstract endDate: DateTime with get, set
    abstract hitCountMinimum: float with get, set
    abstract path: string with get, set
    abstract startDate: DateTime with get, set
    abstract ``type``: NotificationStatisticType with get, set
    abstract user: WebApi.IdentityRef with get, set

type [<RequireQualifiedAccess>] NotificationStatisticType =
    | NotificationBySubscription = 0
    | EventsByEventType = 1
    | NotificationByEventType = 2
    | EventsByEventTypePerUser = 3
    | NotificationByEventTypePerUser = 4
    | Events = 5
    | Notifications = 6
    | NotificationFailureBySubscription = 7
    | UnprocessedRangeStart = 100
    | UnprocessedEventsByPublisher = 101
    | UnprocessedEventDelayByPublisher = 102
    | UnprocessedNotificationsByChannelByPublisher = 103
    | UnprocessedNotificationDelayByChannelByPublisher = 104
    | DelayRangeStart = 200
    | TotalPipelineTime = 201
    | NotificationPipelineTime = 202
    | EventPipelineTime = 203
    | HourlyRangeStart = 1000
    | HourlyNotificationBySubscription = 1001
    | HourlyEventsByEventTypePerUser = 1002
    | HourlyEvents = 1003
    | HourlyNotifications = 1004
    | HourlyUnprocessedEventsByPublisher = 1101
    | HourlyUnprocessedEventDelayByPublisher = 1102
    | HourlyUnprocessedNotificationsByChannelByPublisher = 1103
    | HourlyUnprocessedNotificationDelayByChannelByPublisher = 1104
    | HourlyTotalPipelineTime = 1201
    | HourlyNotificationPipelineTime = 1202
    | HourlyEventPipelineTime = 1203

/// A subscriber is a user or group that has the potential to receive notifications.
type [<AllowNullLiteral>] NotificationSubscriber =
    /// Indicates how the subscriber should be notified by default.
    abstract deliveryPreference: NotificationSubscriberDeliveryPreference with get, set
    abstract flags: SubscriberFlags with get, set
    /// Identifier of the subscriber.
    abstract id: string with get, set
    /// Preferred email address of the subscriber. A null or empty value indicates no preferred email address has been set.
    abstract preferredEmailAddress: string with get, set

type [<RequireQualifiedAccess>] NotificationSubscriberDeliveryPreference =
    | NoDelivery = -1
    | PreferredEmailAddress = 1
    | EachMember = 2
    | UseDefault = 3

/// Updates to a subscriber. Typically used to change (or set) a preferred email address or default delivery preference.
type [<AllowNullLiteral>] NotificationSubscriberUpdateParameters =
    /// New delivery preference for the subscriber (indicates how the subscriber should be notified).
    abstract deliveryPreference: NotificationSubscriberDeliveryPreference with get, set
    /// New preferred email address for the subscriber. Specify an empty string to clear the current address.
    abstract preferredEmailAddress: string with get, set

/// A subscription defines criteria for matching events and how the subscription's subscriber should be notified about those events.
type [<AllowNullLiteral>] NotificationSubscription =
    /// Links to related resources, APIs, and views for the subscription.
    abstract _links: obj option with get, set
    /// Admin-managed settings for the subscription. Only applies when the subscriber is a group.
    abstract adminSettings: SubscriptionAdminSettings with get, set
    /// Channel for delivering notifications triggered by the subscription.
    abstract channel: ISubscriptionChannel with get, set
    /// Description of the subscription. Typically describes filter criteria which helps identity the subscription.
    abstract description: string with get, set
    /// Diagnostics for this subscription.
    abstract diagnostics: SubscriptionDiagnostics with get, set
    /// Any extra properties like detailed description for different contexts, user/group contexts
    abstract extendedProperties: EventTransformRequestSystemInputs with get, set
    /// Matching criteria for the subscription. ExpressionFilter
    abstract filter: ISubscriptionFilter with get, set
    /// Read-only indicators that further describe the subscription.
    abstract flags: SubscriptionFlags with get, set
    /// Subscription identifier.
    abstract id: string with get, set
    /// User that last modified (or created) the subscription.
    abstract lastModifiedBy: WebApi.IdentityRef with get, set
    /// Date when the subscription was last modified. If the subscription has not been updated since it was created, this value will indicate when the subscription was created.
    abstract modifiedDate: DateTime with get, set
    /// The permissions the user have for this subscriptions.
    abstract permissions: SubscriptionPermissions with get, set
    /// The container in which events must be published from in order to be matched by the subscription. If empty, the scope is the current host (typically an account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.
    abstract scope: SubscriptionScope with get, set
    /// Status of the subscription. Typically indicates whether the subscription is enabled or not.
    abstract status: SubscriptionStatus with get, set
    /// Message that provides more details about the status of the subscription.
    abstract statusMessage: string with get, set
    /// User or group that will receive notifications for events matching the subscription's filter criteria.
    abstract subscriber: WebApi.IdentityRef with get, set
    /// REST API URL of the subscriotion.
    abstract url: string with get, set
    /// User-managed settings for the subscription. Only applies when the subscriber is a group. Typically used to indicate whether the calling user is opted in or out of a group subscription.
    abstract userSettings: SubscriptionUserSettings with get, set

/// Parameters for creating a new subscription. A subscription defines criteria for matching events and how the subscription's subscriber should be notified about those events.
type [<AllowNullLiteral>] NotificationSubscriptionCreateParameters =
    /// Channel for delivering notifications triggered by the new subscription.
    abstract channel: ISubscriptionChannel with get, set
    /// Brief description for the new subscription. Typically describes filter criteria which helps identity the subscription.
    abstract description: string with get, set
    /// Matching criteria for the new subscription. ExpressionFilter
    abstract filter: ISubscriptionFilter with get, set
    /// The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically an account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.
    abstract scope: SubscriptionScope with get, set
    /// User or group that will receive notifications for events matching the subscription's filter criteria. If not specified, defaults to the calling user.
    abstract subscriber: WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] NotificationSubscriptionTemplate =
    abstract description: string with get, set
    abstract filter: ISubscriptionFilter with get, set
    abstract id: string with get, set
    abstract notificationEventInformation: NotificationEventType with get, set
    abstract ``type``: SubscriptionTemplateType with get, set

/// Parameters for updating an existing subscription. A subscription defines criteria for matching events and how the subscription's subscriber should be notified about those events. Note: only the fields to be updated should be set.
type [<AllowNullLiteral>] NotificationSubscriptionUpdateParameters =
    /// Admin-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group.
    abstract adminSettings: SubscriptionAdminSettings with get, set
    /// Channel for delivering notifications triggered by the subscription.
    abstract channel: ISubscriptionChannel with get, set
    /// Updated description for the subscription. Typically describes filter criteria which helps identity the subscription.
    abstract description: string with get, set
    /// Matching criteria for the subscription. ExpressionFilter
    abstract filter: ISubscriptionFilter with get, set
    /// The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically the current account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.
    abstract scope: SubscriptionScope with get, set
    /// Updated status for the subscription. Typically used to enable or disable a subscription.
    abstract status: SubscriptionStatus with get, set
    /// Optional message that provides more details about the updated status.
    abstract statusMessage: string with get, set
    /// User-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group. Typically used to opt-in or opt-out a user from a group subscription.
    abstract userSettings: SubscriptionUserSettings with get, set

/// Encapsulates the properties of an operator constraint. An operator constraint defines if some operator is available only for specific scope like a project scope.
type [<AllowNullLiteral>] OperatorConstraint =
    abstract operator: string with get, set
    /// Gets or sets the list of scopes that this type supports.
    abstract supportedScopes: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ProcessedEvent =
    /// All of the users that were associated with this event and their role.
    abstract actors: ResizeArray<WebApi.EventActor> with get, set
    abstract allowedChannels: string with get, set
    abstract artifactUri: string with get, set
    abstract deliveryIdentities: ProcessingIdentities with get, set
    /// Evaluations for each user
    abstract evaluations: ProcessedEventEvaluations with get, set
    abstract eventId: float with get, set
    /// Which members were excluded from evaluation (only applies to ActorMatcher subscriptions)
    abstract exclusions: ResizeArray<WebApi.EventActor> with get, set
    /// Which members were included for evaluation (only applies to ActorMatcher subscriptions)
    abstract inclusions: ResizeArray<WebApi.EventActor> with get, set
    abstract notifications: ResizeArray<GeneratedNotification> with get, set

type [<AllowNullLiteral>] ProcessingDiagnosticIdentity =
    inherit DiagnosticIdentity
    abstract deliveryPreference: string with get, set
    abstract isActive: bool with get, set
    abstract isGroup: bool with get, set
    abstract message: string with get, set

type [<AllowNullLiteral>] ProcessingIdentities =
    abstract excludedIdentities: ProcessingIdentitiesExcludedIdentities with get, set
    abstract includedIdentities: ProcessingIdentitiesExcludedIdentities with get, set
    abstract messages: ResizeArray<NotificationDiagnosticLogMessage> with get, set
    abstract missingIdentities: ResizeArray<string> with get, set
    abstract properties: EventTransformRequestSystemInputs with get, set

type [<AllowNullLiteral>] RoleBasedFilter =
    inherit ExpressionFilter
    abstract exclusions: ResizeArray<string> with get, set
    abstract inclusions: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ServiceBusSubscriptionChannel =
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ServiceHooksSubscriptionChannel =
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] SoapSubscriptionChannel =
    inherit SubscriptionChannelWithAddress
    abstract ``type``: string with get, set

type [<RequireQualifiedAccess>] SubscriberFlags =
    | None = 0
    | DeliveryPreferencesEditable = 2
    | SupportsPreferredEmailAddressDelivery = 4
    | SupportsEachMemberDelivery = 8
    | SupportsNoDelivery = 16
    | IsUser = 32
    | IsGroup = 64
    | IsTeam = 128

/// Admin-managed settings for a group subscription.
type [<AllowNullLiteral>] SubscriptionAdminSettings =
    /// If true, members of the group subscribed to the associated subscription cannot opt (choose not to get notified)
    abstract blockUserOptOut: bool with get, set

type [<AllowNullLiteral>] SubscriptionChannelWithAddress =
    abstract address: string with get, set
    abstract ``type``: string with get, set
    abstract useCustomAddress: bool with get, set

/// Contains all the diagonstics settings for a subscription.
type [<AllowNullLiteral>] SubscriptionDiagnostics =
    /// Diagnostics settings for retaining delivery results.  Used for Service Hooks subscriptions.
    abstract deliveryResults: SubscriptionTracing with get, set
    /// Diagnostics settings for troubleshooting notification delivery.
    abstract deliveryTracing: SubscriptionTracing with get, set
    /// Diagnostics settings for troubleshooting event matching.
    abstract evaluationTracing: SubscriptionTracing with get, set

type [<AllowNullLiteral>] SubscriptionEvaluation =
    abstract clauses: ResizeArray<SubscriptionEvaluationClause> with get, set
    abstract user: DiagnosticIdentity with get, set

type [<AllowNullLiteral>] SubscriptionEvaluationClause =
    abstract clause: string with get, set
    abstract order: float with get, set
    abstract result: bool with get, set

/// Encapsulates the properties of a SubscriptionEvaluationRequest. It defines the subscription to be evaluated and time interval for events used in evaluation.
type [<AllowNullLiteral>] SubscriptionEvaluationRequest =
    /// The min created date for the events used for matching in UTC. Use all events created since this date
    abstract minEventsCreatedDate: DateTime with get, set
    /// User or group that will receive notifications for events matching the subscription's filter criteria. If not specified, defaults to the calling user.
    abstract subscriptionCreateParameters: NotificationSubscriptionCreateParameters with get, set

/// Encapsulates the subscription evaluation results. It defines the Date Interval that was used, number of events evaluated and events and notifications results
type [<AllowNullLiteral>] SubscriptionEvaluationResult =
    /// Subscription evaluation job status
    abstract evaluationJobStatus: EvaluationOperationStatus with get, set
    /// Subscription evaluation events results.
    abstract events: EventsEvaluationResult with get, set
    /// The requestId which is the subscription evaluation jobId
    abstract id: string with get, set
    /// Subscription evaluation  notification results.
    abstract notifications: NotificationsEvaluationResult with get, set

/// Encapsulates the subscription evaluation settings needed for the UI
type [<AllowNullLiteral>] SubscriptionEvaluationSettings =
    /// Indicates whether subscription evaluation before saving is enabled or not
    abstract enabled: bool with get, set
    /// Time interval to check on subscription evaluation job in seconds
    abstract interval: float with get, set
    /// Threshold on the number of notifications for considering a subscription too noisy
    abstract threshold: float with get, set
    /// Time out for the subscription evaluation check in seconds
    abstract timeOut: float with get, set

type [<RequireQualifiedAccess>] SubscriptionFieldType =
    | String = 1
    | Integer = 2
    | DateTime = 3
    | PlainText = 5
    | Html = 7
    | TreePath = 8
    | History = 9
    | Double = 10
    | Guid = 11
    | Boolean = 12
    | Identity = 13
    | PicklistInteger = 14
    | PicklistString = 15
    | PicklistDouble = 16
    | TeamProject = 17

type [<RequireQualifiedAccess>] SubscriptionFlags =
    | None = 0
    | GroupSubscription = 1
    | ContributedSubscription = 2
    | CanOptOut = 4
    | TeamSubscription = 8
    | OneActorMatches = 16

/// Encapsulates the properties needed to manage subscriptions, opt in and out of subscriptions.
type [<AllowNullLiteral>] SubscriptionManagement =
    abstract serviceInstanceType: string with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] SubscriptionPermissions =
    | None = 0
    | View = 1
    | Edit = 2
    | Delete = 4

/// Notification subscriptions query input.
type [<AllowNullLiteral>] SubscriptionQuery =
    /// One or more conditions to query on. If more than 2 conditions are specified, the combined results of each condition is returned (i.e. conditions are logically OR'ed).
    abstract conditions: ResizeArray<SubscriptionQueryCondition> with get, set
    /// Flags the refine the types of subscriptions that will be returned from the query.
    abstract queryFlags: SubscriptionQueryFlags with get, set

/// Conditions a subscription must match to qualify for the query result set. Not all fields are required. A subscription must match all conditions specified in order to qualify for the result set.
type [<AllowNullLiteral>] SubscriptionQueryCondition =
    /// Filter conditions that matching subscriptions must have. Typically only the filter's type and event type are used for matching.
    abstract filter: ISubscriptionFilter with get, set
    /// Flags to specify the the type subscriptions to query for.
    abstract flags: SubscriptionFlags with get, set
    /// Scope that matching subscriptions must have.
    abstract scope: string with get, set
    /// ID of the subscriber (user or group) that matching subscriptions must be subscribed to.
    abstract subscriberId: string with get, set
    /// ID of the subscription to query for.
    abstract subscriptionId: string with get, set

type [<RequireQualifiedAccess>] SubscriptionQueryFlags =
    | None = 0
    | IncludeInvalidSubscriptions = 2
    | IncludeDeletedSubscriptions = 4
    | IncludeFilterDetails = 8
    | AlwaysReturnBasicInformation = 16
    | IncludeSystemSubscriptions = 32

/// A resource, typically an account or project, in which events are published from.
type [<AllowNullLiteral>] SubscriptionScope =
    inherit WebApi.EventScope

type [<RequireQualifiedAccess>] SubscriptionStatus =
    | JailedByNotificationsVolume = -200
    | PendingDeletion = -100
    | DisabledArgumentException = -12
    | DisabledProjectInvalid = -11
    | DisabledMissingPermissions = -10
    | DisabledFromProbation = -9
    | DisabledInactiveIdentity = -8
    | DisabledMessageQueueNotSupported = -7
    | DisabledMissingIdentity = -6
    | DisabledInvalidRoleExpression = -5
    | DisabledInvalidPathClause = -4
    | DisabledAsDuplicateOfDefault = -3
    | DisabledByAdmin = -2
    | Disabled = -1
    | Enabled = 0
    | EnabledOnProbation = 1

type [<RequireQualifiedAccess>] SubscriptionTemplateQueryFlags =
    | None = 0
    | IncludeUser = 1
    | IncludeGroup = 2
    | IncludeUserAndGroup = 4
    | IncludeEventTypeInformation = 22

type [<RequireQualifiedAccess>] SubscriptionTemplateType =
    | User = 0
    | Team = 1
    | Both = 2
    | None = 3

type [<AllowNullLiteral>] SubscriptionTraceDiagnosticLog =
    inherit NotificationDiagnosticLog
    /// Indicates the job Id that processed or delivered this subscription
    abstract jobId: string with get, set
    /// Indicates unique instance identifier for the job that processed or delivered this subscription
    abstract jobInstanceId: string with get, set
    abstract subscriptionId: string with get, set

type [<AllowNullLiteral>] SubscriptionTraceEventProcessingLog =
    inherit SubscriptionTraceDiagnosticLog
    abstract channel: string with get, set
    abstract evaluationIdentities: ProcessingIdentities with get, set
    /// Which members opted out from receiving notifications from this subscription
    abstract optedOut: ResizeArray<DiagnosticIdentity> with get, set
    abstract processedEvents: SubscriptionTraceEventProcessingLogProcessedEvents with get, set

type [<AllowNullLiteral>] SubscriptionTraceNotificationDeliveryLog =
    inherit SubscriptionTraceDiagnosticLog
    abstract notifications: ResizeArray<DiagnosticNotification> with get, set

/// Data controlling a single diagnostic setting for a subscription.
type [<AllowNullLiteral>] SubscriptionTracing =
    /// Indicates whether the diagnostic tracing is enabled or not.
    abstract enabled: bool with get, set
    /// Trace until the specified end date.
    abstract endDate: DateTime with get, set
    /// The maximum number of result details to trace.
    abstract maxTracedEntries: float with get, set
    /// The date and time tracing started.
    abstract startDate: DateTime with get, set
    /// Trace until remaining count reaches 0.
    abstract tracedEntries: float with get, set

/// User-managed settings for a group subscription.
type [<AllowNullLiteral>] SubscriptionUserSettings =
    /// Indicates whether the user will receive notifications for the associated group subscription.
    abstract optedOut: bool with get, set

type [<AllowNullLiteral>] UnsupportedFilter =
    inherit BaseSubscriptionFilter
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] UnsupportedSubscriptionChannel =
    abstract ``type``: string with get, set

/// Parameters to update diagnostics settings for a subscription.
type [<AllowNullLiteral>] UpdateSubscripitonDiagnosticsParameters =
    /// Diagnostics settings for retaining delivery results.  Used for Service Hooks subscriptions.
    abstract deliveryResults: UpdateSubscripitonTracingParameters with get, set
    /// Diagnostics settings for troubleshooting notification delivery.
    abstract deliveryTracing: UpdateSubscripitonTracingParameters with get, set
    /// Diagnostics settings for troubleshooting event matching.
    abstract evaluationTracing: UpdateSubscripitonTracingParameters with get, set

/// Parameters to update a specific diagnostic setting.
type [<AllowNullLiteral>] UpdateSubscripitonTracingParameters =
    /// Indicates whether to enable to disable the diagnostic tracing.
    abstract enabled: bool with get, set

type [<AllowNullLiteral>] UserSubscriptionChannel =
    inherit SubscriptionChannelWithAddress
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] UserSystemSubscriptionChannel =
    inherit SubscriptionChannelWithAddress
    abstract ``type``: string with get, set

/// Encapsulates the properties of a field value definition. It has the information needed to retrieve the list of possible values for a certain field and how to handle that field values in the UI. This information includes what type of object this value represents, which property to use for UI display and which property to use for saving the subscription
type [<AllowNullLiteral>] ValueDefinition =
    /// Gets or sets the data source.
    abstract dataSource: ResizeArray<FormInput.InputValue> with get, set
    /// Gets or sets the rest end point.
    abstract endPoint: string with get, set
    /// Gets or sets the result template.
    abstract resultTemplate: string with get, set

type [<AllowNullLiteral>] DiagnosticNotificationRecipients =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> DiagnosticRecipient with get, set

type [<AllowNullLiteral>] DiagnosticNotificationStats =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> float with get, set

type [<AllowNullLiteral>] EventTransformRequestSystemInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] MatcherResultStats =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> DiagnosticNotificationStats with get, set

type [<AllowNullLiteral>] NotificationEventTypeFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> NotificationEventField with get, set

type [<AllowNullLiteral>] ProcessedEventEvaluations =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> SubscriptionEvaluation with get, set

type [<AllowNullLiteral>] ProcessingIdentitiesExcludedIdentities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ProcessingDiagnosticIdentity with get, set

type [<AllowNullLiteral>] SubscriptionTraceEventProcessingLogProcessedEvents =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> ProcessedEvent with get, set
module Notification = ___Notification_Notification
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract NotificationRestClient: NotificationRestClientStatic

type [<AllowNullLiteral>] NotificationRestClient =
    inherit RestClientBase
    /// <param name="operation">-</param>
    abstract performBatchNotificationOperations: operation: Notification.BatchNotificationOperation -> Promise<unit>
    /// <summary>Get a list of diagnostic logs for this service.</summary>
    /// <param name="source">- ID specifying which type of logs to check diagnostics for.</param>
    /// <param name="entryId">- The ID of the specific log to query for.</param>
    /// <param name="startTime">- Start time for the time range to query in.</param>
    /// <param name="endTime">- End time for the time range to query in.</param>
    abstract listLogs: source: string * ?entryId: string * ?startTime: DateTime * ?endTime: DateTime -> Promise<ResizeArray<Notification.INotificationDiagnosticLog>>
    /// <summary>Get the diagnostics settings for a subscription.</summary>
    /// <param name="subscriptionId">- The id of the notifications subscription.</param>
    abstract getSubscriptionDiagnostics: subscriptionId: string -> Promise<Notification.SubscriptionDiagnostics>
    /// <summary>Update the diagnostics settings for a subscription.</summary>
    /// <param name="updateParameters">-</param>
    /// <param name="subscriptionId">- The id of the notifications subscription.</param>
    abstract updateSubscriptionDiagnostics: updateParameters: Notification.UpdateSubscripitonDiagnosticsParameters * subscriptionId: string -> Promise<Notification.SubscriptionDiagnostics>
    /// <summary>Publish an event. This request must be directed to the service "extmgmt".</summary>
    /// <param name="notificationEvent">-</param>
    abstract publishEvent: notificationEvent: WebApi.VssNotificationEvent -> Promise<WebApi.VssNotificationEvent>
    /// <summary>Tranform a notification event.</summary>
    /// <param name="transformRequest">- Object to be transformed.</param>
    abstract transformEvent: transformRequest: Notification.EventTransformRequest -> Promise<Notification.EventTransformResult>
    /// <param name="inputValuesQuery">-</param>
    /// <param name="eventType">-</param>
    abstract queryEventTypes: inputValuesQuery: Notification.FieldValuesQuery * eventType: string -> Promise<ResizeArray<Notification.NotificationEventField>>
    /// <summary>Get a specific event type.</summary>
    /// <param name="eventType">- The ID of the event type.</param>
    abstract getEventType: eventType: string -> Promise<Notification.NotificationEventType>
    /// <summary>List available event types for this service. Optionally filter by only event types for the specified publisher.</summary>
    /// <param name="publisherId">- Limit to event types for this publisher</param>
    abstract listEventTypes: ?publisherId: string -> Promise<ResizeArray<Notification.NotificationEventType>>
    /// <param name="notificationId">-</param>
    abstract getNotificationReasons: notificationId: float -> Promise<Notification.NotificationReason>
    /// <param name="notificationIds">-</param>
    abstract listNotificationReasons: ?notificationIds: float -> Promise<ResizeArray<Notification.NotificationReason>>
    abstract getSettings: unit -> Promise<Notification.NotificationAdminSettings>
    /// <param name="updateParameters">-</param>
    abstract updateSettings: updateParameters: Notification.NotificationAdminSettingsUpdateParameters -> Promise<Notification.NotificationAdminSettings>
    /// <summary>Get delivery preferences of a notifications subscriber.</summary>
    /// <param name="subscriberId">- ID of the user or group.</param>
    abstract getSubscriber: subscriberId: string -> Promise<Notification.NotificationSubscriber>
    /// <summary>Update delivery preferences of a notifications subscriber.</summary>
    /// <param name="updateParameters">-</param>
    /// <param name="subscriberId">- ID of the user or group.</param>
    abstract updateSubscriber: updateParameters: Notification.NotificationSubscriberUpdateParameters * subscriberId: string -> Promise<Notification.NotificationSubscriber>
    /// <summary>Query for subscriptions. A subscription is returned if it matches one or more of the specified conditions.</summary>
    /// <param name="subscriptionQuery">-</param>
    abstract querySubscriptions: subscriptionQuery: Notification.SubscriptionQuery -> Promise<ResizeArray<Notification.NotificationSubscription>>
    /// <summary>Create a new subscription.</summary>
    /// <param name="createParameters">-</param>
    abstract createSubscription: createParameters: Notification.NotificationSubscriptionCreateParameters -> Promise<Notification.NotificationSubscription>
    /// <summary>Delete a subscription.</summary>
    /// <param name="subscriptionId">-</param>
    abstract deleteSubscription: subscriptionId: string -> Promise<unit>
    /// <summary>Get a notification subscription by its ID.</summary>
    /// <param name="subscriptionId">-</param>
    /// <param name="queryFlags">-</param>
    abstract getSubscription: subscriptionId: string * ?queryFlags: Notification.SubscriptionQueryFlags -> Promise<Notification.NotificationSubscription>
    /// <summary>Get a list of notification subscriptions, either by subscription IDs or by all subscriptions for a given user or group.</summary>
    /// <param name="targetId">- User or Group ID</param>
    /// <param name="ids">- List of subscription IDs</param>
    /// <param name="queryFlags">-</param>
    abstract listSubscriptions: ?targetId: string * ?ids: ResizeArray<string> * ?queryFlags: Notification.SubscriptionQueryFlags -> Promise<ResizeArray<Notification.NotificationSubscription>>
    /// <summary>Update an existing subscription. Depending on the type of subscription and permissions, the caller can update the description, filter settings, channel (delivery) settings and more.</summary>
    /// <param name="updateParameters">-</param>
    /// <param name="subscriptionId">-</param>
    abstract updateSubscription: updateParameters: Notification.NotificationSubscriptionUpdateParameters * subscriptionId: string -> Promise<Notification.NotificationSubscription>
    /// Get available subscription templates.
    abstract getSubscriptionTemplates: unit -> Promise<ResizeArray<Notification.NotificationSubscriptionTemplate>>
    /// <summary>Update the specified user's settings for the specified subscription. This API is typically used to opt in or out of a shared subscription. User settings can only be applied to shared subscriptions, like team subscriptions or default subscriptions.</summary>
    /// <param name="userSettings">-</param>
    /// <param name="subscriptionId">-</param>
    /// <param name="userId">- ID of the user</param>
    abstract updateSubscriptionUserSettings: userSettings: Notification.SubscriptionUserSettings * subscriptionId: string * userId: string -> Promise<Notification.SubscriptionUserSettings>

type [<AllowNullLiteral>] NotificationRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> NotificationRestClient

/// Contains information about the progress or result of an async operation.
type [<AllowNullLiteral>] Operation =
    inherit OperationReference
    /// Links to other related objects.
    abstract _links: obj option with get, set
    /// Detailed messaged about the status of an operation.
    abstract detailedMessage: string with get, set
    /// Result message for an operation.
    abstract resultMessage: string with get, set
    /// URL to the operation result.
    abstract resultUrl: OperationResultReference with get, set

/// Reference for an async operation.
type [<AllowNullLiteral>] OperationReference =
    /// Unique identifier for the operation.
    abstract id: string with get, set
    /// Unique identifier for the plugin.
    abstract pluginId: string with get, set
    /// The current status of the operation.
    abstract status: OperationStatus with get, set
    /// URL to get the full operation object.
    abstract url: string with get, set

type [<AllowNullLiteral>] OperationResultReference =
    /// URL to the operation result.
    abstract resultUrl: string with get, set

type [<RequireQualifiedAccess>] OperationStatus =
    | NotSet = 0
    | Queued = 1
    | InProgress = 2
    | Cancelled = 3
    | Succeeded = 4
    | Failed = 5
module Operations = ___Operations_Operations
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract OperationsRestClient: OperationsRestClientStatic

type [<AllowNullLiteral>] OperationsRestClient =
    inherit RestClientBase
    /// <summary>Gets an operation from the the operationId using the given pluginId.</summary>
    /// <param name="operationId">- The ID for the operation.</param>
    /// <param name="pluginId">- The ID for the plugin.</param>
    abstract getOperation: operationId: string * ?pluginId: string -> Promise<Operations.Operation>

type [<AllowNullLiteral>] OperationsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> OperationsRestClient
module WebApi = ___WebApi_WebApi

/// The full policy configuration with settings.
type [<AllowNullLiteral>] PolicyConfiguration =
    inherit VersionedPolicyConfigurationRef
    /// The links to other objects related to this object.
    abstract _links: obj option with get, set
    /// A reference to the identity that created the policy.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The date and time when the policy was created.
    abstract createdDate: DateTime with get, set
    /// Indicates whether the policy is blocking.
    abstract isBlocking: bool with get, set
    /// Indicates whether the policy has been (soft) deleted.
    abstract isDeleted: bool with get, set
    /// Indicates whether the policy is enabled.
    abstract isEnabled: bool with get, set
    /// The policy configuration settings.
    abstract settings: obj option with get, set

/// Policy configuration reference.
type [<AllowNullLiteral>] PolicyConfigurationRef =
    /// The policy configuration ID.
    abstract id: float with get, set
    /// The policy configuration type.
    abstract ``type``: PolicyTypeRef with get, set
    /// The URL where the policy configuration can be retrieved.
    abstract url: string with get, set

/// This record encapsulates the current state of a policy as it applies to one specific pull request. Each pull request has a unique PolicyEvaluationRecord for each pull request which the policy applies to.
type [<AllowNullLiteral>] PolicyEvaluationRecord =
    /// Links to other related objects
    abstract _links: obj option with get, set
    /// A string which uniquely identifies the target of a policy evaluation.
    abstract artifactId: string with get, set
    /// Time when this policy finished evaluating on this pull request.
    abstract completedDate: DateTime with get, set
    /// Contains all configuration data for the policy which is being evaluated.
    abstract configuration: PolicyConfiguration with get, set
    /// Internal context data of this policy evaluation.
    abstract context: obj option with get, set
    /// Guid which uniquely identifies this evaluation record (one policy running on one pull request).
    abstract evaluationId: string with get, set
    /// Time when this policy was first evaluated on this pull request.
    abstract startedDate: DateTime with get, set
    /// Status of the policy (Running, Approved, Failed, etc.)
    abstract status: PolicyEvaluationStatus with get, set

type [<RequireQualifiedAccess>] PolicyEvaluationStatus =
    | Queued = 0
    | Running = 1
    | Approved = 2
    | Rejected = 3
    | NotApplicable = 4
    | Broken = 5

/// User-friendly policy type with description (used for querying policy types).
type [<AllowNullLiteral>] PolicyType =
    inherit PolicyTypeRef
    /// The links to other objects related to this object.
    abstract _links: obj option with get, set
    /// Detailed description of the policy type.
    abstract description: string with get, set

/// Policy type reference.
type [<AllowNullLiteral>] PolicyTypeRef =
    /// Display name of the policy type.
    abstract displayName: string with get, set
    /// The policy type ID.
    abstract id: string with get, set
    /// The URL where the policy type can be retrieved.
    abstract url: string with get, set

/// A particular revision for a policy configuration.
type [<AllowNullLiteral>] VersionedPolicyConfigurationRef =
    inherit PolicyConfigurationRef
    /// The policy configuration revision ID.
    abstract revision: float with get, set
module Policy = ___Policy_Policy
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract PolicyRestClient: PolicyRestClientStatic

type [<AllowNullLiteral>] PolicyRestClient =
    inherit RestClientBase
    /// <summary>Create a policy configuration of a given policy type.</summary>
    /// <param name="configuration">- The policy configuration to create.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="configurationId">-</param>
    abstract createPolicyConfiguration: configuration: Policy.PolicyConfiguration * project: string * ?configurationId: float -> Promise<Policy.PolicyConfiguration>
    /// <summary>Delete a policy configuration by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="configurationId">- ID of the policy configuration to delete.</param>
    abstract deletePolicyConfiguration: project: string * configurationId: float -> Promise<unit>
    /// <summary>Get a policy configuration by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="configurationId">- ID of the policy configuration</param>
    abstract getPolicyConfiguration: project: string * configurationId: float -> Promise<Policy.PolicyConfiguration>
    /// <summary>Get a list of policy configurations in a project.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scope">- [Provided for legacy reasons] The scope on which a subset of policies is defined.</param>
    /// <param name="policyType">- Filter returned policies to only this type</param>
    abstract getPolicyConfigurations: project: string * ?scope: string * ?policyType: string -> Promise<ResizeArray<Policy.PolicyConfiguration>>
    /// <summary>Update a policy configuration by its ID.</summary>
    /// <param name="configuration">- The policy configuration to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="configurationId">- ID of the existing policy configuration to be updated.</param>
    abstract updatePolicyConfiguration: configuration: Policy.PolicyConfiguration * project: string * configurationId: float -> Promise<Policy.PolicyConfiguration>
    /// <summary>Gets the present evaluation state of a policy.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="evaluationId">- ID of the policy evaluation to be retrieved.</param>
    abstract getPolicyEvaluation: project: string * evaluationId: string -> Promise<Policy.PolicyEvaluationRecord>
    /// <summary>Requeue the policy evaluation.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="evaluationId">- ID of the policy evaluation to be retrieved.</param>
    abstract requeuePolicyEvaluation: project: string * evaluationId: string -> Promise<Policy.PolicyEvaluationRecord>
    /// <summary>Retrieves a list of all the policy evaluation statuses for a specific pull request.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="artifactId">- A string which uniquely identifies the target of a policy evaluation.</param>
    /// <param name="includeNotApplicable">- Some policies might determine that they do not apply to a specific pull request. Setting this parameter to true will return evaluation records even for policies which don't apply to this pull request.</param>
    /// <param name="top">- The number of policy evaluation records to retrieve.</param>
    /// <param name="skip">- The number of policy evaluation records to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
    abstract getPolicyEvaluations: project: string * artifactId: string * ?includeNotApplicable: bool * ?top: float * ?skip: float -> Promise<ResizeArray<Policy.PolicyEvaluationRecord>>
    /// <summary>Retrieve a specific revision of a given policy by ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="configurationId">- The policy configuration ID.</param>
    /// <param name="revisionId">- The revision ID.</param>
    abstract getPolicyConfigurationRevision: project: string * configurationId: float * revisionId: float -> Promise<Policy.PolicyConfiguration>
    /// <summary>Retrieve all revisions for a given policy.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="configurationId">- The policy configuration ID.</param>
    /// <param name="top">- The number of revisions to retrieve.</param>
    /// <param name="skip">- The number of revisions to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
    abstract getPolicyConfigurationRevisions: project: string * configurationId: float * ?top: float * ?skip: float -> Promise<ResizeArray<Policy.PolicyConfiguration>>
    /// <summary>Retrieve a specific policy type by ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="typeId">- The policy ID.</param>
    abstract getPolicyType: project: string * typeId: string -> Promise<Policy.PolicyType>
    /// <summary>Retrieve all available policy types.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getPolicyTypes: project: string -> Promise<ResizeArray<Policy.PolicyType>>

type [<AllowNullLiteral>] PolicyRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> PolicyRestClient
    abstract RESOURCE_AREA_ID: string

/// Identifies an attribute with a name and a container.
type [<AllowNullLiteral>] AttributeDescriptor =
    /// The name of the attribute.
    abstract attributeName: string with get, set
    /// The container the attribute resides in.
    abstract containerName: string with get, set

/// Stores a set of named profile attributes.
type [<AllowNullLiteral>] AttributesContainer =
    /// The attributes stored by the container.
    abstract attributes: AttributesContainerAttributes with get, set
    /// The name of the container.
    abstract containerName: string with get, set
    /// The maximum revision number of any attribute within the container.
    abstract revision: float with get, set

type [<AllowNullLiteral>] Avatar =
    abstract isAutoGenerated: bool with get, set
    abstract size: AvatarSize with get, set
    abstract timeStamp: DateTime with get, set
    abstract value: ResizeArray<float> with get, set

type [<RequireQualifiedAccess>] AvatarSize =
    | Small = 0
    | Medium = 1
    | Large = 2

/// A profile attribute which always has a value for each profile.
type [<AllowNullLiteral>] CoreProfileAttribute =
    inherit ProfileAttributeBase<obj option>

type [<AllowNullLiteral>] CreateProfileContext =
    abstract ciData: CreateProfileContextCiData with get, set
    abstract contactWithOffers: bool with get, set
    abstract countryName: string with get, set
    abstract displayName: string with get, set
    abstract emailAddress: string with get, set
    abstract hasAccount: bool with get, set
    abstract language: string with get, set
    abstract phoneNumber: string with get, set
    /// The current state of the profile.
    abstract profileState: ProfileState with get, set

type [<AllowNullLiteral>] GeoRegion =
    abstract regionCode: string with get, set

/// A user profile.
type [<AllowNullLiteral>] Profile =
    /// The attributes of this profile.
    abstract applicationContainer: AttributesContainer with get, set
    /// The core attributes of this profile.
    abstract coreAttributes: ProfileCoreAttributes with get, set
    /// The maximum revision number of any attribute.
    abstract coreRevision: float with get, set
    /// The unique identifier of the profile.
    abstract id: string with get, set
    /// The current state of the profile.
    abstract profileState: ProfileState with get, set
    /// The maximum revision number of any attribute.
    abstract revision: float with get, set
    /// The time at which this profile was last changed.
    abstract timeStamp: DateTime with get, set

/// A named object associated with a profile.
type [<AllowNullLiteral>] ProfileAttribute =
    inherit ProfileAttributeBase<string>

type [<AllowNullLiteral>] ProfileAttributeBase<'T> =
    /// The descriptor of the attribute.
    abstract descriptor: AttributeDescriptor with get, set
    /// The revision number of the attribute.
    abstract revision: float with get, set
    /// The time the attribute was last changed.
    abstract timeStamp: DateTime with get, set
    /// The value of the attribute.
    abstract value: 'T with get, set

/// Country/region information
type [<AllowNullLiteral>] ProfileRegion =
    /// The two-letter code defined in ISO 3166 for the country/region.
    abstract code: string with get, set
    /// Localized country/region name
    abstract name: string with get, set

/// Container of country/region information
type [<AllowNullLiteral>] ProfileRegions =
    /// List of country/region code with contact consent requirement type of notice
    abstract noticeContactConsentRequirementRegions: ResizeArray<string> with get, set
    /// List of country/region code with contact consent requirement type of opt-out
    abstract optOutContactConsentRequirementRegions: ResizeArray<string> with get, set
    /// List of country/regions
    abstract regions: ResizeArray<ProfileRegion> with get, set

type [<RequireQualifiedAccess>] ProfileState =
    | Custom = 0
    | CustomReadOnly = 1
    | ReadOnly = 2

type [<AllowNullLiteral>] AttributesContainerAttributes =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ProfileAttribute with get, set

type [<AllowNullLiteral>] CreateProfileContextCiData =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] ProfileCoreAttributes =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> CoreProfileAttribute with get, set
module Profile = ___Profile_Profile
module WebApi = ___WebApi_WebApi
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ProfileRestClient: ProfileRestClientStatic

type [<AllowNullLiteral>] ProfileRestClient =
    inherit RestClientBase
    /// <param name="id">-</param>
    /// <param name="descriptor">-</param>
    abstract deleteProfileAttribute: id: string * descriptor: string -> Promise<unit>
    /// <param name="id">-</param>
    /// <param name="descriptor">-</param>
    abstract getProfileAttribute: id: string * descriptor: string -> Promise<Profile.ProfileAttribute>
    /// <param name="id">-</param>
    /// <param name="partition">-</param>
    /// <param name="modifiedSince">-</param>
    /// <param name="modifiedAfterRevision">-</param>
    /// <param name="withCoreAttributes">-</param>
    /// <param name="coreAttributes">-</param>
    abstract getProfileAttributes: id: string * partition: string * ?modifiedSince: string * ?modifiedAfterRevision: string * ?withCoreAttributes: bool * ?coreAttributes: string -> Promise<ResizeArray<Profile.ProfileAttribute>>
    /// <param name="container">-</param>
    /// <param name="id">-</param>
    /// <param name="descriptor">-</param>
    abstract setProfileAttribute: container: obj option * id: string * descriptor: string -> Promise<unit>
    /// <param name="attributesCollection">-</param>
    /// <param name="id">-</param>
    abstract setProfileAttributes: attributesCollection: WebApi.VssJsonCollectionWrapperV<ResizeArray<Profile.ProfileAttributeBase<obj option>>> * id: string -> Promise<unit>
    /// <param name="id">-</param>
    /// <param name="size">-</param>
    /// <param name="format">-</param>
    abstract getAvatar: id: string * ?size: string * ?format: string -> Promise<Profile.Avatar>
    /// <param name="container">-</param>
    /// <param name="id">-</param>
    /// <param name="size">-</param>
    /// <param name="format">-</param>
    /// <param name="displayName">-</param>
    abstract getAvatarPreview: container: obj option * id: string * ?size: string * ?format: string * ?displayName: string -> Promise<Profile.Avatar>
    /// <param name="id">-</param>
    abstract resetAvatar: id: string -> Promise<unit>
    /// <param name="container">-</param>
    /// <param name="id">-</param>
    abstract setAvatar: container: obj option * id: string -> Promise<unit>
    /// <summary>Create profile</summary>
    /// <param name="createProfileContext">- Context for profile creation</param>
    /// <param name="autoCreate">- Create profile automatically</param>
    abstract createProfile: createProfileContext: Profile.CreateProfileContext * ?autoCreate: bool -> Promise<Profile.Profile>
    /// <summary>Gets a user profile.</summary>
    /// <param name="id">- The ID of the target user profile within the same organization, or 'me' to get the profile of the current authenticated user.</param>
    /// <param name="details">- Return public profile information such as display name, email address, country, etc. If false, the withAttributes parameter is ignored.</param>
    /// <param name="withAttributes">- If true, gets the attributes (named key-value pairs of arbitrary data) associated with the profile. The partition parameter must also have a value.</param>
    /// <param name="partition">- The partition (named group) of attributes to return.</param>
    /// <param name="coreAttributes">- A comma-delimited list of core profile attributes to return. Valid values are Email, Avatar, DisplayName, and ContactWithOffers.</param>
    /// <param name="forceRefresh">- Not used in this version of the API.</param>
    abstract getProfile: id: string * ?details: bool * ?withAttributes: bool * ?partition: string * ?coreAttributes: string * ?forceRefresh: bool -> Promise<Profile.Profile>
    /// <summary>Update profile</summary>
    /// <param name="profile">- Update profile</param>
    /// <param name="id">- Profile ID</param>
    abstract updateProfile: profile: Profile.Profile * id: string -> Promise<unit>

type [<AllowNullLiteral>] ProfileRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ProfileRestClient
    abstract RESOURCE_AREA_ID: string

type [<RequireQualifiedAccess>] AggregationType =
    | Hourly = 0
    | Daily = 1

type [<AllowNullLiteral>] AnalyzerDescriptor =
    abstract description: string with get, set
    abstract id: string with get, set
    abstract majorVersion: float with get, set
    abstract minorVersion: float with get, set
    abstract name: string with get, set
    abstract patchVersion: float with get, set

type [<AllowNullLiteral>] CodeChangeTrendItem =
    abstract time: DateTime with get, set
    abstract value: float with get, set

type [<AllowNullLiteral>] LanguageMetricsSecuredObject =
    abstract namespaceId: string with get, set
    abstract projectId: string with get, set
    abstract requiredPermissions: float with get, set

type [<AllowNullLiteral>] LanguageStatistics =
    inherit LanguageMetricsSecuredObject
    abstract bytes: float with get, set
    abstract files: float with get, set
    abstract filesPercentage: float with get, set
    abstract languagePercentage: float with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] ProjectActivityMetrics =
    abstract authorsCount: float with get, set
    abstract codeChangesCount: float with get, set
    abstract codeChangesTrend: ResizeArray<CodeChangeTrendItem> with get, set
    abstract projectId: string with get, set
    abstract pullRequestsCompletedCount: float with get, set
    abstract pullRequestsCreatedCount: float with get, set

type [<AllowNullLiteral>] ProjectLanguageAnalytics =
    inherit LanguageMetricsSecuredObject
    abstract id: string with get, set
    abstract languageBreakdown: ResizeArray<LanguageStatistics> with get, set
    abstract repositoryLanguageAnalytics: ResizeArray<RepositoryLanguageAnalytics> with get, set
    abstract resultPhase: ResultPhase with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] RepositoryActivityMetrics =
    abstract codeChangesCount: float with get, set
    abstract codeChangesTrend: ResizeArray<CodeChangeTrendItem> with get, set
    abstract repositoryId: string with get, set

type [<AllowNullLiteral>] RepositoryLanguageAnalytics =
    inherit LanguageMetricsSecuredObject
    abstract id: string with get, set
    abstract languageBreakdown: ResizeArray<LanguageStatistics> with get, set
    abstract name: string with get, set
    abstract resultPhase: ResultPhase with get, set
    abstract updatedTime: DateTime with get, set

type [<RequireQualifiedAccess>] ResultPhase =
    | Preliminary = 0
    | Full = 1
module ProjectAnalysis = ___ProjectAnalysis_ProjectAnalysis
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ProjectAnalysisRestClient: ProjectAnalysisRestClientStatic

type [<AllowNullLiteral>] ProjectAnalysisRestClient =
    inherit RestClientBase
    /// <param name="project">- Project ID or project name</param>
    abstract getProjectLanguageAnalytics: project: string -> Promise<ProjectAnalysis.ProjectLanguageAnalytics>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fromDate">-</param>
    /// <param name="aggregationType">-</param>
    abstract getProjectActivityMetrics: project: string * fromDate: DateTime * aggregationType: ProjectAnalysis.AggregationType -> Promise<ProjectAnalysis.ProjectActivityMetrics>
    /// <summary>Retrieves git activity metrics for repositories matching a specified criteria.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fromDate">- Date from which, the trends are to be fetched.</param>
    /// <param name="aggregationType">- Bucket size on which, trends are to be aggregated.</param>
    /// <param name="skip">- The number of repositories to ignore.</param>
    /// <param name="top">- The number of repositories for which activity metrics are to be retrieved.</param>
    abstract getGitRepositoriesActivityMetrics: project: string * fromDate: DateTime * aggregationType: ProjectAnalysis.AggregationType * skip: float * top: float -> Promise<ResizeArray<ProjectAnalysis.RepositoryActivityMetrics>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="repositoryId">-</param>
    /// <param name="fromDate">-</param>
    /// <param name="aggregationType">-</param>
    abstract getRepositoryActivityMetrics: project: string * repositoryId: string * fromDate: DateTime * aggregationType: ProjectAnalysis.AggregationType -> Promise<ProjectAnalysis.RepositoryActivityMetrics>

type [<AllowNullLiteral>] ProjectAnalysisRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ProjectAnalysisRestClient
    abstract RESOURCE_AREA_ID: string
module DistributedTaskCommon = ___DistributedTaskCommon_DistributedTaskCommon
module FormInput = ___FormInput_FormInput
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] AgentArtifactDefinition =
    /// Gets or sets the artifact definition alias.
    abstract alias: string with get, set
    /// Gets or sets the artifact type.
    abstract artifactType: AgentArtifactType with get, set
    /// Gets or sets the artifact definition details.
    abstract details: string with get, set
    /// Gets or sets the name of artifact definition.
    abstract name: string with get, set
    /// Gets or sets the version of artifact definition.
    abstract version: string with get, set

type [<RequireQualifiedAccess>] AgentArtifactType =
    | XamlBuild = 0
    | Build = 1
    | Jenkins = 2
    | FileShare = 3
    | Nuget = 4
    | TfsOnPrem = 5
    | GitHub = 6
    | TFGit = 7
    | ExternalTfsBuild = 8
    | Custom = 9
    | Tfvc = 10

type [<AllowNullLiteral>] AgentBasedDeployPhase =
    inherit DeployPhase
    /// Gets and sets the agent job deployment input
    abstract deploymentInput: AgentDeploymentInput with get, set

type [<AllowNullLiteral>] AgentDeploymentInput =
    inherit DeploymentInput
    /// Specification for an agent on which a job gets executed.
    abstract agentSpecification: AgentSpecification with get, set
    /// Gets or sets the image ID.
    abstract imageId: float with get, set
    /// Gets or sets the parallel execution input.
    abstract parallelExecution: ExecutionInput with get, set

/// Represents a reference to an agent queue.
type [<AllowNullLiteral>] AgentPoolQueueReference =
    inherit ResourceReference
    /// The ID of the queue.
    abstract id: float with get, set

/// Specification of the agent defined by the pool provider.
type [<AllowNullLiteral>] AgentSpecification =
    /// Agent specification unique identifier.
    abstract identifier: string with get, set

type [<RequireQualifiedAccess>] ApprovalExecutionOrder =
    | BeforeGates = 1
    | AfterSuccessfulGates = 2
    | AfterGatesAlways = 4

type [<RequireQualifiedAccess>] ApprovalFilters =
    | None = 0
    | ManualApprovals = 1
    | AutomatedApprovals = 2
    | ApprovalSnapshots = 4
    | All = 7

type [<AllowNullLiteral>] ApprovalOptions =
    /// Specify whether the approval can be skipped if the same approver approved the previous stage.
    abstract autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: bool with get, set
    /// Specify whether revalidate identity of approver before completing the approval.
    abstract enforceIdentityRevalidation: bool with get, set
    /// Approvals execution order.
    abstract executionOrder: ApprovalExecutionOrder with get, set
    /// Specify whether the user requesting a release or deployment should allow to approver.
    abstract releaseCreatorCanBeApprover: bool with get, set
    /// The number of approvals required to move release forward. '0' means all approvals required.
    abstract requiredApproverCount: float with get, set
    /// Approval timeout. Approval default timeout is 30 days. Maximum allowed timeout is 365 days. '0' means default timeout i.e 30 days.
    abstract timeoutInMinutes: float with get, set

type [<RequireQualifiedAccess>] ApprovalStatus =
    | Undefined = 0
    | Pending = 1
    | Approved = 2
    | Rejected = 4
    | Reassigned = 6
    | Canceled = 7
    | Skipped = 8

type [<RequireQualifiedAccess>] ApprovalType =
    | Undefined = 0
    | PreDeploy = 1
    | PostDeploy = 2
    | All = 3

type [<AllowNullLiteral>] Artifact =
    /// Gets or sets alias.
    abstract alias: string with get, set
    /// Gets or sets definition reference. e.g. \{"project":\{"id":"fed755ea-49c5-4399-acea-fd5b5aa90a6c","name":"myProject"\},"definition":\{"id":"1","name":"mybuildDefinition"\},"connection":\{"id":"1","name":"myConnection"\}\}.
    abstract definitionReference: ArtifactDefinitionReference with get, set
    /// Indicates whether artifact is primary or not.
    abstract isPrimary: bool with get, set
    /// Indicates whether artifact is retained by release or not.
    abstract isRetained: bool with get, set
    abstract sourceId: string with get, set
    /// Gets or sets type. It can have value as 'Build', 'Jenkins', 'GitHub', 'Nuget', 'Team Build (external)', 'ExternalTFSBuild', 'Git', 'TFVC', 'ExternalTfsXamlBuild'.
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ArtifactContributionDefinition =
    abstract artifactTriggerConfiguration: ArtifactTriggerConfiguration with get, set
    abstract artifactType: string with get, set
    abstract artifactTypeStreamMapping: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    abstract browsableArtifactTypeMapping: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    abstract dataSourceBindings: ResizeArray<DataSourceBinding> with get, set
    abstract displayName: string with get, set
    abstract downloadTaskId: string with get, set
    abstract endpointTypeId: string with get, set
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    abstract isCommitsTraceabilitySupported: bool with get, set
    abstract isWorkitemsTraceabilitySupported: bool with get, set
    abstract name: string with get, set
    abstract taskInputMapping: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    abstract uniqueSourceIdentifier: string with get, set

type [<AllowNullLiteral>] ArtifactDownloadInputBase =
    /// Gets or sets the alias of artifact.
    abstract alias: string with get, set
    /// Gets or sets the name of artifact definition. Valid values are 'Skip', 'Selective', 'All'.
    abstract artifactDownloadMode: string with get, set
    /// Gets or sets the artifact items of the input.
    abstract artifactItems: ResizeArray<string> with get, set
    /// Gets or sets the type of artifact.
    abstract artifactType: string with get, set

type [<AllowNullLiteral>] ArtifactFilter =
    /// Gets or sets whether a release should be created on build tagging.
    abstract createReleaseOnBuildTagging: bool with get, set
    /// Gets or sets the branch for the filter.
    abstract sourceBranch: string with get, set
    /// Gets or sets the regex based tag filter.
    abstract tagFilter: TagFilter with get, set
    /// Gets or sets the list of tags for the filter.
    abstract tags: ResizeArray<string> with get, set
    /// Gets or sets whether filter should default to build definition branch.
    abstract useBuildDefinitionBranch: bool with get, set

type [<AllowNullLiteral>] ArtifactInstanceData =
    abstract accountName: string with get, set
    abstract authenticationToken: string with get, set
    abstract tfsUrl: string with get, set
    abstract version: string with get, set

type [<AllowNullLiteral>] ArtifactMetadata =
    /// Sets alias of artifact.
    abstract alias: string with get, set
    /// Sets instance reference of artifact. e.g. for build artifact it is build number.
    abstract instanceReference: BuildVersion with get, set

type [<AllowNullLiteral>] ArtifactProvider =
    /// Gets or sets the id of artifact provider.
    abstract id: float with get, set
    /// Gets or sets the name of artifact provider.
    abstract name: string with get, set
    /// Gets or sets the link of artifact provider.
    abstract sourceUri: string with get, set
    /// Gets or sets the version of artifact provider.
    abstract version: string with get, set

type [<AllowNullLiteral>] ArtifactsDownloadInput =
    abstract downloadInputs: ResizeArray<ArtifactDownloadInputBase> with get, set

type [<AllowNullLiteral>] ArtifactSourceId =
    /// Gets or sets the artifact type of artifact source.
    abstract artifactTypeId: string with get, set
    /// Gets or sets the list of sourceIdInput of artifact source.
    abstract sourceIdInputs: ResizeArray<SourceIdInput> with get, set

type [<AllowNullLiteral>] ArtifactSourceIdsQueryResult =
    /// Gets or sets the list of artifactsourceIds.
    abstract artifactSourceIds: ResizeArray<ArtifactSourceId> with get, set

type [<AllowNullLiteral>] ArtifactSourceReference =
    /// ID of the artifact source.
    abstract id: string with get, set
    /// Name of the artifact source.
    abstract name: string with get, set

type [<AllowNullLiteral>] ArtifactSourceTrigger =
    inherit ReleaseTriggerBase
    /// Artifact source alias for Artifact Source trigger type
    abstract artifactAlias: string with get, set
    abstract triggerConditions: ResizeArray<ArtifactFilter> with get, set

type [<AllowNullLiteral>] ArtifactTriggerConfiguration =
    /// Gets or sets the whether trigger is supported or not.
    abstract isTriggerSupported: bool with get, set
    /// Gets or sets the whether trigger is supported only on hosted environment.
    abstract isTriggerSupportedOnlyInHosted: bool with get, set
    /// Gets or sets the whether webhook is supported at server level.
    abstract isWebhookSupportedAtServerLevel: bool with get, set
    /// Gets or sets the payload hash header name for the artifact trigger configuration.
    abstract payloadHashHeaderName: string with get, set
    /// Gets or sets the resources for artifact trigger configuration.
    abstract resources: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets the webhook payload mapping for artifact trigger configuration.
    abstract webhookPayloadMapping: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set

type [<AllowNullLiteral>] ArtifactTypeDefinition =
    /// Gets or sets the artifact trigger configuration of artifact type definition.
    abstract artifactTriggerConfiguration: ArtifactTriggerConfiguration with get, set
    /// Gets or sets the artifact type of artifact type definition. Valid values are 'Build', 'Package', 'Source' or 'ContainerImage'.
    abstract artifactType: string with get, set
    /// Gets or sets the display name of artifact type definition.
    abstract displayName: string with get, set
    /// Gets or sets the endpoint type id of artifact type definition.
    abstract endpointTypeId: string with get, set
    /// Gets or sets the input descriptors of artifact type definition.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets the is commits tracebility supported value of artifact type defintion.
    abstract isCommitsTraceabilitySupported: bool with get, set
    /// Gets or sets the is workitems tracebility supported value of artifact type defintion.
    abstract isWorkitemsTraceabilitySupported: bool with get, set
    /// Gets or sets the name of artifact type definition.
    abstract name: string with get, set
    /// Gets or sets the unique source identifier of artifact type definition.
    abstract uniqueSourceIdentifier: string with get, set

type [<AllowNullLiteral>] ArtifactVersion =
    /// Gets or sets the alias of artifact.
    abstract alias: string with get, set
    /// Gets or sets the default version of artifact.
    abstract defaultVersion: BuildVersion with get, set
    /// Gets or sets the error message encountered during querying of versions for artifact.
    abstract errorMessage: string with get, set
    abstract sourceId: string with get, set
    /// Gets or sets the list of build versions of artifact.
    abstract versions: ResizeArray<BuildVersion> with get, set

type [<AllowNullLiteral>] ArtifactVersionQueryResult =
    /// Gets or sets the list for artifact versions of artifact version query result.
    abstract artifactVersions: ResizeArray<ArtifactVersion> with get, set

type [<RequireQualifiedAccess>] AuditAction =
    | Add = 1
    | Update = 2
    | Delete = 3
    | Undelete = 4

type [<RequireQualifiedAccess>] AuthorizationHeaderFor =
    | RevalidateApproverIdentity = 0
    | OnBehalfOf = 1

type [<AllowNullLiteral>] AutoTriggerIssue =
    abstract issue: Issue with get, set
    abstract issueSource: IssueSource with get, set
    abstract project: ProjectReference with get, set
    abstract releaseDefinitionReference: ReleaseDefinitionShallowReference with get, set
    abstract releaseTriggerType: ReleaseTriggerType with get, set

type [<AllowNullLiteral>] AzureKeyVaultVariableGroupProviderData =
    inherit VariableGroupProviderData
    /// Gets or sets last refreshed time.
    abstract lastRefreshedOn: DateTime with get, set
    /// Gets or sets the service endpoint ID.
    abstract serviceEndpointId: string with get, set
    /// Gets or sets the vault name.
    abstract vault: string with get, set

type [<AllowNullLiteral>] AzureKeyVaultVariableValue =
    inherit VariableValue
    /// Gets or sets the content type of key vault variable value.
    abstract contentType: string with get, set
    /// Indicates the vault variable value enabled or not.
    abstract enabled: bool with get, set
    /// Gets or sets the expire time of key vault variable value.
    abstract expires: DateTime with get, set

type [<AllowNullLiteral>] BaseDeploymentInput =
    /// Gets or sets the job condition.
    abstract condition: string with get, set
    /// Gets or sets the job cancel timeout in minutes for deployment which are cancelled by user for this release environment.
    abstract jobCancelTimeoutInMinutes: float with get, set
    /// Gets or sets the override inputs.
    abstract overrideInputs: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets the job execution timeout in minutes for deployment which are queued against this release environment.
    abstract timeoutInMinutes: float with get, set

type [<AllowNullLiteral>] BuildArtifactDownloadInput =
    inherit ArtifactDownloadInputBase

type [<AllowNullLiteral>] BuildVersion =
    /// Gets or sets the commit message for the artifact.
    abstract commitMessage: string with get, set
    /// Gets or sets the definition id.
    abstract definitionId: string with get, set
    /// Gets or sets the definition name.
    abstract definitionName: string with get, set
    /// Gets or sets the build id.
    abstract id: string with get, set
    /// Gets or sets if the artifact supports multiple definitions.
    abstract isMultiDefinitionType: bool with get, set
    /// Gets or sets the build number.
    abstract name: string with get, set
    /// Gets or sets the source branch for the artifact.
    abstract sourceBranch: string with get, set
    /// Gets or sets the source pull request version for the artifact.
    abstract sourcePullRequestVersion: SourcePullRequestVersion with get, set
    /// Gets or sets the repository id for the artifact.
    abstract sourceRepositoryId: string with get, set
    /// Gets or sets the repository type for the artifact.
    abstract sourceRepositoryType: string with get, set
    /// Gets or sets the source version for the artifact.
    abstract sourceVersion: string with get, set

/// Represents a change associated with a build.
type [<AllowNullLiteral>] Change =
    /// The author of the change.
    abstract author: WebApi.IdentityRef with get, set
    /// The type of source. "TfsVersionControl", "TfsGit", etc.
    abstract changeType: string with get, set
    /// The location of a user-friendly representation of the resource.
    abstract displayUri: string with get, set
    /// Something that identifies the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset id.
    abstract id: string with get, set
    /// The location of the full representation of the resource.
    abstract location: string with get, set
    /// A description of the change. This might be a commit message or changeset description.
    abstract message: string with get, set
    /// The person or process that pushed the change.
    abstract pushedBy: WebApi.IdentityRef with get, set
    /// The person or process that pushed the change.
    abstract pusher: string with get, set
    /// A timestamp for the change.
    abstract timestamp: DateTime with get, set

type [<AllowNullLiteral>] CodeRepositoryReference =
    /// Gets and sets the repository references.
    abstract repositoryReference: CodeRepositoryReferenceRepositoryReference with get, set
    /// It can have value as ‘GitHub’, ‘Vsts’.
    abstract systemType: PullRequestSystemType with get, set

type [<AllowNullLiteral>] ComplianceSettings =
    /// Scan the release definition for secrets
    abstract checkForCredentialsAndOtherSecrets: bool with get, set

type [<AllowNullLiteral>] Condition =
    /// Gets or sets the condition type.
    abstract conditionType: ConditionType with get, set
    /// Gets or sets the name of the condition. e.g. 'ReleaseStarted'.
    abstract name: string with get, set
    /// Gets or set value of the condition.
    abstract value: string with get, set

type [<RequireQualifiedAccess>] ConditionType =
    | Undefined = 0
    | Event = 1
    | EnvironmentState = 2
    | Artifact = 4

type [<AllowNullLiteral>] ConfigurationVariableValue =
    /// Gets and sets if a variable can be overridden at deployment time or not.
    abstract allowOverride: bool with get, set
    /// Gets or sets as variable is secret or not.
    abstract isSecret: bool with get, set
    /// Gets and sets value of the configuration variable.
    abstract value: string with get, set

type [<AllowNullLiteral>] Consumer =
    /// ID of the consumer.
    abstract consumerId: float with get, set
    /// Name of the consumer.
    abstract consumerName: string with get, set

type [<AllowNullLiteral>] ContainerImageTrigger =
    inherit ReleaseTriggerBase
    /// Alias of the trigger.
    abstract alias: string with get, set
    /// List tag filters applied while trigger.
    abstract tagFilters: ResizeArray<TagFilter> with get, set

type [<AllowNullLiteral>] ContinuousDeploymentTriggerIssue =
    inherit AutoTriggerIssue
    /// Artifact type.
    abstract artifactType: string with get, set
    /// ArtifactVersion ID.
    abstract artifactVersionId: string with get, set
    /// Artifact source ID.
    abstract sourceId: string with get, set

type [<AllowNullLiteral>] ControlOptions =
    /// Always run the job.
    abstract alwaysRun: bool with get, set
    /// Indicates whether to continue job on error or not.
    abstract continueOnError: bool with get, set
    /// Indicates the job enabled or not.
    abstract enabled: bool with get, set

type [<AllowNullLiteral>] CustomArtifactDownloadInput =
    inherit ArtifactDownloadInputBase

type [<AllowNullLiteral>] DataSourceBinding =
    /// Pagination format supported by this data source(ContinuationToken/SkipTop).
    abstract callbackContextTemplate: string with get, set
    /// Subsequent calls needed?
    abstract callBackRequiredTemplate: string with get, set
    /// Name of the datasource.
    abstract dataSourceName: string with get, set
    /// Endpoint ID of the datasource.
    abstract endpointId: string with get, set
    /// Endpoint URL of the datasource.
    abstract endpointUrl: string with get, set
    /// Defines the initial value of the query params
    abstract initialContextTemplate: string with get, set
    /// Parameters of the datasource.
    abstract parameters: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets http request body
    abstract requestContent: string with get, set
    /// Gets or sets http request verb
    abstract requestVerb: string with get, set
    /// Result selector applied on output of datasource result, for example jsonpath:$.value[?(\@.properties.isEnabled == true)].
    abstract resultSelector: string with get, set
    /// Format of the return results, for example. \{ "Value" : "\{\{\{id\}\}\}", "DisplayValue" : "\{\{\{name\}\}\}" \}.
    abstract resultTemplate: string with get, set
    /// Target of the datasource.
    abstract target: string with get, set

type [<AllowNullLiteral>] DefinitionEnvironmentReference =
    /// Definition environment ID.
    abstract definitionEnvironmentId: float with get, set
    /// Definition environment name.
    abstract definitionEnvironmentName: string with get, set
    /// ReleaseDefinition ID.
    abstract releaseDefinitionId: float with get, set
    /// ReleaseDefinition name.
    abstract releaseDefinitionName: string with get, set

type [<AllowNullLiteral>] Demand =
    /// Gets and sets the name of demand.
    abstract name: string with get, set
    /// Gets and sets the value of demand.
    abstract value: string with get, set

type [<AllowNullLiteral>] Deployment =
    /// Gets links to access the deployment.
    abstract _links: obj option with get, set
    /// Gets attempt number.
    abstract attempt: float with get, set
    /// Gets the date on which deployment is complete.
    abstract completedOn: DateTime with get, set
    /// Gets the list of condition associated with deployment.
    abstract conditions: ResizeArray<Condition> with get, set
    /// Gets release definition environment id.
    abstract definitionEnvironmentId: float with get, set
    /// Gets status of the deployment.
    abstract deploymentStatus: DeploymentStatus with get, set
    /// Gets the unique identifier for deployment.
    abstract id: float with get, set
    /// Gets the identity who last modified the deployment.
    abstract lastModifiedBy: WebApi.IdentityRef with get, set
    /// Gets the date on which deployment is last modified.
    abstract lastModifiedOn: DateTime with get, set
    /// Gets operation status of deployment.
    abstract operationStatus: DeploymentOperationStatus with get, set
    /// Gets list of PostDeployApprovals.
    abstract postDeployApprovals: ResizeArray<ReleaseApproval> with get, set
    /// Gets list of PreDeployApprovals.
    abstract preDeployApprovals: ResizeArray<ReleaseApproval> with get, set
    /// Gets or sets project reference.
    abstract projectReference: ProjectReference with get, set
    /// Gets the date on which deployment is queued.
    abstract queuedOn: DateTime with get, set
    /// Gets reason of deployment.
    abstract reason: DeploymentReason with get, set
    /// Gets the reference of release.
    abstract release: ReleaseReference with get, set
    /// Gets releaseDefinitionReference which specifies the reference of the release definition to which the deployment is associated.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    /// Gets releaseEnvironmentReference which specifies the reference of the release environment to which the deployment is associated.
    abstract releaseEnvironment: ReleaseEnvironmentShallowReference with get, set
    /// Gets the identity who requested.
    abstract requestedBy: WebApi.IdentityRef with get, set
    /// Gets the identity for whom deployment is requested.
    abstract requestedFor: WebApi.IdentityRef with get, set
    /// Gets the date on which deployment is scheduled.
    abstract scheduledDeploymentTime: DateTime with get, set
    /// Gets the date on which deployment is started.
    abstract startedOn: DateTime with get, set

type [<AllowNullLiteral>] DeploymentApprovalCompletedEvent =
    abstract approval: ReleaseApproval with get, set
    abstract project: ProjectReference with get, set
    abstract release: Release with get, set

type [<AllowNullLiteral>] DeploymentApprovalPendingEvent =
    abstract approval: ReleaseApproval with get, set
    abstract approvalOptions: ApprovalOptions with get, set
    abstract completedApprovals: ResizeArray<ReleaseApproval> with get, set
    abstract data: DeploymentApprovalPendingEventData with get, set
    abstract deployment: Deployment with get, set
    abstract isMultipleRankApproval: bool with get, set
    abstract pendingApprovals: ResizeArray<ReleaseApproval> with get, set
    abstract project: ProjectReference with get, set
    abstract release: Release with get, set

type [<AllowNullLiteral>] DeploymentAttempt =
    /// Deployment attempt.
    abstract attempt: float with get, set
    /// ID of the deployment.
    abstract deploymentId: float with get, set
    /// Error log to show any unexpected error that occurred during executing deploy step
    abstract errorLog: string with get, set
    /// Specifies whether deployment has started or not.
    abstract hasStarted: bool with get, set
    /// ID of deployment.
    abstract id: float with get, set
    /// All the issues related to the deployment.
    abstract issues: ResizeArray<Issue> with get, set
    abstract job: ReleaseTask with get, set
    /// Identity who last modified this deployment.
    abstract lastModifiedBy: WebApi.IdentityRef with get, set
    /// Time when this deployment last modified.
    abstract lastModifiedOn: DateTime with get, set
    /// Deployment operation status.
    abstract operationStatus: DeploymentOperationStatus with get, set
    /// Post deployment gates that executed in this deployment.
    abstract postDeploymentGates: ReleaseGates with get, set
    /// Pre deployment gates that executed in this deployment.
    abstract preDeploymentGates: ReleaseGates with get, set
    /// When this deployment queued on.
    abstract queuedOn: DateTime with get, set
    /// Reason for the deployment.
    abstract reason: DeploymentReason with get, set
    /// List of release deployphases executed in this deployment.
    abstract releaseDeployPhases: ResizeArray<ReleaseDeployPhase> with get, set
    /// Identity who requested this deployment.
    abstract requestedBy: WebApi.IdentityRef with get, set
    /// Identity for this deployment requested.
    abstract requestedFor: WebApi.IdentityRef with get, set
    abstract runPlanId: string with get, set
    /// status of the deployment.
    abstract status: DeploymentStatus with get, set
    abstract tasks: ResizeArray<ReleaseTask> with get, set

type [<AllowNullLiteral>] DeploymentAuthorizationInfo =
    /// Authorization header type, typically either RevalidateApproverIdentity or OnBehalfOf.
    abstract authorizationHeaderFor: AuthorizationHeaderFor with get, set
    /// List of resources.
    abstract resources: ResizeArray<string> with get, set
    /// ID of the tenant.
    abstract tenantId: string with get, set
    /// Access token key.
    abstract vstsAccessTokenKey: string with get, set

type [<RequireQualifiedAccess>] DeploymentAuthorizationOwner =
    | Automatic = 0
    | DeploymentSubmitter = 1
    | FirstPreDeploymentApprover = 2

type [<AllowNullLiteral>] DeploymentCompletedEvent =
    abstract comment: string with get, set
    abstract data: DeploymentApprovalPendingEventData with get, set
    abstract deployment: Deployment with get, set
    abstract environment: ReleaseEnvironment with get, set
    abstract project: ProjectReference with get, set

type [<RequireQualifiedAccess>] DeploymentExpands =
    | All = 0
    | DeploymentOnly = 1
    | Approvals = 2
    | Artifacts = 4

type [<AllowNullLiteral>] DeploymentInput =
    inherit BaseDeploymentInput
    /// Artifacts that downloaded during job execution.
    abstract artifactsDownloadInput: ArtifactsDownloadInput with get, set
    /// List demands that needs to meet to execute the job.
    abstract demands: ResizeArray<Demand> with get, set
    /// Indicates whether to include access token in deployment job or not.
    abstract enableAccessToken: bool with get, set
    /// Id of the pool on which job get executed.
    abstract queueId: float with get, set
    /// Indicates whether artifacts downloaded while job execution or not.
    abstract skipArtifactsDownload: bool with get, set

type [<AllowNullLiteral>] DeploymentJob =
    /// Parent task of all executed tasks.
    abstract job: ReleaseTask with get, set
    /// List of  executed tasks with in job.
    abstract tasks: ResizeArray<ReleaseTask> with get, set

type [<AllowNullLiteral>] DeploymentManualInterventionPendingEvent =
    abstract deployment: Deployment with get, set
    abstract emailRecipients: ResizeArray<string> with get, set
    abstract environmentOwner: WebApi.IdentityRef with get, set
    abstract manualIntervention: ManualIntervention with get, set
    abstract project: ProjectReference with get, set
    abstract release: Release with get, set

type [<RequireQualifiedAccess>] DeploymentOperationStatus =
    | Undefined = 0
    | Queued = 1
    | Scheduled = 2
    | Pending = 4
    | Approved = 8
    | Rejected = 16
    | Deferred = 32
    | QueuedForAgent = 64
    | PhaseInProgress = 128
    | PhaseSucceeded = 256
    | PhasePartiallySucceeded = 512
    | PhaseFailed = 1024
    | Canceled = 2048
    | PhaseCanceled = 4096
    | ManualInterventionPending = 8192
    | QueuedForPipeline = 16384
    | Cancelling = 32768
    | EvaluatingGates = 65536
    | GateFailed = 131072
    | All = 258047

type [<AllowNullLiteral>] DeploymentQueryParameters =
    /// Query deployments based specified artifact source id.
    abstract artifactSourceId: string with get, set
    /// Query deployments based specified artifact type id.
    abstract artifactTypeId: string with get, set
    /// Query deployments based specified artifact versions.
    abstract artifactVersions: ResizeArray<string> with get, set
    /// Query deployments number of deployments per environment.
    abstract deploymentsPerEnvironment: float with get, set
    /// Query deployment based on deployment status.
    abstract deploymentStatus: DeploymentStatus with get, set
    /// Query deployments of specified environments.
    abstract environments: ResizeArray<DefinitionEnvironmentReference> with get, set
    /// Query deployments based specified expands.
    abstract expands: DeploymentExpands with get, set
    /// Specify deleted deployments should return or not.
    abstract isDeleted: bool with get, set
    abstract latestDeploymentsOnly: bool with get, set
    abstract maxDeploymentsPerEnvironment: float with get, set
    abstract maxModifiedTime: DateTime with get, set
    abstract minModifiedTime: DateTime with get, set
    /// Query deployment based on deployment operation status.
    abstract operationStatus: DeploymentOperationStatus with get, set
    abstract queryOrder: ReleaseQueryOrder with get, set
    /// Query deployments based query type.
    abstract queryType: DeploymentsQueryType with get, set
    /// Query deployments based specified source branch.
    abstract sourceBranch: string with get, set

type [<RequireQualifiedAccess>] DeploymentReason =
    | None = 0
    | Manual = 1
    | Automated = 2
    | Scheduled = 4
    | RedeployTrigger = 8

type [<RequireQualifiedAccess>] DeploymentsQueryType =
    | Regular = 1
    | FailingSince = 2

type [<AllowNullLiteral>] DeploymentStartedEvent =
    abstract environment: ReleaseEnvironment with get, set
    abstract project: ProjectReference with get, set
    abstract release: Release with get, set

type [<RequireQualifiedAccess>] DeploymentStatus =
    | Undefined = 0
    | NotDeployed = 1
    | InProgress = 2
    | Succeeded = 4
    | PartiallySucceeded = 8
    | Failed = 16
    | All = 31

type [<AllowNullLiteral>] DeployPhase =
    /// Gets and sets the name of deploy phase.
    abstract name: string with get, set
    /// Indicates the deploy phase type.
    abstract phaseType: DeployPhaseTypes with get, set
    /// Gets and sets the rank of deploy phase.
    abstract rank: float with get, set
    /// Gets and sets the reference name of deploy phase.
    abstract refName: string with get, set
    /// Gets and sets the workflow tasks for the deploy phase.
    abstract workflowTasks: ResizeArray<WorkflowTask> with get, set

type [<RequireQualifiedAccess>] DeployPhaseStatus =
    | Undefined = 0
    | NotStarted = 1
    | InProgress = 2
    | PartiallySucceeded = 4
    | Succeeded = 8
    | Failed = 16
    | Canceled = 32
    | Skipped = 64
    | Cancelling = 128

type [<RequireQualifiedAccess>] DeployPhaseTypes =
    | Undefined = 0
    | AgentBasedDeployment = 1
    | RunOnServer = 2
    | MachineGroupBasedDeployment = 4
    | DeploymentGates = 8

type [<AllowNullLiteral>] EmailRecipients =
    /// List of email addresses.
    abstract emailAddresses: ResizeArray<string> with get, set
    /// List of TFS IDs guids.
    abstract tfsIds: ResizeArray<string> with get, set

/// Defines policy on environment queuing at Release Management side queue. We will send to Environment Runner [creating pre-deploy and other steps] only when the policies mentioned are satisfied.
type [<AllowNullLiteral>] EnvironmentExecutionPolicy =
    /// This policy decides, how many environments would be with Environment Runner.
    abstract concurrencyCount: float with get, set
    /// Queue depth in the EnvironmentQueue table, this table keeps the environment entries till Environment Runner is free [as per it's policy] to take another environment for running.
    abstract queueDepthCount: float with get, set

type [<AllowNullLiteral>] EnvironmentOptions =
    /// Gets and sets as the auto link workitems or not.
    abstract autoLinkWorkItems: bool with get, set
    /// Gets and sets as the badge enabled or not.
    abstract badgeEnabled: bool with get, set
    abstract emailNotificationType: string with get, set
    abstract emailRecipients: string with get, set
    abstract enableAccessToken: bool with get, set
    /// Gets and sets as the publish deployment status or not.
    abstract publishDeploymentStatus: bool with get, set
    /// Gets and sets as the.pull request deployment enabled or not.
    abstract pullRequestDeploymentEnabled: bool with get, set
    abstract skipArtifactsDownload: bool with get, set
    abstract timeoutInMinutes: float with get, set

type [<AllowNullLiteral>] EnvironmentRetentionPolicy =
    /// Gets and sets the number of days to keep environment.
    abstract daysToKeep: float with get, set
    /// Gets and sets the number of releases to keep.
    abstract releasesToKeep: float with get, set
    /// Gets and sets as the build to be retained or not.
    abstract retainBuild: bool with get, set

type [<RequireQualifiedAccess>] EnvironmentStatus =
    | Undefined = 0
    | NotStarted = 1
    | InProgress = 2
    | Succeeded = 4
    | Canceled = 8
    | Rejected = 16
    | Queued = 32
    | Scheduled = 64
    | PartiallySucceeded = 128

type [<AllowNullLiteral>] EnvironmentTrigger =
    /// Definition environment ID on which this trigger applicable.
    abstract definitionEnvironmentId: float with get, set
    /// ReleaseDefinition ID on which this trigger applicable.
    abstract releaseDefinitionId: float with get, set
    /// Gets or sets the trigger content.
    abstract triggerContent: string with get, set
    /// Gets or sets the trigger type.
    abstract triggerType: EnvironmentTriggerType with get, set

type [<AllowNullLiteral>] EnvironmentTriggerContent =
    /// Gets or sets action.
    abstract action: string with get, set
    /// Gets or sets list of event types.
    abstract eventTypes: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] EnvironmentTriggerType =
    | Undefined = 0
    | DeploymentGroupRedeploy = 1
    | RollbackRedeploy = 2

type [<AllowNullLiteral>] ExecutionInput =
    /// Parallel execution type, for example MultiConfiguration or MultiMachine.
    abstract parallelExecutionType: ParallelExecutionTypes with get, set

/// Class to represent favorite entry.
type [<AllowNullLiteral>] FavoriteItem =
    /// Application specific data for the entry.
    abstract data: string with get, set
    /// Unique Id of the the entry.
    abstract id: string with get, set
    /// Display text for favorite entry.
    abstract name: string with get, set
    /// Application specific favorite entry type. Empty or Null represents that Favorite item is a Folder.
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] Folder =
    /// Identity who created this folder.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Time when this folder created.
    abstract createdOn: DateTime with get, set
    /// Description of the folder.
    abstract description: string with get, set
    /// Identity who last changed this folder.
    abstract lastChangedBy: WebApi.IdentityRef with get, set
    /// Time when this folder last changed.
    abstract lastChangedDate: DateTime with get, set
    /// path of the folder.
    abstract path: string with get, set

type [<RequireQualifiedAccess>] FolderPathQueryOrder =
    | None = 0
    | Ascending = 1
    | Descending = 2

type [<AllowNullLiteral>] GatesDeploymentInput =
    inherit BaseDeploymentInput
    /// Gates minimum success duration.
    abstract minimumSuccessDuration: float with get, set
    /// Gates sampling interval.
    abstract samplingInterval: float with get, set
    /// Gates stabilization time.
    abstract stabilizationTime: float with get, set

type [<AllowNullLiteral>] GatesDeployPhase =
    inherit DeployPhase
    /// Gets and sets the gate job input.
    abstract deploymentInput: GatesDeploymentInput with get, set

type [<RequireQualifiedAccess>] GateStatus =
    | None = 0
    | Pending = 1
    | InProgress = 2
    | Succeeded = 4
    | Failed = 8
    | Canceled = 16

type [<AllowNullLiteral>] GateUpdateMetadata =
    /// Comment.
    abstract comment: string with get, set
    /// Name of gate to be ignored.
    abstract gatesToIgnore: ResizeArray<string> with get, set

type [<AllowNullLiteral>] GitArtifactDownloadInput =
    inherit ArtifactDownloadInputBase

type [<AllowNullLiteral>] GitHubArtifactDownloadInput =
    inherit ArtifactDownloadInputBase

type [<AllowNullLiteral>] IgnoredGate =
    /// Gets the date on which gate is last ignored.
    abstract lastModifiedOn: DateTime with get, set
    /// Name of gate ignored.
    abstract name: string with get, set

type [<AllowNullLiteral>] Issue =
    /// Issue data.
    abstract data: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Issue type, for example error, warning or info.
    abstract issueType: string with get, set
    /// Issue message.
    abstract message: string with get, set

type [<RequireQualifiedAccess>] IssueSource =
    | None = 0
    | User = 1
    | System = 2

type [<AllowNullLiteral>] JenkinsArtifactDownloadInput =
    inherit ArtifactDownloadInputBase

type [<AllowNullLiteral>] MachineGroupBasedDeployPhase =
    inherit DeployPhase
    /// Gets and sets the deployment group job input
    abstract deploymentInput: MachineGroupDeploymentInput with get, set

type [<AllowNullLiteral>] MachineGroupDeploymentInput =
    inherit DeploymentInput
    /// Deployment group health option.
    abstract deploymentHealthOption: string with get, set
    /// Minimum percentage of the targets guaranteed to be healthy.
    abstract healthPercent: float with get, set
    /// Deployment target tag filter.
    abstract tags: ResizeArray<string> with get, set

type [<AllowNullLiteral>] MailMessage =
    /// Body of mail.
    abstract body: string with get, set
    /// Mail CC recipients.
    abstract cc: EmailRecipients with get, set
    /// Reply to.
    abstract inReplyTo: string with get, set
    /// Message ID of the mail.
    abstract messageId: string with get, set
    /// Data when should be replied to mail.
    abstract replyBy: DateTime with get, set
    /// Reply to Email recipients.
    abstract replyTo: EmailRecipients with get, set
    /// List of mail section types.
    abstract sections: ResizeArray<MailSectionType> with get, set
    /// Mail sender type.
    abstract senderType: SenderType with get, set
    /// Subject of the mail.
    abstract subject: string with get, set
    /// Mail To recipients.
    abstract ``to``: EmailRecipients with get, set

type [<RequireQualifiedAccess>] MailSectionType =
    | Details = 0
    | Environments = 1
    | Issues = 2
    | TestResults = 3
    | WorkItems = 4
    | ReleaseInfo = 5

type [<AllowNullLiteral>] ManualIntervention =
    /// Gets or sets the identity who should approve.
    abstract approver: WebApi.IdentityRef with get, set
    /// Gets or sets comments for approval.
    abstract comments: string with get, set
    /// Gets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets the unique identifier for manual intervention.
    abstract id: float with get, set
    /// Gets or sets instructions for approval.
    abstract instructions: string with get, set
    /// Gets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets the name.
    abstract name: string with get, set
    /// Gets releaseReference for manual intervention.
    abstract release: ReleaseShallowReference with get, set
    /// Gets releaseDefinitionReference for manual intervention.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    /// Gets releaseEnvironmentReference for manual intervention.
    abstract releaseEnvironment: ReleaseEnvironmentShallowReference with get, set
    /// Gets or sets the status of the manual intervention.
    abstract status: ManualInterventionStatus with get, set
    /// Get task instance identifier.
    abstract taskInstanceId: string with get, set
    /// Gets url to access the manual intervention.
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ManualInterventionStatus =
    | Unknown = 0
    | Pending = 1
    | Rejected = 2
    | Approved = 4
    | Canceled = 8

type [<AllowNullLiteral>] ManualInterventionUpdateMetadata =
    /// Sets the comment for manual intervention update.
    abstract comment: string with get, set
    /// Sets the status of the manual intervention.
    abstract status: ManualInterventionStatus with get, set

type [<AllowNullLiteral>] MappingDetails =
    abstract mappings: MappingDetailsMappings with get, set

type [<AllowNullLiteral>] Metric =
    /// Name of the Metric.
    abstract name: string with get, set
    /// Value of the Metric.
    abstract value: float with get, set

type [<AllowNullLiteral>] MultiConfigInput =
    inherit ParallelExecutionInputBase
    /// Multipliers for parallel execution of deployment, for example x86,x64.
    abstract multipliers: string with get, set

type [<AllowNullLiteral>] MultiMachineInput =
    inherit ParallelExecutionInputBase

type [<AllowNullLiteral>] PackageTrigger =
    inherit ReleaseTriggerBase
    /// Package trigger alias.
    abstract alias: string with get, set

type [<AllowNullLiteral>] ParallelExecutionInputBase =
    inherit ExecutionInput
    /// Indicate whether continue execution of deployment on error or not.
    abstract continueOnError: bool with get, set
    /// Maximum number of agents used while parallel execution.
    abstract maxNumberOfAgents: float with get, set

type [<RequireQualifiedAccess>] ParallelExecutionTypes =
    | None = 0
    | MultiConfiguration = 1
    | MultiMachine = 2

type [<AllowNullLiteral>] PipelineProcess =
    /// Pipeline process type.
    abstract ``type``: PipelineProcessTypes with get, set

type [<RequireQualifiedAccess>] PipelineProcessTypes =
    | Designer = 1
    | Yaml = 2

type [<AllowNullLiteral>] ProjectReference =
    /// Gets the unique identifier of this field.
    abstract id: string with get, set
    /// Gets name of project.
    abstract name: string with get, set

type [<AllowNullLiteral>] PropertySelector =
    /// List of properties.
    abstract properties: ResizeArray<string> with get, set
    /// Property selector type.
    abstract selectorType: PropertySelectorType with get, set

type [<RequireQualifiedAccess>] PropertySelectorType =
    | Inclusion = 0
    | Exclusion = 1

type [<AllowNullLiteral>] PullRequestConfiguration =
    /// Code repository reference.
    abstract codeRepositoryReference: CodeRepositoryReference with get, set
    /// In case of Source based artifacts, Code reference will be present in Artifact details.
    abstract useArtifactReference: bool with get, set

type [<AllowNullLiteral>] PullRequestFilter =
    /// List of tags.
    abstract tags: ResizeArray<string> with get, set
    /// Target branch of pull request.
    abstract targetBranch: string with get, set

type [<RequireQualifiedAccess>] PullRequestSystemType =
    | None = 0
    | TfsGit = 1
    | GitHub = 2

type [<AllowNullLiteral>] PullRequestTrigger =
    inherit ReleaseTriggerBase
    /// Artifact alias trigger is linked to.
    abstract artifactAlias: string with get, set
    /// Code reference details of pull request.
    abstract pullRequestConfiguration: PullRequestConfiguration with get, set
    /// Policy name using which status will be published to pull request.
    abstract statusPolicyName: string with get, set
    /// List of filters applied while trigger.
    abstract triggerConditions: ResizeArray<PullRequestFilter> with get, set

type [<AllowNullLiteral>] QueuedReleaseData =
    /// Project ID of the release.
    abstract projectId: string with get, set
    /// Release queue position.
    abstract queuePosition: float with get, set
    /// Queued release ID.
    abstract releaseId: float with get, set

type [<AllowNullLiteral>] RealtimeReleaseDefinitionEvent =
    abstract definitionId: float with get, set
    abstract projectId: string with get, set

type [<AllowNullLiteral>] RealtimeReleaseEvent =
    abstract environmentId: float with get, set
    abstract projectId: string with get, set
    abstract releaseId: float with get, set

type [<AllowNullLiteral>] Release =
    /// Gets links to access the release.
    abstract _links: obj option with get, set
    /// Gets or sets the list of artifacts.
    abstract artifacts: ResizeArray<Artifact> with get, set
    /// Gets or sets comment.
    abstract comment: string with get, set
    /// Gets or sets the identity who created.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets revision number of definition snapshot.
    abstract definitionSnapshotRevision: float with get, set
    /// Gets or sets description of release.
    abstract description: string with get, set
    /// Gets list of environments.
    abstract environments: ResizeArray<ReleaseEnvironment> with get, set
    /// Gets the unique identifier of this field.
    abstract id: float with get, set
    /// Whether to exclude the release from retention policies.
    abstract keepForever: bool with get, set
    /// Gets logs container url.
    abstract logsContainerUrl: string with get, set
    /// Gets or sets the identity who modified.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets name.
    abstract name: string with get, set
    /// Gets pool name.
    abstract poolName: string with get, set
    /// Gets or sets project reference.
    abstract projectReference: ProjectReference with get, set
    abstract properties: obj option with get, set
    /// Gets reason of release.
    abstract reason: ReleaseReason with get, set
    /// Gets releaseDefinitionReference which specifies the reference of the release definition to which this release is associated.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    /// Gets or sets the release definition revision.
    abstract releaseDefinitionRevision: float with get, set
    /// Gets release name format.
    abstract releaseNameFormat: string with get, set
    /// Gets status.
    abstract status: ReleaseStatus with get, set
    /// Gets or sets list of tags.
    abstract tags: ResizeArray<string> with get, set
    abstract triggeringArtifactAlias: string with get, set
    abstract url: string with get, set
    /// Gets the list of variable groups.
    abstract variableGroups: ResizeArray<VariableGroup> with get, set
    /// Gets or sets the dictionary of variables.
    abstract variables: ReleaseVariables with get, set

type [<AllowNullLiteral>] ReleaseAbandonedEvent =
    abstract project: ProjectReference with get, set
    abstract release: Release with get, set

type [<AllowNullLiteral>] ReleaseApproval =
    /// Gets or sets the type of approval.
    abstract approvalType: ApprovalType with get, set
    /// Gets the identity who approved.
    abstract approvedBy: WebApi.IdentityRef with get, set
    /// Gets or sets the identity who should approve.
    abstract approver: WebApi.IdentityRef with get, set
    /// Gets or sets attempt which specifies as which deployment attempt it belongs.
    abstract attempt: float with get, set
    /// Gets or sets comments for approval.
    abstract comments: string with get, set
    /// Gets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets history which specifies all approvals associated with this approval.
    abstract history: ResizeArray<ReleaseApprovalHistory> with get, set
    /// Gets the unique identifier of this field.
    abstract id: float with get, set
    /// Gets or sets as approval is automated or not.
    abstract isAutomated: bool with get, set
    abstract isNotificationOn: bool with get, set
    /// Gets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets rank which specifies the order of the approval. e.g. Same rank denotes parallel approval.
    abstract rank: float with get, set
    /// Gets releaseReference which specifies the reference of the release to which this approval is associated.
    abstract release: ReleaseShallowReference with get, set
    /// Gets releaseDefinitionReference which specifies the reference of the release definition to which this approval is associated.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    /// Gets releaseEnvironmentReference which specifies the reference of the release environment to which this approval is associated.
    abstract releaseEnvironment: ReleaseEnvironmentShallowReference with get, set
    /// Gets the revision number.
    abstract revision: float with get, set
    /// Gets or sets the status of the approval.
    abstract status: ApprovalStatus with get, set
    abstract trialNumber: float with get, set
    /// Gets url to access the approval.
    abstract url: string with get, set

type [<AllowNullLiteral>] ReleaseApprovalHistory =
    /// Identity of the approver.
    abstract approver: WebApi.IdentityRef with get, set
    /// Identity of the object who changed approval.
    abstract changedBy: WebApi.IdentityRef with get, set
    /// Approval history comments.
    abstract comments: string with get, set
    /// Time when this approval created.
    abstract createdOn: DateTime with get, set
    /// Time when this approval modified.
    abstract modifiedOn: DateTime with get, set
    /// Approval history revision.
    abstract revision: float with get, set

type [<AllowNullLiteral>] ReleaseApprovalPendingEvent =
    abstract approval: ReleaseApproval with get, set
    abstract approvalOptions: ApprovalOptions with get, set
    abstract completedApprovals: ResizeArray<ReleaseApproval> with get, set
    abstract definitionName: string with get, set
    abstract deployment: Deployment with get, set
    abstract environmentId: float with get, set
    abstract environmentName: string with get, set
    abstract environments: ResizeArray<ReleaseEnvironment> with get, set
    abstract isMultipleRankApproval: bool with get, set
    abstract pendingApprovals: ResizeArray<ReleaseApproval> with get, set
    abstract releaseCreator: string with get, set
    abstract releaseName: string with get, set
    abstract title: string with get, set
    abstract webAccessUri: string with get, set

type [<AllowNullLiteral>] ReleaseArtifact =
    /// Gets or sets the artifact provider of ReleaseArtifact.
    abstract artifactProvider: ArtifactProvider with get, set
    /// Gets or sets the artifact type of ReleaseArtifact.
    abstract artifactType: string with get, set
    /// Gets or sets the definition json of ReleaseArtifact.
    abstract definitionData: string with get, set
    /// Gets or sets the definition id of ReleaseArtifact.
    abstract definitionId: float with get, set
    /// Gets or sets the description of ReleaseArtifact.
    abstract description: string with get, set
    /// Gets or sets the id of ReleaseArtifact.
    abstract id: float with get, set
    /// Gets or sets the name of ReleaseArtifact.
    abstract name: string with get, set
    /// Gets or sets the release id.
    abstract releaseId: float with get, set

type [<AllowNullLiteral>] ReleaseCondition =
    inherit Condition
    /// The release condition result.
    abstract result: bool with get, set

type [<AllowNullLiteral>] ReleaseCreatedEvent =
    abstract project: ProjectReference with get, set
    abstract release: Release with get, set

type [<AllowNullLiteral>] ReleaseDefinition =
    inherit ReleaseDefinitionShallowReference
    /// Gets or sets the list of artifacts.
    abstract artifacts: ResizeArray<Artifact> with get, set
    /// Gets or sets comment.
    abstract comment: string with get, set
    /// Gets or sets the identity who created.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets or sets the description.
    abstract description: string with get, set
    /// Gets or sets the list of environments.
    abstract environments: ResizeArray<ReleaseDefinitionEnvironment> with get, set
    /// Whether release definition is deleted.
    abstract isDeleted: bool with get, set
    /// Gets the reference of last release.
    abstract lastRelease: ReleaseReference with get, set
    /// Gets or sets the identity who modified.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets pipeline process.
    abstract pipelineProcess: PipelineProcess with get, set
    /// Gets or sets properties.
    abstract properties: obj option with get, set
    /// Gets or sets the release name format.
    abstract releaseNameFormat: string with get, set
    abstract retentionPolicy: RetentionPolicy with get, set
    /// Gets the revision number.
    abstract revision: float with get, set
    /// Gets or sets source of release definition.
    abstract source: ReleaseDefinitionSource with get, set
    /// Gets or sets list of tags.
    abstract tags: ResizeArray<string> with get, set
    /// Gets or sets the list of triggers.
    abstract triggers: ResizeArray<ReleaseTriggerBase> with get, set
    /// Gets or sets the list of variable groups.
    abstract variableGroups: ResizeArray<float> with get, set
    /// Gets or sets the dictionary of variables.
    abstract variables: ReleaseVariables with get, set

type [<AllowNullLiteral>] ReleaseDefinitionApprovals =
    /// Gets or sets the approval options.
    abstract approvalOptions: ApprovalOptions with get, set
    /// Gets or sets the approvals.
    abstract approvals: ResizeArray<ReleaseDefinitionApprovalStep> with get, set

type [<AllowNullLiteral>] ReleaseDefinitionApprovalStep =
    inherit ReleaseDefinitionEnvironmentStep
    /// Gets and sets the approver.
    abstract approver: WebApi.IdentityRef with get, set
    /// Indicates whether the approval automated.
    abstract isAutomated: bool with get, set
    /// Indicates whether the approval notification set.
    abstract isNotificationOn: bool with get, set
    /// Gets or sets the rank of approval step.
    abstract rank: float with get, set

type [<AllowNullLiteral>] ReleaseDefinitionDeployStep =
    inherit ReleaseDefinitionEnvironmentStep
    /// The list of steps for this definition.
    abstract tasks: ResizeArray<WorkflowTask> with get, set

type [<AllowNullLiteral>] ReleaseDefinitionEnvironment =
    /// Gets or sets the BadgeUrl. BadgeUrl will be used when Badge will be enabled in Release Definition Environment.
    abstract badgeUrl: string with get, set
    /// Gets or sets the environment conditions.
    abstract conditions: ResizeArray<Condition> with get, set
    /// Gets or sets the current release reference.
    abstract currentRelease: ReleaseShallowReference with get, set
    /// Gets or sets the demands.
    abstract demands: ResizeArray<Demand> with get, set
    /// Gets or sets the deploy phases of environment.
    abstract deployPhases: ResizeArray<DeployPhase> with get, set
    /// Gets or sets the deploystep.
    abstract deployStep: ReleaseDefinitionDeployStep with get, set
    /// Gets or sets the environment options.
    abstract environmentOptions: EnvironmentOptions with get, set
    /// Gets or sets the triggers on environment.
    abstract environmentTriggers: ResizeArray<EnvironmentTrigger> with get, set
    /// Gets or sets the environment execution policy.
    abstract executionPolicy: EnvironmentExecutionPolicy with get, set
    /// Gets and sets the ID of the ReleaseDefinitionEnvironment.
    abstract id: float with get, set
    /// Gets and sets the name of the ReleaseDefinitionEnvironment.
    abstract name: string with get, set
    /// Gets and sets the Owner of the ReleaseDefinitionEnvironment.
    abstract owner: WebApi.IdentityRef with get, set
    /// Gets or sets the post deployment approvals.
    abstract postDeployApprovals: ReleaseDefinitionApprovals with get, set
    /// Gets or sets the post deployment gates.
    abstract postDeploymentGates: ReleaseDefinitionGatesStep with get, set
    /// Gets or sets the pre deployment approvals.
    abstract preDeployApprovals: ReleaseDefinitionApprovals with get, set
    /// Gets or sets the pre deployment gates.
    abstract preDeploymentGates: ReleaseDefinitionGatesStep with get, set
    /// Gets or sets the environment process parameters.
    abstract processParameters: DistributedTaskCommon.ProcessParameters with get, set
    /// Gets or sets the properties on environment.
    abstract properties: obj option with get, set
    /// Gets or sets the queue ID.
    abstract queueId: float with get, set
    /// Gets and sets the rank of the ReleaseDefinitionEnvironment.
    abstract rank: float with get, set
    /// Gets or sets the environment retention policy.
    abstract retentionPolicy: EnvironmentRetentionPolicy with get, set
    abstract runOptions: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets the schedules
    abstract schedules: ResizeArray<ReleaseSchedule> with get, set
    /// Gets or sets the variable groups.
    abstract variableGroups: ResizeArray<float> with get, set
    /// Gets and sets the variables.
    abstract variables: ReleaseVariables with get, set

type [<AllowNullLiteral>] ReleaseDefinitionEnvironmentStep =
    /// ID of the approval or deploy step.
    abstract id: float with get, set

type [<AllowNullLiteral>] ReleaseDefinitionEnvironmentSummary =
    /// ID of ReleaseDefinition environment summary.
    abstract id: float with get, set
    /// List of release shallow reference deployed using this ReleaseDefinition.
    abstract lastReleases: ResizeArray<ReleaseShallowReference> with get, set
    /// Name of ReleaseDefinition environment summary.
    abstract name: string with get, set

type [<AllowNullLiteral>] ReleaseDefinitionEnvironmentTemplate =
    /// Indicates whether template can be deleted or not.
    abstract canDelete: bool with get, set
    /// Category of the ReleaseDefinition environment template.
    abstract category: string with get, set
    /// Description of the ReleaseDefinition environment template.
    abstract description: string with get, set
    /// ReleaseDefinition environment data which used to create this template.
    abstract environment: ReleaseDefinitionEnvironment with get, set
    /// ID of the task which used to display icon used for this template.
    abstract iconTaskId: string with get, set
    /// Icon uri of the template.
    abstract iconUri: string with get, set
    /// ID of the ReleaseDefinition environment template.
    abstract id: string with get, set
    /// Indicates whether template deleted or not.
    abstract isDeleted: bool with get, set
    /// Name of the ReleaseDefinition environment template.
    abstract name: string with get, set

type [<RequireQualifiedAccess>] ReleaseDefinitionExpands =
    | None = 0
    | Environments = 2
    | Artifacts = 4
    | Triggers = 8
    | Variables = 16
    | Tags = 32
    | LastRelease = 64

type [<AllowNullLiteral>] ReleaseDefinitionGate =
    /// Gets or sets the gates workflow.
    abstract tasks: ResizeArray<WorkflowTask> with get, set

type [<AllowNullLiteral>] ReleaseDefinitionGatesOptions =
    /// Gets or sets as the gates enabled or not.
    abstract isEnabled: bool with get, set
    /// Gets or sets the minimum duration for steady results after a successful gates evaluation.
    abstract minimumSuccessDuration: float with get, set
    /// Gets or sets the time between re-evaluation of gates.
    abstract samplingInterval: float with get, set
    /// Gets or sets the delay before evaluation.
    abstract stabilizationTime: float with get, set
    /// Gets or sets the timeout after which gates fail.
    abstract timeout: float with get, set

type [<AllowNullLiteral>] ReleaseDefinitionGatesStep =
    /// Gets or sets the gates.
    abstract gates: ResizeArray<ReleaseDefinitionGate> with get, set
    /// Gets or sets the gate options.
    abstract gatesOptions: ReleaseDefinitionGatesOptions with get, set
    /// ID of the ReleaseDefinitionGateStep.
    abstract id: float with get, set

type [<RequireQualifiedAccess>] ReleaseDefinitionQueryOrder =
    | IdAscending = 0
    | IdDescending = 1
    | NameAscending = 2
    | NameDescending = 3

type [<AllowNullLiteral>] ReleaseDefinitionRevision =
    /// Gets api-version for revision object.
    abstract apiVersion: string with get, set
    /// Gets the identity who did change.
    abstract changedBy: WebApi.IdentityRef with get, set
    /// Gets date on which ReleaseDefinition changed.
    abstract changedDate: DateTime with get, set
    /// Gets type of change.
    abstract changeType: AuditAction with get, set
    /// Gets comments for revision.
    abstract comment: string with get, set
    /// Get id of the definition.
    abstract definitionId: float with get, set
    /// Gets definition URL.
    abstract definitionUrl: string with get, set
    /// Get revision number of the definition.
    abstract revision: float with get, set

type [<AllowNullLiteral>] ReleaseDefinitionShallowReference =
    /// Gets the links to related resources, APIs, and views for the release definition.
    abstract _links: obj option with get, set
    /// Gets the unique identifier of release definition.
    abstract id: float with get, set
    /// Gets or sets the name of the release definition.
    abstract name: string with get, set
    /// Gets or sets the path of the release definition.
    abstract path: string with get, set
    /// Gets or sets project reference.
    abstract projectReference: ProjectReference with get, set
    /// Gets the REST API url to access the release definition.
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ReleaseDefinitionSource =
    | Undefined = 0
    | RestApi = 1
    | UserInterface = 2
    | Ibiza = 4
    | PortalExtensionApi = 8

type [<AllowNullLiteral>] ReleaseDefinitionSummary =
    /// List of Release Definition environment summary.
    abstract environments: ResizeArray<ReleaseDefinitionEnvironmentSummary> with get, set
    /// Release Definition reference.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    /// List of releases deployed using this Release Definition.
    abstract releases: ResizeArray<Release> with get, set

type [<AllowNullLiteral>] ReleaseDefinitionUndeleteParameter =
    /// Gets or sets comment.
    abstract comment: string with get, set

type [<AllowNullLiteral>] ReleaseDeployPhase =
    /// Deployment jobs of the phase.
    abstract deploymentJobs: ResizeArray<DeploymentJob> with get, set
    /// Phase execution error logs.
    abstract errorLog: string with get, set
    /// ID of the phase.
    abstract id: float with get, set
    /// List of manual intervention tasks execution information in phase.
    abstract manualInterventions: ResizeArray<ManualIntervention> with get, set
    /// Name of the phase.
    abstract name: string with get, set
    /// ID of the phase.
    abstract phaseId: string with get, set
    /// Type of the phase.
    abstract phaseType: DeployPhaseTypes with get, set
    /// Rank of the phase.
    abstract rank: float with get, set
    /// Run Plan ID of the phase.
    abstract runPlanId: string with get, set
    /// Phase start time.
    abstract startedOn: DateTime with get, set
    /// Status of the phase.
    abstract status: DeployPhaseStatus with get, set

type [<AllowNullLiteral>] ReleaseEnvironment =
    /// Gets list of conditions.
    abstract conditions: ResizeArray<ReleaseCondition> with get, set
    /// Gets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets definition environment id.
    abstract definitionEnvironmentId: float with get, set
    /// Gets demands.
    abstract demands: ResizeArray<Demand> with get, set
    /// Gets list of deploy phases snapshot.
    abstract deployPhasesSnapshot: ResizeArray<DeployPhase> with get, set
    /// Gets deploy steps.
    abstract deploySteps: ResizeArray<DeploymentAttempt> with get, set
    /// Gets environment options.
    abstract environmentOptions: EnvironmentOptions with get, set
    /// Gets the unique identifier of this field.
    abstract id: float with get, set
    /// Gets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets name.
    abstract name: string with get, set
    /// Gets next scheduled UTC time.
    abstract nextScheduledUtcTime: DateTime with get, set
    /// Gets the identity who is owner for release environment.
    abstract owner: WebApi.IdentityRef with get, set
    /// Gets list of post deploy approvals snapshot.
    abstract postApprovalsSnapshot: ReleaseDefinitionApprovals with get, set
    /// Gets list of post deploy approvals.
    abstract postDeployApprovals: ResizeArray<ReleaseApproval> with get, set
    /// Post deployment gates snapshot data.
    abstract postDeploymentGatesSnapshot: ReleaseDefinitionGatesStep with get, set
    /// Gets list of pre deploy approvals snapshot.
    abstract preApprovalsSnapshot: ReleaseDefinitionApprovals with get, set
    /// Gets list of pre deploy approvals.
    abstract preDeployApprovals: ResizeArray<ReleaseApproval> with get, set
    /// Pre deployment gates snapshot data.
    abstract preDeploymentGatesSnapshot: ReleaseDefinitionGatesStep with get, set
    /// Gets process parameters.
    abstract processParameters: DistributedTaskCommon.ProcessParameters with get, set
    /// Gets queue id.
    abstract queueId: float with get, set
    /// Gets rank.
    abstract rank: float with get, set
    /// Gets release reference which specifies the reference of the release to which this release environment is associated.
    abstract release: ReleaseShallowReference with get, set
    /// Gets the identity who created release.
    abstract releaseCreatedBy: WebApi.IdentityRef with get, set
    /// Gets releaseDefinitionReference which specifies the reference of the release definition to which this release environment is associated.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    /// Gets release description.
    abstract releaseDescription: string with get, set
    /// Gets release id.
    abstract releaseId: float with get, set
    /// Gets schedule deployment time of release environment.
    abstract scheduledDeploymentTime: DateTime with get, set
    /// Gets list of schedules.
    abstract schedules: ResizeArray<ReleaseSchedule> with get, set
    /// Gets environment status.
    abstract status: EnvironmentStatus with get, set
    /// Gets time to deploy.
    abstract timeToDeploy: float with get, set
    /// Gets trigger reason.
    abstract triggerReason: string with get, set
    /// Gets the list of variable groups.
    abstract variableGroups: ResizeArray<VariableGroup> with get, set
    /// Gets the dictionary of variables.
    abstract variables: ReleaseVariables with get, set
    /// Gets list of workflow tasks.
    abstract workflowTasks: ResizeArray<WorkflowTask> with get, set

type [<AllowNullLiteral>] ReleaseEnvironmentCompletedEvent =
    abstract createdByName: string with get, set
    abstract definitionId: float with get, set
    abstract definitionName: string with get, set
    abstract environment: ReleaseEnvironment with get, set
    abstract environmentId: float with get, set
    abstract projectName: string with get, set
    abstract reason: DeploymentReason with get, set
    abstract releaseCreatedBy: WebApi.IdentityRef with get, set
    abstract releaseLogsUri: string with get, set
    abstract releaseName: string with get, set
    abstract status: string with get, set
    abstract title: string with get, set
    abstract webAccessUri: string with get, set

type [<AllowNullLiteral>] ReleaseEnvironmentShallowReference =
    /// Gets the links to related resources, APIs, and views for the release environment.
    abstract _links: obj option with get, set
    /// Gets the unique identifier of release environment.
    abstract id: float with get, set
    /// Gets or sets the name of the release environment.
    abstract name: string with get, set
    /// Gets the REST API url to access the release environment.
    abstract url: string with get, set

type [<AllowNullLiteral>] ReleaseEnvironmentStatusUpdatedEvent =
    inherit RealtimeReleaseDefinitionEvent
    abstract environmentId: float with get, set
    abstract environmentStatus: EnvironmentStatus with get, set
    abstract latestDeploymentOperationStatus: DeploymentOperationStatus with get, set
    abstract latestDeploymentStatus: DeploymentStatus with get, set
    abstract releaseId: float with get, set

type [<AllowNullLiteral>] ReleaseEnvironmentUpdateMetadata =
    /// Gets or sets comment.
    abstract comment: string with get, set
    /// Gets or sets scheduled deployment time.
    abstract scheduledDeploymentTime: DateTime with get, set
    /// Gets or sets status of environment.
    abstract status: EnvironmentStatus with get, set
    /// Sets list of environment variables to be overridden at deployment time.
    abstract variables: ReleaseVariables with get, set

type [<RequireQualifiedAccess>] ReleaseExpands =
    | None = 0
    | Environments = 2
    | Artifacts = 4
    | Approvals = 8
    | ManualInterventions = 16
    | Variables = 32
    | Tags = 64

type [<AllowNullLiteral>] ReleaseGates =
    /// Contains the gates job details of each evaluation.
    abstract deploymentJobs: ResizeArray<DeploymentJob> with get, set
    /// ID of release gates.
    abstract id: float with get, set
    /// List of ignored gates.
    abstract ignoredGates: ResizeArray<IgnoredGate> with get, set
    /// Gates last modified time.
    abstract lastModifiedOn: DateTime with get, set
    /// Run plan ID of the gates.
    abstract runPlanId: string with get, set
    /// Gates stabilization completed date and time.
    abstract stabilizationCompletedOn: DateTime with get, set
    /// Gates evaluation started time.
    abstract startedOn: DateTime with get, set
    /// Status of release gates.
    abstract status: GateStatus with get, set
    /// Date and time at which all gates executed successfully.
    abstract succeedingSince: DateTime with get, set

type [<AllowNullLiteral>] ReleaseGatesPhase =
    inherit ReleaseDeployPhase
    /// List of ignored gates.
    abstract ignoredGates: ResizeArray<IgnoredGate> with get, set
    /// Date and time at which stabilization of gates completed.
    abstract stabilizationCompletedOn: DateTime with get, set
    /// Date and time at which all gates executed successfully.
    abstract succeedingSince: DateTime with get, set

type [<AllowNullLiteral>] ReleaseManagementInputValue =
    /// The text to show for the display of this value.
    abstract displayValue: string with get, set
    /// The value to store for this input.
    abstract value: string with get, set

type [<AllowNullLiteral>] ReleaseNotCreatedEvent =
    abstract definitionReference: ReleaseDefinitionShallowReference with get, set
    abstract message: string with get, set
    abstract releaseReason: ReleaseReason with get, set
    abstract requestedBy: WebApi.IdentityRef with get, set

type [<RequireQualifiedAccess>] ReleaseQueryOrder =
    | Descending = 0
    | Ascending = 1

type [<RequireQualifiedAccess>] ReleaseReason =
    | None = 0
    | Manual = 1
    | ContinuousIntegration = 2
    | Schedule = 3
    | PullRequest = 4

type [<AllowNullLiteral>] ReleaseReference =
    /// Gets links to access the release.
    abstract _links: obj option with get, set
    /// Gets list of artifacts.
    abstract artifacts: ResizeArray<Artifact> with get, set
    /// Gets the identity who created release.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets date on when this release created.
    abstract createdOn: DateTime with get, set
    /// Gets description.
    abstract description: string with get, set
    /// ID of the Release.
    abstract id: float with get, set
    /// Gets the identity who modified release.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets name of release.
    abstract name: string with get, set
    /// Gets reason for release.
    abstract reason: ReleaseReason with get, set
    /// Gets release definition shallow reference.
    abstract releaseDefinition: ReleaseDefinitionShallowReference with get, set
    abstract url: string with get, set
    abstract webAccessUri: string with get, set

type [<AllowNullLiteral>] ReleaseRevision =
    /// Gets or sets the identity who changed.
    abstract changedBy: WebApi.IdentityRef with get, set
    /// Change date of the revision.
    abstract changedDate: DateTime with get, set
    /// Change details of the revision.
    abstract changeDetails: string with get, set
    /// Change details of the revision. Typically ChangeDetails values are Add and Update.
    abstract changeType: string with get, set
    /// Comment of the revision.
    abstract comment: string with get, set
    /// Release ID of which this revision belongs.
    abstract definitionSnapshotRevision: float with get, set
    /// Gets or sets the release ID of which this revision belongs.
    abstract releaseId: float with get, set

type [<AllowNullLiteral>] ReleaseSchedule =
    /// Days of the week to release.
    abstract daysToRelease: ScheduleDays with get, set
    /// Team Foundation Job Definition Job Id.
    abstract jobId: string with get, set
    /// Flag to determine if this schedule should only release if the associated artifact has been changed or release definition changed.
    abstract scheduleOnlyWithChanges: bool with get, set
    /// Local time zone hour to start.
    abstract startHours: float with get, set
    /// Local time zone minute to start.
    abstract startMinutes: float with get, set
    /// Time zone Id of release schedule, such as 'UTC'.
    abstract timeZoneId: string with get, set

type [<AllowNullLiteral>] ReleaseSettings =
    /// Release Compliance settings.
    abstract complianceSettings: ComplianceSettings with get, set
    /// Release retention settings.
    abstract retentionSettings: RetentionSettings with get, set

type [<AllowNullLiteral>] ReleaseShallowReference =
    /// Gets the links to related resources, APIs, and views for the release.
    abstract _links: obj option with get, set
    /// Gets the unique identifier of release.
    abstract id: float with get, set
    /// Gets or sets the name of the release.
    abstract name: string with get, set
    /// Gets the REST API url to access the release.
    abstract url: string with get, set

type [<AllowNullLiteral>] ReleaseStartEnvironmentMetadata =
    /// Sets release definition environment id.
    abstract definitionEnvironmentId: float with get, set
    /// Sets list of environments variables to be overridden at deployment time.
    abstract variables: ReleaseVariables with get, set

type [<AllowNullLiteral>] ReleaseStartMetadata =
    /// Sets list of artifact to create a release.
    abstract artifacts: ResizeArray<ArtifactMetadata> with get, set
    /// Sets definition Id to create a release.
    abstract definitionId: float with get, set
    /// Sets description to create a release.
    abstract description: string with get, set
    /// Sets list of environments meta data.
    abstract environmentsMetadata: ResizeArray<ReleaseStartEnvironmentMetadata> with get, set
    /// Sets 'true' to create release in draft mode, 'false' otherwise.
    abstract isDraft: bool with get, set
    /// Sets list of environments to manual as condition.
    abstract manualEnvironments: ResizeArray<string> with get, set
    abstract properties: obj option with get, set
    /// Sets reason to create a release.
    abstract reason: ReleaseReason with get, set
    /// Sets list of release variables to be overridden at deployment time.
    abstract variables: ReleaseVariables with get, set

type [<RequireQualifiedAccess>] ReleaseStatus =
    | Undefined = 0
    | Draft = 1
    | Active = 2
    | Abandoned = 4

type [<AllowNullLiteral>] ReleaseTask =
    /// Agent name on which task executed.
    abstract agentName: string with get, set
    abstract dateEnded: DateTime with get, set
    abstract dateStarted: DateTime with get, set
    /// Finish time of the release task.
    abstract finishTime: DateTime with get, set
    /// ID of the release task.
    abstract id: float with get, set
    /// List of issues occurred while execution of task.
    abstract issues: ResizeArray<Issue> with get, set
    /// Number of lines log release task has.
    abstract lineCount: float with get, set
    /// Log URL of the task.
    abstract logUrl: string with get, set
    /// Name of the task.
    abstract name: string with get, set
    /// Task execution complete precent.
    abstract percentComplete: float with get, set
    /// Rank of the release task.
    abstract rank: float with get, set
    /// Result code of the task.
    abstract resultCode: string with get, set
    /// ID of the release task.
    abstract startTime: DateTime with get, set
    /// Status of release task.
    abstract status: TaskStatus with get, set
    /// Workflow task reference.
    abstract task: WorkflowTaskReference with get, set
    /// Timeline record ID of the release task.
    abstract timelineRecordId: string with get, set

type [<AllowNullLiteral>] ReleaseTaskAttachment =
    /// Reference links of task.
    abstract _links: obj option with get, set
    /// Data and time when it created.
    abstract createdOn: DateTime with get, set
    /// Identity who modified.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Data and time when modified.
    abstract modifiedOn: DateTime with get, set
    /// Name of the task attachment.
    abstract name: string with get, set
    /// Record ID of the task.
    abstract recordId: string with get, set
    /// Timeline ID of the task.
    abstract timelineId: string with get, set
    /// Type of task attachment.
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ReleaseTaskLogUpdatedEvent =
    inherit RealtimeReleaseEvent
    abstract lines: ResizeArray<string> with get, set
    abstract stepRecordId: string with get, set
    abstract timelineRecordId: string with get, set

type [<AllowNullLiteral>] ReleaseTasksUpdatedEvent =
    inherit RealtimeReleaseEvent
    abstract job: ReleaseTask with get, set
    abstract planId: string with get, set
    abstract releaseDeployPhaseId: float with get, set
    abstract releaseStepId: float with get, set
    abstract tasks: ResizeArray<ReleaseTask> with get, set

type [<AllowNullLiteral>] ReleaseTriggerBase =
    /// Type of release trigger.
    abstract triggerType: ReleaseTriggerType with get, set

type [<RequireQualifiedAccess>] ReleaseTriggerType =
    | Undefined = 0
    | ArtifactSource = 1
    | Schedule = 2
    | SourceRepo = 3
    | ContainerImage = 4
    | Package = 5
    | PullRequest = 6

type [<AllowNullLiteral>] ReleaseUpdatedEvent =
    inherit RealtimeReleaseEvent
    abstract release: Release with get, set

type [<AllowNullLiteral>] ReleaseUpdateMetadata =
    /// Sets comment for release.
    abstract comment: string with get, set
    /// Set 'true' to exclude the release from retention policies.
    abstract keepForever: bool with get, set
    /// Sets list of manual environments.
    abstract manualEnvironments: ResizeArray<string> with get, set
    /// Sets name of the release.
    abstract name: string with get, set
    /// Sets status of the release.
    abstract status: ReleaseStatus with get, set

type [<AllowNullLiteral>] ReleaseWorkItemRef =
    abstract assignee: string with get, set
    /// Gets or sets the ID.
    abstract id: string with get, set
    /// Gets or sets the provider.
    abstract provider: string with get, set
    /// Gets or sets the state.
    abstract state: string with get, set
    /// Gets or sets the title.
    abstract title: string with get, set
    /// Gets or sets the type.
    abstract ``type``: string with get, set
    /// Gets or sets the workitem url.
    abstract url: string with get, set

/// Represents a reference to a resource.
type [<AllowNullLiteral>] ResourceReference =
    /// An alias to be used when referencing the resource.
    abstract alias: string with get, set

type [<AllowNullLiteral>] RetentionPolicy =
    /// Indicates the number of days to keep deployment.
    abstract daysToKeep: float with get, set

type [<AllowNullLiteral>] RetentionSettings =
    /// Number of days to keep deleted releases.
    abstract daysToKeepDeletedReleases: float with get, set
    /// Specifies the default environment retention policy.
    abstract defaultEnvironmentRetentionPolicy: EnvironmentRetentionPolicy with get, set
    /// Specifies the maximum environment retention policy.
    abstract maximumEnvironmentRetentionPolicy: EnvironmentRetentionPolicy with get, set

type [<AllowNullLiteral>] RunOnServerDeployPhase =
    inherit DeployPhase
    /// Gets and sets the agentless job input.
    abstract deploymentInput: ServerDeploymentInput with get, set

type [<RequireQualifiedAccess>] ScheduleDays =
    | None = 0
    | Monday = 1
    | Tuesday = 2
    | Wednesday = 4
    | Thursday = 8
    | Friday = 16
    | Saturday = 32
    | Sunday = 64
    | All = 127

type [<AllowNullLiteral>] ScheduledReleaseTrigger =
    inherit ReleaseTriggerBase
    /// Release schedule for Scheduled Release trigger type.
    abstract schedule: ReleaseSchedule with get, set

type [<RequireQualifiedAccess>] SenderType =
    | ServiceAccount = 1
    | RequestingUser = 2

type [<AllowNullLiteral>] ServerDeploymentInput =
    inherit BaseDeploymentInput
    /// Gets or sets the parallel execution input.
    abstract parallelExecution: ExecutionInput with get, set

/// Represents a reference to a service endpoint.
type [<AllowNullLiteral>] ServiceEndpointReference =
    inherit ResourceReference
    /// The ID of the service endpoint.
    abstract id: string with get, set

type [<RequireQualifiedAccess>] SingleReleaseExpands =
    | None = 0
    | Tasks = 1

type [<AllowNullLiteral>] SourceIdInput =
    /// ID of source.
    abstract id: string with get, set
    /// Name of the source.
    abstract name: string with get, set

type [<AllowNullLiteral>] SourcePullRequestVersion =
    /// Pull Request Iteration Id for which the release will publish status.
    abstract iterationId: string with get, set
    /// Pull Request Id for which the release will publish status.
    abstract pullRequestId: string with get, set
    /// Date and time of the pull request merge creation. It is required to keep timeline record of Releases created by pull request.
    abstract pullRequestMergedAt: DateTime with get, set
    /// Source branch of the Pull Request.
    abstract sourceBranch: string with get, set
    /// Source branch commit Id of the Pull Request for which the release will publish status.
    abstract sourceBranchCommitId: string with get, set
    /// Target branch of the Pull Request.
    abstract targetBranch: string with get, set

type [<AllowNullLiteral>] SourceRepoTrigger =
    inherit ReleaseTriggerBase
    /// Alias of the source repo trigger.
    abstract alias: string with get, set
    abstract branchFilters: ResizeArray<string> with get, set

type [<AllowNullLiteral>] SummaryMailSection =
    /// Html content of summary mail.
    abstract htmlContent: string with get, set
    /// Rank of the summary mail.
    abstract rank: float with get, set
    /// Summary mail section type. MailSectionType has section types.
    abstract sectionType: MailSectionType with get, set
    /// Title of the summary mail.
    abstract title: string with get, set

type [<AllowNullLiteral>] TagFilter =
    /// Gets or sets the tag filter pattern.
    abstract pattern: string with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlanGroupReference =
    /// Gets or sets the plan group.
    abstract planGroup: string with get, set
    /// ID of the Project.
    abstract projectId: string with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlanGroupsStartedEvent =
    abstract planGroups: ResizeArray<TaskOrchestrationPlanGroupReference> with get, set

type [<RequireQualifiedAccess>] TaskStatus =
    | Unknown = 0
    | Pending = 1
    | InProgress = 2
    | Success = 3
    | Failure = 4
    | Canceled = 5
    | Skipped = 6
    | Succeeded = 7
    | Failed = 8
    | PartiallySucceeded = 9

type [<AllowNullLiteral>] TfvcArtifactDownloadInput =
    inherit ArtifactDownloadInputBase

type [<AllowNullLiteral>] TimeZone =
    /// Display name of the time zone.
    abstract displayName: string with get, set
    /// Id of the time zone.
    abstract id: string with get, set

type [<AllowNullLiteral>] TimeZoneList =
    /// UTC timezone.
    abstract utcTimeZone: TimeZone with get, set
    /// List of valid timezones.
    abstract validTimeZones: ResizeArray<TimeZone> with get, set

type [<AllowNullLiteral>] VariableGroup =
    /// Gets or sets the identity who created.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets or sets description.
    abstract description: string with get, set
    /// Gets the unique identifier of this field.
    abstract id: float with get, set
    /// Denotes if a variable group is shared with other project or not.
    abstract isShared: bool with get, set
    /// Gets or sets the identity who modified.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets name.
    abstract name: string with get, set
    /// Gets or sets provider data.
    abstract providerData: VariableGroupProviderData with get, set
    /// Gets or sets type.
    abstract ``type``: string with get, set
    /// all project references where the variable group is shared with other projects.
    abstract variableGroupProjectReferences: ResizeArray<VariableGroupProjectReference> with get, set
    /// Gets and sets the dictionary of variables.
    abstract variables: VariableGroupVariables with get, set

type [<RequireQualifiedAccess>] VariableGroupActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

/// A variable group reference is a shallow reference to variable group.
type [<AllowNullLiteral>] VariableGroupProjectReference =
    /// Gets or sets description of the variable group.
    abstract description: string with get, set
    /// Gets or sets name of the variable group.
    abstract name: string with get, set
    /// Gets or sets project reference of the variable group.
    abstract projectReference: ProjectReference with get, set

type [<AllowNullLiteral>] VariableGroupProviderData =
    interface end

type [<AllowNullLiteral>] VariableValue =
    /// Gets or sets as the variable is secret or not.
    abstract isSecret: bool with get, set
    /// Gets or sets the value.
    abstract value: string with get, set

type [<AllowNullLiteral>] WorkflowTask =
    /// Gets or sets as the task always run or not.
    abstract alwaysRun: bool with get, set
    /// Gets or sets the task condition.
    abstract condition: string with get, set
    /// Gets or sets as the task continue run on error or not.
    abstract continueOnError: bool with get, set
    /// Gets or sets the task definition type. Example:- 'Agent', DeploymentGroup', 'Server' or 'ServerGate'.
    abstract definitionType: string with get, set
    /// Gets or sets as the task enabled or not.
    abstract enabled: bool with get, set
    /// Gets or sets the task environment variables.
    abstract environment: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets the task inputs.
    abstract inputs: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets the name of the task.
    abstract name: string with get, set
    /// Gets or sets the task override inputs.
    abstract overrideInputs: ArtifactContributionDefinitionArtifactTypeStreamMapping with get, set
    /// Gets or sets the reference name of the task.
    abstract refName: string with get, set
    /// Gets or sets the ID of the task.
    abstract taskId: string with get, set
    /// Gets or sets the task timeout.
    abstract timeoutInMinutes: float with get, set
    /// Gets or sets the version of the task.
    abstract version: string with get, set

type [<AllowNullLiteral>] WorkflowTaskReference =
    /// Task identifier.
    abstract id: string with get, set
    /// Name of the task.
    abstract name: string with get, set
    /// Version of the task.
    abstract version: string with get, set

type [<AllowNullLiteral>] YamlFileSource =
    /// Gets or sets definition reference. e.g. \{"project":\{"id":"fed755ea-49c5-4399-acea-fd5b5aa90a6c","name":"myProject"\},"definition":\{"id":"1","name":"mybuildDefinition"\},"connection":\{"id":"1","name":"myConnection"\}\}
    abstract sourceReference: YamlFileSourceSourceReference with get, set
    abstract ``type``: YamlFileSourceTypes with get, set

type [<RequireQualifiedAccess>] YamlFileSourceTypes =
    | None = 0
    | TFSGit = 1

type [<AllowNullLiteral>] YamlPipelineProcess =
    inherit PipelineProcess
    abstract errors: ResizeArray<string> with get, set
    abstract filename: string with get, set
    abstract fileSource: YamlFileSource with get, set
    abstract resources: YamlPipelineProcessResources with get, set

type [<AllowNullLiteral>] YamlPipelineProcessResources =
    abstract endpoints: ResizeArray<ServiceEndpointReference> with get, set
    abstract queues: ResizeArray<AgentPoolQueueReference> with get, set

type [<AllowNullLiteral>] YamlSourceReference =
    abstract id: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] ArtifactDefinitionReference =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ArtifactSourceReference with get, set

type [<AllowNullLiteral>] ArtifactContributionDefinitionArtifactTypeStreamMapping =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] CodeRepositoryReferenceRepositoryReference =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ReleaseManagementInputValue with get, set

type [<AllowNullLiteral>] DeploymentApprovalPendingEventData =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] MappingDetailsMappings =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> FormInput.InputValue with get, set

type [<AllowNullLiteral>] ReleaseVariables =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ConfigurationVariableValue with get, set

type [<AllowNullLiteral>] VariableGroupVariables =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> VariableValue with get, set

type [<AllowNullLiteral>] YamlFileSourceSourceReference =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> YamlSourceReference with get, set
module FormInput = ___FormInput_FormInput
module Release = ___Release_Release
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ReleaseRestClient: ReleaseRestClientStatic

type [<AllowNullLiteral>] ReleaseRestClient =
    inherit RestClientBase
    /// <summary>Returns the artifact details that automation agent requires</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    abstract getAgentArtifactDefinitions: project: string * releaseId: float -> Promise<ResizeArray<Release.AgentArtifactDefinition>>
    /// <summary>Get a list of approvals</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="assignedToFilter">- Approvals assigned to this user.</param>
    /// <param name="statusFilter">- Approvals with this status. Default is 'pending'.</param>
    /// <param name="releaseIdsFilter">- Approvals for release id(s) mentioned in the filter. Multiple releases can be mentioned by separating them with ',' e.g. releaseIdsFilter=1,2,3,4.</param>
    /// <param name="typeFilter">- Approval with this type.</param>
    /// <param name="top">- Number of approvals to get. Default is 50.</param>
    /// <param name="continuationToken">- Gets the approvals after the continuation token provided.</param>
    /// <param name="queryOrder">- Gets the results in the defined order of created approvals. Default is 'descending'.</param>
    /// <param name="includeMyGroupApprovals">- 'true' to include my group approvals. Default is 'false'.</param>
    abstract getApprovals: project: string * ?assignedToFilter: string * ?statusFilter: Release.ApprovalStatus * ?releaseIdsFilter: ResizeArray<float> * ?typeFilter: Release.ApprovalType * ?top: float * ?continuationToken: float * ?queryOrder: Release.ReleaseQueryOrder * ?includeMyGroupApprovals: bool -> Promise<ResizeArray<Release.ReleaseApproval>>
    /// <summary>Get approval history.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="approvalStepId">- Id of the approval.</param>
    abstract getApprovalHistory: project: string * approvalStepId: float -> Promise<Release.ReleaseApproval>
    /// <summary>Get an approval.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="approvalId">- Id of the approval.</param>
    /// <param name="includeHistory">- 'true' to include history of the approval. Default is 'false'.</param>
    abstract getApproval: project: string * approvalId: float * ?includeHistory: bool -> Promise<Release.ReleaseApproval>
    /// <summary>Update status of an approval</summary>
    /// <param name="approval">- ReleaseApproval object having status, approver and comments.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="approvalId">- Id of the approval.</param>
    abstract updateReleaseApproval: approval: Release.ReleaseApproval * project: string * approvalId: float -> Promise<Release.ReleaseApproval>
    /// <param name="approvals">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateReleaseApprovals: approvals: ResizeArray<Release.ReleaseApproval> * project: string -> Promise<ResizeArray<Release.ReleaseApproval>>
    /// <summary>Get a task attachment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of the release environment.</param>
    /// <param name="attemptId">- Attempt number of deployment.</param>
    /// <param name="timelineId">- Timeline Id of the task.</param>
    /// <param name="recordId">- Record Id of attachment.</param>
    /// <param name="type">- Type of the attachment.</param>
    /// <param name="name">- Name of the attachment.</param>
    abstract getTaskAttachmentContent: project: string * releaseId: float * environmentId: float * attemptId: float * timelineId: string * recordId: string * ``type``: string * name: string -> Promise<ArrayBuffer>
    /// <summary>Get a release task attachment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of the release environment.</param>
    /// <param name="attemptId">- Attempt number of deployment.</param>
    /// <param name="planId">- Plan Id of the deploy phase.</param>
    /// <param name="timelineId">- Timeline Id of the task.</param>
    /// <param name="recordId">- Record Id of attachment.</param>
    /// <param name="type">- Type of the attachment.</param>
    /// <param name="name">- Name of the attachment.</param>
    abstract getReleaseTaskAttachmentContent: project: string * releaseId: float * environmentId: float * attemptId: float * planId: string * timelineId: string * recordId: string * ``type``: string * name: string -> Promise<ArrayBuffer>
    /// <summary>Get the task attachments.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of the release environment.</param>
    /// <param name="attemptId">- Attempt number of deployment.</param>
    /// <param name="timelineId">- Timeline Id of the task.</param>
    /// <param name="type">- Type of the attachment.</param>
    abstract getTaskAttachments: project: string * releaseId: float * environmentId: float * attemptId: float * timelineId: string * ``type``: string -> Promise<ResizeArray<Release.ReleaseTaskAttachment>>
    /// <summary>Get the release task attachments.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of the release environment.</param>
    /// <param name="attemptId">- Attempt number of deployment.</param>
    /// <param name="planId">- Plan Id of the deploy phase.</param>
    /// <param name="type">- Type of the attachment.</param>
    abstract getReleaseTaskAttachments: project: string * releaseId: float * environmentId: float * attemptId: float * planId: string * ``type``: string -> Promise<ResizeArray<Release.ReleaseTaskAttachment>>
    /// <param name="artifactType">-</param>
    /// <param name="sourceId">-</param>
    /// <param name="artifactVersionId">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getAutoTriggerIssues: artifactType: string * sourceId: string * artifactVersionId: string * ?project: string -> Promise<ResizeArray<Release.AutoTriggerIssue>>
    /// <summary>Gets a badge that indicates the status of the most recent deployment for an environment.</summary>
    /// <param name="projectId">- The ID of the Project.</param>
    /// <param name="releaseDefinitionId">- The ID of the Release Definition.</param>
    /// <param name="environmentId">- The ID of the Environment.</param>
    /// <param name="branchName">- The name of the branch.</param>
    abstract getDeploymentBadge: projectId: string * releaseDefinitionId: float * environmentId: float * ?branchName: string -> Promise<string>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="baseReleaseId">-</param>
    /// <param name="top">-</param>
    /// <param name="artifactAlias">-</param>
    abstract getReleaseChanges: project: string * releaseId: float * ?baseReleaseId: float * ?top: float * ?artifactAlias: string -> Promise<ResizeArray<Release.Change>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">-</param>
    /// <param name="propertyFilters">-</param>
    abstract getDefinitionEnvironments: project: string * ?taskGroupId: string * ?propertyFilters: ResizeArray<string> -> Promise<ResizeArray<Release.DefinitionEnvironmentReference>>
    /// <summary>Create a release definition</summary>
    /// <param name="releaseDefinition">- release definition object to create.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createReleaseDefinition: releaseDefinition: Release.ReleaseDefinition * project: string -> Promise<Release.ReleaseDefinition>
    /// <summary>Delete a release definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the release definition.</param>
    /// <param name="comment">- Comment for deleting a release definition.</param>
    /// <param name="forceDelete">- 'true' to automatically cancel any in-progress release deployments and proceed with release definition deletion . Default is 'false'.</param>
    abstract deleteReleaseDefinition: project: string * definitionId: float * ?comment: string * ?forceDelete: bool -> Promise<unit>
    /// <summary>Get a release definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the release definition.</param>
    /// <param name="propertyFilters">- A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definition will contain values for the specified property Ids (if they exist). If not set, properties will not be included.</param>
    abstract getReleaseDefinition: project: string * definitionId: float * ?propertyFilters: ResizeArray<string> -> Promise<Release.ReleaseDefinition>
    /// <summary>Get release definition of a given revision.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the release definition.</param>
    /// <param name="revision">- Revision number of the release definition.</param>
    abstract getReleaseDefinitionRevision: project: string * definitionId: float * revision: float -> Promise<string>
    /// <summary>Get a list of release definitions.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="searchText">- Get release definitions with names containing searchText.</param>
    /// <param name="expand">- The properties that should be expanded in the list of Release definitions.</param>
    /// <param name="artifactType">- Release definitions with given artifactType will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.</param>
    /// <param name="artifactSourceId">- Release definitions with given artifactSourceId will be returned. e.g. For build it would be \{projectGuid\}:\{BuildDefinitionId\}, for Jenkins it would be \{JenkinsConnectionId\}:\{JenkinsDefinitionId\}, for TfsOnPrem it would be \{TfsOnPremConnectionId\}:\{ProjectName\}:\{TfsOnPremDefinitionId\}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json at https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.</param>
    /// <param name="top">- Number of release definitions to get.</param>
    /// <param name="continuationToken">- Gets the release definitions after the continuation token provided.</param>
    /// <param name="queryOrder">- Gets the results in the defined order. Default is 'IdAscending'.</param>
    /// <param name="path">- Gets the release definitions under the specified path.</param>
    /// <param name="isExactNameMatch">- 'true'to gets the release definitions with exact match as specified in searchText. Default is 'false'.</param>
    /// <param name="tagFilter">- A comma-delimited list of tags. Only release definitions with these tags will be returned.</param>
    /// <param name="propertyFilters">- A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definitions will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release Definition from results irrespective of whether it has property set or not.</param>
    /// <param name="definitionIdFilter">- A comma-delimited list of release definitions to retrieve.</param>
    /// <param name="isDeleted">- 'true' to get release definitions that has been deleted. Default is 'false'</param>
    /// <param name="searchTextContainsFolderName">- 'true' to get the release definitions under the folder with name as specified in searchText. Default is 'false'.</param>
    abstract getReleaseDefinitions: project: string * ?searchText: string * ?expand: Release.ReleaseDefinitionExpands * ?artifactType: string * ?artifactSourceId: string * ?top: float * ?continuationToken: string * ?queryOrder: Release.ReleaseDefinitionQueryOrder * ?path: string * ?isExactNameMatch: bool * ?tagFilter: ResizeArray<string> * ?propertyFilters: ResizeArray<string> * ?definitionIdFilter: ResizeArray<string> * ?isDeleted: bool * ?searchTextContainsFolderName: bool -> Promise<ResizeArray<Release.ReleaseDefinition>>
    /// <summary>Undelete a release definition.</summary>
    /// <param name="releaseDefinitionUndeleteParameter">- Object for undelete release definition.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the release definition to be undeleted</param>
    abstract undeleteReleaseDefinition: releaseDefinitionUndeleteParameter: Release.ReleaseDefinitionUndeleteParameter * project: string * definitionId: float -> Promise<Release.ReleaseDefinition>
    /// <summary>Update a release definition.</summary>
    /// <param name="releaseDefinition">- Release definition object to update.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateReleaseDefinition: releaseDefinition: Release.ReleaseDefinition * project: string -> Promise<Release.ReleaseDefinition>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">-</param>
    /// <param name="definitionEnvironmentId">-</param>
    /// <param name="createdBy">-</param>
    /// <param name="minModifiedTime">-</param>
    /// <param name="maxModifiedTime">-</param>
    /// <param name="deploymentStatus">-</param>
    /// <param name="operationStatus">-</param>
    /// <param name="latestAttemptsOnly">-</param>
    /// <param name="queryOrder">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    /// <param name="createdFor">-</param>
    /// <param name="minStartedTime">-</param>
    /// <param name="maxStartedTime">-</param>
    /// <param name="sourceBranch">-</param>
    abstract getDeployments: project: string * ?definitionId: float * ?definitionEnvironmentId: float * ?createdBy: string * ?minModifiedTime: DateTime * ?maxModifiedTime: DateTime * ?deploymentStatus: Release.DeploymentStatus * ?operationStatus: Release.DeploymentOperationStatus * ?latestAttemptsOnly: bool * ?queryOrder: Release.ReleaseQueryOrder * ?top: float * ?continuationToken: float * ?createdFor: string * ?minStartedTime: DateTime * ?maxStartedTime: DateTime * ?sourceBranch: string -> Promise<ResizeArray<Release.Deployment>>
    /// <param name="queryParameters">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getDeploymentsForMultipleEnvironments: queryParameters: Release.DeploymentQueryParameters * project: string -> Promise<ResizeArray<Release.Deployment>>
    /// <summary>Get a release environment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of the release environment.</param>
    abstract getReleaseEnvironment: project: string * releaseId: float * environmentId: float -> Promise<Release.ReleaseEnvironment>
    /// <summary>Update the status of a release environment</summary>
    /// <param name="environmentUpdateData">- Environment update meta data.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of release environment.</param>
    abstract updateReleaseEnvironment: environmentUpdateData: Release.ReleaseEnvironmentUpdateMetadata * project: string * releaseId: float * environmentId: float -> Promise<Release.ReleaseEnvironment>
    /// <summary>Creates a definition environment template</summary>
    /// <param name="template">- Definition environment template to create</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createDefinitionEnvironmentTemplate: template: Release.ReleaseDefinitionEnvironmentTemplate * project: string -> Promise<Release.ReleaseDefinitionEnvironmentTemplate>
    /// <summary>Delete a definition environment template</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="templateId">- Id of the definition environment template</param>
    abstract deleteDefinitionEnvironmentTemplate: project: string * templateId: string -> Promise<unit>
    /// <summary>Gets a definition environment template</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="templateId">- Id of the definition environment template</param>
    abstract getDefinitionEnvironmentTemplate: project: string * templateId: string -> Promise<Release.ReleaseDefinitionEnvironmentTemplate>
    /// <summary>Gets a list of definition environment templates</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="isDeleted">- 'true' to get definition environment templates that have been deleted. Default is 'false'</param>
    abstract listDefinitionEnvironmentTemplates: project: string * ?isDeleted: bool -> Promise<ResizeArray<Release.ReleaseDefinitionEnvironmentTemplate>>
    /// <summary>Undelete a release definition environment template.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="templateId">- Id of the definition environment template to be undeleted</param>
    abstract undeleteReleaseDefinitionEnvironmentTemplate: project: string * templateId: string -> Promise<Release.ReleaseDefinitionEnvironmentTemplate>
    /// <param name="favoriteItems">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scope">-</param>
    /// <param name="identityId">-</param>
    abstract createFavorites: favoriteItems: ResizeArray<Release.FavoriteItem> * project: string * scope: string * ?identityId: string -> Promise<ResizeArray<Release.FavoriteItem>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scope">-</param>
    /// <param name="identityId">-</param>
    /// <param name="favoriteItemIds">-</param>
    abstract deleteFavorites: project: string * scope: string * ?identityId: string * ?favoriteItemIds: string -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scope">-</param>
    /// <param name="identityId">-</param>
    abstract getFavorites: project: string * scope: string * ?identityId: string -> Promise<ResizeArray<Release.FavoriteItem>>
    /// <param name="flightName">-</param>
    abstract getFlightAssignments: ?flightName: string -> Promise<ResizeArray<string>>
    /// <summary>Creates a new folder.</summary>
    /// <param name="folder">- folder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- Path of the folder.</param>
    abstract createFolder: folder: Release.Folder * project: string * ?path: string -> Promise<Release.Folder>
    /// <summary>Deletes a definition folder for given folder name and path and all it's existing definitions.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- Path of the folder to delete.</param>
    abstract deleteFolder: project: string * path: string -> Promise<unit>
    /// <summary>Gets folders.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- Path of the folder.</param>
    /// <param name="queryOrder">- Gets the results in the defined order. Default is 'None'.</param>
    abstract getFolders: project: string * ?path: string * ?queryOrder: Release.FolderPathQueryOrder -> Promise<ResizeArray<Release.Folder>>
    /// <summary>Updates an existing folder at given existing path.</summary>
    /// <param name="folder">- folder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="path">- Path of the folder to update.</param>
    abstract updateFolder: folder: Release.Folder * project: string * path: string -> Promise<Release.Folder>
    /// <summary>Updates the gate for a deployment.</summary>
    /// <param name="gateUpdateMetadata">- Metadata to patch the Release Gates.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="gateStepId">- Gate step Id.</param>
    abstract updateGates: gateUpdateMetadata: Release.GateUpdateMetadata * project: string * gateStepId: float -> Promise<Release.ReleaseGates>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    abstract getReleaseHistory: project: string * releaseId: float -> Promise<ResizeArray<Release.ReleaseRevision>>
    /// <param name="query">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getInputValues: query: FormInput.InputValuesQuery * project: string -> Promise<FormInput.InputValuesQuery>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="sourceId">-</param>
    abstract getIssues: project: string * buildId: float * ?sourceId: string -> Promise<ResizeArray<Release.AutoTriggerIssue>>
    /// <summary>Gets gate logs</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of release environment.</param>
    /// <param name="gateId">- Id of the gate.</param>
    /// <param name="taskId">- ReleaseTask Id for the log.</param>
    abstract getGateLog: project: string * releaseId: float * environmentId: float * gateId: float * taskId: float -> Promise<string>
    /// <summary>Get logs for a release Id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    abstract getLogs: project: string * releaseId: float -> Promise<ArrayBuffer>
    /// <summary>Gets logs</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of release environment.</param>
    /// <param name="taskId">- ReleaseTask Id for the log.</param>
    /// <param name="attemptId">- Id of the attempt.</param>
    abstract getLog: project: string * releaseId: float * environmentId: float * taskId: float * ?attemptId: float -> Promise<string>
    /// <summary>Gets the task log of a release as a plain text file.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of release environment.</param>
    /// <param name="attemptId">-</param>
    /// <param name="timelineId">-</param>
    /// <param name="taskId">- ReleaseTask Id for the log.</param>
    /// <param name="startLine">- Starting line number for logs</param>
    /// <param name="endLine">- Ending line number for logs</param>
    abstract getTaskLog2: project: string * releaseId: float * environmentId: float * attemptId: float * timelineId: string * taskId: float * ?startLine: float * ?endLine: float -> Promise<string>
    /// <summary>Gets the task log of a release as a plain text file.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="environmentId">- Id of release environment.</param>
    /// <param name="releaseDeployPhaseId">- Release deploy phase Id.</param>
    /// <param name="taskId">- ReleaseTask Id for the log.</param>
    /// <param name="startLine">- Starting line number for logs</param>
    /// <param name="endLine">- Ending line number for logs</param>
    abstract getTaskLog: project: string * releaseId: float * environmentId: float * releaseDeployPhaseId: float * taskId: float * ?startLine: float * ?endLine: float -> Promise<string>
    /// <summary>Get manual intervention for a given release and manual intervention id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="manualInterventionId">- Id of the manual intervention.</param>
    abstract getManualIntervention: project: string * releaseId: float * manualInterventionId: float -> Promise<Release.ManualIntervention>
    /// <summary>List all manual interventions for a given release.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    abstract getManualInterventions: project: string * releaseId: float -> Promise<ResizeArray<Release.ManualIntervention>>
    /// <summary>Update manual intervention.</summary>
    /// <param name="manualInterventionUpdateMetadata">- Meta data to update manual intervention.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="manualInterventionId">- Id of the manual intervention.</param>
    abstract updateManualIntervention: manualInterventionUpdateMetadata: Release.ManualInterventionUpdateMetadata * project: string * releaseId: float * manualInterventionId: float -> Promise<Release.ManualIntervention>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="minMetricsTime">-</param>
    abstract getMetrics: project: string * ?minMetricsTime: DateTime -> Promise<ResizeArray<Release.Metric>>
    /// <param name="artifactType">-</param>
    /// <param name="artifactSourceId">-</param>
    abstract getReleaseProjects: artifactType: string * artifactSourceId: string -> Promise<ResizeArray<Release.ProjectReference>>
    /// <summary>Get a list of releases</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Releases from this release definition Id.</param>
    /// <param name="definitionEnvironmentId">-</param>
    /// <param name="searchText">- Releases with names containing searchText.</param>
    /// <param name="createdBy">- Releases created by this user.</param>
    /// <param name="statusFilter">- Releases that have this status.</param>
    /// <param name="environmentStatusFilter">-</param>
    /// <param name="minCreatedTime">- Releases that were created after this time.</param>
    /// <param name="maxCreatedTime">- Releases that were created before this time.</param>
    /// <param name="queryOrder">- Gets the results in the defined order of created date for releases. Default is descending.</param>
    /// <param name="top">- Number of releases to get. Default is 50.</param>
    /// <param name="continuationToken">- Gets the releases after the continuation token provided.</param>
    /// <param name="expand">- The property that should be expanded in the list of releases.</param>
    /// <param name="artifactTypeId">- Releases with given artifactTypeId will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.</param>
    /// <param name="sourceId">- Unique identifier of the artifact used. e.g. For build it would be \{projectGuid\}:\{BuildDefinitionId\}, for Jenkins it would be \{JenkinsConnectionId\}:\{JenkinsDefinitionId\}, for TfsOnPrem it would be \{TfsOnPremConnectionId\}:\{ProjectName\}:\{TfsOnPremDefinitionId\}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.</param>
    /// <param name="artifactVersionId">- Releases with given artifactVersionId will be returned. E.g. in case of Build artifactType, it is buildId.</param>
    /// <param name="sourceBranchFilter">- Releases with given sourceBranchFilter will be returned.</param>
    /// <param name="isDeleted">- Gets the soft deleted releases, if true.</param>
    /// <param name="tagFilter">- A comma-delimited list of tags. Only releases with these tags will be returned.</param>
    /// <param name="propertyFilters">- A comma-delimited list of extended properties to be retrieved. If set, the returned Releases will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release from results irrespective of whether it has property set or not.</param>
    /// <param name="releaseIdFilter">- A comma-delimited list of releases Ids. Only releases with these Ids will be returned.</param>
    /// <param name="path">- Releases under this folder path will be returned</param>
    abstract getReleases: ?project: string * ?definitionId: float * ?definitionEnvironmentId: float * ?searchText: string * ?createdBy: string * ?statusFilter: Release.ReleaseStatus * ?environmentStatusFilter: float * ?minCreatedTime: DateTime * ?maxCreatedTime: DateTime * ?queryOrder: Release.ReleaseQueryOrder * ?top: float * ?continuationToken: float * ?expand: Release.ReleaseExpands * ?artifactTypeId: string * ?sourceId: string * ?artifactVersionId: string * ?sourceBranchFilter: string * ?isDeleted: bool * ?tagFilter: ResizeArray<string> * ?propertyFilters: ResizeArray<string> * ?releaseIdFilter: ResizeArray<float> * ?path: string -> Promise<ResizeArray<Release.Release>>
    /// <summary>Create a release.</summary>
    /// <param name="releaseStartMetadata">- Metadata to create a release.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createRelease: releaseStartMetadata: Release.ReleaseStartMetadata * project: string -> Promise<Release.Release>
    /// <summary>Soft delete a release</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="comment">- Comment for deleting a release.</param>
    abstract deleteRelease: project: string * releaseId: float * ?comment: string -> Promise<unit>
    /// <summary>Get a Release</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="approvalFilters">- A filter which would allow fetching approval steps selectively based on whether it is automated, or manual. This would also decide whether we should fetch pre and post approval snapshots. Assumes All by default</param>
    /// <param name="propertyFilters">- A comma-delimited list of extended properties to be retrieved. If set, the returned Release will contain values for the specified property Ids (if they exist). If not set, properties will not be included.</param>
    /// <param name="expand">- A property that should be expanded in the release.</param>
    /// <param name="topGateRecords">- Number of release gate records to get. Default is 5.</param>
    abstract getRelease: project: string * releaseId: float * ?approvalFilters: Release.ApprovalFilters * ?propertyFilters: ResizeArray<string> * ?expand: Release.SingleReleaseExpands * ?topGateRecords: float -> Promise<Release.Release>
    /// <summary>Get release summary of a given definition Id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the definition to get release summary.</param>
    /// <param name="releaseCount">- Count of releases to be included in summary.</param>
    /// <param name="includeArtifact">- Include artifact details.Default is 'false'.</param>
    /// <param name="definitionEnvironmentIdsFilter">-</param>
    abstract getReleaseDefinitionSummary: project: string * definitionId: float * releaseCount: float * ?includeArtifact: bool * ?definitionEnvironmentIdsFilter: ResizeArray<float> -> Promise<Release.ReleaseDefinitionSummary>
    /// <summary>Get release for a given revision number.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release.</param>
    /// <param name="definitionSnapshotRevision">- Definition snapshot revision number.</param>
    abstract getReleaseRevision: project: string * releaseId: float * definitionSnapshotRevision: float -> Promise<string>
    /// <summary>Undelete a soft deleted release.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of release to be undeleted.</param>
    /// <param name="comment">- Any comment for undeleting.</param>
    abstract undeleteRelease: project: string * releaseId: float * comment: string -> Promise<unit>
    /// <summary>Update a complete release object.</summary>
    /// <param name="release">- Release object for update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release to update.</param>
    abstract updateRelease: release: Release.Release * project: string * releaseId: float -> Promise<Release.Release>
    /// <summary>Update few properties of a release.</summary>
    /// <param name="releaseUpdateMetadata">- Properties of release to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">- Id of the release to update.</param>
    abstract updateReleaseResource: releaseUpdateMetadata: Release.ReleaseUpdateMetadata * project: string * releaseId: float -> Promise<Release.Release>
    /// <summary>Gets the release settings</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getReleaseSettings: project: string -> Promise<Release.ReleaseSettings>
    /// <summary>Updates the release settings</summary>
    /// <param name="releaseSettings">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateReleaseSettings: releaseSettings: Release.ReleaseSettings * project: string -> Promise<Release.ReleaseSettings>
    /// <summary>Get release definition for a given definitionId and revision</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the definition.</param>
    /// <param name="revision">- Id of the revision.</param>
    abstract getDefinitionRevision: project: string * definitionId: float * revision: float -> Promise<string>
    /// <summary>Get revision history for a release definition</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">- Id of the definition.</param>
    abstract getReleaseDefinitionHistory: project: string * definitionId: float -> Promise<ResizeArray<Release.ReleaseDefinitionRevision>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    abstract getSummaryMailSections: project: string * releaseId: float -> Promise<ResizeArray<Release.SummaryMailSection>>
    /// <param name="mailMessage">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    abstract sendSummaryMail: mailMessage: Release.MailMessage * project: string * releaseId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definitionId">-</param>
    abstract getSourceBranches: project: string * definitionId: float -> Promise<ResizeArray<string>>
    /// <summary>Adds a tag to a definition</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseDefinitionId">-</param>
    /// <param name="tag">-</param>
    abstract addDefinitionTag: project: string * releaseDefinitionId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Adds multiple tags to a definition</summary>
    /// <param name="tags">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseDefinitionId">-</param>
    abstract addDefinitionTags: tags: ResizeArray<string> * project: string * releaseDefinitionId: float -> Promise<ResizeArray<string>>
    /// <summary>Deletes a tag from a definition</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseDefinitionId">-</param>
    /// <param name="tag">-</param>
    abstract deleteDefinitionTag: project: string * releaseDefinitionId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Gets the tags for a definition</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseDefinitionId">-</param>
    abstract getDefinitionTags: project: string * releaseDefinitionId: float -> Promise<ResizeArray<string>>
    /// <summary>Adds a tag to a releaseId</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="tag">-</param>
    abstract addReleaseTag: project: string * releaseId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Adds tag to a release</summary>
    /// <param name="tags">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    abstract addReleaseTags: tags: ResizeArray<string> * project: string * releaseId: float -> Promise<ResizeArray<string>>
    /// <summary>Deletes a tag from a release</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="tag">-</param>
    abstract deleteReleaseTag: project: string * releaseId: float * tag: string -> Promise<ResizeArray<string>>
    /// <summary>Gets the tags for a release</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    abstract getReleaseTags: project: string * releaseId: float -> Promise<ResizeArray<string>>
    /// <param name="project">- Project ID or project name</param>
    abstract getTags: project: string -> Promise<ResizeArray<string>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="environmentId">-</param>
    /// <param name="releaseDeployPhaseId">-</param>
    abstract getTasksForTaskGroup: project: string * releaseId: float * environmentId: float * releaseDeployPhaseId: float -> Promise<ResizeArray<Release.ReleaseTask>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="environmentId">-</param>
    /// <param name="attemptId">-</param>
    /// <param name="timelineId">-</param>
    abstract getTasks2: project: string * releaseId: float * environmentId: float * attemptId: float * timelineId: string -> Promise<ResizeArray<Release.ReleaseTask>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="environmentId">-</param>
    /// <param name="attemptId">-</param>
    abstract getTasks: project: string * releaseId: float * environmentId: float * ?attemptId: float -> Promise<ResizeArray<Release.ReleaseTask>>
    /// <param name="project">- Project ID or project name</param>
    abstract getArtifactTypeDefinitions: project: string -> Promise<ResizeArray<Release.ArtifactTypeDefinition>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseDefinitionId">-</param>
    abstract getArtifactVersions: project: string * releaseDefinitionId: float -> Promise<Release.ArtifactVersionQueryResult>
    /// <param name="artifacts">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getArtifactVersionsForSources: artifacts: ResizeArray<Release.Artifact> * project: string -> Promise<Release.ArtifactVersionQueryResult>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="baseReleaseId">-</param>
    /// <param name="top">-</param>
    /// <param name="artifactAlias">-</param>
    abstract getReleaseWorkItemsRefs: project: string * releaseId: float * ?baseReleaseId: float * ?top: float * ?artifactAlias: string -> Promise<ResizeArray<Release.ReleaseWorkItemRef>>

type [<AllowNullLiteral>] ReleaseRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ReleaseRestClient
    abstract RESOURCE_AREA_ID: string
module DistributedTaskCommon = ___DistributedTaskCommon_DistributedTaskCommon
module FormInput = ___FormInput_FormInput
module WebApi = ___WebApi_WebApi

type [<RequireQualifiedAccess>] AadLoginPromptOption =
    | NoOption = 0
    | Login = 1
    | SelectAccount = 2
    | FreshLogin = 3
    | FreshLoginWithMfa = 4

type [<AllowNullLiteral>] AadOauthTokenRequest =
    abstract refresh: bool with get, set
    abstract resource: string with get, set
    abstract tenantId: string with get, set
    abstract token: string with get, set

type [<AllowNullLiteral>] AadOauthTokenResult =
    abstract accessToken: string with get, set
    abstract refreshTokenCache: string with get, set

type [<RequireQualifiedAccess>] AccessTokenRequestType =
    | None = 0
    | Oauth = 1
    | Direct = 2

type [<AllowNullLiteral>] AuthConfiguration =
    inherit OAuthConfiguration
    /// Gets or sets parameters contained in configuration object.
    abstract parameters: AuthConfigurationParameters with get, set

/// Specifies the authentication scheme to be used for authentication.
type [<AllowNullLiteral>] AuthenticationSchemeReference =
    /// Gets or sets the key and value of the fields used for authentication.
    abstract inputs: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the type of authentication scheme of an endpoint.
    abstract ``type``: string with get, set

/// Represents the header of the REST request.
type [<AllowNullLiteral>] AuthorizationHeader =
    /// Gets or sets the name of authorization header.
    abstract name: string with get, set
    /// Gets or sets the value of authorization header.
    abstract value: string with get, set

type [<AllowNullLiteral>] AzureKeyVaultPermission =
    inherit AzureResourcePermission
    abstract vault: string with get, set

/// Azure Management Group
type [<AllowNullLiteral>] AzureManagementGroup =
    /// Display name of azure management group
    abstract displayName: string with get, set
    /// Id of azure management group
    abstract id: string with get, set
    /// Azure management group name
    abstract name: string with get, set
    /// Id of tenant from which azure management group belogs
    abstract tenantId: string with get, set

/// Azure management group query result
type [<AllowNullLiteral>] AzureManagementGroupQueryResult =
    /// Error message in case of an exception
    abstract errorMessage: string with get, set
    /// List of azure management groups
    abstract value: ResizeArray<AzureManagementGroup> with get, set

type [<AllowNullLiteral>] AzureMLWorkspace =
    abstract id: string with get, set
    abstract location: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] AzurePermission =
    abstract provisioned: bool with get, set
    abstract resourceProvider: string with get, set

type [<AllowNullLiteral>] AzureResourcePermission =
    inherit AzurePermission
    abstract resourceGroup: string with get, set

type [<AllowNullLiteral>] AzureRoleAssignmentPermission =
    inherit AzurePermission
    abstract roleAssignmentId: string with get, set

type [<AllowNullLiteral>] AzureSpnOperationStatus =
    abstract state: string with get, set
    abstract statusMessage: string with get, set

type [<AllowNullLiteral>] AzureSubscription =
    abstract displayName: string with get, set
    abstract subscriptionId: string with get, set
    abstract subscriptionTenantId: string with get, set
    abstract subscriptionTenantName: string with get, set

type [<AllowNullLiteral>] AzureSubscriptionQueryResult =
    abstract errorMessage: string with get, set
    abstract value: ResizeArray<AzureSubscription> with get, set

/// Specifies the client certificate to be used for the endpoint request.
type [<AllowNullLiteral>] ClientCertificate =
    /// Gets or sets the value of client certificate.
    abstract value: string with get, set

/// Specifies the data sources for this endpoint.
type [<AllowNullLiteral>] DataSource =
    /// Gets or sets the authentication scheme for the endpoint request.
    abstract authenticationScheme: AuthenticationSchemeReference with get, set
    /// Gets or sets the pagination format supported by this data source(ContinuationToken/SkipTop).
    abstract callbackContextTemplate: string with get, set
    /// Gets or sets the template to check if subsequent call is needed.
    abstract callbackRequiredTemplate: string with get, set
    /// Gets or sets the endpoint url of the data source.
    abstract endpointUrl: string with get, set
    /// Gets or sets the authorization headers of the request.
    abstract headers: ResizeArray<AuthorizationHeader> with get, set
    /// Gets or sets the initial value of the query params.
    abstract initialContextTemplate: string with get, set
    /// Gets or sets the name of the data source.
    abstract name: string with get, set
    /// Gets or sets the request content of the endpoint request.
    abstract requestContent: string with get, set
    /// Gets or sets the request method of the endpoint request.
    abstract requestVerb: string with get, set
    /// Gets or sets the resource url of the endpoint request.
    abstract resourceUrl: string with get, set
    /// Gets or sets the result selector to filter the response of the endpoint request.
    abstract resultSelector: string with get, set

/// Represents the data source binding of the endpoint.
type [<AllowNullLiteral>] DataSourceBinding =
    inherit DistributedTaskCommon.DataSourceBindingBase

/// Represents details of the service endpoint data source.
type [<AllowNullLiteral>] DataSourceDetails =
    /// Gets or sets the data source name.
    abstract dataSourceName: string with get, set
    /// Gets or sets the data source url.
    abstract dataSourceUrl: string with get, set
    /// Gets or sets the request headers.
    abstract headers: ResizeArray<AuthorizationHeader> with get, set
    /// Gets or sets the initialization context used for the initial call to the data source
    abstract initialContextTemplate: string with get, set
    /// Gets the parameters of data source.
    abstract parameters: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the data source request content.
    abstract requestContent: string with get, set
    /// Gets or sets the data source request verb. Get/Post are the only implemented types
    abstract requestVerb: string with get, set
    /// Gets or sets the resource url of data source.
    abstract resourceUrl: string with get, set
    /// Gets or sets the result selector.
    abstract resultSelector: string with get, set

/// Represents the details of the input on which a given input is dependent.
type [<AllowNullLiteral>] DependencyBinding =
    /// Gets or sets the value of the field on which url is dependent.
    abstract key: string with get, set
    /// Gets or sets the corresponding value of url.
    abstract value: string with get, set

/// Represents the dependency data for the endpoint inputs.
type [<AllowNullLiteral>] DependencyData =
    /// Gets or sets the category of dependency data.
    abstract input: string with get, set
    /// Gets or sets the key-value pair to specify properties and their values.
    abstract map: ResizeArray<DependencyDataMap> with get, set

/// Represents the inputs on which any given input is dependent.
type [<AllowNullLiteral>] DependsOn =
    /// Gets or sets the ID of the field on which URL's value is dependent.
    abstract input: string with get, set
    /// Gets or sets key-value pair containing other's field value and corresponding url value.
    abstract map: ResizeArray<DependencyBinding> with get, set

/// Represents the authorization used for service endpoint.
type [<AllowNullLiteral>] EndpointAuthorization =
    /// Gets or sets the parameters for the selected authorization scheme.
    abstract parameters: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the scheme used for service endpoint authentication.
    abstract scheme: string with get, set

type [<AllowNullLiteral>] EndpointOperationStatus =
    abstract state: string with get, set
    abstract statusMessage: string with get, set

/// Represents url of the service endpoint.
type [<AllowNullLiteral>] EndpointUrl =
    /// Gets or sets the dependency bindings.
    abstract dependsOn: DependsOn with get, set
    /// Gets or sets the display name of service endpoint url.
    abstract displayName: string with get, set
    /// Gets or sets the format of the url.
    abstract format: string with get, set
    /// Gets or sets the help text of service endpoint url.
    abstract helpText: string with get, set
    /// Gets or sets the visibility of service endpoint url.
    abstract isVisible: string with get, set
    /// Gets or sets the value of service endpoint url.
    abstract value: string with get, set

/// Specifies the public url of the help documentation.
type [<AllowNullLiteral>] HelpLink =
    /// Gets or sets the help text.
    abstract text: string with get, set
    /// Gets or sets the public url of the help documentation.
    abstract url: string with get, set

type [<AllowNullLiteral>] OAuth2TokenResult =
    abstract accessToken: string with get, set
    abstract error: string with get, set
    abstract errorDescription: string with get, set
    abstract expiresIn: string with get, set
    abstract issuedAt: string with get, set
    abstract refreshToken: string with get, set
    abstract scope: string with get, set

type [<AllowNullLiteral>] OAuthConfiguration =
    /// Gets or sets the ClientId
    abstract clientId: string with get, set
    /// Gets or sets the ClientSecret
    abstract clientSecret: string with get, set
    /// Gets or sets the identity who created the config.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets or sets the time when config was created.
    abstract createdOn: DateTime with get, set
    /// Gets or sets the type of the endpoint.
    abstract endpointType: string with get, set
    /// Gets or sets the unique identifier of this field
    abstract id: string with get, set
    /// Gets or sets the identity who modified the config.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets or sets the time when variable group was modified
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets the name
    abstract name: string with get, set
    /// Gets or sets the Url
    abstract url: string with get, set

type [<RequireQualifiedAccess>] OAuthConfigurationActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

type [<AllowNullLiteral>] OAuthConfigurationParams =
    /// Gets or sets the ClientId
    abstract clientId: string with get, set
    /// Gets or sets the ClientSecret
    abstract clientSecret: string with get, set
    /// Gets or sets the type of the endpoint.
    abstract endpointType: string with get, set
    /// Gets or sets the name
    abstract name: string with get, set
    /// Gets or sets the Url
    abstract url: string with get, set

type [<AllowNullLiteral>] OAuthEndpointStatus =
    abstract state: string with get, set
    abstract statusMessage: string with get, set

type [<AllowNullLiteral>] Parameter =
    abstract isSecret: bool with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] ProjectReference =
    abstract id: string with get, set
    abstract name: string with get, set

/// Specify the properties for refreshing the endpoint authentication object being queried
type [<AllowNullLiteral>] RefreshAuthenticationParameters =
    /// EndpointId which needs new authentication params
    abstract endpointId: string with get, set
    /// Scope of the token requested. For GitHub marketplace apps, scope contains repository Ids
    abstract scope: ResizeArray<float> with get, set
    /// The requested endpoint authentication should be valid for _ minutes. Authentication params will not be refreshed if the token contained in endpoint already has active token.
    abstract tokenValidityInMinutes: float with get, set

/// Represents template to transform the result data.
type [<AllowNullLiteral>] ResultTransformationDetails =
    /// Gets or sets the template for callback parameters
    abstract callbackContextTemplate: string with get, set
    /// Gets or sets the template to decide whether to callback or not
    abstract callbackRequiredTemplate: string with get, set
    /// Gets or sets the template for result transformation.
    abstract resultTemplate: string with get, set

/// Represents an endpoint which may be used by an orchestration job.
type [<AllowNullLiteral>] ServiceEndpoint =
    /// Gets or sets the identity reference for the administrators group of the service endpoint.
    abstract administratorsGroup: WebApi.IdentityRef with get, set
    /// Gets or sets the authorization data for talking to the endpoint.
    abstract authorization: EndpointAuthorization with get, set
    /// Gets or sets the identity reference for the user who created the Service endpoint.
    abstract createdBy: WebApi.IdentityRef with get, set
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the description of endpoint.
    abstract description: string with get, set
    /// This is a deprecated field.
    abstract groupScopeId: string with get, set
    /// Gets or sets the identifier of this endpoint.
    abstract id: string with get, set
    /// EndPoint state indicator
    abstract isReady: bool with get, set
    /// Indicates whether service endpoint is shared with other projects or not.
    abstract isShared: bool with get, set
    /// Gets or sets the friendly name of the endpoint.
    abstract name: string with get, set
    /// Error message during creation/deletion of endpoint
    abstract operationStatus: obj option with get, set
    /// Owner of the endpoint Supported values are "library", "agentcloud"
    abstract owner: string with get, set
    /// Gets or sets the identity reference for the readers group of the service endpoint.
    abstract readersGroup: WebApi.IdentityRef with get, set
    /// All other project references where the service endpoint is shared.
    abstract serviceEndpointProjectReferences: ResizeArray<ServiceEndpointProjectReference> with get, set
    /// Gets or sets the type of the endpoint.
    abstract ``type``: string with get, set
    /// Gets or sets the url of the endpoint.
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ServiceEndpointActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

/// Represents the authentication scheme used to authenticate the endpoint.
type [<AllowNullLiteral>] ServiceEndpointAuthenticationScheme =
    /// Gets or sets the authorization headers of service endpoint authentication scheme.
    abstract authorizationHeaders: ResizeArray<AuthorizationHeader> with get, set
    /// Gets or sets the Authorization url required to authenticate using OAuth2
    abstract authorizationUrl: string with get, set
    /// Gets or sets the certificates of service endpoint authentication scheme.
    abstract clientCertificates: ResizeArray<ClientCertificate> with get, set
    /// Gets or sets the data source bindings of the endpoint.
    abstract dataSourceBindings: ResizeArray<DataSourceBinding> with get, set
    /// Gets or sets the display name for the service endpoint authentication scheme.
    abstract displayName: string with get, set
    /// Gets or sets the input descriptors for the service endpoint authentication scheme.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets the properties of service endpoint authentication scheme.
    abstract properties: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets whether this auth scheme requires OAuth2 configuration or not.
    abstract requiresOAuth2Configuration: bool with get, set
    /// Gets or sets the scheme for service endpoint authentication.
    abstract scheme: string with get, set

/// Represents details of the service endpoint.
type [<AllowNullLiteral>] ServiceEndpointDetails =
    /// Gets or sets the authorization of service endpoint.
    abstract authorization: EndpointAuthorization with get, set
    /// Gets or sets the data of service endpoint.
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the type of service endpoint.
    abstract ``type``: string with get, set
    /// Gets or sets the connection url of service endpoint.
    abstract url: string with get, set

/// Represents service endpoint execution data.
type [<AllowNullLiteral>] ServiceEndpointExecutionData =
    /// Gets the definition of service endpoint execution owner.
    abstract definition: ServiceEndpointExecutionOwner with get, set
    /// Gets the finish time of service endpoint execution.
    abstract finishTime: DateTime with get, set
    /// Gets the Id of service endpoint execution data.
    abstract id: float with get, set
    /// Gets the owner of service endpoint execution data.
    abstract owner: ServiceEndpointExecutionOwner with get, set
    /// Gets the plan type of service endpoint execution data.
    abstract planType: string with get, set
    /// Gets the result of service endpoint execution.
    abstract result: ServiceEndpointExecutionResult with get, set
    /// Gets the start time of service endpoint execution.
    abstract startTime: DateTime with get, set

/// Represents execution owner of the service endpoint.
type [<AllowNullLiteral>] ServiceEndpointExecutionOwner =
    abstract _links: obj option with get, set
    /// Gets or sets the Id of service endpoint execution owner.
    abstract id: float with get, set
    /// Gets or sets the name of service endpoint execution owner.
    abstract name: string with get, set

/// Represents the details of service endpoint execution.
type [<AllowNullLiteral>] ServiceEndpointExecutionRecord =
    /// Gets the execution data of service endpoint execution.
    abstract data: ServiceEndpointExecutionData with get, set
    /// Gets the Id of service endpoint.
    abstract endpointId: string with get, set

type [<AllowNullLiteral>] ServiceEndpointExecutionRecordsInput =
    abstract data: ServiceEndpointExecutionData with get, set
    abstract endpointIds: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] ServiceEndpointExecutionResult =
    | Succeeded = 0
    | SucceededWithIssues = 1
    | Failed = 2
    | Canceled = 3
    | Skipped = 4
    | Abandoned = 5

type [<AllowNullLiteral>] ServiceEndpointOAuthConfigurationReference =
    abstract configurationId: string with get, set
    abstract serviceEndpointId: string with get, set
    abstract serviceEndpointProjectId: string with get, set

type [<AllowNullLiteral>] ServiceEndpointProjectReference =
    /// Gets or sets description of the service endpoint.
    abstract description: string with get, set
    /// Gets or sets name of the service endpoint.
    abstract name: string with get, set
    /// Gets or sets project reference of the service endpoint.
    abstract projectReference: ProjectReference with get, set

type [<AllowNullLiteral>] ServiceEndpointRequest =
    /// Gets or sets the data source details for the service endpoint request.
    abstract dataSourceDetails: DataSourceDetails with get, set
    /// Gets or sets the result transformation details for the service endpoint request.
    abstract resultTransformationDetails: ResultTransformationDetails with get, set
    /// Gets or sets the service endpoint details for the service endpoint request.
    abstract serviceEndpointDetails: ServiceEndpointDetails with get, set

/// Represents result of the service endpoint request.
type [<AllowNullLiteral>] ServiceEndpointRequestResult =
    /// Gets or sets the parameters used to make subsequent calls to the data source
    abstract callbackContextParameters: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the flat that decides if another call to the data source is to be made
    abstract callbackRequired: bool with get, set
    /// Gets or sets the error message of the service endpoint request result.
    abstract errorMessage: string with get, set
    /// Gets or sets the result of service endpoint request.
    abstract result: obj option with get, set
    /// Gets or sets the status code of the service endpoint request result.
    abstract statusCode: string with get, set

/// Represents type of the service endpoint.
type [<AllowNullLiteral>] ServiceEndpointType =
    /// Authentication scheme of service endpoint type.
    abstract authenticationSchemes: ResizeArray<ServiceEndpointAuthenticationScheme> with get, set
    /// Data sources of service endpoint type.
    abstract dataSources: ResizeArray<DataSource> with get, set
    /// Dependency data of service endpoint type.
    abstract dependencyData: ResizeArray<DependencyData> with get, set
    /// Gets or sets the description of service endpoint type.
    abstract description: string with get, set
    /// Gets or sets the display name of service endpoint type.
    abstract displayName: string with get, set
    /// Gets or sets the endpoint url of service endpoint type.
    abstract endpointUrl: EndpointUrl with get, set
    /// Gets or sets the help link of service endpoint type.
    abstract helpLink: HelpLink with get, set
    /// Gets or sets the help text shown at the endpoint create dialog.
    abstract helpMarkDown: string with get, set
    /// Gets or sets the icon url of service endpoint type.
    abstract iconUrl: string with get, set
    /// Input descriptor of service endpoint type.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets the name of service endpoint type.
    abstract name: string with get, set
    /// Trusted hosts of a service endpoint type.
    abstract trustedHosts: ResizeArray<string> with get, set
    /// Gets or sets the ui contribution id of service endpoint type.
    abstract uiContributionId: string with get, set

type [<AllowNullLiteral>] AuthConfigurationParameters =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> Parameter with get, set

type [<AllowNullLiteral>] AuthenticationSchemeReferenceInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] DependencyDataMapValue =
    abstract key: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] DependencyDataMap =
    abstract key: string with get, set
    abstract value: ResizeArray<DependencyDataMapValue> with get, set
module ServiceEndpoint = ___ServiceEndpoint_ServiceEndpoint
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ServiceEndpointRestClient: ServiceEndpointRestClientStatic

type [<AllowNullLiteral>] ServiceEndpointRestClient =
    inherit RestClientBase
    /// Returns list of azure subscriptions
    abstract getAzureManagementGroups: unit -> Promise<ServiceEndpoint.AzureManagementGroupQueryResult>
    /// Returns list of azure subscriptions
    abstract getAzureSubscriptions: unit -> Promise<ServiceEndpoint.AzureSubscriptionQueryResult>
    /// <summary>Proxy for a GET request defined by a service endpoint.</summary>
    /// <param name="serviceEndpointRequest">- Service endpoint request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointId">- Id of the service endpoint.</param>
    abstract executeServiceEndpointRequest: serviceEndpointRequest: ServiceEndpoint.ServiceEndpointRequest * project: string * endpointId: string -> Promise<ServiceEndpoint.ServiceEndpointRequestResult>
    /// <summary>Proxy for a GET request defined by a service endpoint. The request is authorized using a data source in service endpoint. The response is filtered using an XPath/Json based selector.</summary>
    /// <param name="binding">- Describes the data source to fetch.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryServiceEndpoint: binding: ServiceEndpoint.DataSourceBinding * project: string -> Promise<ResizeArray<string>>
    /// <summary>Create a service endpoint.</summary>
    /// <param name="endpoint">- Service endpoint to create.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createServiceEndpoint: endpoint: ServiceEndpoint.ServiceEndpoint * project: string -> Promise<ServiceEndpoint.ServiceEndpoint>
    /// <summary>Delete a service endpoint.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointId">- Id of the service endpoint to delete.</param>
    /// <param name="deep">- Specific to AzureRM endpoint created in Automatic flow. When set to true, this will also delete corresponding AAD application in Azure. Default value is true.</param>
    abstract deleteServiceEndpoint: project: string * endpointId: string * ?deep: bool -> Promise<unit>
    /// <summary>Get the service endpoint details.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointId">- Id of the service endpoint.</param>
    abstract getServiceEndpointDetails: project: string * endpointId: string -> Promise<ServiceEndpoint.ServiceEndpoint>
    /// <summary>Get the service endpoints.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- Type of the service endpoints.</param>
    /// <param name="authSchemes">- Authorization schemes used for service endpoints.</param>
    /// <param name="endpointIds">- Ids of the service endpoints.</param>
    /// <param name="owner">- Owner for service endpoints.</param>
    /// <param name="includeFailed">- Failed flag for service endpoints.</param>
    /// <param name="includeDetails">- Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests</param>
    abstract getServiceEndpoints: project: string * ?``type``: string * ?authSchemes: ResizeArray<string> * ?endpointIds: ResizeArray<string> * ?owner: string * ?includeFailed: bool * ?includeDetails: bool -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpoint>>
    /// <summary>Get the service endpoints by name.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointNames">- Names of the service endpoints.</param>
    /// <param name="type">- Type of the service endpoints.</param>
    /// <param name="authSchemes">- Authorization schemes used for service endpoints.</param>
    /// <param name="owner">- Owner for service endpoints.</param>
    /// <param name="includeFailed">- Failed flag for service endpoints.</param>
    /// <param name="includeDetails">- Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests</param>
    abstract getServiceEndpointsByNames: project: string * endpointNames: ResizeArray<string> * ?``type``: string * ?authSchemes: ResizeArray<string> * ?owner: string * ?includeFailed: bool * ?includeDetails: bool -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpoint>>
    /// <summary>Gets the service endpoints and patch new authorization parameters</summary>
    /// <param name="refreshAuthenticationParameters">- Scope, Validity of Token requested.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointIds">- Ids of the service endpoints.</param>
    abstract getServiceEndpointsWithRefreshedAuthentication: refreshAuthenticationParameters: ResizeArray<ServiceEndpoint.RefreshAuthenticationParameters> * project: string * endpointIds: ResizeArray<string> -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpoint>>
    /// <summary>Update a service endpoint.</summary>
    /// <param name="endpoint">- Service endpoint to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointId">- Id of the service endpoint to update.</param>
    /// <param name="operation">- Operation for the service endpoint.</param>
    abstract updateServiceEndpoint: endpoint: ServiceEndpoint.ServiceEndpoint * project: string * endpointId: string * ?operation: string -> Promise<ServiceEndpoint.ServiceEndpoint>
    /// <summary>Update the service endpoints.</summary>
    /// <param name="endpoints">- Names of the service endpoints to update.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateServiceEndpoints: endpoints: ResizeArray<ServiceEndpoint.ServiceEndpoint> * project: string -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpoint>>
    /// <summary>Get service endpoint execution records.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="endpointId">- Id of the service endpoint.</param>
    /// <param name="top">- Number of service endpoint execution records to get.</param>
    /// <param name="continuationToken">- A continuation token, returned by a previous call to this method, that can be used to return the next set of records</param>
    abstract getServiceEndpointExecutionRecords: project: string * endpointId: string * ?top: float * ?continuationToken: float -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpointExecutionRecord>>
    /// <summary>Add service endpoint execution records.</summary>
    /// <param name="input">- Service endpoint execution records to add.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addServiceEndpointExecutionRecords: input: ServiceEndpoint.ServiceEndpointExecutionRecordsInput * project: string -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpointExecutionRecord>>
    /// <param name="configurationParams">-</param>
    abstract createOAuthConfiguration: configurationParams: ServiceEndpoint.OAuthConfigurationParams -> Promise<ServiceEndpoint.OAuthConfiguration>
    /// <param name="configurationId">-</param>
    abstract deleteOAuthConfiguration: configurationId: string -> Promise<ServiceEndpoint.OAuthConfiguration>
    /// <param name="configurationId">-</param>
    abstract getOAuthConfiguration: configurationId: string -> Promise<ServiceEndpoint.OAuthConfiguration>
    /// <param name="endpointType">-</param>
    /// <param name="actionFilter">-</param>
    abstract getOAuthConfigurations: ?endpointType: string * ?actionFilter: ServiceEndpoint.OAuthConfigurationActionFilter -> Promise<ResizeArray<ServiceEndpoint.OAuthConfiguration>>
    /// <param name="configurationParams">-</param>
    /// <param name="configurationId">-</param>
    abstract updateOAuthConfiguration: configurationParams: ServiceEndpoint.OAuthConfigurationParams * configurationId: string -> Promise<ServiceEndpoint.OAuthConfiguration>
    /// <param name="endpointId">-</param>
    /// <param name="project">-</param>
    abstract querySharedProjects: endpointId: string * project: string -> Promise<ResizeArray<ServiceEndpoint.ProjectReference>>
    /// <param name="endpointId">-</param>
    /// <param name="fromProject">-</param>
    /// <param name="withProject">-</param>
    abstract shareEndpointWithProject: endpointId: string * fromProject: string * withProject: string -> Promise<unit>
    /// <summary>Get service endpoint types.</summary>
    /// <param name="type">- Type of service endpoint.</param>
    /// <param name="scheme">- Scheme of service endpoint.</param>
    abstract getServiceEndpointTypes: ?``type``: string * ?scheme: string -> Promise<ResizeArray<ServiceEndpoint.ServiceEndpointType>>
    /// <param name="authenticationRequest">-</param>
    abstract acquireAccessToken: authenticationRequest: ServiceEndpoint.AadOauthTokenRequest -> Promise<ServiceEndpoint.AadOauthTokenResult>
    /// <param name="tenantId">-</param>
    /// <param name="redirectUri">-</param>
    /// <param name="promptOption">-</param>
    /// <param name="completeCallbackPayload">-</param>
    /// <param name="completeCallbackByAuthCode">-</param>
    abstract createAadOAuthRequest: tenantId: string * redirectUri: string * ?promptOption: ServiceEndpoint.AadLoginPromptOption * ?completeCallbackPayload: string * ?completeCallbackByAuthCode: bool -> Promise<string>
    abstract getVstsAadTenantId: unit -> Promise<string>

type [<AllowNullLiteral>] ServiceEndpointRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ServiceEndpointRestClient
    abstract RESOURCE_AREA_ID: string
module FormInput = ___FormInput_FormInput
module WebApi = ___WebApi_WebApi

type [<RequireQualifiedAccess>] AuthenticationType =
    | None = 0
    | OAuth = 10
    | External = 30

/// Defines the data contract of a consumer.
type [<AllowNullLiteral>] Consumer =
    /// Reference Links
    abstract _links: obj option with get, set
    /// Gets this consumer's actions.
    abstract actions: ResizeArray<ConsumerAction> with get, set
    /// Gets or sets this consumer's authentication type.
    abstract authenticationType: AuthenticationType with get, set
    /// Gets or sets this consumer's localized description.
    abstract description: string with get, set
    /// Non-null only if subscriptions for this consumer are configured externally.
    abstract externalConfiguration: ExternalConfigurationDescriptor with get, set
    /// Gets or sets this consumer's identifier.
    abstract id: string with get, set
    /// Gets or sets this consumer's image URL, if any.
    abstract imageUrl: string with get, set
    /// Gets or sets this consumer's information URL, if any.
    abstract informationUrl: string with get, set
    /// Gets or sets this consumer's input descriptors.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets this consumer's localized name.
    abstract name: string with get, set
    /// The url for this resource
    abstract url: string with get, set

/// Defines the data contract of a consumer action.
type [<AllowNullLiteral>] ConsumerAction =
    /// Reference Links
    abstract _links: obj option with get, set
    /// Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.
    abstract allowResourceVersionOverride: bool with get, set
    /// Gets or sets the identifier of the consumer to which this action belongs.
    abstract consumerId: string with get, set
    /// Gets or sets this action's localized description.
    abstract description: string with get, set
    /// Gets or sets this action's identifier.
    abstract id: string with get, set
    /// Gets or sets this action's input descriptors.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets this action's localized name.
    abstract name: string with get, set
    /// Gets or sets this action's supported event identifiers.
    abstract supportedEventTypes: ResizeArray<string> with get, set
    /// Gets or sets this action's supported resource versions.
    abstract supportedResourceVersions: ConsumerActionSupportedResourceVersions with get, set
    /// The url for this resource
    abstract url: string with get, set

/// Encapsulates the properties of an event.
type [<AllowNullLiteral>] Event =
    /// Gets or sets the UTC-based date and time that this event was created.
    abstract createdDate: DateTime with get, set
    /// Gets or sets the detailed message associated with this event.
    abstract detailedMessage: FormattedEventMessage with get, set
    /// Gets or sets the type of this event.
    abstract eventType: string with get, set
    /// Gets or sets the unique identifier of this event.
    abstract id: string with get, set
    /// Gets or sets the (brief) message associated with this event.
    abstract message: FormattedEventMessage with get, set
    /// Gets or sets the identifier of the publisher that raised this event.
    abstract publisherId: string with get, set
    /// Gets or sets the data associated with this event.
    abstract resource: obj option with get, set
    /// Gets or sets the resource containers.
    abstract resourceContainers: EventResourceContainers with get, set
    /// Gets or sets the version of the data associated with this event.
    abstract resourceVersion: string with get, set
    /// Gets or sets the Session Token that can be used in further interactions
    abstract sessionToken: SessionToken with get, set

/// Describes a type of event
type [<AllowNullLiteral>] EventTypeDescriptor =
    /// A localized description of the event type
    abstract description: string with get, set
    /// A unique id for the event type
    abstract id: string with get, set
    /// Event-specific inputs
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// A localized friendly name for the event type
    abstract name: string with get, set
    /// A unique id for the publisher of this event type
    abstract publisherId: string with get, set
    /// Supported versions for the event's resource payloads.
    abstract supportedResourceVersions: ResizeArray<string> with get, set
    /// The url for this resource
    abstract url: string with get, set

/// Describes how to configure a subscription that is managed externally.
type [<AllowNullLiteral>] ExternalConfigurationDescriptor =
    /// Url of the site to create this type of subscription.
    abstract createSubscriptionUrl: string with get, set
    /// The name of an input property that contains the URL to edit a subscription.
    abstract editSubscriptionPropertyName: string with get, set
    /// True if the external configuration applies only to hosted.
    abstract hostedOnly: bool with get, set

/// Provides different formats of an event message
type [<AllowNullLiteral>] FormattedEventMessage =
    /// Gets or sets the html format of the message
    abstract html: string with get, set
    /// Gets or sets the markdown format of the message
    abstract markdown: string with get, set
    /// Gets or sets the raw text of the message
    abstract text: string with get, set

/// Defines the data contract of the result of processing an event for a subscription.
type [<AllowNullLiteral>] Notification =
    /// Gets or sets date and time that this result was created.
    abstract createdDate: DateTime with get, set
    /// Details about this notification (if available)
    abstract details: NotificationDetails with get, set
    /// The event id associated with this notification
    abstract eventId: string with get, set
    /// The notification id
    abstract id: float with get, set
    /// Gets or sets date and time that this result was last modified.
    abstract modifiedDate: DateTime with get, set
    /// Result of the notification
    abstract result: NotificationResult with get, set
    /// Status of the notification
    abstract status: NotificationStatus with get, set
    /// The subscriber Id  associated with this notification. This is the last identity who touched in the subscription. In case of test notifications it can be the tester if the subscription is not created yet.
    abstract subscriberId: string with get, set
    /// The subscription id associated with this notification
    abstract subscriptionId: string with get, set

/// Defines the data contract of notification details.
type [<AllowNullLiteral>] NotificationDetails =
    /// Gets or sets the time that this notification was completed (response received from the consumer)
    abstract completedDate: DateTime with get, set
    /// Gets or sets this notification detail's consumer action identifier.
    abstract consumerActionId: string with get, set
    /// Gets or sets this notification detail's consumer identifier.
    abstract consumerId: string with get, set
    /// Gets or sets this notification detail's consumer inputs.
    abstract consumerInputs: NotificationDetailsConsumerInputs with get, set
    /// Gets or sets the time that this notification was dequeued for processing
    abstract dequeuedDate: DateTime with get, set
    /// Gets or sets this notification detail's error detail.
    abstract errorDetail: string with get, set
    /// Gets or sets this notification detail's error message.
    abstract errorMessage: string with get, set
    /// Gets or sets this notification detail's event content.
    abstract ``event``: Event with get, set
    /// Gets or sets this notification detail's event type.
    abstract eventType: string with get, set
    /// Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)
    abstract processedDate: DateTime with get, set
    /// Gets or sets this notification detail's publisher identifier.
    abstract publisherId: string with get, set
    /// Gets or sets this notification detail's publisher inputs.
    abstract publisherInputs: NotificationDetailsConsumerInputs with get, set
    /// Gets or sets the time that this notification was queued (created)
    abstract queuedDate: DateTime with get, set
    /// Gets or sets this notification detail's request.
    abstract request: string with get, set
    /// Number of requests attempted to be sent to the consumer
    abstract requestAttempts: float with get, set
    /// Duration of the request to the consumer in seconds
    abstract requestDuration: float with get, set
    /// Gets or sets this notification detail's response.
    abstract response: string with get, set

type [<RequireQualifiedAccess>] NotificationResult =
    | Pending = 0
    | Succeeded = 10
    | Failed = 20
    | Filtered = 30

/// Summary of a particular result and count.
type [<AllowNullLiteral>] NotificationResultsSummaryDetail =
    /// Count of notification sent out with a matching result.
    abstract notificationCount: float with get, set
    /// Result of the notification
    abstract result: NotificationResult with get, set

/// Defines a query for service hook notifications.
type [<AllowNullLiteral>] NotificationsQuery =
    /// The subscriptions associated with the notifications returned from the query
    abstract associatedSubscriptions: ResizeArray<Subscription> with get, set
    /// If true, we will return all notification history for the query provided; otherwise, the summary is returned.
    abstract includeDetails: bool with get, set
    /// Optional maximum date at which the notification was created
    abstract maxCreatedDate: DateTime with get, set
    /// Optional maximum number of overall results to include
    abstract maxResults: float with get, set
    /// Optional maximum number of results for each subscription. Only takes effect when a list of subscription ids is supplied in the query.
    abstract maxResultsPerSubscription: float with get, set
    /// Optional minimum date at which the notification was created
    abstract minCreatedDate: DateTime with get, set
    /// Optional publisher id to restrict the results to
    abstract publisherId: string with get, set
    /// Results from the query
    abstract results: ResizeArray<Notification> with get, set
    /// Optional notification result type to filter results to
    abstract resultType: NotificationResult with get, set
    /// Optional notification status to filter results to
    abstract status: NotificationStatus with get, set
    /// Optional list of subscription ids to restrict the results to
    abstract subscriptionIds: ResizeArray<string> with get, set
    /// Summary of notifications - the count of each result type (success, fail, ..).
    abstract summary: ResizeArray<NotificationSummary> with get, set

type [<RequireQualifiedAccess>] NotificationStatus =
    | Queued = 10
    | Processing = 20
    | RequestInProgress = 30
    | Completed = 100

/// Summary of the notifications for a subscription.
type [<AllowNullLiteral>] NotificationSummary =
    /// The notification results for this particular subscription.
    abstract results: ResizeArray<NotificationResultsSummaryDetail> with get, set
    /// The subscription id associated with this notification
    abstract subscriptionId: string with get, set

/// Defines the data contract of an event publisher.
type [<AllowNullLiteral>] Publisher =
    /// Reference Links
    abstract _links: obj option with get, set
    /// Gets this publisher's localized description.
    abstract description: string with get, set
    /// Gets this publisher's identifier.
    abstract id: string with get, set
    /// Publisher-specific inputs
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets this publisher's localized name.
    abstract name: string with get, set
    /// The service instance type of the first party publisher.
    abstract serviceInstanceType: string with get, set
    /// Gets this publisher's supported event types.
    abstract supportedEvents: ResizeArray<EventTypeDescriptor> with get, set
    /// The url for this resource
    abstract url: string with get, set

/// Wrapper around an event which is being published
type [<AllowNullLiteral>] PublisherEvent =
    /// Add key/value pairs which will be stored with a published notification in the SH service DB.  This key/value pairs are for diagnostic purposes only and will have not effect on the delivery of a notificaton.
    abstract diagnostics: NotificationDetailsConsumerInputs with get, set
    /// The event being published
    abstract ``event``: Event with get, set
    /// Gets or sets flag for filtered events
    abstract isFilteredEvent: bool with get, set
    /// Additional data that needs to be sent as part of notification to complement the Resource data in the Event
    abstract notificationData: NotificationDetailsConsumerInputs with get, set
    /// Gets or sets the array of older supported resource versions.
    abstract otherResourceVersions: ResizeArray<VersionedResource> with get, set
    /// Optional publisher-input filters which restricts the set of subscriptions which are triggered by the event
    abstract publisherInputFilters: ResizeArray<FormInput.InputFilter> with get, set
    /// Gets or sets matched hooks subscription which caused this event.
    abstract subscription: Subscription with get, set

/// Defines a query for service hook publishers.
type [<AllowNullLiteral>] PublishersQuery =
    /// Optional list of publisher ids to restrict the results to
    abstract publisherIds: ResizeArray<string> with get, set
    /// Filter for publisher inputs
    abstract publisherInputs: NotificationDetailsConsumerInputs with get, set
    /// Results from the query
    abstract results: ResizeArray<Publisher> with get, set

/// The base class for all resource containers, i.e. Account, Collection, Project
type [<AllowNullLiteral>] ResourceContainer =
    /// Gets or sets the container's base URL, i.e. the URL of the host (collection, application, or deployment) containing the container resource.
    abstract baseUrl: string with get, set
    /// Gets or sets the container's specific Id.
    abstract id: string with get, set
    /// Gets or sets the container's name.
    abstract name: string with get, set
    /// Gets or sets the container's REST API URL.
    abstract url: string with get, set

/// Represents a session token to be attached in Events for Consumer actions that need it.
type [<AllowNullLiteral>] SessionToken =
    /// The error message in case of error
    abstract error: string with get, set
    /// The access token
    abstract token: string with get, set
    /// The expiration date in UTC
    abstract validTo: DateTime with get, set

/// Encapsulates an event subscription.
type [<AllowNullLiteral>] Subscription =
    /// Reference Links
    abstract _links: obj option with get, set
    abstract actionDescription: string with get, set
    abstract consumerActionId: string with get, set
    abstract consumerId: string with get, set
    /// Consumer input values
    abstract consumerInputs: NotificationDetailsConsumerInputs with get, set
    abstract createdBy: WebApi.IdentityRef with get, set
    abstract createdDate: DateTime with get, set
    abstract eventDescription: string with get, set
    abstract eventType: string with get, set
    abstract id: string with get, set
    abstract modifiedBy: WebApi.IdentityRef with get, set
    abstract modifiedDate: DateTime with get, set
    abstract probationRetries: float with get, set
    abstract publisherId: string with get, set
    /// Publisher input values
    abstract publisherInputs: NotificationDetailsConsumerInputs with get, set
    abstract resourceVersion: string with get, set
    abstract status: SubscriptionStatus with get, set
    abstract subscriber: WebApi.IdentityRef with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] SubscriptionInputScope =
    | Publisher = 10
    | Consumer = 20

/// Query for obtaining information about the possible/allowed values for one or more subscription inputs
type [<AllowNullLiteral>] SubscriptionInputValuesQuery =
    /// The input values to return on input, and the result from the consumer on output.
    abstract inputValues: ResizeArray<FormInput.InputValues> with get, set
    /// The scope at which the properties to query belong
    abstract scope: SubscriptionInputScope with get, set
    /// Subscription containing information about the publisher/consumer and the current input values
    abstract subscription: Subscription with get, set

/// Defines a query for service hook subscriptions.
type [<AllowNullLiteral>] SubscriptionsQuery =
    /// Optional consumer action id to restrict the results to (null for any)
    abstract consumerActionId: string with get, set
    /// Optional consumer id to restrict the results to (null for any)
    abstract consumerId: string with get, set
    /// Filter for subscription consumer inputs
    abstract consumerInputFilters: ResizeArray<FormInput.InputFilter> with get, set
    /// Optional event type id to restrict the results to (null for any)
    abstract eventType: string with get, set
    /// Optional publisher id to restrict the results to (null for any)
    abstract publisherId: string with get, set
    /// Filter for subscription publisher inputs
    abstract publisherInputFilters: ResizeArray<FormInput.InputFilter> with get, set
    /// Results from the query
    abstract results: ResizeArray<Subscription> with get, set
    /// Optional subscriber filter.
    abstract subscriberId: string with get, set

type [<RequireQualifiedAccess>] SubscriptionStatus =
    | Enabled = 0
    | OnProbation = 10
    | DisabledByUser = 20
    | DisabledBySystem = 30
    | DisabledByInactiveIdentity = 40

/// Encapsulates the resource version and its data or reference to the compatible version. Only one of the two last fields should be not null.
type [<AllowNullLiteral>] VersionedResource =
    /// Gets or sets the reference to the compatible version.
    abstract compatibleWith: string with get, set
    /// Gets or sets the resource data.
    abstract resource: obj option with get, set
    /// Gets or sets the version of the resource data.
    abstract resourceVersion: string with get, set

type [<AllowNullLiteral>] ConsumerActionSupportedResourceVersions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<string> with get, set

type [<AllowNullLiteral>] EventResourceContainers =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResourceContainer with get, set

type [<AllowNullLiteral>] NotificationDetailsConsumerInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
module FormInput = ___FormInput_FormInput
module Notification = ___Notification_Notification
module ServiceHooks = ___ServiceHooks_ServiceHooks
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract ServiceHooksRestClient: ServiceHooksRestClientStatic

type [<AllowNullLiteral>] ServiceHooksRestClient =
    inherit RestClientBase
    /// <summary>Get details about a specific consumer action.</summary>
    /// <param name="consumerId">- ID for a consumer.</param>
    /// <param name="consumerActionId">- ID for a consumerActionId.</param>
    /// <param name="publisherId">-</param>
    abstract getConsumerAction: consumerId: string * consumerActionId: string * ?publisherId: string -> Promise<ServiceHooks.ConsumerAction>
    /// <summary>Get a list of consumer actions for a specific consumer.</summary>
    /// <param name="consumerId">- ID for a consumer.</param>
    /// <param name="publisherId">-</param>
    abstract listConsumerActions: consumerId: string * ?publisherId: string -> Promise<ResizeArray<ServiceHooks.ConsumerAction>>
    /// <summary>Get a specific consumer service. Optionally filter out consumer actions that do not support any event types for the specified publisher.</summary>
    /// <param name="consumerId">- ID for a consumer.</param>
    /// <param name="publisherId">-</param>
    abstract getConsumer: consumerId: string * ?publisherId: string -> Promise<ServiceHooks.Consumer>
    /// <summary>Get a list of available service hook consumer services. Optionally filter by consumers that support at least one event type from the specific publisher.</summary>
    /// <param name="publisherId">-</param>
    abstract listConsumers: ?publisherId: string -> Promise<ResizeArray<ServiceHooks.Consumer>>
    /// <param name="subscriptionId">-</param>
    abstract getSubscriptionDiagnostics: subscriptionId: string -> Promise<Notification.SubscriptionDiagnostics>
    /// <param name="updateParameters">-</param>
    /// <param name="subscriptionId">-</param>
    abstract updateSubscriptionDiagnostics: updateParameters: Notification.UpdateSubscripitonDiagnosticsParameters * subscriptionId: string -> Promise<Notification.SubscriptionDiagnostics>
    /// <summary>Get a specific event type.</summary>
    /// <param name="publisherId">- ID for a publisher.</param>
    /// <param name="eventTypeId">-</param>
    abstract getEventType: publisherId: string * eventTypeId: string -> Promise<ServiceHooks.EventTypeDescriptor>
    /// <summary>Get the event types for a specific publisher.</summary>
    /// <param name="publisherId">- ID for a publisher.</param>
    abstract listEventTypes: publisherId: string -> Promise<ResizeArray<ServiceHooks.EventTypeDescriptor>>
    /// <summary>Publish an external event.</summary>
    /// <param name="publisherId">-</param>
    /// <param name="channelId">-</param>
    abstract publishExternalEvent: publisherId: string * ?channelId: string -> Promise<ResizeArray<ServiceHooks.PublisherEvent>>
    /// <summary>Get a specific notification for a subscription.</summary>
    /// <param name="subscriptionId">- ID for a subscription.</param>
    /// <param name="notificationId">-</param>
    abstract getNotification: subscriptionId: string * notificationId: float -> Promise<ServiceHooks.Notification>
    /// <summary>Get a list of notifications for a specific subscription. A notification includes details about the event, the request to and the response from the consumer service.</summary>
    /// <param name="subscriptionId">- ID for a subscription.</param>
    /// <param name="maxResults">- Maximum number of notifications to return. Default is **100**.</param>
    /// <param name="status">- Get only notifications with this status.</param>
    /// <param name="result">- Get only notifications with this result type.</param>
    abstract getNotifications: subscriptionId: string * ?maxResults: float * ?status: ServiceHooks.NotificationStatus * ?result: ServiceHooks.NotificationResult -> Promise<ResizeArray<ServiceHooks.Notification>>
    /// <summary>Query for notifications. A notification includes details about the event, the request to and the response from the consumer service.</summary>
    /// <param name="query">-</param>
    abstract queryNotifications: query: ServiceHooks.NotificationsQuery -> Promise<ServiceHooks.NotificationsQuery>
    /// <param name="inputValuesQuery">-</param>
    /// <param name="publisherId">-</param>
    abstract queryInputValues: inputValuesQuery: FormInput.InputValuesQuery * publisherId: string -> Promise<FormInput.InputValuesQuery>
    /// <summary>Get a specific service hooks publisher.</summary>
    /// <param name="publisherId">- ID for a publisher.</param>
    abstract getPublisher: publisherId: string -> Promise<ServiceHooks.Publisher>
    /// Get a list of publishers.
    abstract listPublishers: unit -> Promise<ResizeArray<ServiceHooks.Publisher>>
    /// <summary>Query for service hook publishers.</summary>
    /// <param name="query">-</param>
    abstract queryPublishers: query: ServiceHooks.PublishersQuery -> Promise<ServiceHooks.PublishersQuery>
    /// <summary>Create a subscription.</summary>
    /// <param name="subscription">- Subscription to be created.</param>
    abstract createSubscription: subscription: ServiceHooks.Subscription -> Promise<ServiceHooks.Subscription>
    /// <summary>Delete a specific service hooks subscription.</summary>
    /// <param name="subscriptionId">- ID for a subscription.</param>
    abstract deleteSubscription: subscriptionId: string -> Promise<unit>
    /// <summary>Get a specific service hooks subscription.</summary>
    /// <param name="subscriptionId">- ID for a subscription.</param>
    abstract getSubscription: subscriptionId: string -> Promise<ServiceHooks.Subscription>
    /// <summary>Get a list of subscriptions.</summary>
    /// <param name="publisherId">- ID for a subscription.</param>
    /// <param name="eventType">- The event type to filter on (if any).</param>
    /// <param name="consumerId">- ID for a consumer.</param>
    /// <param name="consumerActionId">- ID for a consumerActionId.</param>
    abstract listSubscriptions: ?publisherId: string * ?eventType: string * ?consumerId: string * ?consumerActionId: string -> Promise<ResizeArray<ServiceHooks.Subscription>>
    /// <summary>Update a subscription. \<param name="subscriptionId"\>ID for a subscription that you wish to update.\</param\></summary>
    /// <param name="subscription">-</param>
    /// <param name="subscriptionId">-</param>
    abstract replaceSubscription: subscription: ServiceHooks.Subscription * ?subscriptionId: string -> Promise<ServiceHooks.Subscription>
    /// <summary>Query for service hook subscriptions.</summary>
    /// <param name="query">-</param>
    abstract createSubscriptionsQuery: query: ServiceHooks.SubscriptionsQuery -> Promise<ServiceHooks.SubscriptionsQuery>
    /// <summary>Sends a test notification. This is useful for verifying the configuration of an updated or new service hooks subscription.</summary>
    /// <param name="testNotification">-</param>
    /// <param name="useRealData">- Only allow testing with real data in existing subscriptions.</param>
    abstract createTestNotification: testNotification: ServiceHooks.Notification * ?useRealData: bool -> Promise<ServiceHooks.Notification>

type [<AllowNullLiteral>] ServiceHooksRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> ServiceHooksRestClient
module DistributedTaskCommon = ___DistributedTaskCommon_DistributedTaskCommon
module FormInput = ___FormInput_FormInput
module WebApi = ___WebApi_WebApi

type [<RequireQualifiedAccess>] AadLoginPromptOption =
    | NoOption = 0
    | Login = 1
    | SelectAccount = 2
    | FreshLogin = 3
    | FreshLoginWithMfa = 4

type [<AllowNullLiteral>] AadOauthTokenRequest =
    abstract refresh: bool with get, set
    abstract resource: string with get, set
    abstract tenantId: string with get, set
    abstract token: string with get, set

type [<AllowNullLiteral>] AadOauthTokenResult =
    abstract accessToken: string with get, set
    abstract refreshTokenCache: string with get, set

type [<AllowNullLiteral>] AgentChangeEvent =
    abstract agent: TaskAgent with get, set
    abstract eventType: string with get, set
    abstract pool: TaskAgentPoolReference with get, set
    abstract poolId: float with get, set
    abstract timeStamp: DateTime with get, set

type [<AllowNullLiteral>] AgentJobRequestMessage =
    inherit JobRequestMessage
    abstract lockedUntil: DateTime with get, set
    abstract lockToken: string with get, set
    abstract requestId: float with get, set
    abstract tasks: ResizeArray<TaskInstance> with get, set

type [<AllowNullLiteral>] AgentMigrationMessage =
    abstract accessToken: string with get, set

type [<AllowNullLiteral>] AgentPoolEvent =
    abstract eventType: string with get, set
    abstract pool: TaskAgentPool with get, set

type [<AllowNullLiteral>] AgentQueueEvent =
    abstract eventType: string with get, set
    abstract queue: TaskAgentQueue with get, set

type [<AllowNullLiteral>] AgentQueuesEvent =
    abstract eventType: string with get, set
    abstract queues: ResizeArray<TaskAgentQueue> with get, set

type [<AllowNullLiteral>] AgentRefreshMessage =
    abstract agentId: float with get, set
    abstract targetVersion: string with get, set
    abstract timeout: obj option with get, set

type [<RequireQualifiedAccess>] AuditAction =
    | Add = 1
    | Update = 2
    | Delete = 3
    | Undelete = 4

type [<AllowNullLiteral>] AuthenticationSchemeReference =
    abstract inputs: AuthenticationSchemeReferenceInputs with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] AuthorizationHeader =
    /// Gets or sets the name of authorization header.
    abstract name: string with get, set
    /// Gets or sets the value of authorization header.
    abstract value: string with get, set

type [<AllowNullLiteral>] AzureKeyVaultPermission =
    inherit AzureResourcePermission
    abstract vault: string with get, set

type [<AllowNullLiteral>] AzureKeyVaultVariableGroupProviderData =
    inherit VariableGroupProviderData
    abstract lastRefreshedOn: DateTime with get, set
    abstract serviceEndpointId: string with get, set
    abstract vault: string with get, set

type [<AllowNullLiteral>] AzureKeyVaultVariableValue =
    inherit VariableValue
    abstract contentType: string with get, set
    abstract enabled: bool with get, set
    abstract expires: DateTime with get, set

/// Azure Management Group
type [<AllowNullLiteral>] AzureManagementGroup =
    /// Display name of azure management group
    abstract displayName: string with get, set
    /// Id of azure management group
    abstract id: string with get, set
    /// Azure management group name
    abstract name: string with get, set
    /// Id of tenant from which azure management group belongs
    abstract tenantId: string with get, set

/// Azure management group query result
type [<AllowNullLiteral>] AzureManagementGroupQueryResult =
    /// Error message in case of an exception
    abstract errorMessage: string with get, set
    /// List of azure management groups
    abstract value: ResizeArray<AzureManagementGroup> with get, set

type [<AllowNullLiteral>] AzurePermission =
    abstract provisioned: bool with get, set
    abstract resourceProvider: string with get, set

type [<AllowNullLiteral>] AzureResourcePermission =
    inherit AzurePermission
    abstract resourceGroup: string with get, set

type [<AllowNullLiteral>] AzureRoleAssignmentPermission =
    inherit AzurePermission
    abstract roleAssignmentId: string with get, set

type [<AllowNullLiteral>] AzureSpnOperationStatus =
    abstract state: string with get, set
    abstract statusMessage: string with get, set

type [<AllowNullLiteral>] AzureSubscription =
    abstract displayName: string with get, set
    abstract subscriptionId: string with get, set
    abstract subscriptionTenantId: string with get, set
    abstract subscriptionTenantName: string with get, set

type [<AllowNullLiteral>] AzureSubscriptionQueryResult =
    abstract errorMessage: string with get, set
    abstract value: ResizeArray<AzureSubscription> with get, set

type [<AllowNullLiteral>] ClientCertificate =
    /// Gets or sets the value of client certificate.
    abstract value: string with get, set

type [<AllowNullLiteral>] CounterVariable =
    abstract prefix: string with get, set
    abstract seed: float with get, set
    abstract value: float with get, set

type [<AllowNullLiteral>] DataSource =
    abstract authenticationScheme: AuthenticationSchemeReference with get, set
    abstract endpointUrl: string with get, set
    abstract headers: ResizeArray<AuthorizationHeader> with get, set
    abstract name: string with get, set
    abstract resourceUrl: string with get, set
    abstract resultSelector: string with get, set

type [<AllowNullLiteral>] DataSourceBinding =
    inherit DistributedTaskCommon.DataSourceBindingBase

type [<AllowNullLiteral>] DataSourceDetails =
    abstract dataSourceName: string with get, set
    abstract dataSourceUrl: string with get, set
    abstract headers: ResizeArray<AuthorizationHeader> with get, set
    abstract parameters: AuthenticationSchemeReferenceInputs with get, set
    abstract resourceUrl: string with get, set
    abstract resultSelector: string with get, set

type [<AllowNullLiteral>] Demand =
    abstract name: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] DemandEquals =
    inherit Demand

type [<AllowNullLiteral>] DemandExists =
    inherit Demand

type [<AllowNullLiteral>] DemandMinimumVersion =
    inherit Demand

type [<AllowNullLiteral>] DependencyBinding =
    abstract key: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] DependencyData =
    abstract input: string with get, set
    abstract map: ResizeArray<DependencyDataMap> with get, set

type [<AllowNullLiteral>] DependsOn =
    abstract input: string with get, set
    abstract map: ResizeArray<DependencyBinding> with get, set

type [<AllowNullLiteral>] DeploymentGatesChangeEvent =
    abstract gateNames: ResizeArray<string> with get, set

/// Deployment group.
type [<AllowNullLiteral>] DeploymentGroup =
    inherit DeploymentGroupReference
    /// Description of the deployment group.
    abstract description: string with get, set
    /// Number of deployment targets in the deployment group.
    abstract machineCount: float with get, set
    /// List of deployment targets in the deployment group.
    abstract machines: ResizeArray<DeploymentMachine> with get, set
    /// List of unique tags across all deployment targets in the deployment group.
    abstract machineTags: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] DeploymentGroupActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

/// Properties to create Deployment group.
type [<AllowNullLiteral>] DeploymentGroupCreateParameter =
    /// Description of the deployment group.
    abstract description: string with get, set
    /// Name of the deployment group.
    abstract name: string with get, set
    /// Deployment pool in which deployment agents are registered. This is obsolete. Kept for compatibility. Will be marked obsolete explicitly by M132.
    abstract pool: DeploymentGroupCreateParameterPoolProperty with get, set
    /// Identifier of the deployment pool in which deployment agents are registered.
    abstract poolId: float with get, set

/// Properties of Deployment pool to create Deployment group.
type [<AllowNullLiteral>] DeploymentGroupCreateParameterPoolProperty =
    /// Deployment pool identifier.
    abstract id: float with get, set

type [<RequireQualifiedAccess>] DeploymentGroupExpands =
    | None = 0
    | Machines = 2
    | Tags = 4

/// Deployment group metrics.
type [<AllowNullLiteral>] DeploymentGroupMetrics =
    /// List of deployment group properties. And types of metrics provided for those properties.
    abstract columnsHeader: MetricsColumnsHeader with get, set
    /// Deployment group.
    abstract deploymentGroup: DeploymentGroupReference with get, set
    /// Values of properties and the metrics. E.g. 1: total count of deployment targets for which 'TargetState' is 'offline'. E.g. 2: Average time of deployment to the deployment targets for which 'LastJobStatus' is 'passed' and 'TargetState' is 'online'.
    abstract rows: ResizeArray<MetricsRow> with get, set

/// Deployment group reference. This is useful for referring a deployment group in another object.
type [<AllowNullLiteral>] DeploymentGroupReference =
    /// Deployment group identifier.
    abstract id: float with get, set
    /// Name of the deployment group.
    abstract name: string with get, set
    /// Deployment pool in which deployment agents are registered.
    abstract pool: TaskAgentPoolReference with get, set
    /// Project to which the deployment group belongs.
    abstract project: ProjectReference with get, set

/// Deployment group update parameter.
type [<AllowNullLiteral>] DeploymentGroupUpdateParameter =
    /// Description of the deployment group.
    abstract description: string with get, set
    /// Name of the deployment group.
    abstract name: string with get, set

/// Deployment target.
type [<AllowNullLiteral>] DeploymentMachine =
    /// Deployment agent.
    abstract agent: TaskAgent with get, set
    /// Deployment target Identifier.
    abstract id: float with get, set
    /// Properties of the deployment target.
    abstract properties: obj option with get, set
    /// Tags of the deployment target.
    abstract tags: ResizeArray<string> with get, set

type [<AllowNullLiteral>] DeploymentMachineChangedData =
    inherit DeploymentMachine
    abstract addedTags: ResizeArray<string> with get, set
    abstract deletedTags: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] DeploymentMachineExpands =
    | None = 0
    | Capabilities = 2
    | AssignedRequest = 4

type [<AllowNullLiteral>] DeploymentMachineGroup =
    inherit DeploymentMachineGroupReference
    abstract machines: ResizeArray<DeploymentMachine> with get, set
    abstract size: float with get, set

type [<AllowNullLiteral>] DeploymentMachineGroupReference =
    abstract id: float with get, set
    abstract name: string with get, set
    abstract pool: TaskAgentPoolReference with get, set
    abstract project: ProjectReference with get, set

type [<AllowNullLiteral>] DeploymentMachinesChangeEvent =
    abstract machineGroupReference: DeploymentGroupReference with get, set
    abstract machines: ResizeArray<DeploymentMachineChangedData> with get, set

/// Deployment pool summary.
type [<AllowNullLiteral>] DeploymentPoolSummary =
    /// List of deployment groups referring to the deployment pool.
    abstract deploymentGroups: ResizeArray<DeploymentGroupReference> with get, set
    /// Number of deployment agents that are offline.
    abstract offlineAgentsCount: float with get, set
    /// Number of deployment agents that are online.
    abstract onlineAgentsCount: float with get, set
    /// Deployment pool.
    abstract pool: TaskAgentPoolReference with get, set
    /// Virtual machine Resource referring in pool.
    abstract resource: EnvironmentResourceReference with get, set

type [<RequireQualifiedAccess>] DeploymentPoolSummaryExpands =
    | None = 0
    | DeploymentGroups = 2
    | Resource = 4

type [<RequireQualifiedAccess>] DeploymentTargetExpands =
    | None = 0
    | Capabilities = 2
    | AssignedRequest = 4
    | LastCompletedRequest = 8

/// Deployment target update parameter.
type [<AllowNullLiteral>] DeploymentTargetUpdateParameter =
    /// Identifier of the deployment target.
    abstract id: float with get, set
    abstract tags: ResizeArray<string> with get, set

type [<AllowNullLiteral>] DiagnosticLogMetadata =
    abstract agentId: float with get, set
    abstract agentName: string with get, set
    abstract fileName: string with get, set
    abstract phaseName: string with get, set
    abstract phaseResult: string with get, set
    abstract poolId: float with get, set

type [<AllowNullLiteral>] EndpointAuthorization =
    /// Gets or sets the parameters for the selected authorization scheme.
    abstract parameters: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the scheme used for service endpoint authentication.
    abstract scheme: string with get, set

/// Represents url of the service endpoint.
type [<AllowNullLiteral>] EndpointUrl =
    /// Gets or sets the dependency bindings.
    abstract dependsOn: DependsOn with get, set
    /// Gets or sets the display name of service endpoint url.
    abstract displayName: string with get, set
    /// Gets or sets the help text of service endpoint url.
    abstract helpText: string with get, set
    /// Gets or sets the visibility of service endpoint url.
    abstract isVisible: string with get, set
    /// Gets or sets the value of service endpoint url.
    abstract value: string with get, set

type [<RequireQualifiedAccess>] EnvironmentActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

/// Properties to create Environment.
type [<AllowNullLiteral>] EnvironmentCreateParameter =
    /// Description of the environment.
    abstract description: string with get, set
    /// Name of the environment.
    abstract name: string with get, set

/// EnvironmentDeploymentExecutionRecord.
type [<AllowNullLiteral>] EnvironmentDeploymentExecutionRecord =
    /// Definition of the environment deployment execution owner
    abstract definition: TaskOrchestrationOwner with get, set
    /// Id of the Environment
    abstract environmentId: float with get, set
    /// Finish time of the environment deployment execution
    abstract finishTime: DateTime with get, set
    /// Id of the Environment deployment execution history record
    abstract id: float with get, set
    /// Job Attempt
    abstract jobAttempt: float with get, set
    /// Job name
    abstract jobName: string with get, set
    /// Owner of the environment deployment execution record
    abstract owner: TaskOrchestrationOwner with get, set
    /// Plan Id
    abstract planId: string with get, set
    /// Plan type of the environment deployment execution record
    abstract planType: string with get, set
    /// Queue time of the environment deployment execution
    abstract queueTime: DateTime with get, set
    /// Request identifier of the Environment deployment execution history record
    abstract requestIdentifier: string with get, set
    /// Resource Id
    abstract resourceId: float with get, set
    /// Result of the environment deployment execution
    abstract result: TaskResult with get, set
    /// Project Id
    abstract scopeId: string with get, set
    /// Service owner Id
    abstract serviceOwner: string with get, set
    /// Stage Attempt
    abstract stageAttempt: float with get, set
    /// Stage name
    abstract stageName: string with get, set
    /// Start time of the environment deployment execution
    abstract startTime: DateTime with get, set

type [<RequireQualifiedAccess>] EnvironmentExpands =
    | None = 0
    | ResourceReferences = 1

/// Environment.
type [<AllowNullLiteral>] EnvironmentInstance =
    /// Identity reference of the user who created the Environment.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Creation time of the Environment
    abstract createdOn: DateTime with get, set
    /// Description of the Environment.
    abstract description: string with get, set
    /// Id of the Environment
    abstract id: float with get, set
    /// Identity reference of the user who last modified the Environment.
    abstract lastModifiedBy: WebApi.IdentityRef with get, set
    /// Last modified time of the Environment
    abstract lastModifiedOn: DateTime with get, set
    /// Name of the Environment.
    abstract name: string with get, set
    /// Project information for environment.
    abstract project: ProjectReference with get, set
    abstract resources: ResizeArray<EnvironmentResourceReference> with get, set

/// EnvironmentLinkedResourceReference.
type [<AllowNullLiteral>] EnvironmentLinkedResourceReference =
    /// Id of the resource.
    abstract id: string with get, set
    /// Type of resource.
    abstract typeName: string with get, set

type [<AllowNullLiteral>] EnvironmentReference =
    abstract id: float with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] EnvironmentResource =
    abstract createdBy: WebApi.IdentityRef with get, set
    abstract createdOn: DateTime with get, set
    abstract environmentReference: EnvironmentReference with get, set
    abstract id: float with get, set
    abstract lastModifiedBy: WebApi.IdentityRef with get, set
    abstract lastModifiedOn: DateTime with get, set
    abstract name: string with get, set
    /// Tags of the Environment Resource.
    abstract tags: ResizeArray<string> with get, set
    /// Environment resource type
    abstract ``type``: EnvironmentResourceType with get, set

/// EnvironmentResourceReference.
type [<AllowNullLiteral>] EnvironmentResourceReference =
    /// Id of the resource.
    abstract id: float with get, set
    /// Name of the resource.
    abstract name: string with get, set
    /// Tags of the Environment Resource Reference.
    abstract tags: ResizeArray<string> with get, set
    /// Type of the resource.
    abstract ``type``: EnvironmentResourceType with get, set

type [<RequireQualifiedAccess>] EnvironmentResourceType =
    | Undefined = 0
    | Generic = 1
    | VirtualMachine = 2
    | Kubernetes = 4

/// Properties to update Environment.
type [<AllowNullLiteral>] EnvironmentUpdateParameter =
    /// Description of the environment.
    abstract description: string with get, set
    /// Name of the environment.
    abstract name: string with get, set

type [<AllowNullLiteral>] EventsConfig =
    interface end

type [<AllowNullLiteral>] ExpressionValidationItem =
    inherit ValidationItem

type [<AllowNullLiteral>] HelpLink =
    abstract text: string with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] InputBindingContext =
    /// Value of the input
    abstract value: string with get, set

type [<AllowNullLiteral>] InputValidationItem =
    inherit ValidationItem
    /// Provides binding context for the expression to evaluate
    abstract context: InputBindingContext with get, set

type [<AllowNullLiteral>] InputValidationRequest =
    abstract inputs: InputValidationRequestInputs with get, set

type [<AllowNullLiteral>] Issue =
    abstract category: string with get, set
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    abstract message: string with get, set
    abstract ``type``: IssueType with get, set

type [<RequireQualifiedAccess>] IssueType =
    | Error = 1
    | Warning = 2

type [<AllowNullLiteral>] JobAssignedEvent =
    inherit JobEvent
    abstract request: TaskAgentJobRequest with get, set

type [<AllowNullLiteral>] JobCancelMessage =
    abstract jobId: string with get, set
    abstract timeout: obj option with get, set

type [<AllowNullLiteral>] JobCompletedEvent =
    inherit JobEvent
    abstract requestId: float with get, set
    abstract result: TaskResult with get, set

/// Represents the context of variables and vectors for a job request.
type [<AllowNullLiteral>] JobEnvironment =
    abstract endpoints: ResizeArray<ServiceEndpoint> with get, set
    abstract mask: ResizeArray<MaskHint> with get, set
    abstract options: JobEnvironmentOptions with get, set
    abstract secureFiles: ResizeArray<SecureFile> with get, set
    /// Gets or sets the endpoint used for communicating back to the calling service.
    abstract systemConnection: ServiceEndpoint with get, set
    abstract variables: AuthenticationSchemeReferenceInputs with get, set

type [<AllowNullLiteral>] JobEvent =
    abstract jobId: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] JobEventConfig =
    abstract timeout: string with get, set

type [<AllowNullLiteral>] JobEventsConfig =
    inherit EventsConfig
    abstract jobAssigned: JobEventConfig with get, set
    abstract jobCompleted: JobEventConfig with get, set
    abstract jobStarted: JobEventConfig with get, set

/// Represents an option that may affect the way an agent runs the job.
type [<AllowNullLiteral>] JobOption =
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    /// Gets the id of the option.
    abstract id: string with get, set

type [<AllowNullLiteral>] JobRequestMessage =
    abstract environment: JobEnvironment with get, set
    abstract jobId: string with get, set
    abstract jobName: string with get, set
    abstract jobRefName: string with get, set
    abstract messageType: string with get, set
    abstract plan: TaskOrchestrationPlanReference with get, set
    abstract timeline: TimelineReference with get, set

type [<AllowNullLiteral>] JobStartedEvent =
    inherit JobEvent

type [<AllowNullLiteral>] KubernetesResource =
    inherit EnvironmentResource
    abstract clusterName: string with get, set
    abstract ``namespace``: string with get, set
    abstract serviceEndpointId: string with get, set

type [<AllowNullLiteral>] KubernetesResourceCreateParameters =
    abstract clusterName: string with get, set
    abstract name: string with get, set
    abstract ``namespace``: string with get, set
    abstract serviceEndpointId: string with get, set
    /// Tags of the kubernetes resource.
    abstract tags: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] MachineGroupActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

/// Represents a purchase of resource units in a secondary marketplace.
type [<AllowNullLiteral>] MarketplacePurchasedLicense =
    /// The Marketplace display name.
    abstract marketplaceName: string with get, set
    /// The name of the identity making the purchase as seen by the marketplace
    abstract purchaserName: string with get, set
    /// The quantity purchased.
    abstract purchaseUnitCount: float with get, set

type [<AllowNullLiteral>] MaskHint =
    abstract ``type``: MaskType with get, set
    abstract value: string with get, set

type [<RequireQualifiedAccess>] MaskType =
    | Variable = 1
    | Regex = 2

/// Meta data for a metrics column.
type [<AllowNullLiteral>] MetricsColumnMetaData =
    /// Name.
    abstract columnName: string with get, set
    /// Data type.
    abstract columnValueType: string with get, set

/// Metrics columns header
type [<AllowNullLiteral>] MetricsColumnsHeader =
    /// Properties of deployment group for which metrics are provided. E.g. 1: LastJobStatus E.g. 2: TargetState
    abstract dimensions: ResizeArray<MetricsColumnMetaData> with get, set
    /// The types of metrics. E.g. 1: total count of deployment targets. E.g. 2: Average time of deployment to the deployment targets.
    abstract metrics: ResizeArray<MetricsColumnMetaData> with get, set

/// Metrics row.
type [<AllowNullLiteral>] MetricsRow =
    /// The values of the properties mentioned as 'Dimensions' in column header. E.g. 1: For a property 'LastJobStatus' - metrics will be provided for 'passed', 'failed', etc. E.g. 2: For a property 'TargetState' - metrics will be provided for 'online', 'offline' targets.
    abstract dimensions: ResizeArray<string> with get, set
    /// Metrics in serialized format. Should be deserialized based on the data type provided in header.
    abstract metrics: ResizeArray<string> with get, set

/// Represents a downloadable package.
type [<AllowNullLiteral>] PackageMetadata =
    /// The date the package was created
    abstract createdOn: DateTime with get, set
    /// A direct link to download the package.
    abstract downloadUrl: string with get, set
    /// The UI uses this to display instructions, i.e. "unzip MyAgent.zip"
    abstract filename: string with get, set
    /// MD5 hash as a base64 string
    abstract hashValue: string with get, set
    /// A link to documentation
    abstract infoUrl: string with get, set
    /// The platform (win7, linux, etc.)
    abstract platform: string with get, set
    /// The type of package (e.g. "agent")
    abstract ``type``: string with get, set
    /// The package version.
    abstract version: PackageVersion with get, set

type [<AllowNullLiteral>] PackageVersion =
    abstract major: float with get, set
    abstract minor: float with get, set
    abstract patch: float with get, set

type [<AllowNullLiteral>] PlanEnvironment =
    abstract mask: ResizeArray<MaskHint> with get, set
    abstract options: JobEnvironmentOptions with get, set
    abstract variables: AuthenticationSchemeReferenceInputs with get, set

type [<RequireQualifiedAccess>] PlanGroupStatus =
    | Running = 1
    | Queued = 2
    | All = 3

type [<RequireQualifiedAccess>] PlanGroupStatusFilter =
    | Running = 1
    | Queued = 2
    | All = 3

type [<AllowNullLiteral>] ProjectReference =
    abstract id: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] PublishTaskGroupMetadata =
    abstract comment: string with get, set
    abstract parentDefinitionRevision: float with get, set
    abstract preview: bool with get, set
    abstract taskGroupId: string with get, set
    abstract taskGroupRevision: float with get, set

type [<AllowNullLiteral>] ResourceFilterOptions =
    abstract identities: ResizeArray<WebApi.IdentityRef> with get, set
    abstract resourceTypes: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ResourceFilters =
    abstract createdBy: ResizeArray<string> with get, set
    abstract resourceType: ResizeArray<string> with get, set
    abstract searchText: string with get, set

/// Resources include Service Connections, Variable Groups and Secure Files.
type [<AllowNullLiteral>] ResourceItem =
    /// Gets or sets the identity who created the resource.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets or sets description of the resource.
    abstract description: string with get, set
    /// Gets or sets icon url of the resource.
    abstract iconUrl: string with get, set
    /// Gets or sets Id of the resource.
    abstract id: string with get, set
    /// Indicates whether resource is shared with other projects or not.
    abstract isShared: bool with get, set
    /// Gets or sets name of the resource.
    abstract name: string with get, set
    /// Gets or sets internal properties of the resource.
    abstract properties: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets resource type.
    abstract resourceType: string with get, set

type [<AllowNullLiteral>] ResourceLimit =
    abstract failedToReachAllProviders: bool with get, set
    abstract hostId: string with get, set
    abstract isHosted: bool with get, set
    abstract isPremium: bool with get, set
    abstract parallelismTag: string with get, set
    abstract resourceLimitsData: AuthenticationSchemeReferenceInputs with get, set
    abstract totalCount: float with get, set
    abstract totalMinutes: float with get, set

type [<AllowNullLiteral>] ResourcesHubData =
    abstract continuationToken: string with get, set
    abstract resourceFilterOptions: ResourceFilterOptions with get, set
    abstract resourceFilters: ResourceFilters with get, set
    abstract resourceItems: ResizeArray<ResourceItem> with get, set

type [<AllowNullLiteral>] ResourceUsage =
    abstract resourceLimit: ResourceLimit with get, set
    abstract runningRequests: ResizeArray<TaskAgentJobRequest> with get, set
    abstract usedCount: float with get, set
    abstract usedMinutes: float with get, set

type [<AllowNullLiteral>] ResultTransformationDetails =
    abstract resultTemplate: string with get, set

type [<AllowNullLiteral>] SecureFile =
    abstract createdBy: WebApi.IdentityRef with get, set
    abstract createdOn: DateTime with get, set
    abstract id: string with get, set
    abstract modifiedBy: WebApi.IdentityRef with get, set
    abstract modifiedOn: DateTime with get, set
    abstract name: string with get, set
    abstract properties: AuthenticationSchemeReferenceInputs with get, set
    abstract ticket: string with get, set

type [<RequireQualifiedAccess>] SecureFileActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

type [<AllowNullLiteral>] SecureFileEvent =
    abstract eventType: string with get, set
    abstract projectId: string with get, set
    abstract secureFiles: ResizeArray<SecureFile> with get, set

type [<AllowNullLiteral>] SendJobResponse =
    abstract events: JobEventsConfig with get, set
    abstract variables: AuthenticationSchemeReferenceInputs with get, set

type [<AllowNullLiteral>] ServerExecutionDefinition =
    abstract events: EventsConfig with get, set
    abstract handlerName: string with get, set

type [<AllowNullLiteral>] ServerTaskRequestMessage =
    inherit JobRequestMessage
    abstract taskDefinition: TaskDefinition with get, set
    abstract taskInstance: TaskInstance with get, set

/// Represents an endpoint which may be used by an orchestration job.
type [<AllowNullLiteral>] ServiceEndpoint =
    /// Gets or sets the identity reference for the administrators group of the service endpoint.
    abstract administratorsGroup: WebApi.IdentityRef with get, set
    /// Gets or sets the authorization data for talking to the endpoint.
    abstract authorization: EndpointAuthorization with get, set
    /// Gets or sets the identity reference for the user who created the Service endpoint.
    abstract createdBy: WebApi.IdentityRef with get, set
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the description of endpoint.
    abstract description: string with get, set
    abstract groupScopeId: string with get, set
    /// Gets or sets the identifier of this endpoint.
    abstract id: string with get, set
    /// EndPoint state indicator
    abstract isReady: bool with get, set
    /// Indicates whether service endpoint is shared with other projects or not.
    abstract isShared: bool with get, set
    /// Gets or sets the friendly name of the endpoint.
    abstract name: string with get, set
    /// Error message during creation/deletion of endpoint
    abstract operationStatus: obj option with get, set
    /// Gets or sets the owner of the endpoint.
    abstract owner: string with get, set
    /// Gets or sets the identity reference for the readers group of the service endpoint.
    abstract readersGroup: WebApi.IdentityRef with get, set
    /// Gets or sets the type of the endpoint.
    abstract ``type``: string with get, set
    /// Gets or sets the url of the endpoint.
    abstract url: string with get, set

type [<AllowNullLiteral>] ServiceEndpointAuthenticationScheme =
    /// Gets or sets the authorization headers of service endpoint authentication scheme.
    abstract authorizationHeaders: ResizeArray<AuthorizationHeader> with get, set
    /// Gets or sets the certificates of service endpoint authentication scheme.
    abstract clientCertificates: ResizeArray<ClientCertificate> with get, set
    /// Gets or sets the display name for the service endpoint authentication scheme.
    abstract displayName: string with get, set
    /// Gets or sets the input descriptors for the service endpoint authentication scheme.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets the scheme for service endpoint authentication.
    abstract scheme: string with get, set

type [<AllowNullLiteral>] ServiceEndpointDetails =
    abstract authorization: EndpointAuthorization with get, set
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    abstract ``type``: string with get, set
    abstract url: string with get, set

/// Represents service endpoint execution data.
type [<AllowNullLiteral>] ServiceEndpointExecutionData =
    /// Gets the definition of service endpoint execution owner.
    abstract definition: TaskOrchestrationOwner with get, set
    /// Gets the finish time of service endpoint execution.
    abstract finishTime: DateTime with get, set
    /// Gets the Id of service endpoint execution data.
    abstract id: float with get, set
    /// Gets the owner of service endpoint execution data.
    abstract owner: TaskOrchestrationOwner with get, set
    /// Gets the plan type of service endpoint execution data.
    abstract planType: string with get, set
    /// Gets the result of service endpoint execution.
    abstract result: TaskResult with get, set
    /// Gets the start time of service endpoint execution.
    abstract startTime: DateTime with get, set

type [<AllowNullLiteral>] ServiceEndpointExecutionRecord =
    /// Gets the execution data of service endpoint execution.
    abstract data: ServiceEndpointExecutionData with get, set
    /// Gets the Id of service endpoint.
    abstract endpointId: string with get, set

type [<AllowNullLiteral>] ServiceEndpointExecutionRecordsInput =
    abstract data: ServiceEndpointExecutionData with get, set
    abstract endpointIds: ResizeArray<string> with get, set

type [<AllowNullLiteral>] ServiceEndpointRequest =
    abstract dataSourceDetails: DataSourceDetails with get, set
    abstract resultTransformationDetails: ResultTransformationDetails with get, set
    abstract serviceEndpointDetails: ServiceEndpointDetails with get, set

type [<AllowNullLiteral>] ServiceEndpointRequestResult =
    abstract errorMessage: string with get, set
    abstract result: obj option with get, set
    abstract statusCode: string with get, set

/// Represents type of the service endpoint.
type [<AllowNullLiteral>] ServiceEndpointType =
    /// Authentication scheme of service endpoint type.
    abstract authenticationSchemes: ResizeArray<ServiceEndpointAuthenticationScheme> with get, set
    /// Data sources of service endpoint type.
    abstract dataSources: ResizeArray<DataSource> with get, set
    /// Dependency data of service endpoint type.
    abstract dependencyData: ResizeArray<DependencyData> with get, set
    /// Gets or sets the description of service endpoint type.
    abstract description: string with get, set
    /// Gets or sets the display name of service endpoint type.
    abstract displayName: string with get, set
    /// Gets or sets the endpoint url of service endpoint type.
    abstract endpointUrl: EndpointUrl with get, set
    /// Gets or sets the help link of service endpoint type.
    abstract helpLink: HelpLink with get, set
    abstract helpMarkDown: string with get, set
    /// Gets or sets the icon url of service endpoint type.
    abstract iconUrl: string with get, set
    /// Input descriptor of service endpoint type.
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets the name of service endpoint type.
    abstract name: string with get, set
    /// Trusted hosts of a service endpoint type.
    abstract trustedHosts: ResizeArray<string> with get, set
    /// Gets or sets the ui contribution id of service endpoint type.
    abstract uiContributionId: string with get, set

/// A task agent.
type [<AllowNullLiteral>] TaskAgent =
    inherit TaskAgentReference
    /// The agent cloud request that's currently associated with this agent.
    abstract assignedAgentCloudRequest: TaskAgentCloudRequest with get, set
    /// The request which is currently assigned to this agent.
    abstract assignedRequest: TaskAgentJobRequest with get, set
    /// Authorization information for this agent.
    abstract authorization: TaskAgentAuthorization with get, set
    /// Date on which this agent was created.
    abstract createdOn: DateTime with get, set
    /// The last request which was completed by this agent.
    abstract lastCompletedRequest: TaskAgentJobRequest with get, set
    /// Maximum job parallelism allowed for this agent.
    abstract maxParallelism: float with get, set
    /// Pending update for this agent.
    abstract pendingUpdate: TaskAgentUpdate with get, set
    abstract properties: obj option with get, set
    /// Date on which the last connectivity status change occurred.
    abstract statusChangedOn: DateTime with get, set
    abstract systemCapabilities: AuthenticationSchemeReferenceInputs with get, set
    abstract userCapabilities: AuthenticationSchemeReferenceInputs with get, set

/// Provides data necessary for authorizing the agent using OAuth 2.0 authentication flows.
type [<AllowNullLiteral>] TaskAgentAuthorization =
    /// Endpoint used to obtain access tokens from the configured token service.
    abstract authorizationUrl: string with get, set
    /// Client identifier for this agent.
    abstract clientId: string with get, set
    /// Public key used to verify the identity of this agent.
    abstract publicKey: TaskAgentPublicKey with get, set

type [<AllowNullLiteral>] TaskAgentCloud =
    /// Gets or sets a AcquireAgentEndpoint using which a request can be made to acquire new agent
    abstract acquireAgentEndpoint: string with get, set
    abstract acquisitionTimeout: float with get, set
    abstract agentCloudId: float with get, set
    abstract getAccountParallelismEndpoint: string with get, set
    abstract getAgentDefinitionEndpoint: string with get, set
    abstract getAgentRequestStatusEndpoint: string with get, set
    abstract id: string with get, set
    /// Signifies that this Agent Cloud is internal and should not be user-manageable
    abstract ``internal``: bool with get, set
    abstract maxParallelism: float with get, set
    abstract name: string with get, set
    abstract releaseAgentEndpoint: string with get, set
    abstract sharedSecret: string with get, set
    /// Gets or sets the type of the endpoint.
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] TaskAgentCloudRequest =
    abstract agent: TaskAgentReference with get, set
    abstract agentCloudId: float with get, set
    abstract agentConnectedTime: DateTime with get, set
    abstract agentData: obj option with get, set
    abstract agentSpecification: obj option with get, set
    abstract pool: TaskAgentPoolReference with get, set
    abstract provisionedTime: DateTime with get, set
    abstract provisionRequestTime: DateTime with get, set
    abstract releaseRequestTime: DateTime with get, set
    abstract requestId: string with get, set

type [<AllowNullLiteral>] TaskAgentCloudType =
    /// Gets or sets the display name of agent cloud type.
    abstract displayName: string with get, set
    /// Gets or sets the input descriptors
    abstract inputDescriptors: ResizeArray<FormInput.InputDescriptor> with get, set
    /// Gets or sets the name of agent cloud type.
    abstract name: string with get, set

type [<AllowNullLiteral>] TaskAgentDelaySource =
    abstract delays: ResizeArray<obj option> with get, set
    abstract taskAgent: TaskAgentReference with get, set

type [<AllowNullLiteral>] TaskAgentJob =
    abstract container: string with get, set
    abstract id: string with get, set
    abstract name: string with get, set
    abstract sidecarContainers: AuthenticationSchemeReferenceInputs with get, set
    abstract steps: ResizeArray<TaskAgentJobStep> with get, set
    abstract variables: ResizeArray<TaskAgentJobVariable> with get, set

/// A job request for an agent.
type [<AllowNullLiteral>] TaskAgentJobRequest =
    abstract agentDelays: ResizeArray<TaskAgentDelaySource> with get, set
    abstract agentSpecification: obj option with get, set
    /// The date/time this request was assigned.
    abstract assignTime: DateTime with get, set
    /// Additional data about the request.
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    /// The pipeline definition associated with this request
    abstract definition: TaskOrchestrationOwner with get, set
    /// A list of demands required to fulfill this request.
    abstract demands: ResizeArray<Demand> with get, set
    abstract expectedDuration: obj option with get, set
    /// The date/time this request was finished.
    abstract finishTime: DateTime with get, set
    /// The host which triggered this request.
    abstract hostId: string with get, set
    /// ID of the job resulting from this request.
    abstract jobId: string with get, set
    /// Name of the job resulting from this request.
    abstract jobName: string with get, set
    /// The deadline for the agent to renew the lock.
    abstract lockedUntil: DateTime with get, set
    abstract matchedAgents: ResizeArray<TaskAgentReference> with get, set
    abstract matchesAllAgentsInPool: bool with get, set
    abstract orchestrationId: string with get, set
    /// The pipeline associated with this request
    abstract owner: TaskOrchestrationOwner with get, set
    abstract planGroup: string with get, set
    /// Internal ID for the orchestration plan connected with this request.
    abstract planId: string with get, set
    /// Internal detail representing the type of orchestration plan.
    abstract planType: string with get, set
    /// The ID of the pool this request targets
    abstract poolId: float with get, set
    /// The ID of the queue this request targets
    abstract queueId: float with get, set
    /// The date/time this request was queued.
    abstract queueTime: DateTime with get, set
    /// The date/time this request was receieved by an agent.
    abstract receiveTime: DateTime with get, set
    /// ID of the request.
    abstract requestId: float with get, set
    /// The agent allocated for this request.
    abstract reservedAgent: TaskAgentReference with get, set
    /// The result of this request.
    abstract result: TaskResult with get, set
    /// Scope of the pipeline; matches the project ID.
    abstract scopeId: string with get, set
    /// The service which owns this request.
    abstract serviceOwner: string with get, set
    abstract statusMessage: string with get, set
    abstract userDelayed: bool with get, set

type [<RequireQualifiedAccess>] TaskAgentJobResultFilter =
    | Failed = 1
    | Passed = 2
    | NeverDeployed = 4
    | All = 7

type [<AllowNullLiteral>] TaskAgentJobStep =
    abstract condition: string with get, set
    abstract continueOnError: bool with get, set
    abstract enabled: bool with get, set
    abstract env: AuthenticationSchemeReferenceInputs with get, set
    abstract id: string with get, set
    abstract inputs: AuthenticationSchemeReferenceInputs with get, set
    abstract name: string with get, set
    abstract task: TaskAgentJobTask with get, set
    abstract timeoutInMinutes: float with get, set
    abstract ``type``: TaskAgentJobStepType with get, set

type [<RequireQualifiedAccess>] TaskAgentJobStepType =
    | Task = 1
    | Action = 2

type [<AllowNullLiteral>] TaskAgentJobTask =
    abstract id: string with get, set
    abstract name: string with get, set
    abstract version: string with get, set

type [<AllowNullLiteral>] TaskAgentJobVariable =
    abstract name: string with get, set
    abstract secret: bool with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] TaskAgentManualUpdate =
    inherit TaskAgentUpdateReason

/// Provides a contract for receiving messages from the task orchestrator.
type [<AllowNullLiteral>] TaskAgentMessage =
    /// Gets or sets the body of the message. If the \<c\>IV\</c\> property is provided the body will need to be decrypted using the \<c\>TaskAgentSession.EncryptionKey\</c\> value in addition to the \<c\>IV\</c\>.
    abstract body: string with get, set
    /// Gets or sets the initialization vector used to encrypt this message.
    abstract iv: ResizeArray<float> with get, set
    /// Gets or sets the message identifier.
    abstract messageId: float with get, set
    /// Gets or sets the message type, describing the data contract found in \<c\>TaskAgentMessage.Body\</c\>.
    abstract messageType: string with get, set

type [<AllowNullLiteral>] TaskAgentMinAgentVersionRequiredUpdate =
    inherit TaskAgentUpdateReason
    abstract jobDefinition: TaskOrchestrationOwner with get, set
    abstract jobOwner: TaskOrchestrationOwner with get, set
    abstract minAgentVersion: Demand with get, set

/// An organization-level grouping of agents.
type [<AllowNullLiteral>] TaskAgentPool =
    inherit TaskAgentPoolReference
    /// The ID of the associated agent cloud.
    abstract agentCloudId: float with get, set
    /// Whether or not a queue should be automatically provisioned for each project collection.
    abstract autoProvision: bool with get, set
    /// Whether or not the pool should autosize itself based on the Agent Cloud Provider settings.
    abstract autoSize: bool with get, set
    /// Creator of the pool. The creator of the pool is automatically added into the administrators group for the pool on creation.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The date/time of the pool creation.
    abstract createdOn: DateTime with get, set
    /// Owner or administrator of the pool.
    abstract owner: WebApi.IdentityRef with get, set
    abstract properties: obj option with get, set
    /// Target parallelism.
    abstract targetSize: float with get, set

type [<RequireQualifiedAccess>] TaskAgentPoolActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

type [<AllowNullLiteral>] TaskAgentPoolMaintenanceDefinition =
    /// Enable maintenance
    abstract enabled: bool with get, set
    /// Id
    abstract id: float with get, set
    /// Maintenance job timeout per agent
    abstract jobTimeoutInMinutes: float with get, set
    /// Max percentage of agents within a pool running maintenance job at given time
    abstract maxConcurrentAgentsPercentage: float with get, set
    abstract options: TaskAgentPoolMaintenanceOptions with get, set
    /// Pool reference for the maintenance definition
    abstract pool: TaskAgentPoolReference with get, set
    abstract retentionPolicy: TaskAgentPoolMaintenanceRetentionPolicy with get, set
    abstract scheduleSetting: TaskAgentPoolMaintenanceSchedule with get, set

type [<AllowNullLiteral>] TaskAgentPoolMaintenanceJob =
    /// The maintenance definition for the maintenance job
    abstract definitionId: float with get, set
    /// The total error counts during the maintenance job
    abstract errorCount: float with get, set
    /// Time that the maintenance job was completed
    abstract finishTime: DateTime with get, set
    /// Id of the maintenance job
    abstract jobId: float with get, set
    /// The log download url for the maintenance job
    abstract logsDownloadUrl: string with get, set
    /// Orchestration/Plan Id for the maintenance job
    abstract orchestrationId: string with get, set
    /// Pool reference for the maintenance job
    abstract pool: TaskAgentPoolReference with get, set
    /// Time that the maintenance job was queued
    abstract queueTime: DateTime with get, set
    /// The identity that queued the maintenance job
    abstract requestedBy: WebApi.IdentityRef with get, set
    /// The maintenance job result
    abstract result: TaskAgentPoolMaintenanceJobResult with get, set
    /// Time that the maintenance job was started
    abstract startTime: DateTime with get, set
    /// Status of the maintenance job
    abstract status: TaskAgentPoolMaintenanceJobStatus with get, set
    abstract targetAgents: ResizeArray<TaskAgentPoolMaintenanceJobTargetAgent> with get, set
    /// The total warning counts during the maintenance job
    abstract warningCount: float with get, set

type [<RequireQualifiedAccess>] TaskAgentPoolMaintenanceJobResult =
    | Succeeded = 1
    | Failed = 2
    | Canceled = 4

type [<RequireQualifiedAccess>] TaskAgentPoolMaintenanceJobStatus =
    | InProgress = 1
    | Completed = 2
    | Cancelling = 4
    | Queued = 8

type [<AllowNullLiteral>] TaskAgentPoolMaintenanceJobTargetAgent =
    abstract agent: TaskAgentReference with get, set
    abstract jobId: float with get, set
    abstract result: TaskAgentPoolMaintenanceJobResult with get, set
    abstract status: TaskAgentPoolMaintenanceJobStatus with get, set

type [<AllowNullLiteral>] TaskAgentPoolMaintenanceOptions =
    /// time to consider a System.DefaultWorkingDirectory is stale
    abstract workingDirectoryExpirationInDays: float with get, set

type [<AllowNullLiteral>] TaskAgentPoolMaintenanceRetentionPolicy =
    /// Number of records to keep for maintenance job executed with this definition.
    abstract numberOfHistoryRecordsToKeep: float with get, set

type [<AllowNullLiteral>] TaskAgentPoolMaintenanceSchedule =
    /// Days for a build (flags enum for days of the week)
    abstract daysToBuild: TaskAgentPoolMaintenanceScheduleDays with get, set
    /// The Job Id of the Scheduled job that will queue the pool maintenance job.
    abstract scheduleJobId: string with get, set
    /// Local timezone hour to start
    abstract startHours: float with get, set
    /// Local timezone minute to start
    abstract startMinutes: float with get, set
    /// Time zone of the build schedule (string representation of the time zone id)
    abstract timeZoneId: string with get, set

type [<RequireQualifiedAccess>] TaskAgentPoolMaintenanceScheduleDays =
    | None = 0
    | Monday = 1
    | Tuesday = 2
    | Wednesday = 4
    | Thursday = 8
    | Friday = 16
    | Saturday = 32
    | Sunday = 64
    | All = 127

type [<AllowNullLiteral>] TaskAgentPoolReference =
    abstract id: float with get, set
    /// Gets or sets a value indicating whether or not this pool is managed by the service.
    abstract isHosted: bool with get, set
    /// Determines whether the pool is legacy.
    abstract isLegacy: bool with get, set
    abstract name: string with get, set
    /// Gets or sets the type of the pool
    abstract poolType: TaskAgentPoolType with get, set
    abstract scope: string with get, set
    /// Gets the current size of the pool.
    abstract size: float with get, set

type [<AllowNullLiteral>] TaskAgentPoolStatus =
    inherit TaskAgentPoolReference
    /// Number of requests queued and assigned to an agent. Not running yet.
    abstract assignedRequestCount: float with get, set
    /// Number of queued requests which are not assigned to any agents
    abstract queuedRequestCount: float with get, set
    /// Number of currently running requests
    abstract runningRequestCount: float with get, set

type [<AllowNullLiteral>] TaskAgentPoolSummary =
    abstract columnsHeader: MetricsColumnsHeader with get, set
    abstract deploymentGroups: ResizeArray<DeploymentGroupReference> with get, set
    abstract pool: TaskAgentPoolReference with get, set
    abstract queues: ResizeArray<TaskAgentQueue> with get, set
    abstract rows: ResizeArray<MetricsRow> with get, set

type [<RequireQualifiedAccess>] TaskAgentPoolType =
    | Automation = 1
    | Deployment = 2

/// Represents the public key portion of an RSA asymmetric key.
type [<AllowNullLiteral>] TaskAgentPublicKey =
    /// Gets or sets the exponent for the public key.
    abstract exponent: ResizeArray<float> with get, set
    /// Gets or sets the modulus for the public key.
    abstract modulus: ResizeArray<float> with get, set

/// An agent queue.
type [<AllowNullLiteral>] TaskAgentQueue =
    /// ID of the queue
    abstract id: float with get, set
    /// Name of the queue
    abstract name: string with get, set
    /// Pool reference for this queue
    abstract pool: TaskAgentPoolReference with get, set
    /// Project ID
    abstract projectId: string with get, set

type [<RequireQualifiedAccess>] TaskAgentQueueActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

/// A reference to an agent.
type [<AllowNullLiteral>] TaskAgentReference =
    abstract _links: obj option with get, set
    /// This agent's access point.
    abstract accessPoint: string with get, set
    /// Whether or not this agent should run jobs.
    abstract enabled: bool with get, set
    /// Identifier of the agent.
    abstract id: float with get, set
    /// Name of the agent.
    abstract name: string with get, set
    /// Agent OS.
    abstract osDescription: string with get, set
    /// Provisioning state of this agent.
    abstract provisioningState: string with get, set
    /// Whether or not the agent is online.
    abstract status: TaskAgentStatus with get, set
    /// Agent version.
    abstract version: string with get, set

/// Represents a session for performing message exchanges from an agent.
type [<AllowNullLiteral>] TaskAgentSession =
    /// Gets or sets the agent which is the target of the session.
    abstract agent: TaskAgentReference with get, set
    /// Gets the key used to encrypt message traffic for this session.
    abstract encryptionKey: TaskAgentSessionKey with get, set
    /// Gets or sets the owner name of this session. Generally this will be the machine of origination.
    abstract ownerName: string with get, set
    /// Gets the unique identifier for this session.
    abstract sessionId: string with get, set
    abstract systemCapabilities: AuthenticationSchemeReferenceInputs with get, set

/// Represents a symmetric key used for message-level encryption for communication sent to an agent.
type [<AllowNullLiteral>] TaskAgentSessionKey =
    /// Gets or sets a value indicating whether or not the key value is encrypted. If this value is true, the Value property should be decrypted using the \<c\>RSA\</c\> key exchanged with the server during registration.
    abstract encrypted: bool with get, set
    /// Gets or sets the symmetric key value.
    abstract value: ResizeArray<float> with get, set

type [<RequireQualifiedAccess>] TaskAgentStatus =
    | Offline = 1
    | Online = 2

type [<RequireQualifiedAccess>] TaskAgentStatusFilter =
    | Offline = 1
    | Online = 2
    | All = 3

/// Details about an agent update.
type [<AllowNullLiteral>] TaskAgentUpdate =
    /// Current state of this agent update.
    abstract currentState: string with get, set
    /// Reason for this update.
    abstract reason: TaskAgentUpdateReason with get, set
    /// Identity which requested this update.
    abstract requestedBy: WebApi.IdentityRef with get, set
    /// Date on which this update was requested.
    abstract requestTime: DateTime with get, set
    /// Source agent version of the update.
    abstract sourceVersion: PackageVersion with get, set
    /// Target agent version of the update.
    abstract targetVersion: PackageVersion with get, set

type [<AllowNullLiteral>] TaskAgentUpdateReason =
    abstract code: TaskAgentUpdateReasonType with get, set

type [<RequireQualifiedAccess>] TaskAgentUpdateReasonType =
    | Manual = 1
    | MinAgentVersionRequired = 2

type [<AllowNullLiteral>] TaskAssignedEvent =
    inherit TaskEvent

type [<AllowNullLiteral>] TaskAttachment =
    abstract _links: obj option with get, set
    abstract createdOn: DateTime with get, set
    abstract lastChangedBy: string with get, set
    abstract lastChangedOn: DateTime with get, set
    abstract name: string with get, set
    abstract recordId: string with get, set
    abstract timelineId: string with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] TaskCompletedEvent =
    inherit TaskEvent
    abstract result: TaskResult with get, set

type [<AllowNullLiteral>] TaskDefinition =
    abstract agentExecution: TaskExecution with get, set
    abstract author: string with get, set
    abstract category: string with get, set
    abstract contentsUploaded: bool with get, set
    abstract contributionIdentifier: string with get, set
    abstract contributionVersion: string with get, set
    abstract dataSourceBindings: ResizeArray<DataSourceBinding> with get, set
    abstract definitionType: string with get, set
    abstract demands: ResizeArray<Demand> with get, set
    abstract deprecated: bool with get, set
    abstract description: string with get, set
    abstract disabled: bool with get, set
    abstract ecosystem: string with get, set
    abstract execution: TaskDefinitionExecution with get, set
    abstract friendlyName: string with get, set
    abstract groups: ResizeArray<TaskGroupDefinition> with get, set
    abstract helpMarkDown: string with get, set
    abstract helpUrl: string with get, set
    abstract hostType: string with get, set
    abstract iconUrl: string with get, set
    abstract id: string with get, set
    abstract inputs: ResizeArray<TaskInputDefinition> with get, set
    abstract instanceNameFormat: string with get, set
    abstract minimumAgentVersion: string with get, set
    abstract name: string with get, set
    abstract outputVariables: ResizeArray<TaskOutputVariable> with get, set
    abstract packageLocation: string with get, set
    abstract packageType: string with get, set
    abstract postJobExecution: TaskDefinitionExecution with get, set
    abstract preJobExecution: TaskDefinitionExecution with get, set
    abstract preview: bool with get, set
    abstract releaseNotes: string with get, set
    abstract runsOn: ResizeArray<string> with get, set
    abstract satisfies: ResizeArray<string> with get, set
    abstract serverOwned: bool with get, set
    abstract showEnvironmentVariables: bool with get, set
    abstract sourceDefinitions: ResizeArray<TaskSourceDefinition> with get, set
    abstract sourceLocation: string with get, set
    abstract version: TaskVersion with get, set
    abstract visibility: ResizeArray<string> with get, set

type [<AllowNullLiteral>] TaskDefinitionEndpoint =
    /// An ID that identifies a service connection to be used for authenticating endpoint requests.
    abstract connectionId: string with get, set
    /// An Json based keyselector to filter response returned by fetching the endpoint \<c\>Url\</c\>.A Json based keyselector must be prefixed with "jsonpath:". KeySelector can be used to specify the filter to get the keys for the values specified with Selector. \<example\> The following keyselector defines an Json for extracting nodes named 'ServiceName'. \<code\> endpoint.KeySelector = "jsonpath://ServiceName"; \</code\>\</example\>
    abstract keySelector: string with get, set
    /// The scope as understood by Connected Services. Essentially, a project-id for now.
    abstract scope: string with get, set
    /// An XPath/Json based selector to filter response returned by fetching the endpoint \<c\>Url\</c\>. An XPath based selector must be prefixed with the string "xpath:". A Json based selector must be prefixed with "jsonpath:". \<example\> The following selector defines an XPath for extracting nodes named 'ServiceName'. \<code\> endpoint.Selector = "xpath://ServiceName"; \</code\>\</example\>
    abstract selector: string with get, set
    /// TaskId that this endpoint belongs to.
    abstract taskId: string with get, set
    /// URL to GET.
    abstract url: string with get, set

type [<AllowNullLiteral>] TaskDefinitionReference =
    /// Gets or sets the definition type. Values can be 'task' or 'metaTask'.
    abstract definitionType: string with get, set
    /// Gets or sets the unique identifier of task.
    abstract id: string with get, set
    /// Gets or sets the version specification of task.
    abstract versionSpec: string with get, set

type [<RequireQualifiedAccess>] TaskDefinitionStatus =
    | Preinstalled = 1
    | ReceivedInstallOrUpdate = 2
    | Installed = 3
    | ReceivedUninstall = 4
    | Uninstalled = 5
    | RequestedUpdate = 6
    | Updated = 7
    | AlreadyUpToDate = 8
    | InlineUpdateReceived = 9

type [<AllowNullLiteral>] TaskEvent =
    inherit JobEvent
    abstract taskId: string with get, set

type [<AllowNullLiteral>] TaskExecution =
    /// The utility task to run.  Specifying this means that this task definition is simply a meta task to call another task. This is useful for tasks that call utility tasks like powershell and commandline
    abstract execTask: TaskReference with get, set
    /// If a task is going to run code, then this provides the type/script etc... information by platform. For example, it might look like. net45: \{ typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" \} net20: \{ typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" \} java: \{ jar: "powershelltask.tasks.automation.teamfoundation.microsoft.com", \} node: \{ script: "powershellhost.js", \}
    abstract platformInstructions: TaskExecutionPlatformInstructions with get, set

type [<AllowNullLiteral>] TaskGroup =
    inherit TaskDefinition
    /// Gets or sets comment.
    abstract comment: string with get, set
    /// Gets or sets the identity who created.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets or sets date on which it got created.
    abstract createdOn: DateTime with get, set
    /// Gets or sets as 'true' to indicate as deleted, 'false' otherwise.
    abstract deleted: bool with get, set
    /// Gets or sets the identity who modified.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets or sets date on which it got modified.
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets the owner.
    abstract owner: string with get, set
    /// Gets or sets parent task group Id. This is used while creating a draft task group.
    abstract parentDefinitionId: string with get, set
    /// Gets or sets revision.
    abstract revision: float with get, set
    /// Gets or sets the tasks.
    abstract tasks: ResizeArray<TaskGroupStep> with get, set

type [<AllowNullLiteral>] TaskGroupCreateParameter =
    /// Sets author name of the task group.
    abstract author: string with get, set
    /// Sets category of the task group.
    abstract category: string with get, set
    /// Sets description of the task group.
    abstract description: string with get, set
    /// Sets friendly name of the task group.
    abstract friendlyName: string with get, set
    /// Sets url icon of the task group.
    abstract iconUrl: string with get, set
    /// Sets input for the task group.
    abstract inputs: ResizeArray<TaskInputDefinition> with get, set
    /// Sets display name of the task group.
    abstract instanceNameFormat: string with get, set
    /// Sets name of the task group.
    abstract name: string with get, set
    /// Sets parent task group Id. This is used while creating a draft task group.
    abstract parentDefinitionId: string with get, set
    /// Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.
    abstract runsOn: ResizeArray<string> with get, set
    /// Sets tasks for the task group.
    abstract tasks: ResizeArray<TaskGroupStep> with get, set
    /// Sets version of the task group.
    abstract version: TaskVersion with get, set

type [<AllowNullLiteral>] TaskGroupDefinition =
    abstract displayName: string with get, set
    abstract isExpanded: bool with get, set
    abstract name: string with get, set
    abstract tags: ResizeArray<string> with get, set
    abstract visibleRule: string with get, set

type [<RequireQualifiedAccess>] TaskGroupExpands =
    | None = 0
    | Tasks = 2

type [<AllowNullLiteral>] TaskGroupPublishPreviewParameter =
    inherit TaskGroupUpdatePropertiesBase
    /// This is to disable previous versions of task group upon publish
    abstract disablePriorVersions: bool with get, set
    /// Denotes if task group is in preview
    abstract preview: bool with get, set
    /// This is the revision of task group that is getting published
    abstract revision: float with get, set
    /// This is the version of task group that is getting published
    abstract version: TaskVersion with get, set

type [<RequireQualifiedAccess>] TaskGroupQueryOrder =
    | CreatedOnAscending = 0
    | CreatedOnDescending = 1

type [<AllowNullLiteral>] TaskGroupRestoreParameter =
    inherit TaskGroupUpdatePropertiesBase
    /// This is to restore deleted Task Group
    abstract restore: bool with get, set

type [<AllowNullLiteral>] TaskGroupRevision =
    abstract changedBy: WebApi.IdentityRef with get, set
    abstract changedDate: DateTime with get, set
    abstract changeType: AuditAction with get, set
    abstract comment: string with get, set
    abstract fileId: float with get, set
    abstract majorVersion: float with get, set
    abstract revision: float with get, set
    abstract taskGroupId: string with get, set

/// Represents tasks in the task group.
type [<AllowNullLiteral>] TaskGroupStep =
    /// Gets or sets as 'true' to run the task always, 'false' otherwise.
    abstract alwaysRun: bool with get, set
    /// Gets or sets condition for the task.
    abstract condition: string with get, set
    /// Gets or sets as 'true' to continue on error, 'false' otherwise.
    abstract continueOnError: bool with get, set
    /// Gets or sets the display name.
    abstract displayName: string with get, set
    /// Gets or sets as task is enabled or not.
    abstract enabled: bool with get, set
    /// Gets dictionary of environment variables.
    abstract environment: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets dictionary of inputs.
    abstract inputs: AuthenticationSchemeReferenceInputs with get, set
    /// Gets or sets the reference of the task.
    abstract task: TaskDefinitionReference with get, set
    /// Gets or sets the maximum time, in minutes, that a task is allowed to execute on agent before being cancelled by server. A zero value indicates an infinite timeout.
    abstract timeoutInMinutes: float with get, set

type [<AllowNullLiteral>] TaskGroupUpdateParameter =
    /// Sets author name of the task group.
    abstract author: string with get, set
    /// Sets category of the task group.
    abstract category: string with get, set
    /// Sets comment of the task group.
    abstract comment: string with get, set
    /// Sets description of the task group.
    abstract description: string with get, set
    /// Sets friendly name of the task group.
    abstract friendlyName: string with get, set
    /// Sets url icon of the task group.
    abstract iconUrl: string with get, set
    /// Sets the unique identifier of this field.
    abstract id: string with get, set
    /// Sets input for the task group.
    abstract inputs: ResizeArray<TaskInputDefinition> with get, set
    /// Sets display name of the task group.
    abstract instanceNameFormat: string with get, set
    /// Sets name of the task group.
    abstract name: string with get, set
    /// Gets or sets parent task group Id. This is used while creating a draft task group.
    abstract parentDefinitionId: string with get, set
    /// Sets revision of the task group.
    abstract revision: float with get, set
    /// Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.
    abstract runsOn: ResizeArray<string> with get, set
    /// Sets tasks for the task group.
    abstract tasks: ResizeArray<TaskGroupStep> with get, set
    /// Sets version of the task group.
    abstract version: TaskVersion with get, set

type [<AllowNullLiteral>] TaskGroupUpdatePropertiesBase =
    /// Comment for this update request
    abstract comment: string with get, set

type [<AllowNullLiteral>] TaskHubLicenseDetails =
    abstract enterpriseUsersCount: float with get, set
    abstract failedToReachAllProviders: bool with get, set
    abstract freeHostedLicenseCount: float with get, set
    abstract freeLicenseCount: float with get, set
    abstract hasLicenseCountEverUpdated: bool with get, set
    abstract hostedAgentMinutesFreeCount: float with get, set
    abstract hostedAgentMinutesUsedCount: float with get, set
    abstract hostedLicensesArePremium: bool with get, set
    abstract marketplacePurchasedHostedLicenses: ResizeArray<MarketplacePurchasedLicense> with get, set
    abstract msdnUsersCount: float with get, set
    /// Microsoft-hosted licenses purchased from VSTS directly.
    abstract purchasedHostedLicenseCount: float with get, set
    /// Self-hosted licenses purchased from VSTS directly.
    abstract purchasedLicenseCount: float with get, set
    abstract totalHostedLicenseCount: float with get, set
    abstract totalLicenseCount: float with get, set
    abstract totalPrivateLicenseCount: float with get, set

type [<AllowNullLiteral>] TaskInputDefinition =
    inherit DistributedTaskCommon.TaskInputDefinitionBase

type [<AllowNullLiteral>] TaskInstance =
    inherit TaskReference
    abstract alwaysRun: bool with get, set
    abstract condition: string with get, set
    abstract continueOnError: bool with get, set
    abstract displayName: string with get, set
    abstract enabled: bool with get, set
    abstract environment: AuthenticationSchemeReferenceInputs with get, set
    abstract instanceId: string with get, set
    abstract refName: string with get, set
    abstract timeoutInMinutes: float with get, set

type [<AllowNullLiteral>] TaskLog =
    inherit TaskLogReference
    abstract createdOn: DateTime with get, set
    abstract indexLocation: string with get, set
    abstract lastChangedOn: DateTime with get, set
    abstract lineCount: float with get, set
    abstract path: string with get, set

type [<AllowNullLiteral>] TaskLogReference =
    abstract id: float with get, set
    abstract location: string with get, set

type [<AllowNullLiteral>] TaskOrchestrationContainer =
    inherit TaskOrchestrationItem
    abstract children: ResizeArray<TaskOrchestrationItem> with get, set
    abstract continueOnError: bool with get, set
    abstract data: AuthenticationSchemeReferenceInputs with get, set
    abstract maxConcurrency: float with get, set
    abstract ``parallel``: bool with get, set
    abstract rollback: TaskOrchestrationContainer with get, set

type [<AllowNullLiteral>] TaskOrchestrationItem =
    abstract itemType: TaskOrchestrationItemType with get, set

type [<RequireQualifiedAccess>] TaskOrchestrationItemType =
    | Container = 0
    | Job = 1

type [<AllowNullLiteral>] TaskOrchestrationJob =
    inherit TaskOrchestrationItem
    abstract demands: ResizeArray<Demand> with get, set
    abstract executeAs: WebApi.IdentityRef with get, set
    abstract executionMode: string with get, set
    abstract executionTimeout: obj option with get, set
    abstract instanceId: string with get, set
    abstract name: string with get, set
    abstract refName: string with get, set
    abstract tasks: ResizeArray<TaskInstance> with get, set
    abstract variables: AuthenticationSchemeReferenceInputs with get, set

type [<AllowNullLiteral>] TaskOrchestrationOwner =
    abstract _links: obj option with get, set
    abstract id: float with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlan =
    inherit TaskOrchestrationPlanReference
    abstract environment: PlanEnvironment with get, set
    abstract finishTime: DateTime with get, set
    abstract implementation: TaskOrchestrationContainer with get, set
    abstract initializationLog: TaskLogReference with get, set
    abstract requestedById: string with get, set
    abstract requestedForId: string with get, set
    abstract result: TaskResult with get, set
    abstract resultCode: string with get, set
    abstract startTime: DateTime with get, set
    abstract state: TaskOrchestrationPlanState with get, set
    abstract timeline: TimelineReference with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlanGroup =
    abstract planGroup: string with get, set
    abstract project: ProjectReference with get, set
    abstract runningRequests: ResizeArray<TaskAgentJobRequest> with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlanGroupsQueueMetrics =
    abstract count: float with get, set
    abstract status: PlanGroupStatus with get, set

type [<AllowNullLiteral>] TaskOrchestrationPlanReference =
    abstract artifactLocation: string with get, set
    abstract artifactUri: string with get, set
    abstract definition: TaskOrchestrationOwner with get, set
    abstract owner: TaskOrchestrationOwner with get, set
    abstract planGroup: string with get, set
    abstract planId: string with get, set
    abstract planType: string with get, set
    abstract scopeIdentifier: string with get, set
    abstract version: float with get, set

type [<RequireQualifiedAccess>] TaskOrchestrationPlanState =
    | InProgress = 1
    | Queued = 2
    | Completed = 4
    | Throttled = 8

type [<AllowNullLiteral>] TaskOrchestrationQueuedPlan =
    abstract assignTime: DateTime with get, set
    abstract definition: TaskOrchestrationOwner with get, set
    abstract owner: TaskOrchestrationOwner with get, set
    abstract planGroup: string with get, set
    abstract planId: string with get, set
    abstract poolId: float with get, set
    abstract queuePosition: float with get, set
    abstract queueTime: DateTime with get, set
    abstract scopeIdentifier: string with get, set

type [<AllowNullLiteral>] TaskOrchestrationQueuedPlanGroup =
    abstract definition: TaskOrchestrationOwner with get, set
    abstract owner: TaskOrchestrationOwner with get, set
    abstract planGroup: string with get, set
    abstract plans: ResizeArray<TaskOrchestrationQueuedPlan> with get, set
    abstract project: ProjectReference with get, set
    abstract queuePosition: float with get, set

type [<AllowNullLiteral>] TaskOutputVariable =
    abstract description: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] TaskPackageMetadata =
    /// Gets the name of the package.
    abstract ``type``: string with get, set
    /// Gets the url of the package.
    abstract url: string with get, set
    /// Gets the version of the package.
    abstract version: string with get, set

type [<AllowNullLiteral>] TaskReference =
    abstract id: string with get, set
    abstract inputs: AuthenticationSchemeReferenceInputs with get, set
    abstract name: string with get, set
    abstract version: string with get, set

type [<RequireQualifiedAccess>] TaskResult =
    | Succeeded = 0
    | SucceededWithIssues = 1
    | Failed = 2
    | Canceled = 3
    | Skipped = 4
    | Abandoned = 5

type [<AllowNullLiteral>] TaskSourceDefinition =
    inherit DistributedTaskCommon.TaskSourceDefinitionBase

type [<AllowNullLiteral>] TaskStartedEvent =
    inherit TaskEvent

type [<AllowNullLiteral>] TaskVersion =
    abstract isTest: bool with get, set
    abstract major: float with get, set
    abstract minor: float with get, set
    abstract patch: float with get, set

type [<AllowNullLiteral>] Timeline =
    inherit TimelineReference
    abstract lastChangedBy: string with get, set
    abstract lastChangedOn: DateTime with get, set
    abstract records: ResizeArray<TimelineRecord> with get, set

type [<AllowNullLiteral>] TimelineAttempt =
    /// Gets or sets the attempt of the record.
    abstract attempt: float with get, set
    /// Gets or sets the unique identifier for the record.
    abstract identifier: string with get, set
    /// Gets or sets the record identifier located within the specified timeline.
    abstract recordId: string with get, set
    /// Gets or sets the timeline identifier which owns the record representing this attempt.
    abstract timelineId: string with get, set

type [<AllowNullLiteral>] TimelineRecord =
    abstract agentSpecification: obj option with get, set
    abstract attempt: float with get, set
    abstract changeId: float with get, set
    abstract currentOperation: string with get, set
    abstract details: TimelineReference with get, set
    abstract errorCount: float with get, set
    abstract finishTime: DateTime with get, set
    abstract id: string with get, set
    abstract identifier: string with get, set
    abstract issues: ResizeArray<Issue> with get, set
    abstract lastModified: DateTime with get, set
    abstract location: string with get, set
    abstract log: TaskLogReference with get, set
    abstract name: string with get, set
    abstract order: float with get, set
    abstract parentId: string with get, set
    abstract percentComplete: float with get, set
    abstract previousAttempts: ResizeArray<TimelineAttempt> with get, set
    abstract queueId: float with get, set
    abstract refName: string with get, set
    abstract result: TaskResult with get, set
    abstract resultCode: string with get, set
    abstract startTime: DateTime with get, set
    abstract state: TimelineRecordState with get, set
    abstract task: TaskReference with get, set
    abstract ``type``: string with get, set
    abstract variables: TimelineRecordVariables with get, set
    abstract warningCount: float with get, set
    abstract workerName: string with get, set

type [<AllowNullLiteral>] TimelineRecordFeedLinesWrapper =
    abstract count: float with get, set
    abstract endLine: float with get, set
    abstract startLine: float with get, set
    abstract stepId: string with get, set
    abstract value: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] TimelineRecordState =
    | Pending = 0
    | InProgress = 1
    | Completed = 2

type [<AllowNullLiteral>] TimelineReference =
    abstract changeId: float with get, set
    abstract id: string with get, set
    abstract location: string with get, set

type [<AllowNullLiteral>] ValidationItem =
    /// Tells whether the current input is valid or not
    abstract isValid: bool with get, set
    /// Reason for input validation failure
    abstract reason: string with get, set
    /// Type of validation item
    abstract ``type``: string with get, set
    /// Value to validate. The conditional expression to validate for the input for "expression" type Eg:eq(variables['Build.SourceBranch'], 'refs/heads/master');eq(value, 'refs/heads/master')
    abstract value: string with get, set

/// A variable group is a collection of related variables.
type [<AllowNullLiteral>] VariableGroup =
    /// Gets or sets the identity who created the variable group.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// Gets or sets the time when variable group was created.
    abstract createdOn: DateTime with get, set
    /// Gets or sets description of the variable group.
    abstract description: string with get, set
    /// Gets or sets id of the variable group.
    abstract id: float with get, set
    /// Indicates whether variable group is shared with other projects or not.
    abstract isShared: bool with get, set
    /// Gets or sets the identity who modified the variable group.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// Gets or sets the time when variable group was modified
    abstract modifiedOn: DateTime with get, set
    /// Gets or sets name of the variable group.
    abstract name: string with get, set
    /// Gets or sets provider data.
    abstract providerData: VariableGroupProviderData with get, set
    /// Gets or sets type of the variable group.
    abstract ``type``: string with get, set
    /// all project references where the variable group is shared with other projects.
    abstract variableGroupProjectReferences: ResizeArray<VariableGroupProjectReference> with get, set
    /// Gets or sets variables contained in the variable group.
    abstract variables: TimelineRecordVariables with get, set

type [<RequireQualifiedAccess>] VariableGroupActionFilter =
    | None = 0
    | Manage = 2
    | Use = 16

type [<AllowNullLiteral>] VariableGroupParameters =
    /// Sets description of the variable group.
    abstract description: string with get, set
    /// Sets name of the variable group.
    abstract name: string with get, set
    /// Sets provider data.
    abstract providerData: VariableGroupProviderData with get, set
    /// Sets type of the variable group.
    abstract ``type``: string with get, set
    abstract variableGroupProjectReferences: ResizeArray<VariableGroupProjectReference> with get, set
    /// Sets variables contained in the variable group.
    abstract variables: TimelineRecordVariables with get, set

/// A variable group reference is a shallow reference to variable group.
type [<AllowNullLiteral>] VariableGroupProjectReference =
    /// Gets or sets description of the variable group.
    abstract description: string with get, set
    /// Gets or sets name of the variable group.
    abstract name: string with get, set
    /// Gets or sets project reference of the variable group.
    abstract projectReference: ProjectReference with get, set

/// Defines provider data of the variable group.
type [<AllowNullLiteral>] VariableGroupProviderData =
    interface end

type [<RequireQualifiedAccess>] VariableGroupQueryOrder =
    | IdAscending = 0
    | IdDescending = 1

type [<AllowNullLiteral>] VariableValue =
    abstract isSecret: bool with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] VirtualMachine =
    abstract agent: TaskAgent with get, set
    abstract id: float with get, set
    abstract tags: ResizeArray<string> with get, set

type [<AllowNullLiteral>] VirtualMachineGroup =
    inherit EnvironmentResource
    abstract poolId: float with get, set

type [<AllowNullLiteral>] VirtualMachineGroupCreateParameters =
    abstract name: string with get, set

type [<AllowNullLiteral>] VirtualMachineResource =
    inherit EnvironmentResource
    abstract agent: TaskAgent with get, set

type [<AllowNullLiteral>] VirtualMachineResourceCreateParameters =
    abstract name: string with get, set

type [<AllowNullLiteral>] AuthenticationSchemeReferenceInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] DependencyDataMapValue =
    abstract key: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] DependencyDataMap =
    abstract key: string with get, set
    abstract value: ResizeArray<DependencyDataMapValue> with get, set

type [<AllowNullLiteral>] InputValidationRequestInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ValidationItem with get, set

type [<AllowNullLiteral>] JobEnvironmentOptions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> JobOption with get, set

type [<AllowNullLiteral>] TaskDefinitionExecution =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] TaskExecutionPlatformInstructions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> AuthenticationSchemeReferenceInputs with get, set

type [<AllowNullLiteral>] TimelineRecordVariables =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> VariableValue with get, set
module TaskAgent = ___TaskAgent_TaskAgent
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract TaskAgentRestClient: TaskAgentRestClientStatic

type [<AllowNullLiteral>] TaskAgentRestClient =
    inherit RestClientBase
    /// <param name="agentCloud">-</param>
    abstract addAgentCloud: agentCloud: TaskAgent.TaskAgentCloud -> Promise<TaskAgent.TaskAgentCloud>
    /// <param name="agentCloudId">-</param>
    abstract deleteAgentCloud: agentCloudId: float -> Promise<TaskAgent.TaskAgentCloud>
    /// <param name="agentCloudId">-</param>
    abstract getAgentCloud: agentCloudId: float -> Promise<TaskAgent.TaskAgentCloud>
    abstract getAgentClouds: unit -> Promise<ResizeArray<TaskAgent.TaskAgentCloud>>
    /// Get agent cloud types.
    abstract getAgentCloudTypes: unit -> Promise<ResizeArray<TaskAgent.TaskAgentCloudType>>
    /// <param name="queueId">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    abstract getAgentRequestsForQueue: queueId: float * top: float * ?continuationToken: string -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="request">-</param>
    /// <param name="queueId">-</param>
    abstract queueAgentRequest: request: TaskAgent.TaskAgentJobRequest * queueId: float -> Promise<TaskAgent.TaskAgentJobRequest>
    /// <summary>Adds an agent to a pool.  You probably don't want to call this endpoint directly. Instead, [configure an agent](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) using the agent download package.</summary>
    /// <param name="agent">- Details about the agent being added</param>
    /// <param name="poolId">- The agent pool in which to add the agent</param>
    abstract addAgent: agent: TaskAgent.TaskAgent * poolId: float -> Promise<TaskAgent.TaskAgent>
    /// <summary>Delete an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove an agent from your organization.</summary>
    /// <param name="poolId">- The pool ID to remove the agent from</param>
    /// <param name="agentId">- The agent ID to remove</param>
    abstract deleteAgent: poolId: float * agentId: float -> Promise<unit>
    /// <summary>Get information about an agent.</summary>
    /// <param name="poolId">- The agent pool containing the agent</param>
    /// <param name="agentId">- The agent ID to get information about</param>
    /// <param name="includeCapabilities">- Whether to include the agent's capabilities in the response</param>
    /// <param name="includeAssignedRequest">- Whether to include details about the agent's current work</param>
    /// <param name="includeLastCompletedRequest">- Whether to include details about the agents' most recent completed work</param>
    /// <param name="propertyFilters">- Filter which custom properties will be returned</param>
    abstract getAgent: poolId: float * agentId: float * ?includeCapabilities: bool * ?includeAssignedRequest: bool * ?includeLastCompletedRequest: bool * ?propertyFilters: ResizeArray<string> -> Promise<TaskAgent.TaskAgent>
    /// <summary>Get a list of agents.</summary>
    /// <param name="poolId">- The agent pool containing the agents</param>
    /// <param name="agentName">- Filter on agent name</param>
    /// <param name="includeCapabilities">- Whether to include the agents' capabilities in the response</param>
    /// <param name="includeAssignedRequest">- Whether to include details about the agents' current work</param>
    /// <param name="includeLastCompletedRequest">- Whether to include details about the agents' most recent completed work</param>
    /// <param name="propertyFilters">- Filter which custom properties will be returned</param>
    /// <param name="demands">- Filter by demands the agents can satisfy</param>
    abstract getAgents: poolId: float * ?agentName: string * ?includeCapabilities: bool * ?includeAssignedRequest: bool * ?includeLastCompletedRequest: bool * ?propertyFilters: ResizeArray<string> * ?demands: ResizeArray<string> -> Promise<ResizeArray<TaskAgent.TaskAgent>>
    /// <summary>Replace an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove and reconfigure an agent from your organization.</summary>
    /// <param name="agent">- Updated details about the replacing agent</param>
    /// <param name="poolId">- The agent pool to use</param>
    /// <param name="agentId">- The agent to replace</param>
    abstract replaceAgent: agent: TaskAgent.TaskAgent * poolId: float * agentId: float -> Promise<TaskAgent.TaskAgent>
    /// <summary>Update agent details.</summary>
    /// <param name="agent">- Updated details about the agent</param>
    /// <param name="poolId">- The agent pool to use</param>
    /// <param name="agentId">- The agent to update</param>
    abstract updateAgent: agent: TaskAgent.TaskAgent * poolId: float * agentId: float -> Promise<TaskAgent.TaskAgent>
    /// Returns list of azure subscriptions
    abstract getAzureManagementGroups: unit -> Promise<TaskAgent.AzureManagementGroupQueryResult>
    /// Returns list of azure subscriptions
    abstract getAzureSubscriptions: unit -> Promise<TaskAgent.AzureSubscriptionQueryResult>
    /// <summary>GET a PAT token for managing (configuring, removing, tagging) deployment targets in a deployment group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group in which deployment targets are managed.</param>
    abstract generateDeploymentGroupAccessToken: project: string * deploymentGroupId: float -> Promise<string>
    /// <summary>Create a deployment group.</summary>
    /// <param name="deploymentGroup">- Deployment group to create.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addDeploymentGroup: deploymentGroup: TaskAgent.DeploymentGroupCreateParameter * project: string -> Promise<TaskAgent.DeploymentGroup>
    /// <summary>Delete a deployment group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group to be deleted.</param>
    abstract deleteDeploymentGroup: project: string * deploymentGroupId: float -> Promise<unit>
    /// <summary>Get a deployment group by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group.</param>
    /// <param name="actionFilter">- Get the deployment group only if this action can be performed on it.</param>
    /// <param name="expand">- Include these additional details in the returned object.</param>
    abstract getDeploymentGroup: project: string * deploymentGroupId: float * ?actionFilter: TaskAgent.DeploymentGroupActionFilter * ?expand: TaskAgent.DeploymentGroupExpands -> Promise<TaskAgent.DeploymentGroup>
    /// <summary>Get a list of deployment groups by name or IDs.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="name">- Name of the deployment group.</param>
    /// <param name="actionFilter">- Get only deployment groups on which this action can be performed.</param>
    /// <param name="expand">- Include these additional details in the returned objects.</param>
    /// <param name="continuationToken">- Get deployment groups with names greater than this continuationToken lexicographically.</param>
    /// <param name="top">- Maximum number of deployment groups to return. Default is **1000**.</param>
    /// <param name="ids">- Comma separated list of IDs of the deployment groups.</param>
    abstract getDeploymentGroups: project: string * ?name: string * ?actionFilter: TaskAgent.DeploymentGroupActionFilter * ?expand: TaskAgent.DeploymentGroupExpands * ?continuationToken: string * ?top: float * ?ids: ResizeArray<float> -> Promise<ResizeArray<TaskAgent.DeploymentGroup>>
    /// <summary>Update a deployment group.</summary>
    /// <param name="deploymentGroup">- Deployment group to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group.</param>
    abstract updateDeploymentGroup: deploymentGroup: TaskAgent.DeploymentGroupUpdateParameter * project: string * deploymentGroupId: float -> Promise<TaskAgent.DeploymentGroup>
    /// <summary>Get a list of deployment group metrics.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupName">- Name of the deployment group.</param>
    /// <param name="continuationToken">- Get metrics for deployment groups with names greater than this continuationToken lexicographically.</param>
    /// <param name="top">- Maximum number of deployment group metrics to return. Default is **50**.</param>
    abstract getDeploymentGroupsMetrics: project: string * ?deploymentGroupName: string * ?continuationToken: string * ?top: float -> Promise<ResizeArray<TaskAgent.DeploymentGroupMetrics>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="machineId">-</param>
    /// <param name="completedRequestCount">-</param>
    abstract getAgentRequestsForDeploymentMachine: project: string * deploymentGroupId: float * machineId: float * ?completedRequestCount: float -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="machineIds">-</param>
    /// <param name="completedRequestCount">-</param>
    abstract getAgentRequestsForDeploymentMachines: project: string * deploymentGroupId: float * ?machineIds: ResizeArray<float> * ?completedRequestCount: float -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    abstract refreshDeploymentMachines: project: string * deploymentGroupId: float -> Promise<unit>
    /// <summary>GET a PAT token for managing (configuring, removing, tagging) deployment agents in a deployment pool.</summary>
    /// <param name="poolId">- ID of the deployment pool in which deployment agents are managed.</param>
    abstract generateDeploymentPoolAccessToken: poolId: float -> Promise<string>
    /// <summary>Get a list of deployment pool summaries.</summary>
    /// <param name="poolName">- Name of the deployment pool.</param>
    /// <param name="expands">- Include these additional details in the returned objects.</param>
    /// <param name="poolIds">- List of deployment pool ids.</param>
    abstract getDeploymentPoolsSummary: ?poolName: string * ?expands: TaskAgent.DeploymentPoolSummaryExpands * ?poolIds: ResizeArray<float> -> Promise<ResizeArray<TaskAgent.DeploymentPoolSummary>>
    /// <summary>Get agent requests for a deployment target.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group to which the target belongs.</param>
    /// <param name="targetId">- ID of the deployment target.</param>
    /// <param name="completedRequestCount">- Maximum number of completed requests to return. Default is **50**</param>
    abstract getAgentRequestsForDeploymentTarget: project: string * deploymentGroupId: float * targetId: float * ?completedRequestCount: float -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <summary>Get agent requests for a list deployment targets.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group to which the targets belong.</param>
    /// <param name="targetIds">- Comma separated list of IDs of the deployment targets.</param>
    /// <param name="ownerId">- Id of owner of agent job request.</param>
    /// <param name="completedOn">- Datetime to return request after this time.</param>
    /// <param name="completedRequestCount">- Maximum number of completed requests to return for each target. Default is **50**</param>
    abstract getAgentRequestsForDeploymentTargets: project: string * deploymentGroupId: float * ?targetIds: ResizeArray<float> * ?ownerId: float * ?completedOn: DateTime * ?completedRequestCount: float -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <summary>Upgrade the deployment targets in a deployment group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group.</param>
    abstract refreshDeploymentTargets: project: string * deploymentGroupId: float -> Promise<unit>
    /// <summary>Proxy for a GET request defined by an 'endpoint'. The request is authorized using a service connection. The response is filtered using an XPath/Json based selector.</summary>
    /// <param name="endpoint">- Describes the URL to fetch.</param>
    abstract queryEndpoint: endpoint: TaskAgent.TaskDefinitionEndpoint -> Promise<ResizeArray<string>>
    /// <summary>Get environment deployment execution history</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="continuationToken">-</param>
    /// <param name="top">-</param>
    abstract getEnvironmentDeploymentExecutionRecords: project: string * environmentId: float * ?continuationToken: string * ?top: float -> Promise<ResizeArray<TaskAgent.EnvironmentDeploymentExecutionRecord>>
    /// <summary>Create an environment.</summary>
    /// <param name="environmentCreateParameter">- Environment to create.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addEnvironment: environmentCreateParameter: TaskAgent.EnvironmentCreateParameter * project: string -> Promise<TaskAgent.EnvironmentInstance>
    /// <summary>Delete the specified environment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">- ID of the environment.</param>
    abstract deleteEnvironment: project: string * environmentId: float -> Promise<unit>
    /// <summary>Get an environment by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">- ID of the environment.</param>
    /// <param name="expands">- Include these additional details in the returned objects.</param>
    abstract getEnvironmentById: project: string * environmentId: float * ?expands: TaskAgent.EnvironmentExpands -> Promise<TaskAgent.EnvironmentInstance>
    /// <summary>Get all environments.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="name">-</param>
    /// <param name="continuationToken">-</param>
    /// <param name="top">-</param>
    abstract getEnvironments: project: string * ?name: string * ?continuationToken: string * ?top: float -> Promise<ResizeArray<TaskAgent.EnvironmentInstance>>
    /// <summary>Update the specified environment.</summary>
    /// <param name="environmentUpdateParameter">- Environment data to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">- ID of the environment.</param>
    abstract updateEnvironment: environmentUpdateParameter: TaskAgent.EnvironmentUpdateParameter * project: string * environmentId: float -> Promise<TaskAgent.EnvironmentInstance>
    /// <param name="hubName">-</param>
    /// <param name="includeEnterpriseUsersCount">-</param>
    /// <param name="includeHostedAgentMinutesCount">-</param>
    abstract getTaskHubLicenseDetails: hubName: string * ?includeEnterpriseUsersCount: bool * ?includeHostedAgentMinutesCount: bool -> Promise<TaskAgent.TaskHubLicenseDetails>
    /// <param name="taskHubLicenseDetails">-</param>
    /// <param name="hubName">-</param>
    abstract updateTaskHubLicenseDetails: taskHubLicenseDetails: TaskAgent.TaskHubLicenseDetails * hubName: string -> Promise<TaskAgent.TaskHubLicenseDetails>
    /// <param name="inputValidationRequest">-</param>
    abstract validateInputs: inputValidationRequest: TaskAgent.InputValidationRequest -> Promise<TaskAgent.InputValidationRequest>
    /// <param name="poolId">-</param>
    /// <param name="requestId">-</param>
    /// <param name="lockToken">-</param>
    /// <param name="result">-</param>
    abstract deleteAgentRequest: poolId: float * requestId: float * lockToken: string * ?result: TaskAgent.TaskResult -> Promise<unit>
    /// <param name="poolId">-</param>
    /// <param name="requestId">-</param>
    /// <param name="includeStatus">-</param>
    abstract getAgentRequest: poolId: float * requestId: float * ?includeStatus: bool -> Promise<TaskAgent.TaskAgentJobRequest>
    /// <param name="poolId">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    abstract getAgentRequests: poolId: float * top: float * ?continuationToken: string -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="poolId">-</param>
    /// <param name="agentId">-</param>
    /// <param name="completedRequestCount">-</param>
    abstract getAgentRequestsForAgent: poolId: float * agentId: float * ?completedRequestCount: float -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="poolId">-</param>
    /// <param name="agentIds">-</param>
    /// <param name="completedRequestCount">-</param>
    abstract getAgentRequestsForAgents: poolId: float * ?agentIds: ResizeArray<float> * ?completedRequestCount: float -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="poolId">-</param>
    /// <param name="planId">-</param>
    /// <param name="jobId">-</param>
    abstract getAgentRequestsForPlan: poolId: float * planId: string * ?jobId: string -> Promise<ResizeArray<TaskAgent.TaskAgentJobRequest>>
    /// <param name="request">-</param>
    /// <param name="poolId">-</param>
    abstract queueAgentRequestByPool: request: TaskAgent.TaskAgentJobRequest * poolId: float -> Promise<TaskAgent.TaskAgentJobRequest>
    /// <param name="request">-</param>
    /// <param name="poolId">-</param>
    /// <param name="requestId">-</param>
    /// <param name="lockToken">-</param>
    abstract updateAgentRequest: request: TaskAgent.TaskAgentJobRequest * poolId: float * requestId: float * lockToken: string -> Promise<TaskAgent.TaskAgentJobRequest>
    /// <param name="createParameters">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    abstract addKubernetesResource: createParameters: TaskAgent.KubernetesResourceCreateParameters * project: string * environmentId: float -> Promise<TaskAgent.KubernetesResource>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="resourceId">-</param>
    abstract deleteKubernetesResource: project: string * environmentId: float * resourceId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="resourceId">-</param>
    abstract getKubernetesResource: project: string * environmentId: float * resourceId: float -> Promise<TaskAgent.KubernetesResource>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupId">-</param>
    abstract generateDeploymentMachineGroupAccessToken: project: string * machineGroupId: float -> Promise<string>
    /// <param name="machineGroup">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addDeploymentMachineGroup: machineGroup: TaskAgent.DeploymentMachineGroup * project: string -> Promise<TaskAgent.DeploymentMachineGroup>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupId">-</param>
    abstract deleteDeploymentMachineGroup: project: string * machineGroupId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupId">-</param>
    /// <param name="actionFilter">-</param>
    abstract getDeploymentMachineGroup: project: string * machineGroupId: float * ?actionFilter: TaskAgent.MachineGroupActionFilter -> Promise<TaskAgent.DeploymentMachineGroup>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupName">-</param>
    /// <param name="actionFilter">-</param>
    abstract getDeploymentMachineGroups: project: string * ?machineGroupName: string * ?actionFilter: TaskAgent.MachineGroupActionFilter -> Promise<ResizeArray<TaskAgent.DeploymentMachineGroup>>
    /// <param name="machineGroup">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupId">-</param>
    abstract updateDeploymentMachineGroup: machineGroup: TaskAgent.DeploymentMachineGroup * project: string * machineGroupId: float -> Promise<TaskAgent.DeploymentMachineGroup>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupId">-</param>
    /// <param name="tagFilters">-</param>
    abstract getDeploymentMachineGroupMachines: project: string * machineGroupId: float * ?tagFilters: ResizeArray<string> -> Promise<ResizeArray<TaskAgent.DeploymentMachine>>
    /// <param name="deploymentMachines">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="machineGroupId">-</param>
    abstract updateDeploymentMachineGroupMachines: deploymentMachines: ResizeArray<TaskAgent.DeploymentMachine> * project: string * machineGroupId: float -> Promise<ResizeArray<TaskAgent.DeploymentMachine>>
    /// <param name="machine">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    abstract addDeploymentMachine: machine: TaskAgent.DeploymentMachine * project: string * deploymentGroupId: float -> Promise<TaskAgent.DeploymentMachine>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="machineId">-</param>
    abstract deleteDeploymentMachine: project: string * deploymentGroupId: float * machineId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="machineId">-</param>
    /// <param name="expand">-</param>
    abstract getDeploymentMachine: project: string * deploymentGroupId: float * machineId: float * ?expand: TaskAgent.DeploymentMachineExpands -> Promise<TaskAgent.DeploymentMachine>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="tags">-</param>
    /// <param name="name">-</param>
    /// <param name="expand">-</param>
    abstract getDeploymentMachines: project: string * deploymentGroupId: float * ?tags: ResizeArray<string> * ?name: string * ?expand: TaskAgent.DeploymentMachineExpands -> Promise<ResizeArray<TaskAgent.DeploymentMachine>>
    /// <param name="machine">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="machineId">-</param>
    abstract replaceDeploymentMachine: machine: TaskAgent.DeploymentMachine * project: string * deploymentGroupId: float * machineId: float -> Promise<TaskAgent.DeploymentMachine>
    /// <param name="machine">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    /// <param name="machineId">-</param>
    abstract updateDeploymentMachine: machine: TaskAgent.DeploymentMachine * project: string * deploymentGroupId: float * machineId: float -> Promise<TaskAgent.DeploymentMachine>
    /// <param name="machines">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">-</param>
    abstract updateDeploymentMachines: machines: ResizeArray<TaskAgent.DeploymentMachine> * project: string * deploymentGroupId: float -> Promise<ResizeArray<TaskAgent.DeploymentMachine>>
    /// <param name="definition">-</param>
    /// <param name="poolId">-</param>
    abstract createAgentPoolMaintenanceDefinition: definition: TaskAgent.TaskAgentPoolMaintenanceDefinition * poolId: float -> Promise<TaskAgent.TaskAgentPoolMaintenanceDefinition>
    /// <param name="poolId">-</param>
    /// <param name="definitionId">-</param>
    abstract deleteAgentPoolMaintenanceDefinition: poolId: float * definitionId: float -> Promise<unit>
    /// <param name="poolId">-</param>
    /// <param name="definitionId">-</param>
    abstract getAgentPoolMaintenanceDefinition: poolId: float * definitionId: float -> Promise<TaskAgent.TaskAgentPoolMaintenanceDefinition>
    /// <param name="poolId">-</param>
    abstract getAgentPoolMaintenanceDefinitions: poolId: float -> Promise<ResizeArray<TaskAgent.TaskAgentPoolMaintenanceDefinition>>
    /// <param name="definition">-</param>
    /// <param name="poolId">-</param>
    /// <param name="definitionId">-</param>
    abstract updateAgentPoolMaintenanceDefinition: definition: TaskAgent.TaskAgentPoolMaintenanceDefinition * poolId: float * definitionId: float -> Promise<TaskAgent.TaskAgentPoolMaintenanceDefinition>
    /// <param name="poolId">-</param>
    /// <param name="jobId">-</param>
    abstract deleteAgentPoolMaintenanceJob: poolId: float * jobId: float -> Promise<unit>
    /// <param name="poolId">-</param>
    /// <param name="jobId">-</param>
    abstract getAgentPoolMaintenanceJob: poolId: float * jobId: float -> Promise<TaskAgent.TaskAgentPoolMaintenanceJob>
    /// <param name="poolId">-</param>
    /// <param name="jobId">-</param>
    abstract getAgentPoolMaintenanceJobLogs: poolId: float * jobId: float -> Promise<ArrayBuffer>
    /// <param name="poolId">-</param>
    /// <param name="definitionId">-</param>
    abstract getAgentPoolMaintenanceJobs: poolId: float * ?definitionId: float -> Promise<ResizeArray<TaskAgent.TaskAgentPoolMaintenanceJob>>
    /// <param name="job">-</param>
    /// <param name="poolId">-</param>
    abstract queueAgentPoolMaintenanceJob: job: TaskAgent.TaskAgentPoolMaintenanceJob * poolId: float -> Promise<TaskAgent.TaskAgentPoolMaintenanceJob>
    /// <param name="job">-</param>
    /// <param name="poolId">-</param>
    /// <param name="jobId">-</param>
    abstract updateAgentPoolMaintenanceJob: job: TaskAgent.TaskAgentPoolMaintenanceJob * poolId: float * jobId: float -> Promise<TaskAgent.TaskAgentPoolMaintenanceJob>
    /// <param name="poolId">-</param>
    /// <param name="messageId">-</param>
    /// <param name="sessionId">-</param>
    abstract deleteMessage: poolId: float * messageId: float * sessionId: string -> Promise<unit>
    /// <param name="poolId">-</param>
    /// <param name="sessionId">-</param>
    /// <param name="lastMessageId">-</param>
    abstract getMessage: poolId: float * sessionId: string * ?lastMessageId: float -> Promise<TaskAgent.TaskAgentMessage>
    /// <param name="poolId">-</param>
    /// <param name="agentId">-</param>
    abstract refreshAgent: poolId: float * agentId: float -> Promise<unit>
    /// <param name="poolId">-</param>
    abstract refreshAgents: poolId: float -> Promise<unit>
    /// <param name="message">-</param>
    /// <param name="poolId">-</param>
    /// <param name="requestId">-</param>
    abstract sendMessage: message: TaskAgent.TaskAgentMessage * poolId: float * requestId: float -> Promise<unit>
    /// <param name="packageType">-</param>
    /// <param name="platform">-</param>
    /// <param name="version">-</param>
    abstract getPackage: packageType: string * platform: string * version: string -> Promise<TaskAgent.PackageMetadata>
    /// <param name="packageType">-</param>
    /// <param name="platform">-</param>
    /// <param name="top">-</param>
    abstract getPackages: packageType: string * ?platform: string * ?top: float -> Promise<ResizeArray<TaskAgent.PackageMetadata>>
    /// <param name="poolId">-</param>
    abstract getAgentPoolMetadata: poolId: float -> Promise<string>
    /// <summary>Create an agent pool.</summary>
    /// <param name="pool">- Details about the new agent pool</param>
    abstract addAgentPool: pool: TaskAgent.TaskAgentPool -> Promise<TaskAgent.TaskAgentPool>
    /// <summary>Delete an agent pool.</summary>
    /// <param name="poolId">- ID of the agent pool to delete</param>
    abstract deleteAgentPool: poolId: float -> Promise<unit>
    /// <summary>Get information about an agent pool.</summary>
    /// <param name="poolId">- An agent pool ID</param>
    /// <param name="properties">- Agent pool properties (comma-separated)</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentPool: poolId: float * ?properties: ResizeArray<string> * ?actionFilter: TaskAgent.TaskAgentPoolActionFilter -> Promise<TaskAgent.TaskAgentPool>
    /// <summary>Get a list of agent pools.</summary>
    /// <param name="poolName">- Filter by name</param>
    /// <param name="properties">- Filter by agent pool properties (comma-separated)</param>
    /// <param name="poolType">- Filter by pool type</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentPools: ?poolName: string * ?properties: ResizeArray<string> * ?poolType: TaskAgent.TaskAgentPoolType * ?actionFilter: TaskAgent.TaskAgentPoolActionFilter -> Promise<ResizeArray<TaskAgent.TaskAgentPool>>
    /// <summary>Get a list of agent pools.</summary>
    /// <param name="poolIds">- pool Ids to fetch</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentPoolsByIds: poolIds: ResizeArray<float> * ?actionFilter: TaskAgent.TaskAgentPoolActionFilter -> Promise<ResizeArray<TaskAgent.TaskAgentPool>>
    /// <summary>Update properties on an agent pool</summary>
    /// <param name="pool">- Updated agent pool details</param>
    /// <param name="poolId">- The agent pool to update</param>
    abstract updateAgentPool: pool: TaskAgent.TaskAgentPool * poolId: float -> Promise<TaskAgent.TaskAgentPool>
    /// <summary>Create a new agent queue to connect a project to an agent pool.</summary>
    /// <param name="queue">- Details about the queue to create</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="authorizePipelines">- Automatically authorize this queue when using YAML</param>
    abstract addAgentQueue: queue: TaskAgent.TaskAgentQueue * ?project: string * ?authorizePipelines: bool -> Promise<TaskAgent.TaskAgentQueue>
    /// <summary>Create a new team project.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract createTeamProject: ?project: string -> Promise<unit>
    /// <summary>Removes an agent queue from a project.</summary>
    /// <param name="queueId">- The agent queue to remove</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteAgentQueue: queueId: float * ?project: string -> Promise<unit>
    /// <summary>Get information about an agent queue.</summary>
    /// <param name="queueId">- The agent queue to get information about</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentQueue: queueId: float * ?project: string * ?actionFilter: TaskAgent.TaskAgentQueueActionFilter -> Promise<TaskAgent.TaskAgentQueue>
    /// <summary>Get a list of agent queues.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="queueName">- Filter on the agent queue name</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentQueues: ?project: string * ?queueName: string * ?actionFilter: TaskAgent.TaskAgentQueueActionFilter -> Promise<ResizeArray<TaskAgent.TaskAgentQueue>>
    /// <summary>Get a list of agent queues by their IDs</summary>
    /// <param name="queueIds">- A comma-separated list of agent queue IDs to retrieve</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentQueuesByIds: queueIds: ResizeArray<float> * ?project: string * ?actionFilter: TaskAgent.TaskAgentQueueActionFilter -> Promise<ResizeArray<TaskAgent.TaskAgentQueue>>
    /// <summary>Get a list of agent queues by their names</summary>
    /// <param name="queueNames">- A comma-separated list of agent names to retrieve</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentQueuesByNames: queueNames: ResizeArray<string> * ?project: string * ?actionFilter: TaskAgent.TaskAgentQueueActionFilter -> Promise<ResizeArray<TaskAgent.TaskAgentQueue>>
    /// <summary>Get a list of agent queues by pool ids</summary>
    /// <param name="poolIds">- A comma-separated list of pool ids to get the corresponding queues for</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="actionFilter">- Filter by whether the calling user has use or manage permissions</param>
    abstract getAgentQueuesForPools: poolIds: ResizeArray<float> * ?project: string * ?actionFilter: TaskAgent.TaskAgentQueueActionFilter -> Promise<ResizeArray<TaskAgent.TaskAgentQueue>>
    /// <param name="agentCloudId">-</param>
    abstract getAgentCloudRequests: agentCloudId: float -> Promise<ResizeArray<TaskAgent.TaskAgentCloudRequest>>
    abstract getResourceLimits: unit -> Promise<ResizeArray<TaskAgent.ResourceLimit>>
    /// <param name="parallelismTag">-</param>
    /// <param name="poolIsHosted">-</param>
    /// <param name="includeRunningRequests">-</param>
    abstract getResourceUsage: ?parallelismTag: string * ?poolIsHosted: bool * ?includeRunningRequests: bool -> Promise<TaskAgent.ResourceUsage>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">-</param>
    abstract getTaskGroupHistory: project: string * taskGroupId: string -> Promise<ResizeArray<TaskAgent.TaskGroupRevision>>
    /// <summary>Delete a secure file</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="secureFileId">- The unique secure file Id</param>
    abstract deleteSecureFile: project: string * secureFileId: string -> Promise<unit>
    /// <summary>Download a secure file by Id</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="secureFileId">- The unique secure file Id</param>
    /// <param name="ticket">- A valid download ticket</param>
    /// <param name="download">- If download is true, the file is sent as attachement in the response body. If download is false, the response body contains the file stream.</param>
    abstract downloadSecureFile: project: string * secureFileId: string * ticket: string * ?download: bool -> Promise<ArrayBuffer>
    /// <summary>Get a secure file</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="secureFileId">- The unique secure file Id</param>
    /// <param name="includeDownloadTicket">- If includeDownloadTicket is true and the caller has permissions, a download ticket is included in the response.</param>
    /// <param name="actionFilter">-</param>
    abstract getSecureFile: project: string * secureFileId: string * ?includeDownloadTicket: bool * ?actionFilter: TaskAgent.SecureFileActionFilter -> Promise<TaskAgent.SecureFile>
    /// <summary>Get secure files</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="namePattern">- Name of the secure file to match. Can include wildcards to match multiple files.</param>
    /// <param name="includeDownloadTickets">- If includeDownloadTickets is true and the caller has permissions, a download ticket for each secure file is included in the response.</param>
    /// <param name="actionFilter">- Filter by secure file permissions for View, Manage or Use action. Defaults to View.</param>
    abstract getSecureFiles: project: string * ?namePattern: string * ?includeDownloadTickets: bool * ?actionFilter: TaskAgent.SecureFileActionFilter -> Promise<ResizeArray<TaskAgent.SecureFile>>
    /// <summary>Get secure files</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="secureFileIds">- A list of secure file Ids</param>
    /// <param name="includeDownloadTickets">- If includeDownloadTickets is true and the caller has permissions, a download ticket for each secure file is included in the response.</param>
    /// <param name="actionFilter">-</param>
    abstract getSecureFilesByIds: project: string * secureFileIds: ResizeArray<string> * ?includeDownloadTickets: bool * ?actionFilter: TaskAgent.SecureFileActionFilter -> Promise<ResizeArray<TaskAgent.SecureFile>>
    /// <summary>Get secure files</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="secureFileNames">- A list of secure file Ids</param>
    /// <param name="includeDownloadTickets">- If includeDownloadTickets is true and the caller has permissions, a download ticket for each secure file is included in the response.</param>
    /// <param name="actionFilter">-</param>
    abstract getSecureFilesByNames: project: string * secureFileNames: ResizeArray<string> * ?includeDownloadTickets: bool * ?actionFilter: TaskAgent.SecureFileActionFilter -> Promise<ResizeArray<TaskAgent.SecureFile>>
    /// <summary>Query secure files using a name pattern and a condition on file properties.</summary>
    /// <param name="condition">- The main condition syntax is described [here](https://go.microsoft.com/fwlink/?linkid=842996). Use the *property('property-name')* function to access the value of the specified property of a secure file. It returns null if the property is not set. E.g. \`\`\` and( eq( property('devices'), '2' ), in( property('provisioning profile type'), 'ad hoc', 'development' ) ) \`\`\`</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="namePattern">- Name of the secure file to match. Can include wildcards to match multiple files.</param>
    abstract querySecureFilesByProperties: condition: string * project: string * ?namePattern: string -> Promise<ResizeArray<TaskAgent.SecureFile>>
    /// <summary>Update the name or properties of an existing secure file</summary>
    /// <param name="secureFile">- The secure file with updated name and/or properties</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="secureFileId">- The unique secure file Id</param>
    abstract updateSecureFile: secureFile: TaskAgent.SecureFile * project: string * secureFileId: string -> Promise<TaskAgent.SecureFile>
    /// <summary>Update properties and/or names of a set of secure files. Files are identified by their IDs. Properties provided override the existing one entirely, i.e. do not merge.</summary>
    /// <param name="secureFiles">- A list of secure file objects. Only three field must be populated Id, Name, and Properties. The rest of fields in the object are ignored.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateSecureFiles: secureFiles: ResizeArray<TaskAgent.SecureFile> * project: string -> Promise<ResizeArray<TaskAgent.SecureFile>>
    /// <summary>Upload a secure file, include the file stream in the request body</summary>
    /// <param name="content">- Content to upload</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="name">- Name of the file to upload</param>
    /// <param name="authorizePipelines">- If authorizePipelines is true, then the secure file is authorized for use by all pipelines in the project.</param>
    abstract uploadSecureFile: content: obj option * project: string * name: string * ?authorizePipelines: bool -> Promise<TaskAgent.SecureFile>
    /// <param name="session">-</param>
    /// <param name="poolId">-</param>
    abstract createAgentSession: session: TaskAgent.TaskAgentSession * poolId: float -> Promise<TaskAgent.TaskAgentSession>
    /// <param name="poolId">-</param>
    /// <param name="sessionId">-</param>
    abstract deleteAgentSession: poolId: float * sessionId: string -> Promise<unit>
    /// <summary>Register a deployment target to a deployment group. Generally this is called by agent configuration tool.</summary>
    /// <param name="machine">- Deployment target to register.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group to which the deployment target is registered.</param>
    abstract addDeploymentTarget: machine: TaskAgent.DeploymentMachine * project: string * deploymentGroupId: float -> Promise<TaskAgent.DeploymentMachine>
    /// <summary>Delete a deployment target in a deployment group. This deletes the agent from associated deployment pool too.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group in which deployment target is deleted.</param>
    /// <param name="targetId">- ID of the deployment target to delete.</param>
    abstract deleteDeploymentTarget: project: string * deploymentGroupId: float * targetId: float -> Promise<unit>
    /// <summary>Get a deployment target by its ID in a deployment group</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group to which deployment target belongs.</param>
    /// <param name="targetId">- ID of the deployment target to return.</param>
    /// <param name="expand">- Include these additional details in the returned objects.</param>
    abstract getDeploymentTarget: project: string * deploymentGroupId: float * targetId: float * ?expand: TaskAgent.DeploymentTargetExpands -> Promise<TaskAgent.DeploymentMachine>
    /// <summary>Get a list of deployment targets in a deployment group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group.</param>
    /// <param name="tags">- Get only the deployment targets that contain all these comma separted list of tags.</param>
    /// <param name="name">- Name pattern of the deployment targets to return.</param>
    /// <param name="partialNameMatch">- When set to true, treats **name** as pattern. Else treats it as absolute match. Default is **false**.</param>
    /// <param name="expand">- Include these additional details in the returned objects.</param>
    /// <param name="agentStatus">- Get only deployment targets that have this status.</param>
    /// <param name="agentJobResult">- Get only deployment targets that have this last job result.</param>
    /// <param name="continuationToken">- Get deployment targets with names greater than this continuationToken lexicographically.</param>
    /// <param name="top">- Maximum number of deployment targets to return. Default is **1000**.</param>
    /// <param name="enabled">- Get only deployment targets that are enabled or disabled. Default is 'null' which returns all the targets.</param>
    /// <param name="propertyFilters">-</param>
    abstract getDeploymentTargets: project: string * deploymentGroupId: float * ?tags: ResizeArray<string> * ?name: string * ?partialNameMatch: bool * ?expand: TaskAgent.DeploymentTargetExpands * ?agentStatus: TaskAgent.TaskAgentStatusFilter * ?agentJobResult: TaskAgent.TaskAgentJobResultFilter * ?continuationToken: string * ?top: float * ?enabled: bool * ?propertyFilters: ResizeArray<string> -> Promise<ResizeArray<TaskAgent.DeploymentMachine>>
    /// <summary>Replace a deployment target in a deployment group. Generally this is called by agent configuration tool.</summary>
    /// <param name="machine">- New deployment target.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group in which deployment target is replaced.</param>
    /// <param name="targetId">- ID of the deployment target to replace.</param>
    abstract replaceDeploymentTarget: machine: TaskAgent.DeploymentMachine * project: string * deploymentGroupId: float * targetId: float -> Promise<TaskAgent.DeploymentMachine>
    /// <summary>Update a deployment target and its agent properties in a deployment group. Generally this is called by agent configuration tool.</summary>
    /// <param name="machine">- Deployment target to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group in which deployment target is updated.</param>
    /// <param name="targetId">- ID of the deployment target to update.</param>
    abstract updateDeploymentTarget: machine: TaskAgent.DeploymentMachine * project: string * deploymentGroupId: float * targetId: float -> Promise<TaskAgent.DeploymentMachine>
    /// <summary>Update tags of a list of deployment targets in a deployment group.</summary>
    /// <param name="machines">- Deployment targets with tags to udpdate.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deploymentGroupId">- ID of the deployment group in which deployment targets are updated.</param>
    abstract updateDeploymentTargets: machines: ResizeArray<TaskAgent.DeploymentTargetUpdateParameter> * project: string * deploymentGroupId: float -> Promise<ResizeArray<TaskAgent.DeploymentMachine>>
    /// <summary>Create a task group.</summary>
    /// <param name="taskGroup">- Task group object to create.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addTaskGroup: taskGroup: TaskAgent.TaskGroupCreateParameter * project: string -> Promise<TaskAgent.TaskGroup>
    /// <summary>Delete a task group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">- Id of the task group to be deleted.</param>
    /// <param name="comment">- Comments to delete.</param>
    abstract deleteTaskGroup: project: string * taskGroupId: string * ?comment: string -> Promise<unit>
    /// <summary>Get task group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">- Id of the task group.</param>
    /// <param name="versionSpec">- version specification of the task group. examples: 1, 1.0.</param>
    /// <param name="expand">- The properties that should be expanded. example $expand=Tasks will expand nested task groups.</param>
    abstract getTaskGroup: project: string * taskGroupId: string * versionSpec: string * ?expand: TaskAgent.TaskGroupExpands -> Promise<TaskAgent.TaskGroup>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">-</param>
    /// <param name="revision">-</param>
    abstract getTaskGroupRevision: project: string * taskGroupId: string * revision: float -> Promise<string>
    /// <summary>List task groups.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">- Id of the task group.</param>
    /// <param name="expanded">- 'true' to recursively expand task groups. Default is 'false'.</param>
    /// <param name="taskIdFilter">- Guid of the taskId to filter.</param>
    /// <param name="deleted">- 'true'to include deleted task groups. Default is 'false'.</param>
    /// <param name="top">- Number of task groups to get.</param>
    /// <param name="continuationToken">- Gets the task groups after the continuation token provided.</param>
    /// <param name="queryOrder">- Gets the results in the defined order. Default is 'CreatedOnDescending'.</param>
    abstract getTaskGroups: project: string * ?taskGroupId: string * ?expanded: bool * ?taskIdFilter: string * ?deleted: bool * ?top: float * ?continuationToken: DateTime * ?queryOrder: TaskAgent.TaskGroupQueryOrder -> Promise<ResizeArray<TaskAgent.TaskGroup>>
    /// <param name="taskGroupMetadata">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="parentTaskGroupId">-</param>
    abstract publishTaskGroup: taskGroupMetadata: TaskAgent.PublishTaskGroupMetadata * project: string * parentTaskGroupId: string -> Promise<ResizeArray<TaskAgent.TaskGroup>>
    /// <param name="taskGroup">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract undeleteTaskGroup: taskGroup: TaskAgent.TaskGroup * project: string -> Promise<ResizeArray<TaskAgent.TaskGroup>>
    /// <summary>Update a task group.</summary>
    /// <param name="taskGroup">- Task group to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">- Id of the task group to update.</param>
    abstract updateTaskGroup: taskGroup: TaskAgent.TaskGroupUpdateParameter * project: string * ?taskGroupId: string -> Promise<TaskAgent.TaskGroup>
    /// <param name="taskGroupUpdateProperties">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="taskGroupId">-</param>
    /// <param name="disablePriorVersions">-</param>
    abstract updateTaskGroupProperties: taskGroupUpdateProperties: TaskAgent.TaskGroupUpdatePropertiesBase * project: string * taskGroupId: string * ?disablePriorVersions: bool -> Promise<ResizeArray<TaskAgent.TaskGroup>>
    /// <param name="taskId">-</param>
    abstract deleteTaskDefinition: taskId: string -> Promise<unit>
    /// <param name="taskId">-</param>
    /// <param name="versionString">-</param>
    /// <param name="visibility">-</param>
    /// <param name="scopeLocal">-</param>
    abstract getTaskContentZip: taskId: string * versionString: string * ?visibility: ResizeArray<string> * ?scopeLocal: bool -> Promise<ArrayBuffer>
    /// <param name="taskId">-</param>
    /// <param name="versionString">-</param>
    /// <param name="visibility">-</param>
    /// <param name="scopeLocal">-</param>
    abstract getTaskDefinition: taskId: string * versionString: string * ?visibility: ResizeArray<string> * ?scopeLocal: bool -> Promise<TaskAgent.TaskDefinition>
    /// <param name="taskId">-</param>
    /// <param name="visibility">-</param>
    /// <param name="scopeLocal">-</param>
    abstract getTaskDefinitions: ?taskId: string * ?visibility: ResizeArray<string> * ?scopeLocal: bool -> Promise<ResizeArray<TaskAgent.TaskDefinition>>
    /// <param name="poolId">-</param>
    /// <param name="agentId">-</param>
    /// <param name="currentState">-</param>
    abstract updateAgentUpdateState: poolId: float * agentId: float * currentState: string -> Promise<TaskAgent.TaskAgent>
    /// <param name="userCapabilities">-</param>
    /// <param name="poolId">-</param>
    /// <param name="agentId">-</param>
    abstract updateAgentUserCapabilities: userCapabilities: TaskAgentRestClientUpdateAgentUserCapabilitiesUserCapabilities * poolId: float * agentId: float -> Promise<TaskAgent.TaskAgent>
    /// <summary>Add a variable group.</summary>
    /// <param name="variableGroupParameters">-</param>
    abstract addVariableGroup: variableGroupParameters: TaskAgent.VariableGroupParameters -> Promise<TaskAgent.VariableGroup>
    /// <summary>Delete a variable group</summary>
    /// <param name="groupId">- Id of the variable group.</param>
    /// <param name="projectIds">-</param>
    abstract deleteVariableGroup: groupId: float * projectIds: ResizeArray<string> -> Promise<unit>
    /// <summary>Add a variable group.</summary>
    /// <param name="variableGroupProjectReferences">-</param>
    /// <param name="variableGroupId">-</param>
    abstract shareVariableGroup: variableGroupProjectReferences: ResizeArray<TaskAgent.VariableGroupProjectReference> * variableGroupId: float -> Promise<unit>
    /// <summary>Update a variable group.</summary>
    /// <param name="variableGroupParameters">-</param>
    /// <param name="groupId">- Id of the variable group to update.</param>
    abstract updateVariableGroup: variableGroupParameters: TaskAgent.VariableGroupParameters * groupId: float -> Promise<TaskAgent.VariableGroup>
    /// <summary>Get a variable group.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="groupId">- Id of the variable group.</param>
    abstract getVariableGroup: project: string * groupId: float -> Promise<TaskAgent.VariableGroup>
    /// <summary>Get variable groups.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="groupName">- Name of variable group.</param>
    /// <param name="actionFilter">- Action filter for the variable group. It specifies the action which can be performed on the variable groups.</param>
    /// <param name="top">- Number of variable groups to get.</param>
    /// <param name="continuationToken">- Gets the variable groups after the continuation token provided.</param>
    /// <param name="queryOrder">- Gets the results in the defined order. Default is 'IdDescending'.</param>
    abstract getVariableGroups: project: string * ?groupName: string * ?actionFilter: TaskAgent.VariableGroupActionFilter * ?top: float * ?continuationToken: float * ?queryOrder: TaskAgent.VariableGroupQueryOrder -> Promise<ResizeArray<TaskAgent.VariableGroup>>
    /// <summary>Get variable groups by ids.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="groupIds">- Comma separated list of Ids of variable groups.</param>
    abstract getVariableGroupsById: project: string * groupIds: ResizeArray<float> -> Promise<ResizeArray<TaskAgent.VariableGroup>>
    /// <param name="createParameters">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    abstract addVirtualMachineGroup: createParameters: TaskAgent.VirtualMachineGroupCreateParameters * project: string * environmentId: float -> Promise<TaskAgent.VirtualMachineGroup>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="resourceId">-</param>
    abstract deleteVirtualMachineGroup: project: string * environmentId: float * resourceId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="resourceId">-</param>
    abstract getVirtualMachineGroup: project: string * environmentId: float * resourceId: float -> Promise<TaskAgent.VirtualMachineGroup>
    /// <param name="resource">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    abstract updateVirtualMachineGroup: resource: TaskAgent.VirtualMachineGroup * project: string * environmentId: float -> Promise<TaskAgent.VirtualMachineGroup>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="resourceId">-</param>
    /// <param name="continuationToken">-</param>
    /// <param name="name">-</param>
    /// <param name="partialNameMatch">-</param>
    /// <param name="tags">-</param>
    /// <param name="top">-</param>
    abstract getVirtualMachines: project: string * environmentId: float * resourceId: float * ?continuationToken: string * ?name: string * ?partialNameMatch: bool * ?tags: ResizeArray<string> * ?top: float -> Promise<ResizeArray<TaskAgent.VirtualMachine>>
    /// <param name="machines">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="environmentId">-</param>
    /// <param name="resourceId">-</param>
    abstract updateVirtualMachines: machines: ResizeArray<TaskAgent.VirtualMachine> * project: string * environmentId: float * resourceId: float -> Promise<ResizeArray<TaskAgent.VirtualMachine>>
    /// <param name="authenticationRequest">-</param>
    abstract acquireAccessToken: authenticationRequest: TaskAgent.AadOauthTokenRequest -> Promise<TaskAgent.AadOauthTokenResult>
    /// <param name="tenantId">-</param>
    /// <param name="redirectUri">-</param>
    /// <param name="promptOption">-</param>
    /// <param name="completeCallbackPayload">-</param>
    /// <param name="completeCallbackByAuthCode">-</param>
    abstract createAadOAuthRequest: tenantId: string * redirectUri: string * ?promptOption: TaskAgent.AadLoginPromptOption * ?completeCallbackPayload: string * ?completeCallbackByAuthCode: bool -> Promise<string>
    abstract getVstsAadTenantId: unit -> Promise<string>
    /// <summary>GET the Yaml schema used for Yaml file validation.</summary>
    /// <param name="validateTaskNames">- Whether the schema should validate that tasks are actually installed (useful for offline tools where you don't want validation).</param>
    abstract getYamlSchema: ?validateTaskNames: bool -> Promise<obj option>

type [<AllowNullLiteral>] TaskAgentRestClientUpdateAgentUserCapabilitiesUserCapabilities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] TaskAgentRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> TaskAgentRestClient
    abstract RESOURCE_AREA_ID: string
module SystemData = ___Common_SystemData
module TfsCore = ___Core_Core
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] AbortTestRunRequest =
    abstract options: float with get, set
    abstract projectName: string with get, set
    abstract revision: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] AfnStrip =
    /// Auxiliary Url to be consumed by MTM
    abstract auxiliaryUrl: string with get, set
    /// Creation date of the AfnStrip
    abstract creationDate: DateTime with get, set
    /// File name of the attachment created
    abstract fileName: string with get, set
    /// ID of AfnStrip. This is same as the attachment ID.
    abstract id: float with get, set
    /// Project identifier which contains AfnStrip
    abstract project: string with get, set
    /// Service in which this attachment is stored in
    abstract storedIn: string with get, set
    /// Afn strip stream.
    abstract stream: string with get, set
    /// ID of the testcase.
    abstract testCaseId: float with get, set
    /// Backing test result id.
    abstract testResultId: float with get, set
    /// Backing test run id.
    abstract testRunId: float with get, set
    /// Byte stream (uncompressed) length of Afn strip.
    abstract unCompressedStreamLength: float with get, set
    /// Url of the attachment created.
    abstract url: string with get, set

type [<AllowNullLiteral>] AggregatedDataForResultTrend =
    /// This is tests execution duration.
    abstract duration: obj option with get, set
    abstract resultsByOutcome: AggregatedDataForResultTrendResultsByOutcome with get, set
    abstract runSummaryByState: AggregatedDataForResultTrendRunSummaryByState with get, set
    abstract testResultsContext: TestResultsContext with get, set
    abstract totalTests: float with get, set

/// Result deatils for a particular test result outcome.
type [<AllowNullLiteral>] AggregatedResultDetailsByOutcome =
    /// Number of results for current outcome.
    abstract count: float with get, set
    /// Time taken by results.
    abstract duration: obj option with get, set
    /// Test result outcome
    abstract outcome: TestOutcome with get, set
    /// Number of results on rerun
    abstract rerunResultCount: float with get, set

type [<AllowNullLiteral>] AggregatedResultsAnalysis =
    abstract duration: obj option with get, set
    abstract notReportedResultsByOutcome: AggregatedDataForResultTrendResultsByOutcome with get, set
    abstract previousContext: TestResultsContext with get, set
    abstract resultsByOutcome: AggregatedDataForResultTrendResultsByOutcome with get, set
    abstract resultsDifference: AggregatedResultsDifference with get, set
    abstract runSummaryByOutcome: AggregatedResultsAnalysisRunSummaryByOutcome with get, set
    abstract runSummaryByState: AggregatedDataForResultTrendRunSummaryByState with get, set
    abstract totalTests: float with get, set

type [<AllowNullLiteral>] AggregatedResultsByOutcome =
    abstract count: float with get, set
    abstract duration: obj option with get, set
    abstract groupByField: string with get, set
    abstract groupByValue: obj option with get, set
    abstract outcome: TestOutcome with get, set
    abstract rerunResultCount: float with get, set

type [<AllowNullLiteral>] AggregatedResultsDifference =
    abstract increaseInDuration: obj option with get, set
    abstract increaseInFailures: float with get, set
    abstract increaseInNonImpactedTests: float with get, set
    abstract increaseInOtherTests: float with get, set
    abstract increaseInPassedTests: float with get, set
    abstract increaseInTotalTests: float with get, set

type [<AllowNullLiteral>] AggregatedRunsByOutcome =
    abstract outcome: TestRunOutcome with get, set
    abstract runsCount: float with get, set

type [<AllowNullLiteral>] AggregatedRunsByState =
    abstract resultsByOutcome: AggregatedDataForResultTrendResultsByOutcome with get, set
    abstract runsCount: float with get, set
    abstract state: TestRunState with get, set

type [<RequireQualifiedAccess>] AttachmentType =
    | GeneralAttachment = 0
    | AfnStrip = 1
    | BugFilingData = 2
    | CodeCoverage = 3
    | IntermediateCollectorData = 4
    | RunConfig = 5
    | TestImpactDetails = 6
    | TmiTestRunDeploymentFiles = 7
    | TmiTestRunReverseDeploymentFiles = 8
    | TmiTestResultDetail = 9
    | TmiTestRunSummary = 10
    | ConsoleLog = 11

type [<AllowNullLiteral>] BatchResponse =
    abstract error: string with get, set
    abstract responses: ResizeArray<Response> with get, set
    abstract status: string with get, set

/// BuildConfiguration Details.
type [<AllowNullLiteral>] BuildConfiguration =
    /// Branch name for which build is generated.
    abstract branchName: string with get, set
    /// BuildDefinitionId for build.
    abstract buildDefinitionId: float with get, set
    /// Build system.
    abstract buildSystem: string with get, set
    /// Build Creation Date.
    abstract creationDate: DateTime with get, set
    /// Build flavor (eg Build/Release).
    abstract flavor: string with get, set
    /// BuildConfiguration Id.
    abstract id: float with get, set
    /// Build Number.
    abstract number: string with get, set
    /// BuildConfiguration Platform.
    abstract platform: string with get, set
    /// Project associated with this BuildConfiguration.
    abstract project: ShallowReference with get, set
    /// Repository Guid for the Build.
    abstract repositoryGuid: string with get, set
    /// Repository Id.
    abstract repositoryId: float with get, set
    /// Repository Type (eg. TFSGit).
    abstract repositoryType: string with get, set
    /// Source Version(/first commit) for the build was triggered.
    abstract sourceVersion: string with get, set
    /// Target BranchName.
    abstract targetBranchName: string with get, set
    /// Build Uri.
    abstract uri: string with get, set

/// Build Coverage Detail
type [<AllowNullLiteral>] BuildCoverage =
    /// Code Coverage File Url
    abstract codeCoverageFileUrl: string with get, set
    /// Build Configuration
    abstract configuration: BuildConfiguration with get, set
    /// Last Error
    abstract lastError: string with get, set
    /// List of Modules
    abstract modules: ResizeArray<ModuleCoverage> with get, set
    /// State
    abstract state: string with get, set

/// Reference to a build.
type [<AllowNullLiteral>] BuildReference =
    /// Branch name.
    abstract branchName: string with get, set
    /// Build system.
    abstract buildSystem: string with get, set
    /// Build Definition ID.
    abstract definitionId: float with get, set
    /// Build ID.
    abstract id: float with get, set
    /// Build Number.
    abstract number: string with get, set
    /// Repository ID.
    abstract repositoryId: string with get, set
    /// Build URI.
    abstract uri: string with get, set

type [<AllowNullLiteral>] BuildReference2 =
    abstract branchName: string with get, set
    abstract buildConfigurationId: float with get, set
    abstract buildDefinitionId: float with get, set
    abstract buildDeleted: bool with get, set
    abstract buildFlavor: string with get, set
    abstract buildId: float with get, set
    abstract buildNumber: string with get, set
    abstract buildPlatform: string with get, set
    abstract buildSystem: string with get, set
    abstract buildUri: string with get, set
    abstract coverageId: float with get, set
    abstract createdDate: DateTime with get, set
    abstract projectId: string with get, set
    abstract repoId: string with get, set
    abstract repoType: string with get, set
    abstract sourceVersion: string with get, set

type [<AllowNullLiteral>] BulkResultUpdateRequest =
    abstract projectName: string with get, set
    abstract requests: ResizeArray<ResultUpdateRequest> with get, set

/// Detail About Clone Operation.
type [<AllowNullLiteral>] CloneOperationInformation =
    /// Clone Statistics
    abstract cloneStatistics: CloneStatistics with get, set
    /// If the operation is complete, the DateTime of completion. If operation is not complete, this is DateTime.MaxValue
    abstract completionDate: DateTime with get, set
    /// DateTime when the operation was started
    abstract creationDate: DateTime with get, set
    /// Shallow reference of the destination
    abstract destinationObject: ShallowReference with get, set
    /// Shallow reference of the destination
    abstract destinationPlan: ShallowReference with get, set
    /// Shallow reference of the destination
    abstract destinationProject: ShallowReference with get, set
    /// If the operation has Failed, Message contains the reason for failure. Null otherwise.
    abstract message: string with get, set
    /// The ID of the operation
    abstract opId: float with get, set
    /// The type of the object generated as a result of the Clone operation
    abstract resultObjectType: ResultObjectType with get, set
    /// Shallow reference of the source
    abstract sourceObject: ShallowReference with get, set
    /// Shallow reference of the source
    abstract sourcePlan: ShallowReference with get, set
    /// Shallow reference of the source
    abstract sourceProject: ShallowReference with get, set
    /// Current state of the operation. When State reaches Suceeded or Failed, the operation is complete
    abstract state: CloneOperationState with get, set
    /// Url for getting the clone information
    abstract url: string with get, set

type [<RequireQualifiedAccess>] CloneOperationState =
    | Failed = 2
    | InProgress = 1
    | Queued = 0
    | Succeeded = 3

/// Clone options for cloning the test suite.
type [<AllowNullLiteral>] CloneOptions =
    /// If set to true requirements will be cloned
    abstract cloneRequirements: bool with get, set
    /// copy all suites from a source plan
    abstract copyAllSuites: bool with get, set
    /// copy ancestor hierarchy
    abstract copyAncestorHierarchy: bool with get, set
    /// Name of the workitem type of the clone
    abstract destinationWorkItemType: string with get, set
    /// Key value pairs where the key value is overridden by the value.
    abstract overrideParameters: CloneOptionsOverrideParameters with get, set
    /// Comment on the link that will link the new clone  test case to the original Set null for no comment
    abstract relatedLinkComment: string with get, set

/// Clone Statistics Details.
type [<AllowNullLiteral>] CloneStatistics =
    /// Number of requirements cloned so far.
    abstract clonedRequirementsCount: float with get, set
    /// Number of shared steps cloned so far.
    abstract clonedSharedStepsCount: float with get, set
    /// Number of test cases cloned so far
    abstract clonedTestCasesCount: float with get, set
    /// Total number of requirements to be cloned
    abstract totalRequirementsCount: float with get, set
    /// Total number of test cases to be cloned
    abstract totalTestCasesCount: float with get, set

/// Represents the build configuration (platform, flavor) and coverage data for the build
type [<AllowNullLiteral>] CodeCoverageData =
    /// Flavor of build for which data is retrieved/published
    abstract buildFlavor: string with get, set
    /// Platform of build for which data is retrieved/published
    abstract buildPlatform: string with get, set
    /// List of coverage data for the build
    abstract coverageStats: ResizeArray<CodeCoverageStatistics> with get, set

/// Represents the code coverage statistics for a particular coverage label (modules, statements, blocks, etc.)
type [<AllowNullLiteral>] CodeCoverageStatistics =
    /// Covered units
    abstract covered: float with get, set
    /// Delta of coverage
    abstract delta: float with get, set
    /// Is delta valid
    abstract isDeltaAvailable: bool with get, set
    /// Label of coverage data ("Blocks", "Statements", "Modules", etc.)
    abstract label: string with get, set
    /// Position of label
    abstract position: float with get, set
    /// Total units
    abstract total: float with get, set

/// Represents the code coverage summary results Used to publish or retrieve code coverage summary against a build
type [<AllowNullLiteral>] CodeCoverageSummary =
    /// Uri of build for which data is retrieved/published
    abstract build: ShallowReference with get, set
    /// List of coverage data and details for the build
    abstract coverageData: ResizeArray<CodeCoverageData> with get, set
    /// Uri of build against which difference in coverage is computed
    abstract deltaBuild: ShallowReference with get, set
    /// Uri of build against which difference in coverage is computed
    abstract status: CoverageSummaryStatus with get, set

type [<AllowNullLiteral>] CodeCoverageSummary2 =
    abstract buildConfigurationId: float with get, set
    abstract covered: float with get, set
    abstract label: string with get, set
    abstract position: float with get, set
    abstract projectId: string with get, set
    abstract total: float with get, set

type [<AllowNullLiteral>] Coverage2 =
    abstract coverageId: float with get, set
    abstract dateCreated: DateTime with get, set
    abstract dateModified: DateTime with get, set
    abstract lastError: string with get, set
    abstract state: float with get, set

type [<RequireQualifiedAccess>] CoverageQueryFlags =
    | Modules = 1
    | Functions = 2
    | BlockData = 4

type [<AllowNullLiteral>] CoverageStatistics =
    abstract blocksCovered: float with get, set
    abstract blocksNotCovered: float with get, set
    abstract linesCovered: float with get, set
    abstract linesNotCovered: float with get, set
    abstract linesPartiallyCovered: float with get, set

type [<RequireQualifiedAccess>] CoverageStatus =
    | Covered = 0
    | NotCovered = 1
    | PartiallyCovered = 2

type [<RequireQualifiedAccess>] CoverageSummaryStatus =
    | None = 0
    | InProgress = 1
    | Completed = 2
    | Finalized = 3
    | Pending = 4

type [<AllowNullLiteral>] CreateTestMessageLogEntryRequest =
    abstract projectName: string with get, set
    abstract testMessageLogEntry: ResizeArray<TestMessageLogEntry> with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] CreateTestResultsRequest =
    abstract projectName: string with get, set
    abstract results: ResizeArray<LegacyTestCaseResult> with get, set

type [<AllowNullLiteral>] CreateTestRunRequest =
    abstract projectName: string with get, set
    abstract results: ResizeArray<LegacyTestCaseResult> with get, set
    abstract testRun: LegacyTestRun with get, set
    abstract testSettings: LegacyTestSettings with get, set

/// A custom field information. Allowed Key : Value pairs - ( AttemptId: int value, IsTestResultFlaky: bool)
type [<AllowNullLiteral>] CustomTestField =
    /// Field Name.
    abstract fieldName: string with get, set
    /// Field value.
    abstract value: obj option with get, set

type [<AllowNullLiteral>] CustomTestFieldDefinition =
    abstract fieldId: float with get, set
    abstract fieldName: string with get, set
    abstract fieldType: CustomTestFieldType with get, set
    abstract scope: CustomTestFieldScope with get, set

type [<RequireQualifiedAccess>] CustomTestFieldScope =
    | None = 0
    | TestRun = 1
    | TestResult = 2
    | System = 4
    | All = 7

type [<RequireQualifiedAccess>] CustomTestFieldType =
    | Bit = 2
    | DateTime = 4
    | Int = 8
    | Float = 6
    | String = 12
    | Guid = 14

type [<AllowNullLiteral>] DatedTestFieldData =
    abstract date: DateTime with get, set
    abstract value: TestFieldData with get, set

type [<AllowNullLiteral>] DefaultAfnStripBinding =
    abstract testCaseId: float with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] DeleteTestRunRequest =
    abstract projectName: string with get, set
    abstract testRunIds: ResizeArray<float> with get, set

type [<AllowNullLiteral>] DownloadAttachmentsRequest =
    abstract ids: ResizeArray<float> with get, set
    abstract lengths: ResizeArray<float> with get, set

/// This is a temporary class to provide the details for the test run environment.
type [<AllowNullLiteral>] DtlEnvironmentDetails =
    abstract csmContent: string with get, set
    abstract csmParameters: string with get, set
    abstract subscriptionName: string with get, set

/// Failing since information of a test result.
type [<AllowNullLiteral>] FailingSince =
    /// Build reference since failing.
    abstract build: BuildReference with get, set
    /// Time since failing.
    abstract date: DateTime with get, set
    /// Release reference since failing.
    abstract release: ReleaseReference with get, set

type [<AllowNullLiteral>] FetchTestResultsRequest =
    abstract idAndRevs: ResizeArray<TestCaseResultIdAndRev> with get, set
    abstract includeActionResults: bool with get, set
    abstract projectName: string with get, set

type [<AllowNullLiteral>] FetchTestResultsResponse =
    abstract actionResults: ResizeArray<TestActionResult> with get, set
    abstract attachments: ResizeArray<TestResultAttachment> with get, set
    abstract deletedIds: ResizeArray<LegacyTestCaseResultIdentifier> with get, set
    abstract results: ResizeArray<LegacyTestCaseResult> with get, set
    abstract testParameters: ResizeArray<TestResultParameter> with get, set

type [<AllowNullLiteral>] FieldDetailsForTestResults =
    /// Group by field name
    abstract fieldName: string with get, set
    /// Group by field values
    abstract groupsForField: ResizeArray<obj option> with get, set

type [<AllowNullLiteral>] FileCoverage =
    /// List of line blocks along with their coverage status
    abstract lineBlocksCoverage: ResizeArray<LineBlockCoverage> with get, set
    /// File path for which coverage information is sought for
    abstract path: string with get, set

type [<AllowNullLiteral>] FileCoverageRequest =
    abstract filePath: string with get, set
    abstract pullRequestBaseIterationId: float with get, set
    abstract pullRequestId: float with get, set
    abstract pullRequestIterationId: float with get, set
    abstract repoId: string with get, set

type [<AllowNullLiteral>] FilterPointQuery =
    abstract planId: float with get, set
    abstract pointIds: ResizeArray<float> with get, set
    abstract pointOutcome: ResizeArray<float> with get, set
    abstract resultState: ResizeArray<float> with get, set

type [<AllowNullLiteral>] FlakyDetection =
    /// FlakyDetectionPipelines defines Pipelines for Detection.
    abstract flakyDetectionPipelines: FlakyDetectionPipelines with get, set
    /// FlakyDetectionType defines Detection type i.e. 1. System or 2. Manual.
    abstract flakyDetectionType: FlakyDetectionType with get, set

type [<AllowNullLiteral>] FlakyDetectionPipelines =
    /// AllowedPipelines - List All Pipelines allowed for detection.
    abstract allowedPipelines: ResizeArray<float> with get, set
    /// IsAllPipelinesAllowed if users configure all system's pipelines.
    abstract isAllPipelinesAllowed: bool with get, set

type [<RequireQualifiedAccess>] FlakyDetectionType =
    | Custom = 1
    | System = 2

type [<AllowNullLiteral>] FlakySettings =
    /// FlakyDetection defines types of detection.
    abstract flakyDetection: FlakyDetection with get, set
    /// FlakyInSummaryReport defines flaky data should show in summary report or not.
    abstract flakyInSummaryReport: bool with get, set
    /// IsFlakyBugCreated defines if there is any bug that has been created with flaky testresult.
    abstract isFlakyBugCreated: bool with get, set
    /// ManualMarkUnmarkFlaky defines manual marking unmarking of flaky testcase.
    abstract manualMarkUnmarkFlaky: bool with get, set

type [<AllowNullLiteral>] FunctionCoverage =
    abstract ``class``: string with get, set
    abstract name: string with get, set
    abstract ``namespace``: string with get, set
    abstract sourceFile: string with get, set
    abstract statistics: CoverageStatistics with get, set

type [<AllowNullLiteral>] FunctionCoverage2 =
    abstract blocksCovered: float with get, set
    abstract blocksNotCovered: float with get, set
    abstract ``class``: string with get, set
    abstract coverageId: float with get, set
    abstract functionId: float with get, set
    abstract linesCovered: float with get, set
    abstract linesNotCovered: float with get, set
    abstract linesPartiallyCovered: float with get, set
    abstract moduleId: float with get, set
    abstract name: string with get, set
    abstract ``namespace``: string with get, set
    abstract sourceFile: string with get, set

type [<AllowNullLiteral>] HttpPostedTcmAttachment =
    abstract attachmentContent: string with get, set
    abstract contentLength: float with get, set
    abstract contentType: string with get, set
    abstract fileName: string with get, set

/// Job in pipeline. This is related to matrixing in YAML.
type [<AllowNullLiteral>] JobReference =
    /// Attempt number of the job
    abstract attempt: float with get, set
    /// Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.
    abstract jobName: string with get, set

/// Last result details of test point.
type [<AllowNullLiteral>] LastResultDetails =
    /// CompletedDate of LastResult.
    abstract dateCompleted: DateTime with get, set
    /// Duration of LastResult.
    abstract duration: float with get, set
    /// RunBy.
    abstract runBy: WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] LegacyBuildConfiguration =
    abstract branchName: string with get, set
    abstract buildConfigurationId: float with get, set
    abstract buildDefinitionId: float with get, set
    abstract buildDefinitionName: string with get, set
    abstract buildFlavor: string with get, set
    abstract buildId: float with get, set
    abstract buildNumber: string with get, set
    abstract buildPlatform: string with get, set
    abstract buildQuality: string with get, set
    abstract buildSystem: string with get, set
    abstract buildUri: string with get, set
    abstract completedDate: DateTime with get, set
    abstract createdDate: DateTime with get, set
    abstract oldBuildConfigurationId: float with get, set
    abstract repositoryId: string with get, set
    abstract repositoryType: string with get, set
    abstract sourceVersion: string with get, set
    abstract teamProjectName: string with get, set

type [<AllowNullLiteral>] LegacyReleaseReference =
    abstract attempt: float with get, set
    abstract environmentCreationDate: DateTime with get, set
    abstract primaryArtifactBuildId: float with get, set
    abstract primaryArtifactProjectId: string with get, set
    abstract primaryArtifactType: string with get, set
    abstract releaseCreationDate: DateTime with get, set
    abstract releaseDefId: float with get, set
    abstract releaseEnvDefId: float with get, set
    abstract releaseEnvId: float with get, set
    abstract releaseEnvName: string with get, set
    abstract releaseEnvUri: string with get, set
    abstract releaseId: float with get, set
    abstract releaseName: string with get, set
    abstract releaseRefId: float with get, set
    abstract releaseUri: string with get, set

type [<AllowNullLiteral>] LegacyTestCaseResult =
    abstract afnStripId: float with get, set
    abstract areaId: float with get, set
    abstract areaUri: string with get, set
    abstract automatedTestId: string with get, set
    abstract automatedTestName: string with get, set
    abstract automatedTestStorage: string with get, set
    abstract automatedTestType: string with get, set
    abstract automatedTestTypeId: string with get, set
    abstract buildNumber: string with get, set
    abstract buildReference: LegacyBuildConfiguration with get, set
    abstract comment: string with get, set
    abstract computerName: string with get, set
    abstract configurationId: float with get, set
    abstract configurationName: string with get, set
    abstract creationDate: DateTime with get, set
    abstract customFields: ResizeArray<TestExtensionField> with get, set
    abstract dateCompleted: DateTime with get, set
    abstract dateStarted: DateTime with get, set
    abstract duration: float with get, set
    abstract errorMessage: string with get, set
    abstract failingSince: FailingSince with get, set
    abstract failureType: float with get, set
    abstract id: LegacyTestCaseResultIdentifier with get, set
    abstract isRerun: bool with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract lastUpdatedByName: string with get, set
    abstract outcome: float with get, set
    abstract owner: string with get, set
    abstract ownerName: string with get, set
    abstract priority: float with get, set
    abstract releaseReference: LegacyReleaseReference with get, set
    abstract resetCount: float with get, set
    abstract resolutionStateId: float with get, set
    abstract resultGroupType: ResultGroupType with get, set
    abstract revision: float with get, set
    abstract runBy: string with get, set
    abstract runByName: string with get, set
    abstract sequenceId: float with get, set
    abstract stackTrace: TestExtensionField with get, set
    abstract state: float with get, set
    abstract subResultCount: float with get, set
    abstract suiteName: string with get, set
    abstract testCaseArea: string with get, set
    abstract testCaseAreaUri: string with get, set
    abstract testCaseId: float with get, set
    abstract testCaseReferenceId: float with get, set
    abstract testCaseRevision: float with get, set
    abstract testCaseTitle: string with get, set
    abstract testPlanId: float with get, set
    abstract testPointId: float with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set
    abstract testRunTitle: string with get, set
    abstract testSuiteId: float with get, set

type [<AllowNullLiteral>] LegacyTestCaseResultIdentifier =
    abstract areaUri: string with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] LegacyTestRun =
    abstract bugsCount: float with get, set
    abstract buildConfigurationId: float with get, set
    abstract buildFlavor: string with get, set
    abstract buildNumber: string with get, set
    abstract buildPlatform: string with get, set
    abstract buildReference: LegacyBuildConfiguration with get, set
    abstract buildUri: string with get, set
    abstract comment: string with get, set
    abstract completeDate: DateTime with get, set
    abstract configurationIds: ResizeArray<float> with get, set
    abstract controller: string with get, set
    abstract creationDate: DateTime with get, set
    abstract csmContent: string with get, set
    abstract csmParameters: string with get, set
    abstract customFields: ResizeArray<TestExtensionField> with get, set
    abstract dropLocation: string with get, set
    abstract dtlAutEnvironment: ShallowReference with get, set
    abstract dtlTestEnvironment: ShallowReference with get, set
    abstract dueDate: DateTime with get, set
    abstract errorMessage: string with get, set
    abstract filter: RunFilter with get, set
    abstract incompleteTests: float with get, set
    abstract isAutomated: bool with get, set
    abstract isBvt: bool with get, set
    abstract iteration: string with get, set
    abstract iterationId: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract lastUpdatedByName: string with get, set
    abstract legacySharePath: string with get, set
    abstract notApplicableTests: float with get, set
    abstract owner: string with get, set
    abstract ownerName: string with get, set
    abstract passedTests: float with get, set
    abstract postProcessState: float with get, set
    abstract publicTestSettingsId: float with get, set
    abstract releaseEnvironmentUri: string with get, set
    abstract releaseReference: LegacyReleaseReference with get, set
    abstract releaseUri: string with get, set
    abstract revision: float with get, set
    abstract rowVersion: ResizeArray<float> with get, set
    abstract runHasDtlEnvironment: bool with get, set
    abstract runTimeout: obj option with get, set
    abstract serviceVersion: string with get, set
    abstract sourceWorkflow: string with get, set
    abstract startDate: DateTime with get, set
    abstract state: float with get, set
    abstract subscriptionName: string with get, set
    abstract substate: float with get, set
    abstract teamProject: string with get, set
    abstract teamProjectUri: string with get, set
    abstract testConfigurationsMapping: string with get, set
    abstract testEnvironmentId: string with get, set
    abstract testMessageLogEntries: ResizeArray<TestMessageLogDetails> with get, set
    abstract testMessageLogId: float with get, set
    abstract testPlanId: float with get, set
    abstract testRunId: float with get, set
    abstract testRunStatistics: ResizeArray<LegacyTestRunStatistic> with get, set
    abstract testSettingsId: float with get, set
    abstract title: string with get, set
    abstract totalTests: float with get, set
    abstract ``type``: float with get, set
    abstract unanalyzedTests: float with get, set
    abstract version: float with get, set

type [<AllowNullLiteral>] LegacyTestRunStatistic =
    abstract count: float with get, set
    abstract outcome: float with get, set
    abstract resolutionState: TestResolutionState with get, set
    abstract state: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] LegacyTestSettings =
    abstract areaId: float with get, set
    abstract areaPath: string with get, set
    abstract createdBy: string with get, set
    abstract createdByName: string with get, set
    abstract createdDate: DateTime with get, set
    abstract description: string with get, set
    abstract id: float with get, set
    abstract isAutomated: bool with get, set
    abstract isPublic: bool with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract lastUpdatedByName: string with get, set
    abstract machineRoles: ResizeArray<TestSettingsMachineRole> with get, set
    abstract name: string with get, set
    abstract revision: float with get, set
    abstract settings: string with get, set
    abstract teamProjectUri: string with get, set

type [<AllowNullLiteral>] LineBlockCoverage =
    /// End of line block
    abstract ``end``: float with get, set
    /// Start of line block
    abstract start: float with get, set
    /// Coverage status. Covered: 0, NotCovered: 1,  PartiallyCovered: 2
    abstract status: float with get, set

type [<AllowNullLiteral>] LinkedWorkItemsQuery =
    abstract automatedTestNames: ResizeArray<string> with get, set
    abstract planId: float with get, set
    abstract pointIds: ResizeArray<float> with get, set
    abstract suiteIds: ResizeArray<float> with get, set
    abstract testCaseIds: ResizeArray<float> with get, set
    abstract workItemCategory: string with get, set

type [<AllowNullLiteral>] LinkedWorkItemsQueryResult =
    abstract automatedTestName: string with get, set
    abstract planId: float with get, set
    abstract pointId: float with get, set
    abstract suiteId: float with get, set
    abstract testCaseId: float with get, set
    abstract workItems: ResizeArray<WorkItemReference> with get, set

type [<RequireQualifiedAccess>] Metrics =
    | All = 1
    | ResultSummary = 2
    | ResultsAnalysis = 3
    | RunSummary = 4

type [<AllowNullLiteral>] ModuleCoverage =
    abstract blockCount: float with get, set
    abstract blockData: ResizeArray<float> with get, set
    /// Code Coverage File Url
    abstract fileUrl: string with get, set
    abstract functions: ResizeArray<FunctionCoverage> with get, set
    abstract name: string with get, set
    abstract signature: string with get, set
    abstract signatureAge: float with get, set
    abstract statistics: CoverageStatistics with get, set

type [<AllowNullLiteral>] ModuleCoverage2 =
    abstract blockCount: float with get, set
    abstract blockData: ResizeArray<float> with get, set
    abstract blockDataLength: float with get, set
    abstract blocksCovered: float with get, set
    abstract blocksNotCovered: float with get, set
    abstract coverageFileUrl: string with get, set
    abstract coverageId: float with get, set
    abstract linesCovered: float with get, set
    abstract linesNotCovered: float with get, set
    abstract linesPartiallyCovered: float with get, set
    abstract moduleId: float with get, set
    abstract name: string with get, set
    abstract signature: string with get, set
    abstract signatureAge: float with get, set

/// Name value pair
type [<AllowNullLiteral>] NameValuePair =
    /// Name
    abstract name: string with get, set
    /// Value
    abstract value: string with get, set

type [<RequireQualifiedAccess>] OperationType =
    | Add = 1
    | Delete = 2

/// Phase in pipeline
type [<AllowNullLiteral>] PhaseReference =
    /// Attempt number of the phase
    abstract attempt: float with get, set
    /// Name of the phase. Maximum supported length for name is 256 character.
    abstract phaseName: string with get, set

/// Pipeline reference
type [<AllowNullLiteral>] PipelineReference =
    /// Reference of the job
    abstract jobReference: JobReference with get, set
    /// Reference of the phase.
    abstract phaseReference: PhaseReference with get, set
    /// Reference of the pipeline with which this pipeline instance is related.
    abstract pipelineId: float with get, set
    /// Reference of the stage.
    abstract stageReference: StageReference with get, set

/// Test summary of a pipeline instance.
type [<AllowNullLiteral>] PipelineTestMetrics =
    /// Reference of Pipeline instance for which test summary is calculated.
    abstract currentContext: PipelineReference with get, set
    /// This is the return value for metric ResultsAnalysis Results insights which include failure analysis, increase/decrease in results count analysis.
    abstract resultsAnalysis: ResultsAnalysis with get, set
    /// This is the return value for metric ResultSummary Results summary based on results outcome.
    abstract resultSummary: ResultSummary with get, set
    /// This is the return value for metric RunSummary Run summary.
    abstract runSummary: RunSummary with get, set
    /// Summary at child node.
    abstract summaryAtChild: ResizeArray<PipelineTestMetrics> with get, set

/// A model class used for creating and updating test plans.
type [<AllowNullLiteral>] PlanUpdateModel =
    /// Area path to which the test plan belongs. This should be set to area path of the team that works on this test plan.
    abstract area: ShallowReference with get, set
    abstract automatedTestEnvironment: TestEnvironment with get, set
    abstract automatedTestSettings: TestSettings with get, set
    /// Build ID of the build whose quality is tested by the tests in this test plan. For automated testing, this build ID is used to find the test binaries that contain automated test methods.
    abstract build: ShallowReference with get, set
    /// The Build Definition that generates a build associated with this test plan.
    abstract buildDefinition: ShallowReference with get, set
    /// IDs of configurations to be applied when new test suites and test cases are added to the test plan.
    abstract configurationIds: ResizeArray<float> with get, set
    /// Description of the test plan.
    abstract description: string with get, set
    /// End date for the test plan.
    abstract endDate: string with get, set
    /// Iteration path assigned to the test plan. This indicates when the target iteration by which the testing in this plan is supposed to be complete and the product is ready to be released.
    abstract iteration: string with get, set
    abstract manualTestEnvironment: TestEnvironment with get, set
    abstract manualTestSettings: TestSettings with get, set
    /// Name of the test plan.
    abstract name: string with get, set
    /// Owner of the test plan.
    abstract owner: WebApi.IdentityRef with get, set
    /// Release Environment to be used to deploy the build and run automated tests from this test plan.
    abstract releaseEnvironmentDefinition: ReleaseEnvironmentDefinitionReference with get, set
    /// Start date for the test plan.
    abstract startDate: string with get, set
    /// State of the test plan.
    abstract state: string with get, set
    abstract status: string with get, set
    /// Test Outcome settings
    abstract testOutcomeSettings: TestOutcomeSettings with get, set

/// Adding test cases to a suite creates one of more test points based on the default configurations and testers assigned to the test suite. PointAssignment is the list of test points that were created for each of the test cases that were added to the test suite.
type [<AllowNullLiteral>] PointAssignment =
    /// Configuration that was assigned to the test case.
    abstract configuration: ShallowReference with get, set
    /// Tester that was assigned to the test case
    abstract tester: WebApi.IdentityRef with get, set

type [<AllowNullLiteral>] PointLastResult =
    abstract lastUpdatedDate: DateTime with get, set
    abstract pointId: float with get, set

/// Filter class for test point.
type [<AllowNullLiteral>] PointsFilter =
    /// List of Configurations for filtering.
    abstract configurationNames: ResizeArray<string> with get, set
    /// List of test case id for filtering.
    abstract testcaseIds: ResizeArray<float> with get, set
    /// List of tester for filtering.
    abstract testers: ResizeArray<WebApi.IdentityRef> with get, set

type [<AllowNullLiteral>] PointsReference2 =
    abstract planId: float with get, set
    abstract pointId: float with get, set

type [<AllowNullLiteral>] PointsResults2 =
    abstract changeNumber: float with get, set
    abstract lastFailureType: float with get, set
    abstract lastResolutionStateId: float with get, set
    abstract lastResultOutcome: float with get, set
    abstract lastResultState: float with get, set
    abstract lastTestResultId: float with get, set
    abstract lastTestRunId: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract planId: float with get, set
    abstract pointId: float with get, set

/// Model to update test point.
type [<AllowNullLiteral>] PointUpdateModel =
    /// Outcome to update.
    abstract outcome: string with get, set
    /// Reset test point to active.
    abstract resetToActive: bool with get, set
    /// Tester to update. Type IdentityRef.
    abstract tester: WebApi.IdentityRef with get, set

/// Test point workitem property.
type [<AllowNullLiteral>] PointWorkItemProperty =
    /// key value pair of test point work item property.
    abstract workItem: PointWorkItemPropertyWorkItem with get, set

/// The class to represent a Generic store for test session data.
type [<AllowNullLiteral>] PropertyBag =
    /// Generic store for test session data
    abstract bag: CloneOptionsOverrideParameters with get, set

type [<AllowNullLiteral>] QueryByPointRequest =
    abstract projectName: string with get, set
    abstract testPlanId: float with get, set
    abstract testPointId: float with get, set

type [<AllowNullLiteral>] QueryByRunRequest =
    abstract includeActionResults: bool with get, set
    abstract outcome: float with get, set
    abstract owner: string with get, set
    abstract pageSize: float with get, set
    abstract projectName: string with get, set
    abstract state: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] QueryModel =
    abstract query: string with get, set

type [<AllowNullLiteral>] QueryTestActionResultRequest =
    abstract identifier: LegacyTestCaseResultIdentifier with get, set
    abstract projectName: string with get, set

type [<AllowNullLiteral>] QueryTestActionResultResponse =
    abstract testActionResults: ResizeArray<TestActionResult> with get, set
    abstract testAttachments: ResizeArray<TestResultAttachment> with get, set
    abstract testResultParameters: ResizeArray<TestResultParameter> with get, set

type [<AllowNullLiteral>] QueryTestMessageLogEntryRequest =
    abstract projectName: string with get, set
    abstract testMessageLogId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] QueryTestRuns2Request =
    abstract includeStatistics: bool with get, set
    abstract query: ResultsStoreQuery with get, set

type [<AllowNullLiteral>] QueryTestRunsRequest =
    abstract buildUri: string with get, set
    abstract owner: string with get, set
    abstract planId: float with get, set
    abstract skip: float with get, set
    abstract teamProjectName: string with get, set
    abstract testRunId: float with get, set
    abstract top: float with get, set

type [<AllowNullLiteral>] QueryTestRunStatsRequest =
    abstract teamProjectName: string with get, set
    abstract testRunId: float with get, set

/// Reference to release environment resource.
type [<AllowNullLiteral>] ReleaseEnvironmentDefinitionReference =
    /// ID of the release definition that contains the release environment definition.
    abstract definitionId: float with get, set
    /// ID of the release environment definition.
    abstract environmentDefinitionId: float with get, set

/// Reference to a release.
type [<AllowNullLiteral>] ReleaseReference =
    /// Number of Release Attempt.
    abstract attempt: float with get, set
    /// Release Creation Date.
    abstract creationDate: DateTime with get, set
    /// Release definition ID.
    abstract definitionId: float with get, set
    /// Environment creation Date.
    abstract environmentCreationDate: DateTime with get, set
    /// Release environment definition ID.
    abstract environmentDefinitionId: float with get, set
    /// Release environment definition name.
    abstract environmentDefinitionName: string with get, set
    /// Release environment ID.
    abstract environmentId: float with get, set
    /// Release environment name.
    abstract environmentName: string with get, set
    /// Release ID.
    abstract id: float with get, set
    /// Release name.
    abstract name: string with get, set

type [<AllowNullLiteral>] ReleaseReference2 =
    abstract attempt: float with get, set
    abstract environmentCreationDate: DateTime with get, set
    abstract projectId: string with get, set
    abstract releaseCreationDate: DateTime with get, set
    abstract releaseDefId: float with get, set
    abstract releaseEnvDefId: float with get, set
    abstract releaseEnvId: float with get, set
    abstract releaseEnvName: string with get, set
    abstract releaseEnvUri: string with get, set
    abstract releaseId: float with get, set
    abstract releaseName: string with get, set
    abstract releaseRefId: float with get, set
    abstract releaseUri: string with get, set

type [<AllowNullLiteral>] RequirementsToTestsMapping2 =
    abstract createdBy: string with get, set
    abstract creationDate: DateTime with get, set
    abstract deletedBy: string with get, set
    abstract deletionDate: DateTime with get, set
    abstract isMigratedToWIT: bool with get, set
    abstract projectId: string with get, set
    abstract testMetadataId: float with get, set
    abstract workItemId: float with get, set

type [<AllowNullLiteral>] ResetTestResultsRequest =
    abstract ids: ResizeArray<LegacyTestCaseResultIdentifier> with get, set
    abstract projectName: string with get, set

type [<AllowNullLiteral>] Response =
    abstract error: string with get, set
    abstract id: string with get, set
    abstract status: string with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ResultDetails =
    | None = 0
    | Iterations = 1
    | WorkItems = 2
    | SubResults = 4
    | Point = 8

type [<RequireQualifiedAccess>] ResultGroupType =
    | None = 0
    | Rerun = 1
    | DataDriven = 2
    | OrderedTest = 3
    | Generic = 4

type [<RequireQualifiedAccess>] ResultMetadata =
    | Rerun = 1
    | Flaky = 2

type [<RequireQualifiedAccess>] ResultMetaDataDetails =
    | None = 0
    | FlakyIdentifiers = 1

type [<RequireQualifiedAccess>] ResultObjectType =
    | TestSuite = 0
    | TestPlan = 1

/// Test result retention settings
type [<AllowNullLiteral>] ResultRetentionSettings =
    /// Automated test result retention duration in days
    abstract automatedResultsRetentionDuration: float with get, set
    /// Last Updated by identity
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last updated date
    abstract lastUpdatedDate: DateTime with get, set
    /// Manual test result retention duration in days
    abstract manualResultsRetentionDuration: float with get, set

/// Results insights for runs with state completed and NeedInvestigation.
type [<AllowNullLiteral>] ResultsAnalysis =
    /// Reference of pipeline instance from which to compare the results.
    abstract previousContext: PipelineReference with get, set
    /// Increase/Decrease in counts of results for a different outcome with respect to PreviousContext.
    abstract resultsDifference: AggregatedResultsDifference with get, set
    /// Failure analysis of results with respect to PreviousContext
    abstract testFailuresAnalysis: TestResultFailuresAnalysis with get, set

type [<AllowNullLiteral>] ResultsByQueryRequest =
    abstract pageSize: float with get, set
    abstract query: ResultsStoreQuery with get, set

type [<AllowNullLiteral>] ResultsByQueryResponse =
    abstract excessIds: ResizeArray<LegacyTestCaseResultIdentifier> with get, set
    abstract testResults: ResizeArray<LegacyTestCaseResult> with get, set

type [<AllowNullLiteral>] ResultsFilter =
    abstract automatedTestName: string with get, set
    abstract branch: string with get, set
    abstract executedIn: Service with get, set
    abstract groupBy: string with get, set
    abstract maxCompleteDate: DateTime with get, set
    abstract resultsCount: float with get, set
    abstract testCaseId: float with get, set
    abstract testCaseReferenceIds: ResizeArray<float> with get, set
    abstract testPlanId: float with get, set
    abstract testPointIds: ResizeArray<float> with get, set
    abstract testResultsContext: TestResultsContext with get, set
    abstract trendDays: float with get, set

type [<AllowNullLiteral>] ResultsStoreQuery =
    abstract dayPrecision: bool with get, set
    abstract queryText: string with get, set
    abstract teamProjectName: string with get, set
    abstract timeZone: string with get, set

/// Result summary by the outcome of test results.
type [<AllowNullLiteral>] ResultsSummaryByOutcome =
    /// Aggregated result details for each test result outcome.
    abstract aggregatedResultDetailsByOutcome: ResultsSummaryByOutcomeAggregatedResultDetailsByOutcome with get, set
    /// Time taken by results.
    abstract duration: obj option with get, set
    /// Total number of not reported test results.
    abstract notReportedTestCount: float with get, set
    /// Total number of test results. (It includes NotImpacted test results as well which need to exclude while calculating pass/fail test result percentage).
    abstract totalTestCount: float with get, set

/// Summary of results for a pipeline instance.
type [<AllowNullLiteral>] ResultSummary =
    /// Result summary of pipeline, group by TestRun state.
    abstract resultSummaryByRunState: ResultSummaryResultSummaryByRunState with get, set

type [<AllowNullLiteral>] ResultUpdateRequest =
    abstract actionResultDeletes: ResizeArray<TestActionResult> with get, set
    abstract actionResults: ResizeArray<TestActionResult> with get, set
    abstract attachmentDeletes: ResizeArray<TestResultAttachmentIdentity> with get, set
    abstract attachments: ResizeArray<TestResultAttachment> with get, set
    abstract parameterDeletes: ResizeArray<TestResultParameter> with get, set
    abstract parameters: ResizeArray<TestResultParameter> with get, set
    abstract testCaseResult: LegacyTestCaseResult with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] ResultUpdateRequestModel =
    abstract actionResultDeletes: ResizeArray<TestActionResultModel> with get, set
    abstract actionResults: ResizeArray<TestActionResultModel> with get, set
    abstract parameterDeletes: ResizeArray<TestResultParameterModel> with get, set
    abstract parameters: ResizeArray<TestResultParameterModel> with get, set
    abstract testCaseResult: TestCaseResultUpdateModel with get, set

type [<AllowNullLiteral>] ResultUpdateResponse =
    abstract attachmentIds: ResizeArray<float> with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract lastUpdatedByName: string with get, set
    abstract maxReservedSubResultId: float with get, set
    abstract revision: float with get, set
    abstract testPlanId: float with get, set
    abstract testResultId: float with get, set

type [<AllowNullLiteral>] ResultUpdateResponseModel =
    abstract revision: float with get, set

/// Test run create details.
type [<AllowNullLiteral>] RunCreateModel =
    /// true if test run is automated, false otherwise. By default it will be false.
    abstract automated: bool with get, set
    /// An abstracted reference to the build that it belongs.
    abstract build: ShallowReference with get, set
    /// Drop location of the build used for test run.
    abstract buildDropLocation: string with get, set
    /// Flavor of the build used for test run. (E.g: Release, Debug)
    abstract buildFlavor: string with get, set
    /// Platform of the build used for test run. (E.g.: x86, amd64)
    abstract buildPlatform: string with get, set
    /// BuildReference of the test run.
    abstract buildReference: BuildConfiguration with get, set
    /// Comments entered by those analyzing the run.
    abstract comment: string with get, set
    /// Completed date time of the run.
    abstract completeDate: string with get, set
    /// IDs of the test configurations associated with the run.
    abstract configurationIds: ResizeArray<float> with get, set
    /// Name of the test controller used for automated run.
    abstract controller: string with get, set
    /// Additional properties of test Run.
    abstract customTestFields: ResizeArray<CustomTestField> with get, set
    /// An abstracted reference to DtlAutEnvironment.
    abstract dtlAutEnvironment: ShallowReference with get, set
    /// An abstracted reference to DtlTestEnvironment.
    abstract dtlTestEnvironment: ShallowReference with get, set
    /// Due date and time for test run.
    abstract dueDate: string with get, set
    abstract environmentDetails: DtlEnvironmentDetails with get, set
    /// Error message associated with the run.
    abstract errorMessage: string with get, set
    /// Filter used for discovering the Run.
    abstract filter: RunFilter with get, set
    /// The iteration in which to create the run. Root iteration of the team project will be default
    abstract iteration: string with get, set
    /// Name of the test run.
    abstract name: string with get, set
    /// Display name of the owner of the run.
    abstract owner: WebApi.IdentityRef with get, set
    /// Reference of the pipeline to which this test run belongs. PipelineReference.PipelineId should be equal to RunCreateModel.Build.Id
    abstract pipelineReference: PipelineReference with get, set
    /// An abstracted reference to the plan that it belongs.
    abstract plan: ShallowReference with get, set
    /// IDs of the test points to use in the run.
    abstract pointIds: ResizeArray<float> with get, set
    /// URI of release environment associated with the run.
    abstract releaseEnvironmentUri: string with get, set
    /// Reference to release associated with test run.
    abstract releaseReference: ReleaseReference with get, set
    /// URI of release associated with the run.
    abstract releaseUri: string with get, set
    /// Run summary for run Type = NoConfigRun.
    abstract runSummary: ResizeArray<RunSummaryModel> with get, set
    /// Timespan till the run times out.
    abstract runTimeout: obj option with get, set
    /// SourceWorkFlow(CI/CD) of the test run.
    abstract sourceWorkflow: string with get, set
    /// Start date time of the run.
    abstract startDate: string with get, set
    /// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
    abstract state: string with get, set
    /// Tags to attach with the test run, maximum of 5 tags can be added to run.
    abstract tags: ResizeArray<TestTag> with get, set
    /// TestConfigurationMapping of the test run.
    abstract testConfigurationsMapping: string with get, set
    /// ID of the test environment associated with the run.
    abstract testEnvironmentId: string with get, set
    /// An abstracted reference to the test settings resource.
    abstract testSettings: ShallowReference with get, set
    /// Type of the run(RunType) Valid Values : (Unspecified, Normal, Blocking, Web, MtrRunInitiatedFromWeb, RunWithDtlEnv, NoConfigRun)
    abstract ``type``: string with get, set

/// This class is used to provide the filters used for discovery
type [<AllowNullLiteral>] RunFilter =
    /// filter for the test case sources (test containers)
    abstract sourceFilter: string with get, set
    /// filter for the test cases
    abstract testCaseFilter: string with get, set

/// Test run statistics per outcome.
type [<AllowNullLiteral>] RunStatistic =
    /// Test result count fo the given outcome.
    abstract count: float with get, set
    /// Test result outcome
    abstract outcome: string with get, set
    /// Test run Resolution State.
    abstract resolutionState: TestResolutionState with get, set
    /// ResultMetadata for the given outcome/count.
    abstract resultMetadata: ResultMetadata with get, set
    /// State of the test run
    abstract state: string with get, set

/// Summary of runs for a pipeline instance.
type [<AllowNullLiteral>] RunSummary =
    /// Total time taken by runs with state completed and NeedInvestigation.
    abstract duration: obj option with get, set
    /// NoConfig runs count.
    abstract noConfigRunsCount: float with get, set
    /// Runs count by outcome for runs with state completed and NeedInvestigation runs.
    abstract runSummaryByOutcome: RunSummaryRunSummaryByOutcome with get, set
    /// Runs count by state.
    abstract runSummaryByState: RunSummaryRunSummaryByOutcome with get, set
    /// Total runs count.
    abstract totalRunsCount: float with get, set

/// Run summary for each output type of test.
type [<AllowNullLiteral>] RunSummaryModel =
    /// Total time taken in milliseconds.
    abstract duration: float with get, set
    /// Number of results for Outcome TestOutcome
    abstract resultCount: float with get, set
    /// Summary is based on outcome
    abstract testOutcome: TestOutcome with get, set

type [<RequireQualifiedAccess>] RunType =
    | Unspecified = 0
    | Normal = 1
    | Blocking = 2
    | Web = 4
    | MtrRunInitiatedFromWeb = 8
    | RunWithDtlEnv = 16
    | NoConfigRun = 32

type [<AllowNullLiteral>] RunUpdateModel =
    /// An abstracted reference to the build that it belongs.
    abstract build: ShallowReference with get, set
    /// Drop location of the build used for test run.
    abstract buildDropLocation: string with get, set
    /// Flavor of the build used for test run. (E.g: Release, Debug)
    abstract buildFlavor: string with get, set
    /// Platform of the build used for test run. (E.g.: x86, amd64)
    abstract buildPlatform: string with get, set
    /// Comments entered by those analyzing the run.
    abstract comment: string with get, set
    /// Completed date time of the run.
    abstract completedDate: string with get, set
    /// Name of the test controller used for automated run.
    abstract controller: string with get, set
    /// true to delete inProgess Results , false otherwise.
    abstract deleteInProgressResults: bool with get, set
    /// An abstracted reference to DtlAutEnvironment.
    abstract dtlAutEnvironment: ShallowReference with get, set
    /// An abstracted reference to DtlEnvironment.
    abstract dtlEnvironment: ShallowReference with get, set
    abstract dtlEnvironmentDetails: DtlEnvironmentDetails with get, set
    /// Due date and time for test run.
    abstract dueDate: string with get, set
    /// Error message associated with the run.
    abstract errorMessage: string with get, set
    /// The iteration in which to create the run.
    abstract iteration: string with get, set
    /// Log entries associated with the run. Use a comma-separated list of multiple log entry objects. \{ logEntry \}, \{ logEntry \}, ...
    abstract logEntries: ResizeArray<TestMessageLogDetails> with get, set
    /// Name of the test run.
    abstract name: string with get, set
    /// URI of release environment associated with the run.
    abstract releaseEnvironmentUri: string with get, set
    /// URI of release associated with the run.
    abstract releaseUri: string with get, set
    /// Run summary for run Type = NoConfigRun.
    abstract runSummary: ResizeArray<RunSummaryModel> with get, set
    /// SourceWorkFlow(CI/CD) of the test run.
    abstract sourceWorkflow: string with get, set
    /// Start date time of the run.
    abstract startedDate: string with get, set
    /// The state of the test run Below are the valid values - NotStarted, InProgress, Completed, Aborted, Waiting
    abstract state: string with get, set
    /// The types of sub states for test run.
    abstract substate: TestRunSubstate with get, set
    /// Tags to attach with the test run.
    abstract tags: ResizeArray<TestTag> with get, set
    /// ID of the test environment associated with the run.
    abstract testEnvironmentId: string with get, set
    /// An abstracted reference to test setting resource.
    abstract testSettings: ShallowReference with get, set

type [<RequireQualifiedAccess>] Service =
    | Any = 0
    | Tcm = 1
    | Tfs = 2

/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
type [<AllowNullLiteral>] ShallowReference =
    /// ID of the resource
    abstract id: string with get, set
    /// Name of the linked resource (definition name, controller name, etc.)
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] ShallowTestCaseResult =
    abstract automatedTestName: string with get, set
    abstract automatedTestStorage: string with get, set
    abstract durationInMs: float with get, set
    abstract id: float with get, set
    abstract isReRun: bool with get, set
    abstract outcome: string with get, set
    abstract owner: string with get, set
    abstract priority: float with get, set
    abstract refId: float with get, set
    abstract runId: float with get, set
    abstract tags: ResizeArray<string> with get, set
    abstract testCaseTitle: string with get, set

/// Reference to shared step workitem.
type [<AllowNullLiteral>] SharedStepModel =
    /// WorkItem shared step ID.
    abstract id: float with get, set
    /// Shared step workitem revision.
    abstract revision: float with get, set

/// Stage in pipeline
type [<AllowNullLiteral>] StageReference =
    /// Attempt number of stage
    abstract attempt: float with get, set
    /// Name of the stage. Maximum supported length for name is 256 character.
    abstract stageName: string with get, set

/// Suite create model
type [<AllowNullLiteral>] SuiteCreateModel =
    /// Name of test suite.
    abstract name: string with get, set
    /// For query based suites, query string that defines the suite.
    abstract queryString: string with get, set
    /// For requirements test suites, the IDs of the requirements.
    abstract requirementIds: ResizeArray<float> with get, set
    /// Type of test suite to create. It can have value from DynamicTestSuite, StaticTestSuite and RequirementTestSuite.
    abstract suiteType: string with get, set

/// A suite entry defines properties for a test suite.
type [<AllowNullLiteral>] SuiteEntry =
    /// Id of child suite in the test suite.
    abstract childSuiteId: float with get, set
    /// Sequence number for the test case or child test suite in the test suite.
    abstract sequenceNumber: float with get, set
    /// Id for the test suite.
    abstract suiteId: float with get, set
    /// Id of a test case in the test suite.
    abstract testCaseId: float with get, set

/// A model to define sequence of test suite entries in a test suite.
type [<AllowNullLiteral>] SuiteEntryUpdateModel =
    /// Id of the child suite in the test suite.
    abstract childSuiteId: float with get, set
    /// Updated sequence number for the test case or child test suite in the test suite.
    abstract sequenceNumber: float with get, set
    /// Id of the test case in the test suite.
    abstract testCaseId: float with get, set

type [<RequireQualifiedAccess>] SuiteExpand =
    | Children = 1
    | DefaultTesters = 2

/// Test case for the suite.
type [<AllowNullLiteral>] SuiteTestCase =
    /// Point Assignment for test suite's test case.
    abstract pointAssignments: ResizeArray<PointAssignment> with get, set
    /// Test case workItem reference.
    abstract testCase: WorkItemReference with get, set

/// Test suite update model.
type [<AllowNullLiteral>] SuiteTestCaseUpdateModel =
    /// Shallow reference of configurations for the test cases in the suite.
    abstract configurations: ResizeArray<ShallowReference> with get, set

/// Test suite update model.
type [<AllowNullLiteral>] SuiteUpdateModel =
    /// Shallow reference of default configurations for the suite.
    abstract defaultConfigurations: ResizeArray<ShallowReference> with get, set
    /// Shallow reference of test suite.
    abstract defaultTesters: ResizeArray<ShallowReference> with get, set
    /// Specifies if the default configurations have to be inherited from the parent test suite in which the test suite is created.
    abstract inheritDefaultConfigurations: bool with get, set
    /// Test suite name
    abstract name: string with get, set
    /// Shallow reference of the parent.
    abstract parent: ShallowReference with get, set
    /// For query based suites, the new query string.
    abstract queryString: string with get, set

type [<AllowNullLiteral>] TCMPropertyBag2 =
    abstract artifactId: float with get, set
    abstract artifactType: float with get, set
    abstract name: string with get, set
    abstract value: string with get, set

type [<RequireQualifiedAccess>] TCMServiceDataMigrationStatus =
    | NotStarted = 0
    | InProgress = 1
    | Completed = 2
    | Failed = 3

type [<AllowNullLiteral>] TestActionResult =
    abstract actionPath: string with get, set
    abstract comment: string with get, set
    abstract creationDate: DateTime with get, set
    abstract dateCompleted: DateTime with get, set
    abstract dateStarted: DateTime with get, set
    abstract duration: float with get, set
    abstract errorMessage: string with get, set
    abstract id: LegacyTestCaseResultIdentifier with get, set
    abstract iterationId: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract outcome: float with get, set
    abstract sharedStepId: float with get, set
    abstract sharedStepRevision: float with get, set

type [<AllowNullLiteral>] TestActionResult2 =
    abstract actionPath: string with get, set
    abstract comment: string with get, set
    abstract creationDate: DateTime with get, set
    abstract dateCompleted: DateTime with get, set
    abstract dateStarted: DateTime with get, set
    abstract duration: float with get, set
    abstract errorMessage: string with get, set
    abstract iterationId: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract outcome: float with get, set
    abstract sharedStepId: float with get, set
    abstract sharedStepRevision: float with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

/// Represents a test step result.
type [<AllowNullLiteral>] TestActionResultModel =
    inherit TestResultModelBase
    /// Path identifier test step in test case workitem.
    abstract actionPath: string with get, set
    /// Iteration ID of test action result.
    abstract iterationId: float with get, set
    /// Reference to shared step workitem.
    abstract sharedStepModel: SharedStepModel with get, set
    /// This is step Id of test case. For shared step, it is step Id of shared step in test case workitem; step Id in shared step. Example: TestCase workitem has two steps: 1) Normal step with Id = 1 2) Shared Step with Id = 2. Inside shared step: a) Normal Step with Id = 1 Value for StepIdentifier for First step: "1" Second step: "2;1"
    abstract stepIdentifier: string with get, set
    /// Url of test action result.
    abstract url: string with get, set

type [<AllowNullLiteral>] TestAttachment =
    /// Attachment type.
    abstract attachmentType: AttachmentType with get, set
    /// Comment associated with attachment.
    abstract comment: string with get, set
    /// Attachment created date.
    abstract createdDate: DateTime with get, set
    /// Attachment file name
    abstract fileName: string with get, set
    /// ID of the attachment.
    abstract id: float with get, set
    /// Attachment size.
    abstract size: float with get, set
    /// Attachment Url.
    abstract url: string with get, set

/// Reference to test attachment.
type [<AllowNullLiteral>] TestAttachmentReference =
    /// ID of the attachment.
    abstract id: float with get, set
    /// Url to download the attachment.
    abstract url: string with get, set

/// Test attachment request model
type [<AllowNullLiteral>] TestAttachmentRequestModel =
    /// Attachment type By Default it will be GeneralAttachment. It can be one of the following type. \{ GeneralAttachment, AfnStrip, BugFilingData, CodeCoverage, IntermediateCollectorData, RunConfig, TestImpactDetails, TmiTestRunDeploymentFiles, TmiTestRunReverseDeploymentFiles, TmiTestResultDetail, TmiTestRunSummary \}
    abstract attachmentType: string with get, set
    /// Comment associated with attachment
    abstract comment: string with get, set
    /// Attachment filename
    abstract fileName: string with get, set
    /// Base64 encoded file stream
    abstract stream: string with get, set

type [<AllowNullLiteral>] TestAuthoringDetails =
    abstract configurationId: float with get, set
    abstract isAutomated: bool with get, set
    abstract lastUpdated: DateTime with get, set
    abstract pointId: float with get, set
    abstract priority: float with get, set
    abstract runBy: string with get, set
    abstract state: TestPointState with get, set
    abstract suiteId: float with get, set
    abstract testerId: string with get, set

type [<AllowNullLiteral>] TestCaseMetadata2 =
    abstract container: string with get, set
    abstract name: string with get, set
    abstract projectId: string with get, set
    abstract testMetadataId: float with get, set

type [<AllowNullLiteral>] TestCaseReference2 =
    abstract areaId: float with get, set
    abstract automatedTestId: string with get, set
    abstract automatedTestName: string with get, set
    abstract automatedTestNameHash: ResizeArray<float> with get, set
    abstract automatedTestStorage: string with get, set
    abstract automatedTestStorageHash: ResizeArray<float> with get, set
    abstract automatedTestType: string with get, set
    abstract configurationId: float with get, set
    abstract createdBy: string with get, set
    abstract creationDate: DateTime with get, set
    abstract lastRefTestRunDate: DateTime with get, set
    abstract owner: string with get, set
    abstract priority: float with get, set
    abstract projectId: string with get, set
    abstract testCaseId: float with get, set
    abstract testCaseRefId: float with get, set
    abstract testCaseRevision: float with get, set
    abstract testCaseTitle: string with get, set
    abstract testPointId: float with get, set

/// Represents a test result.
type [<AllowNullLiteral>] TestCaseResult =
    /// Test attachment ID of action recording.
    abstract afnStripId: float with get, set
    /// Reference to area path of test.
    abstract area: ShallowReference with get, set
    /// Reference to bugs linked to test result.
    abstract associatedBugs: ResizeArray<ShallowReference> with get, set
    /// ID representing test method in a dll.
    abstract automatedTestId: string with get, set
    /// Fully qualified name of test executed.
    abstract automatedTestName: string with get, set
    /// Container to which test belongs.
    abstract automatedTestStorage: string with get, set
    /// Type of automated test.
    abstract automatedTestType: string with get, set
    /// TypeId of automated test.
    abstract automatedTestTypeId: string with get, set
    /// Shallow reference to build associated with test result.
    abstract build: ShallowReference with get, set
    /// Reference to build associated with test result.
    abstract buildReference: BuildReference with get, set
    /// Comment in a test result with maxSize= 1000 chars.
    abstract comment: string with get, set
    /// Time when test execution completed. Completed date should be greater than StartedDate.
    abstract completedDate: DateTime with get, set
    /// Machine name where test executed.
    abstract computerName: string with get, set
    /// Reference to test configuration. Type ShallowReference.
    abstract configuration: ShallowReference with get, set
    /// Timestamp when test result created.
    abstract createdDate: DateTime with get, set
    /// Additional properties of test result.
    abstract customFields: ResizeArray<CustomTestField> with get, set
    /// Duration of test execution in milliseconds. If not provided value will be set as CompletedDate - StartedDate
    abstract durationInMs: float with get, set
    /// Error message in test execution.
    abstract errorMessage: string with get, set
    /// Information when test results started failing.
    abstract failingSince: FailingSince with get, set
    /// Failure type of test result. Valid Value= (Known Issue, New Issue, Regression, Unknown, None)
    abstract failureType: string with get, set
    /// ID of a test result.
    abstract id: float with get, set
    /// Test result details of test iterations used only for Manual Testing.
    abstract iterationDetails: ResizeArray<TestIterationDetailsModel> with get, set
    /// Reference to identity last updated test result.
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last updated datetime of test result.
    abstract lastUpdatedDate: DateTime with get, set
    /// Test outcome of test result. Valid values = (Unspecified, None, Passed, Failed, Inconclusive, Timeout, Aborted, Blocked, NotExecuted, Warning, Error, NotApplicable, Paused, InProgress, NotImpacted)
    abstract outcome: string with get, set
    /// Reference to test owner.
    abstract owner: WebApi.IdentityRef with get, set
    /// Priority of test executed.
    abstract priority: float with get, set
    /// Reference to team project.
    abstract project: ShallowReference with get, set
    /// Shallow reference to release associated with test result.
    abstract release: ShallowReference with get, set
    /// Reference to release associated with test result.
    abstract releaseReference: ReleaseReference with get, set
    /// ResetCount.
    abstract resetCount: float with get, set
    /// Resolution state of test result.
    abstract resolutionState: string with get, set
    /// ID of resolution state.
    abstract resolutionStateId: float with get, set
    /// Hierarchy type of the result, default value of None means its leaf node.
    abstract resultGroupType: ResultGroupType with get, set
    /// Revision number of test result.
    abstract revision: float with get, set
    /// Reference to identity executed the test.
    abstract runBy: WebApi.IdentityRef with get, set
    /// Stacktrace with maxSize= 1000 chars.
    abstract stackTrace: string with get, set
    /// Time when test execution started.
    abstract startedDate: DateTime with get, set
    /// State of test result. Type TestRunState.
    abstract state: string with get, set
    /// List of sub results inside a test result, if ResultGroupType is not None, it holds corresponding type sub results.
    abstract subResults: ResizeArray<TestSubResult> with get, set
    /// Reference to the test executed.
    abstract testCase: ShallowReference with get, set
    /// Reference ID of test used by test result. Type TestResultMetaData
    abstract testCaseReferenceId: float with get, set
    /// TestCaseRevision Number.
    abstract testCaseRevision: float with get, set
    /// Name of test.
    abstract testCaseTitle: string with get, set
    /// Reference to test plan test case workitem is part of.
    abstract testPlan: ShallowReference with get, set
    /// Reference to the test point executed.
    abstract testPoint: ShallowReference with get, set
    /// Reference to test run.
    abstract testRun: ShallowReference with get, set
    /// Reference to test suite test case workitem is part of.
    abstract testSuite: ShallowReference with get, set
    /// Url of test result.
    abstract url: string with get, set

/// Test attachment information in a test iteration.
type [<AllowNullLiteral>] TestCaseResultAttachmentModel =
    /// Path identifier test step in test case workitem.
    abstract actionPath: string with get, set
    /// Attachment ID.
    abstract id: float with get, set
    /// Iteration ID.
    abstract iterationId: float with get, set
    /// Name of attachment.
    abstract name: string with get, set
    /// Attachment size.
    abstract size: float with get, set
    /// Url to attachment.
    abstract url: string with get, set

type [<AllowNullLiteral>] TestCaseResultIdAndRev =
    abstract id: LegacyTestCaseResultIdentifier with get, set
    abstract revision: float with get, set

/// Reference to a test result.
type [<AllowNullLiteral>] TestCaseResultIdentifier =
    /// Test result ID.
    abstract testResultId: float with get, set
    /// Test run ID.
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] TestCaseResultUpdateModel =
    abstract associatedWorkItems: ResizeArray<float> with get, set
    abstract automatedTestTypeId: string with get, set
    abstract comment: string with get, set
    abstract completedDate: string with get, set
    abstract computerName: string with get, set
    abstract customFields: ResizeArray<CustomTestField> with get, set
    abstract durationInMs: string with get, set
    abstract errorMessage: string with get, set
    abstract failureType: string with get, set
    abstract outcome: string with get, set
    abstract owner: WebApi.IdentityRef with get, set
    abstract resolutionState: string with get, set
    abstract runBy: WebApi.IdentityRef with get, set
    abstract stackTrace: string with get, set
    abstract startedDate: string with get, set
    abstract state: string with get, set
    abstract testCasePriority: string with get, set
    abstract testResult: ShallowReference with get, set

/// Test configuration
type [<AllowNullLiteral>] TestConfiguration =
    /// Area of the configuration
    abstract area: ShallowReference with get, set
    /// Description of the configuration
    abstract description: string with get, set
    /// Id of the configuration
    abstract id: float with get, set
    /// Is the configuration a default for the test plans
    abstract isDefault: bool with get, set
    /// Last Updated By  Reference
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last Updated Data
    abstract lastUpdatedDate: DateTime with get, set
    /// Name of the configuration
    abstract name: string with get, set
    /// Project to which the configuration belongs
    abstract project: ShallowReference with get, set
    /// Revision of the the configuration
    abstract revision: float with get, set
    /// State of the configuration
    abstract state: TestConfigurationState with get, set
    /// Url of Configuration Resource
    abstract url: string with get, set
    /// Dictionary of Test Variable, Selected Value
    abstract values: ResizeArray<NameValuePair> with get, set

type [<RequireQualifiedAccess>] TestConfigurationState =
    | Active = 1
    | Inactive = 2

/// Test environment Detail.
type [<AllowNullLiteral>] TestEnvironment =
    /// Test Environment Id.
    abstract environmentId: string with get, set
    /// Test Environment Name.
    abstract environmentName: string with get, set

type [<AllowNullLiteral>] TestExecutionReportData =
    abstract reportData: ResizeArray<DatedTestFieldData> with get, set

type [<AllowNullLiteral>] TestExtensionField =
    abstract field: TestExtensionFieldDetails with get, set
    abstract value: obj option with get, set

type [<AllowNullLiteral>] TestExtensionFieldDetails =
    abstract id: float with get, set
    abstract isResultScoped: bool with get, set
    abstract isRunScoped: bool with get, set
    abstract isSystemField: bool with get, set
    abstract name: string with get, set
    abstract ``type``: SystemData.SqlDbType with get, set

type [<AllowNullLiteral>] TestFailureDetails =
    abstract count: float with get, set
    abstract testResults: ResizeArray<TestCaseResultIdentifier> with get, set

type [<AllowNullLiteral>] TestFailuresAnalysis =
    abstract existingFailures: TestFailureDetails with get, set
    abstract fixedTests: TestFailureDetails with get, set
    abstract newFailures: TestFailureDetails with get, set
    abstract previousContext: TestResultsContext with get, set

type [<AllowNullLiteral>] TestFailureType =
    abstract id: float with get, set
    abstract name: string with get, set
    abstract project: ShallowReference with get, set

type [<AllowNullLiteral>] TestFieldData =
    abstract dimensions: TestFieldDataDimensions with get, set
    abstract ``measure``: float with get, set

type [<AllowNullLiteral>] TestFieldsEx2 =
    abstract fieldId: float with get, set
    abstract fieldName: string with get, set
    abstract fieldType: float with get, set
    abstract isResultScoped: bool with get, set
    abstract isRunScoped: bool with get, set
    abstract isSystemField: bool with get, set
    abstract projectId: string with get, set

/// Test Flaky Identifier
type [<AllowNullLiteral>] TestFlakyIdentifier =
    /// Branch Name where Flakiness has to be Marked/Unmarked
    abstract branchName: string with get, set
    /// State for Flakiness
    abstract isFlaky: bool with get, set

/// Filter to get TestCase result history.
type [<AllowNullLiteral>] TestHistoryQuery =
    /// Automated test name of the TestCase.
    abstract automatedTestName: string with get, set
    /// Results to be get for a particular branches.
    abstract branch: string with get, set
    /// Get the results history only for this BuildDefinitionId. This to get used in query GroupBy should be Branch. If this is provided, Branch will have no use.
    abstract buildDefinitionId: float with get, set
    /// It will be filled by server. If not null means there are some results still to be get, and we need to call this REST API with this ContinuousToken. It is not supposed to be created (or altered, if received from server in last batch) by user.
    abstract continuationToken: string with get, set
    /// Group the result on the basis of TestResultGroupBy. This can be Branch, Environment or null(if results are fetched by BuildDefinitionId)
    abstract groupBy: TestResultGroupBy with get, set
    /// History to get between time interval MaxCompleteDate and  (MaxCompleteDate - TrendDays). Default is current date time.
    abstract maxCompleteDate: DateTime with get, set
    /// Get the results history only for this ReleaseEnvDefinitionId. This to get used in query GroupBy should be Environment.
    abstract releaseEnvDefinitionId: float with get, set
    /// List of TestResultHistoryForGroup which are grouped by GroupBy
    abstract resultsForGroup: ResizeArray<TestResultHistoryForGroup> with get, set
    /// Get the results history only for this testCaseId. This to get used in query to filter the result along with automatedtestname
    abstract testCaseId: float with get, set
    /// Number of days for which history to collect. Maximum supported value is 7 days. Default is 7 days.
    abstract trendDays: float with get, set

/// Represents a test iteration result.
type [<AllowNullLiteral>] TestIterationDetailsModel =
    /// Test step results in an iteration.
    abstract actionResults: ResizeArray<TestActionResultModel> with get, set
    /// Reference to attachments in test iteration result.
    abstract attachments: ResizeArray<TestCaseResultAttachmentModel> with get, set
    /// Comment in test iteration result.
    abstract comment: string with get, set
    /// Time when execution completed.
    abstract completedDate: DateTime with get, set
    /// Duration of execution.
    abstract durationInMs: float with get, set
    /// Error message in test iteration result execution.
    abstract errorMessage: string with get, set
    /// ID of test iteration result.
    abstract id: float with get, set
    /// Test outcome if test iteration result.
    abstract outcome: string with get, set
    /// Test parameters in an iteration.
    abstract parameters: ResizeArray<TestResultParameterModel> with get, set
    /// Time when execution started.
    abstract startedDate: DateTime with get, set
    /// Url to test iteration result.
    abstract url: string with get, set

/// Represents Test Log Result object.
type [<AllowNullLiteral>] TestLog =
    /// Test Log Context run, build
    abstract logReference: TestLogReference with get, set
    /// Meta data for Log file
    abstract metaData: CloneOptionsOverrideParameters with get, set
    /// LastUpdatedDate for Log file
    abstract modifiedOn: DateTime with get, set
    /// Size in Bytes for Log file
    abstract size: float with get, set

/// Test Log Reference object
type [<AllowNullLiteral>] TestLogReference =
    /// BuildId for test log, if context is build
    abstract buildId: float with get, set
    /// FileName for log file
    abstract filePath: string with get, set
    /// ReleaseEnvId for test log, if context is Release
    abstract releaseEnvId: float with get, set
    /// ReleaseId for test log, if context is Release
    abstract releaseId: float with get, set
    /// Resultid for test log, if context is run and log is related to result
    abstract resultId: float with get, set
    /// runid for test log, if context is run
    abstract runId: float with get, set
    /// Test Log Scope
    abstract scope: TestLogScope with get, set
    /// SubResultid for test log, if context is run and log is related to subresult
    abstract subResultId: float with get, set
    /// Log Type
    abstract ``type``: TestLogType with get, set

type [<RequireQualifiedAccess>] TestLogScope =
    | Run = 0
    | Build = 1
    | Release = 2

/// Represents Test Log Status object.
type [<AllowNullLiteral>] TestLogStatus =
    /// Exception message
    abstract ``exception``: string with get, set
    /// Test Log Status code
    abstract status: TestLogStatusCode with get, set
    /// Blob Transfer Error code
    abstract transferFailureType: string with get, set

type [<RequireQualifiedAccess>] TestLogStatusCode =
    | Success = 0
    | Failed = 1
    | FileAlreadyExists = 2
    | InvalidInput = 3
    | InvalidFileName = 4
    | InvalidContainer = 5
    | TransferFailed = 6
    | FeatureDisabled = 7
    | BuildDoesNotExist = 8
    | RunDoesNotExist = 9
    | ContainerNotCreated = 10
    | APINotSupported = 11
    | FileSizeExceeds = 12
    | ContainerNotFound = 13
    | FileNotFound = 14
    | DirectoryNotFound = 15
    | StorageCapacityExceeded = 16

/// Represents Test Log store endpoint details.
type [<AllowNullLiteral>] TestLogStoreEndpointDetails =
    /// Test log store connection Uri.
    abstract endpointSASUri: string with get, set
    /// Test log store endpoint type.
    abstract endpointType: TestLogStoreEndpointType with get, set
    /// Test log store status code
    abstract status: TestLogStatusCode with get, set

type [<RequireQualifiedAccess>] TestLogStoreEndpointType =
    | Root = 1
    | File = 2

type [<RequireQualifiedAccess>] TestLogStoreOperationType =
    | Read = 1
    | Create = 2
    | ReadAndCreate = 3

type [<RequireQualifiedAccess>] TestLogType =
    | GeneralAttachment = 1
    | CodeCoverage = 2
    | TestImpact = 3
    | Intermediate = 4
    | System = 5

type [<AllowNullLiteral>] TestMessageLog2 =
    abstract testMessageLogId: float with get, set

/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
type [<AllowNullLiteral>] TestMessageLogDetails =
    /// Date when the resource is created
    abstract dateCreated: DateTime with get, set
    /// Id of the resource
    abstract entryId: float with get, set
    /// Message of the resource
    abstract message: string with get, set

type [<AllowNullLiteral>] TestMessageLogEntry =
    abstract dateCreated: DateTime with get, set
    abstract entryId: float with get, set
    abstract logLevel: float with get, set
    abstract logUser: string with get, set
    abstract logUserName: string with get, set
    abstract message: string with get, set
    abstract testMessageLogId: float with get, set

type [<AllowNullLiteral>] TestMessageLogEntry2 =
    abstract dateCreated: DateTime with get, set
    abstract entryId: float with get, set
    abstract logLevel: float with get, set
    abstract logUser: string with get, set
    abstract message: string with get, set
    abstract testMessageLogId: float with get, set

type [<AllowNullLiteral>] TestMethod =
    abstract container: string with get, set
    abstract name: string with get, set

/// Class representing a reference to an operation.
type [<AllowNullLiteral>] TestOperationReference =
    abstract id: string with get, set
    abstract status: string with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] TestOutcome =
    | Unspecified = 0
    | None = 1
    | Passed = 2
    | Failed = 3
    | Inconclusive = 4
    | Timeout = 5
    | Aborted = 6
    | Blocked = 7
    | NotExecuted = 8
    | Warning = 9
    | Error = 10
    | NotApplicable = 11
    | Paused = 12
    | InProgress = 13
    | NotImpacted = 14
    | MaxValue = 14

/// Test outcome settings
type [<AllowNullLiteral>] TestOutcomeSettings =
    /// Value to configure how test outcomes for the same tests across suites are shown
    abstract syncOutcomeAcrossSuites: bool with get, set

type [<AllowNullLiteral>] TestParameter2 =
    abstract actionPath: string with get, set
    abstract actual: ResizeArray<float> with get, set
    abstract creationDate: DateTime with get, set
    abstract dataType: float with get, set
    abstract dateModified: DateTime with get, set
    abstract expected: ResizeArray<float> with get, set
    abstract iterationId: float with get, set
    abstract parameterName: string with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

/// The test plan resource.
type [<AllowNullLiteral>] TestPlan =
    /// Area of the test plan.
    abstract area: ShallowReference with get, set
    abstract automatedTestEnvironment: TestEnvironment with get, set
    abstract automatedTestSettings: TestSettings with get, set
    /// Build to be tested.
    abstract build: ShallowReference with get, set
    /// The Build Definition that generates a build associated with this test plan.
    abstract buildDefinition: ShallowReference with get, set
    abstract clientUrl: string with get, set
    /// Description of the test plan.
    abstract description: string with get, set
    /// End date for the test plan.
    abstract endDate: DateTime with get, set
    /// ID of the test plan.
    abstract id: float with get, set
    /// Iteration path of the test plan.
    abstract iteration: string with get, set
    abstract manualTestEnvironment: TestEnvironment with get, set
    abstract manualTestSettings: TestSettings with get, set
    /// Name of the test plan.
    abstract name: string with get, set
    /// Owner of the test plan.
    abstract owner: WebApi.IdentityRef with get, set
    abstract previousBuild: ShallowReference with get, set
    /// Project which contains the test plan.
    abstract project: ShallowReference with get, set
    /// Release Environment to be used to deploy the build and run automated tests from this test plan.
    abstract releaseEnvironmentDefinition: ReleaseEnvironmentDefinitionReference with get, set
    /// Revision of the test plan.
    abstract revision: float with get, set
    /// Root test suite of the test plan.
    abstract rootSuite: ShallowReference with get, set
    /// Start date for the test plan.
    abstract startDate: DateTime with get, set
    /// State of the test plan.
    abstract state: string with get, set
    /// Value to configure how same tests across test suites under a test plan need to behave
    abstract testOutcomeSettings: TestOutcomeSettings with get, set
    abstract updatedBy: WebApi.IdentityRef with get, set
    abstract updatedDate: DateTime with get, set
    /// URL of the test plan resource.
    abstract url: string with get, set

type [<AllowNullLiteral>] TestPlanCloneRequest =
    abstract destinationTestPlan: TestPlan with get, set
    abstract options: CloneOptions with get, set
    abstract suiteIds: ResizeArray<float> with get, set

type [<AllowNullLiteral>] TestPlanHubData =
    abstract selectedSuiteId: float with get, set
    abstract testPlan: TestPlan with get, set
    abstract testPoints: ResizeArray<TestPoint> with get, set
    abstract testSuites: ResizeArray<TestSuite> with get, set
    abstract totalTestPoints: float with get, set

type [<AllowNullLiteral>] TestPlansWithSelection =
    abstract lastSelectedPlan: float with get, set
    abstract lastSelectedSuite: float with get, set
    abstract plans: ResizeArray<TestPlan> with get, set

/// Test point.
type [<AllowNullLiteral>] TestPoint =
    /// AssignedTo. Type IdentityRef.
    abstract assignedTo: WebApi.IdentityRef with get, set
    /// Automated.
    abstract automated: bool with get, set
    /// Comment associated with test point.
    abstract comment: string with get, set
    /// Configuration. Type ShallowReference.
    abstract configuration: ShallowReference with get, set
    /// Failure type of test point.
    abstract failureType: string with get, set
    /// ID of the test point.
    abstract id: float with get, set
    /// Last date when test point was reset to Active.
    abstract lastResetToActive: DateTime with get, set
    /// Last resolution state id of test point.
    abstract lastResolutionStateId: float with get, set
    /// Last result of test point. Type ShallowReference.
    abstract lastResult: ShallowReference with get, set
    /// Last result details of test point. Type LastResultDetails.
    abstract lastResultDetails: LastResultDetails with get, set
    /// Last result state of test point.
    abstract lastResultState: string with get, set
    /// LastRun build number of test point.
    abstract lastRunBuildNumber: string with get, set
    /// Last testRun of test point. Type ShallowReference.
    abstract lastTestRun: ShallowReference with get, set
    /// Test point last updated by. Type IdentityRef.
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last updated date of test point.
    abstract lastUpdatedDate: DateTime with get, set
    /// Outcome of test point.
    abstract outcome: string with get, set
    /// Revision number.
    abstract revision: float with get, set
    /// State of test point.
    abstract state: string with get, set
    /// Suite of test point. Type ShallowReference.
    abstract suite: ShallowReference with get, set
    /// TestCase associated to test point. Type WorkItemReference.
    abstract testCase: WorkItemReference with get, set
    /// TestPlan of test point. Type ShallowReference.
    abstract testPlan: ShallowReference with get, set
    /// Test point Url.
    abstract url: string with get, set
    /// Work item properties of test point.
    abstract workItemProperties: ResizeArray<obj option> with get, set

type [<AllowNullLiteral>] TestPointReference =
    abstract id: float with get, set
    abstract state: TestPointState with get, set

type [<AllowNullLiteral>] TestPointsEvent =
    abstract projectName: string with get, set
    abstract testPoints: ResizeArray<TestPointReference> with get, set

/// Test point query class.
type [<AllowNullLiteral>] TestPointsQuery =
    /// Order by results.
    abstract orderBy: string with get, set
    /// List of test points
    abstract points: ResizeArray<TestPoint> with get, set
    /// Filter
    abstract pointsFilter: PointsFilter with get, set
    /// List of workitem fields to get.
    abstract witFields: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] TestPointState =
    | None = 0
    | Ready = 1
    | Completed = 2
    | NotReady = 3
    | InProgress = 4
    | MaxValue = 4

type [<AllowNullLiteral>] TestPointsUpdatedEvent =
    inherit TestPointsEvent

/// Test Resolution State Details.
type [<AllowNullLiteral>] TestResolutionState =
    /// Test Resolution state Id.
    abstract id: float with get, set
    /// Test Resolution State Name.
    abstract name: string with get, set
    abstract project: ShallowReference with get, set

type [<AllowNullLiteral>] TestResult2 =
    abstract afnStripId: float with get, set
    abstract computerName: string with get, set
    abstract creationDate: DateTime with get, set
    abstract dateCompleted: DateTime with get, set
    abstract dateStarted: DateTime with get, set
    abstract effectivePointState: float with get, set
    abstract failureType: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract outcome: float with get, set
    abstract owner: string with get, set
    abstract projectId: string with get, set
    abstract resetCount: float with get, set
    abstract resolutionStateId: float with get, set
    abstract revision: float with get, set
    abstract runBy: string with get, set
    abstract state: float with get, set
    abstract testCaseRefId: float with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] TestResultAcrossProjectResponse =
    abstract projectName: string with get, set
    abstract testResult: LegacyTestCaseResult with get, set

type [<AllowNullLiteral>] TestResultAttachment =
    abstract actionPath: string with get, set
    abstract attachmentType: AttachmentType with get, set
    abstract comment: string with get, set
    abstract creationDate: DateTime with get, set
    abstract downloadQueryString: string with get, set
    abstract fileName: string with get, set
    abstract id: float with get, set
    abstract isComplete: bool with get, set
    abstract iterationId: float with get, set
    abstract length: float with get, set
    abstract sessionId: float with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set
    abstract tmiRunId: string with get, set

type [<AllowNullLiteral>] TestResultAttachmentIdentity =
    abstract attachmentId: float with get, set
    abstract sessionId: float with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] TestResultCreateModel =
    abstract area: ShallowReference with get, set
    abstract associatedWorkItems: ResizeArray<float> with get, set
    abstract automatedTestId: string with get, set
    abstract automatedTestName: string with get, set
    abstract automatedTestStorage: string with get, set
    abstract automatedTestType: string with get, set
    abstract automatedTestTypeId: string with get, set
    abstract comment: string with get, set
    abstract completedDate: string with get, set
    abstract computerName: string with get, set
    abstract configuration: ShallowReference with get, set
    abstract customFields: ResizeArray<CustomTestField> with get, set
    abstract durationInMs: string with get, set
    abstract errorMessage: string with get, set
    abstract failureType: string with get, set
    abstract outcome: string with get, set
    abstract owner: WebApi.IdentityRef with get, set
    abstract resolutionState: string with get, set
    abstract runBy: WebApi.IdentityRef with get, set
    abstract stackTrace: string with get, set
    abstract startedDate: string with get, set
    abstract state: string with get, set
    abstract testCase: ShallowReference with get, set
    abstract testCasePriority: string with get, set
    abstract testCaseTitle: string with get, set
    abstract testPoint: ShallowReference with get, set

type [<AllowNullLiteral>] TestResultDocument =
    abstract operationReference: TestOperationReference with get, set
    abstract payload: TestResultPayload with get, set

type [<AllowNullLiteral>] TestResultFailuresAnalysis =
    abstract existingFailures: TestFailureDetails with get, set
    abstract fixedTests: TestFailureDetails with get, set
    abstract newFailures: TestFailureDetails with get, set

type [<RequireQualifiedAccess>] TestResultGroupBy =
    | Branch = 1
    | Environment = 2

type [<AllowNullLiteral>] TestResultHistory =
    abstract groupByField: string with get, set
    abstract resultsForGroup: ResizeArray<TestResultHistoryDetailsForGroup> with get, set

type [<AllowNullLiteral>] TestResultHistoryDetailsForGroup =
    abstract groupByValue: obj option with get, set
    abstract latestResult: TestCaseResult with get, set

/// List of test results filtered on the basis of GroupByValue
type [<AllowNullLiteral>] TestResultHistoryForGroup =
    /// Display name of the group.
    abstract displayName: string with get, set
    /// Name or Id of the group identifier by which results are grouped together.
    abstract groupByValue: string with get, set
    /// List of results for GroupByValue
    abstract results: ResizeArray<TestCaseResult> with get, set

/// Represents a Meta Data of a test result.
type [<AllowNullLiteral>] TestResultMetaData =
    /// AutomatedTestName of test result.
    abstract automatedTestName: string with get, set
    /// AutomatedTestStorage of test result.
    abstract automatedTestStorage: string with get, set
    /// List of Flaky Identifier for TestCaseReferenceId
    abstract flakyIdentifiers: ResizeArray<TestFlakyIdentifier> with get, set
    /// Owner of test result.
    abstract owner: string with get, set
    /// Priority of test result.
    abstract priority: float with get, set
    /// ID of TestCaseReference.
    abstract testCaseReferenceId: float with get, set
    /// TestCaseTitle of test result.
    abstract testCaseTitle: string with get, set

/// Represents a TestResultMetaData Input
type [<AllowNullLiteral>] TestResultMetaDataUpdateInput =
    /// List of Flaky Identifiers
    abstract flakyIdentifiers: ResizeArray<TestFlakyIdentifier> with get, set

type [<AllowNullLiteral>] TestResultMetaDataUpdateResponse =
    abstract status: string with get, set

type [<AllowNullLiteral>] TestResultModelBase =
    /// Comment in result.
    abstract comment: string with get, set
    /// Time when execution completed.
    abstract completedDate: DateTime with get, set
    /// Duration of execution.
    abstract durationInMs: float with get, set
    /// Error message in result.
    abstract errorMessage: string with get, set
    /// Test outcome of result.
    abstract outcome: string with get, set
    /// Time when execution started.
    abstract startedDate: DateTime with get, set

type [<AllowNullLiteral>] TestResultParameter =
    abstract actionPath: string with get, set
    abstract actual: ResizeArray<float> with get, set
    abstract expected: ResizeArray<float> with get, set
    abstract iterationId: float with get, set
    abstract parameterName: string with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

/// Test parameter information in a test iteration.
type [<AllowNullLiteral>] TestResultParameterModel =
    /// Test step path where parameter is referenced.
    abstract actionPath: string with get, set
    /// Iteration ID.
    abstract iterationId: float with get, set
    /// Name of parameter.
    abstract parameterName: string with get, set
    /// This is step Id of test case. For shared step, it is step Id of shared step in test case workitem; step Id in shared step. Example: TestCase workitem has two steps: 1) Normal step with Id = 1 2) Shared Step with Id = 2. Inside shared step: a) Normal Step with Id = 1 Value for StepIdentifier for First step: "1" Second step: "2;1"
    abstract stepIdentifier: string with get, set
    /// Url of test parameter.
    abstract url: string with get, set
    /// Value of parameter.
    abstract value: string with get, set

type [<AllowNullLiteral>] TestResultPayload =
    abstract comment: string with get, set
    abstract name: string with get, set
    abstract stream: string with get, set

type [<AllowNullLiteral>] TestResultReset2 =
    abstract auditIdentity: string with get, set
    abstract dateModified: DateTime with get, set
    abstract projectId: string with get, set
    abstract revision: float with get, set
    abstract testResultId: float with get, set
    abstract testResultRV: ResizeArray<float> with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] TestResultsContext =
    abstract build: BuildReference with get, set
    abstract contextType: TestResultsContextType with get, set
    abstract pipelineReference: PipelineReference with get, set
    abstract release: ReleaseReference with get, set

type [<RequireQualifiedAccess>] TestResultsContextType =
    | Build = 1
    | Release = 2
    | Pipeline = 3

type [<AllowNullLiteral>] TestResultsDetails =
    abstract groupByField: string with get, set
    abstract resultsForGroup: ResizeArray<TestResultsDetailsForGroup> with get, set

type [<AllowNullLiteral>] TestResultsDetailsForGroup =
    abstract groupByValue: obj option with get, set
    abstract results: ResizeArray<TestCaseResult> with get, set
    abstract resultsCountByOutcome: AggregatedDataForResultTrendResultsByOutcome with get, set
    abstract tags: ResizeArray<string> with get, set

type [<AllowNullLiteral>] TestResultsEx2 =
    abstract bitValue: bool with get, set
    abstract creationDate: DateTime with get, set
    abstract dateTimeValue: DateTime with get, set
    abstract fieldId: float with get, set
    abstract fieldName: string with get, set
    abstract floatValue: float with get, set
    abstract guidValue: string with get, set
    abstract intValue: float with get, set
    abstract projectId: string with get, set
    abstract stringValue: string with get, set
    abstract testResultId: float with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] TestResultsGroupsForBuild =
    /// BuildId for which groupby result is fetched.
    abstract buildId: float with get, set
    /// The group by results
    abstract fields: ResizeArray<FieldDetailsForTestResults> with get, set

type [<AllowNullLiteral>] TestResultsGroupsForRelease =
    /// The group by results
    abstract fields: ResizeArray<FieldDetailsForTestResults> with get, set
    /// Release Environment Id for which groupby result is fetched.
    abstract releaseEnvId: float with get, set
    /// ReleaseId for which groupby result is fetched.
    abstract releaseId: float with get, set

type [<AllowNullLiteral>] TestResultsQuery =
    abstract fields: ResizeArray<string> with get, set
    abstract results: ResizeArray<TestCaseResult> with get, set
    abstract resultsFilter: ResultsFilter with get, set

type [<AllowNullLiteral>] TestResultsSettings =
    /// IsRequired and EmitDefaultValue are passed as false as if users doesn't pass anything, should not come for serialisation and deserialisation.
    abstract flakySettings: FlakySettings with get, set

type [<RequireQualifiedAccess>] TestResultsSettingsType =
    | All = 1
    | Flaky = 2

type [<AllowNullLiteral>] TestResultSummary =
    abstract aggregatedResultsAnalysis: AggregatedResultsAnalysis with get, set
    abstract noConfigRunsCount: float with get, set
    abstract teamProject: TfsCore.TeamProjectReference with get, set
    abstract testFailures: TestFailuresAnalysis with get, set
    abstract testResultsContext: TestResultsContext with get, set
    abstract totalRunsCount: float with get, set

type [<AllowNullLiteral>] TestResultsUpdateSettings =
    /// FlakySettings defines Flaky Settings Data.
    abstract flakySettings: FlakySettings with get, set

type [<AllowNullLiteral>] TestResultsWithWatermark =
    abstract changedDate: DateTime with get, set
    abstract pointsResults: ResizeArray<PointsResults2> with get, set
    abstract resultId: float with get, set
    abstract runId: float with get, set

type [<AllowNullLiteral>] TestResultTrendFilter =
    abstract branchNames: ResizeArray<string> with get, set
    abstract buildCount: float with get, set
    abstract definitionIds: ResizeArray<float> with get, set
    abstract envDefinitionIds: ResizeArray<float> with get, set
    abstract maxCompleteDate: DateTime with get, set
    abstract publishContext: string with get, set
    abstract testRunTitles: ResizeArray<string> with get, set
    abstract trendDays: float with get, set

/// Test run details.
type [<AllowNullLiteral>] TestRun =
    /// Build associated with this test run.
    abstract build: ShallowReference with get, set
    /// Build configuration details associated with this test run.
    abstract buildConfiguration: BuildConfiguration with get, set
    /// Comments entered by those analyzing the run.
    abstract comment: string with get, set
    /// Completed date time of the run.
    abstract completedDate: DateTime with get, set
    /// Test Run Controller.
    abstract controller: string with get, set
    /// Test Run CreatedDate.
    abstract createdDate: DateTime with get, set
    /// List of Custom Fields for TestRun.
    abstract customFields: ResizeArray<CustomTestField> with get, set
    /// Drop Location for the test Run.
    abstract dropLocation: string with get, set
    abstract dtlAutEnvironment: ShallowReference with get, set
    abstract dtlEnvironment: ShallowReference with get, set
    abstract dtlEnvironmentCreationDetails: DtlEnvironmentDetails with get, set
    /// Due date and time for test run.
    abstract dueDate: DateTime with get, set
    /// Error message associated with the run.
    abstract errorMessage: string with get, set
    abstract filter: RunFilter with get, set
    /// ID of the test run.
    abstract id: float with get, set
    /// Number of Incomplete Tests.
    abstract incompleteTests: float with get, set
    /// true if test run is automated, false otherwise.
    abstract isAutomated: bool with get, set
    /// The iteration to which the run belongs.
    abstract iteration: string with get, set
    /// Team foundation ID of the last updated the test run.
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last updated date and time
    abstract lastUpdatedDate: DateTime with get, set
    /// Name of the test run.
    abstract name: string with get, set
    /// Number of Not Applicable Tests.
    abstract notApplicableTests: float with get, set
    /// Team Foundation ID of the owner of the runs.
    abstract owner: WebApi.IdentityRef with get, set
    /// Number of passed tests in the run
    abstract passedTests: float with get, set
    /// Phase/State for the testRun.
    abstract phase: string with get, set
    /// Reference of the pipeline to which this test run belongs.
    abstract pipelineReference: PipelineReference with get, set
    /// Test plan associated with this test run.
    abstract plan: ShallowReference with get, set
    /// Post Process State.
    abstract postProcessState: string with get, set
    /// Project associated with this run.
    abstract project: ShallowReference with get, set
    /// Release Reference for the Test Run.
    abstract release: ReleaseReference with get, set
    /// Release Environment Uri for TestRun.
    abstract releaseEnvironmentUri: string with get, set
    /// Release Uri for TestRun.
    abstract releaseUri: string with get, set
    abstract revision: float with get, set
    /// RunSummary by outcome.
    abstract runStatistics: ResizeArray<RunStatistic> with get, set
    /// Start date time of the run.
    abstract startedDate: DateTime with get, set
    /// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
    abstract state: string with get, set
    /// TestRun Substate.
    abstract substate: TestRunSubstate with get, set
    /// Tags attached with this test run.
    abstract tags: ResizeArray<TestTag> with get, set
    /// Test environment associated with the run.
    abstract testEnvironment: TestEnvironment with get, set
    abstract testMessageLogId: float with get, set
    abstract testSettings: ShallowReference with get, set
    /// Total tests in the run
    abstract totalTests: float with get, set
    /// Number of failed tests in the run.
    abstract unanalyzedTests: float with get, set
    /// Url of the test run
    abstract url: string with get, set
    /// Web Access Url for TestRun.
    abstract webAccessUrl: string with get, set

type [<AllowNullLiteral>] TestRun2 =
    abstract buildConfigurationId: float with get, set
    abstract buildNumber: string with get, set
    abstract comment: string with get, set
    abstract completeDate: DateTime with get, set
    abstract controller: string with get, set
    abstract coverageId: float with get, set
    abstract creationDate: DateTime with get, set
    abstract deletedOn: DateTime with get, set
    abstract dropLocation: string with get, set
    abstract dueDate: DateTime with get, set
    abstract errorMessage: string with get, set
    abstract incompleteTests: float with get, set
    abstract isAutomated: bool with get, set
    abstract isBvt: bool with get, set
    abstract isMigrated: bool with get, set
    abstract iterationId: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract legacySharePath: string with get, set
    abstract maxReservedResultId: float with get, set
    abstract notApplicableTests: float with get, set
    abstract owner: string with get, set
    abstract passedTests: float with get, set
    abstract postProcessState: float with get, set
    abstract projectId: string with get, set
    abstract publicTestSettingsId: float with get, set
    abstract releaseEnvironmentUri: string with get, set
    abstract releaseUri: string with get, set
    abstract revision: float with get, set
    abstract startDate: DateTime with get, set
    abstract state: float with get, set
    abstract testEnvironmentId: string with get, set
    abstract testMessageLogId: float with get, set
    abstract testPlanId: float with get, set
    abstract testRunContextId: float with get, set
    abstract testRunId: float with get, set
    abstract testSettingsId: float with get, set
    abstract title: string with get, set
    abstract totalTests: float with get, set
    abstract ``type``: float with get, set
    abstract unanalyzedTests: float with get, set
    abstract version: float with get, set

type [<AllowNullLiteral>] TestRunCanceledEvent =
    inherit TestRunEvent

type [<AllowNullLiteral>] TestRunContext2 =
    abstract buildRefId: float with get, set
    abstract projectId: string with get, set
    abstract releaseRefId: float with get, set
    abstract sourceWorkflow: string with get, set
    abstract testRunContextId: float with get, set

/// Test Run Code Coverage Details
type [<AllowNullLiteral>] TestRunCoverage =
    /// Last Error
    abstract lastError: string with get, set
    /// List of Modules Coverage
    abstract modules: ResizeArray<ModuleCoverage> with get, set
    /// State
    abstract state: string with get, set
    /// Reference of test Run.
    abstract testRun: ShallowReference with get, set

type [<AllowNullLiteral>] TestRunCreatedEvent =
    inherit TestRunEvent

type [<AllowNullLiteral>] TestRunEvent =
    abstract testRun: TestRun with get, set

type [<AllowNullLiteral>] TestRunEx2 =
    abstract bitValue: bool with get, set
    abstract createdDate: DateTime with get, set
    abstract dateTimeValue: DateTime with get, set
    abstract fieldId: float with get, set
    abstract fieldName: string with get, set
    abstract floatValue: float with get, set
    abstract guidValue: string with get, set
    abstract intValue: float with get, set
    abstract projectId: string with get, set
    abstract stringValue: string with get, set
    abstract testRunId: float with get, set

type [<AllowNullLiteral>] TestRunExtended2 =
    abstract autEnvironmentUrl: string with get, set
    abstract csmContent: string with get, set
    abstract csmParameters: string with get, set
    abstract projectId: string with get, set
    abstract sourceFilter: string with get, set
    abstract subscriptionName: string with get, set
    abstract substate: float with get, set
    abstract testCaseFilter: string with get, set
    abstract testEnvironmentUrl: string with get, set
    abstract testRunId: float with get, set

type [<RequireQualifiedAccess>] TestRunOutcome =
    | Passed = 0
    | Failed = 1
    | NotImpacted = 2
    | Others = 3

type [<RequireQualifiedAccess>] TestRunPublishContext =
    | Build = 1
    | Release = 2
    | All = 3

type [<AllowNullLiteral>] TestRunStartedEvent =
    inherit TestRunEvent

type [<RequireQualifiedAccess>] TestRunState =
    | Unspecified = 0
    | NotStarted = 1
    | InProgress = 2
    | Completed = 3
    | Aborted = 4
    | Waiting = 5
    | NeedsInvestigation = 6

/// Test run statistics.
type [<AllowNullLiteral>] TestRunStatistic =
    abstract run: ShallowReference with get, set
    abstract runStatistics: ResizeArray<RunStatistic> with get, set

type [<RequireQualifiedAccess>] TestRunSubstate =
    | None = 0
    | CreatingEnvironment = 1
    | RunningTests = 2
    | CanceledByUser = 3
    | AbortedBySystem = 4
    | TimedOut = 5
    | PendingAnalysis = 6
    | Analyzed = 7
    | CancellationInProgress = 8

type [<AllowNullLiteral>] TestRunSummary2 =
    abstract isRerun: bool with get, set
    abstract projectId: string with get, set
    abstract resultCount: float with get, set
    abstract resultDuration: float with get, set
    abstract runDuration: float with get, set
    abstract testOutcome: float with get, set
    abstract testRunCompletedDate: DateTime with get, set
    abstract testRunContextId: float with get, set
    abstract testRunId: float with get, set
    abstract testRunStatsId: float with get, set

type [<AllowNullLiteral>] TestRunWithDtlEnvEvent =
    inherit TestRunEvent
    abstract configurationIds: ResizeArray<float> with get, set
    abstract mappedTestRunEventType: string with get, set
    abstract runTimeout: obj option with get, set
    abstract testConfigurationsMapping: string with get, set

/// Test Session
type [<AllowNullLiteral>] TestSession =
    /// Area path of the test session
    abstract area: ShallowReference with get, set
    /// Comments in the test session
    abstract comment: string with get, set
    /// Duration of the session
    abstract endDate: DateTime with get, set
    /// Id of the test session
    abstract id: float with get, set
    /// Last Updated By  Reference
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last updated date
    abstract lastUpdatedDate: DateTime with get, set
    /// Owner of the test session
    abstract owner: WebApi.IdentityRef with get, set
    /// Project to which the test session belongs
    abstract project: ShallowReference with get, set
    /// Generic store for test session data
    abstract propertyBag: PropertyBag with get, set
    /// Revision of the test session
    abstract revision: float with get, set
    /// Source of the test session
    abstract source: TestSessionSource with get, set
    /// Start date
    abstract startDate: DateTime with get, set
    /// State of the test session
    abstract state: TestSessionState with get, set
    /// Title of the test session
    abstract title: string with get, set
    /// Url of Test Session Resource
    abstract url: string with get, set

type [<AllowNullLiteral>] TestSessionExploredWorkItemReference =
    inherit TestSessionWorkItemReference
    /// Workitem references of workitems filed as a part of the current workitem exploration.
    abstract associatedWorkItems: ResizeArray<TestSessionWorkItemReference> with get, set
    /// Time when exploration of workitem ended.
    abstract endTime: DateTime with get, set
    /// Time when explore of workitem was started.
    abstract startTime: DateTime with get, set

type [<RequireQualifiedAccess>] TestSessionSource =
    | Unknown = 0
    | XTDesktop = 1
    | FeedbackDesktop = 2
    | XTWeb = 3
    | FeedbackWeb = 4
    | XTDesktop2 = 5
    | SessionInsightsForAll = 6

type [<RequireQualifiedAccess>] TestSessionState =
    | Unspecified = 0
    | NotStarted = 1
    | InProgress = 2
    | Paused = 3
    | Completed = 4
    | Declined = 5

type [<AllowNullLiteral>] TestSessionWorkItemReference =
    /// Id of the workitem
    abstract id: float with get, set
    /// Type of the workitem
    abstract ``type``: string with get, set

/// Represents the test settings of the run. Used to create test settings and fetch test settings
type [<AllowNullLiteral>] TestSettings =
    /// Area path required to create test settings
    abstract areaPath: string with get, set
    /// Description of the test settings. Used in create test settings.
    abstract description: string with get, set
    /// Indicates if the tests settings is public or private.Used in create test settings.
    abstract isPublic: bool with get, set
    /// Xml string of machine roles. Used in create test settings.
    abstract machineRoles: string with get, set
    /// Test settings content.
    abstract testSettingsContent: string with get, set
    /// Test settings id.
    abstract testSettingsId: float with get, set
    /// Test settings name.
    abstract testSettingsName: string with get, set

/// Represents the test settings of the run. Used to create test settings and fetch test settings
type [<AllowNullLiteral>] TestSettings2 =
    /// Area path required to create test settings
    abstract areaPath: string with get, set
    abstract createdBy: WebApi.IdentityRef with get, set
    abstract createdDate: DateTime with get, set
    /// Description of the test settings. Used in create test settings.
    abstract description: string with get, set
    /// Indicates if the tests settings is public or private.Used in create test settings.
    abstract isPublic: bool with get, set
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    abstract lastUpdatedDate: DateTime with get, set
    /// Xml string of machine roles. Used in create test settings.
    abstract machineRoles: string with get, set
    /// Test settings content.
    abstract testSettingsContent: string with get, set
    /// Test settings id.
    abstract testSettingsId: float with get, set
    /// Test settings name.
    abstract testSettingsName: string with get, set

type [<AllowNullLiteral>] TestSettingsMachineRole =
    abstract isExecution: bool with get, set
    abstract name: string with get, set

/// Represents a sub result of a test result.
type [<AllowNullLiteral>] TestSubResult =
    /// Comment in sub result.
    abstract comment: string with get, set
    /// Time when test execution completed.
    abstract completedDate: DateTime with get, set
    /// Machine where test executed.
    abstract computerName: string with get, set
    /// Reference to test configuration.
    abstract configuration: ShallowReference with get, set
    /// Additional properties of sub result.
    abstract customFields: ResizeArray<CustomTestField> with get, set
    /// Name of sub result.
    abstract displayName: string with get, set
    /// Duration of test execution.
    abstract durationInMs: float with get, set
    /// Error message in sub result.
    abstract errorMessage: string with get, set
    /// ID of sub result.
    abstract id: float with get, set
    /// Time when result last updated.
    abstract lastUpdatedDate: DateTime with get, set
    /// Outcome of sub result.
    abstract outcome: string with get, set
    /// Immediate parent ID of sub result.
    abstract parentId: float with get, set
    /// Hierarchy type of the result, default value of None means its leaf node.
    abstract resultGroupType: ResultGroupType with get, set
    /// Index number of sub result.
    abstract sequenceId: float with get, set
    /// Stacktrace.
    abstract stackTrace: string with get, set
    /// Time when test execution started.
    abstract startedDate: DateTime with get, set
    /// List of sub results inside a sub result, if ResultGroupType is not None, it holds corresponding type sub results.
    abstract subResults: ResizeArray<TestSubResult> with get, set
    /// Reference to test result.
    abstract testResult: TestCaseResultIdentifier with get, set
    /// Url of sub result.
    abstract url: string with get, set

/// Test suite
type [<AllowNullLiteral>] TestSuite =
    /// Area uri of the test suite.
    abstract areaUri: string with get, set
    /// Child test suites of current test suite.
    abstract children: ResizeArray<TestSuite> with get, set
    /// Test suite default configuration.
    abstract defaultConfigurations: ResizeArray<ShallowReference> with get, set
    /// Test suite default testers.
    abstract defaultTesters: ResizeArray<ShallowReference> with get, set
    /// Id of test suite.
    abstract id: float with get, set
    /// Default configuration was inherited or not.
    abstract inheritDefaultConfigurations: bool with get, set
    /// Last error for test suite.
    abstract lastError: string with get, set
    /// Last populated date.
    abstract lastPopulatedDate: DateTime with get, set
    /// IdentityRef of user who has updated test suite recently.
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last update date.
    abstract lastUpdatedDate: DateTime with get, set
    /// Name of test suite.
    abstract name: string with get, set
    /// Test suite parent shallow reference.
    abstract parent: ShallowReference with get, set
    /// Test plan to which the test suite belongs.
    abstract plan: ShallowReference with get, set
    /// Test suite project shallow reference.
    abstract project: ShallowReference with get, set
    /// Test suite query string, for dynamic suites.
    abstract queryString: string with get, set
    /// Test suite requirement id.
    abstract requirementId: float with get, set
    /// Test suite revision.
    abstract revision: float with get, set
    /// State of test suite.
    abstract state: string with get, set
    /// List of shallow reference of suites.
    abstract suites: ResizeArray<ShallowReference> with get, set
    /// Test suite type.
    abstract suiteType: string with get, set
    /// Test cases count.
    abstract testCaseCount: float with get, set
    /// Test case url.
    abstract testCasesUrl: string with get, set
    /// Used in tree view. If test suite is root suite then, it is name of plan otherwise title of the suite.
    abstract text: string with get, set
    /// Url of test suite.
    abstract url: string with get, set

/// Test suite clone request
type [<AllowNullLiteral>] TestSuiteCloneRequest =
    /// Clone options for cloning the test suite.
    abstract cloneOptions: CloneOptions with get, set
    /// Suite id under which, we have to clone the suite.
    abstract destinationSuiteId: float with get, set
    /// Destination suite project name.
    abstract destinationSuiteProjectName: string with get, set

type [<AllowNullLiteral>] TestSummaryForWorkItem =
    abstract summary: AggregatedDataForResultTrend with get, set
    abstract workItem: WorkItemReference with get, set

/// Tag attached to a run or result.
type [<AllowNullLiteral>] TestTag =
    /// Name of the tag, alphanumeric value less than 30 chars
    abstract name: string with get, set

/// Test tag summary for build or release grouped by test run.
type [<AllowNullLiteral>] TestTagSummary =
    /// Dictionary which contains tags associated with a test run.
    abstract tagsGroupByTestArtifact: TestTagSummaryTagsGroupByTestArtifact with get, set

/// Tags to update to a run or result.
type [<AllowNullLiteral>] TestTagsUpdateModel =
    abstract tags: ResizeArray<TestTagsUpdateModelTags> with get, set

type [<AllowNullLiteral>] TestToWorkItemLinks =
    abstract test: TestMethod with get, set
    abstract workItems: ResizeArray<WorkItemReference> with get, set

type [<AllowNullLiteral>] TestVariable =
    /// Description of the test variable
    abstract description: string with get, set
    /// Id of the test variable
    abstract id: float with get, set
    /// Name of the test variable
    abstract name: string with get, set
    /// Project to which the test variable belongs
    abstract project: ShallowReference with get, set
    /// Revision
    abstract revision: float with get, set
    /// Url of the test variable
    abstract url: string with get, set
    /// List of allowed values
    abstract values: ResizeArray<string> with get, set

type [<AllowNullLiteral>] UpdatedProperties =
    abstract id: float with get, set
    abstract lastUpdated: DateTime with get, set
    abstract lastUpdatedBy: string with get, set
    abstract lastUpdatedByName: string with get, set
    abstract revision: float with get, set

type [<AllowNullLiteral>] UpdateTestRunRequest =
    abstract attachmentsToAdd: ResizeArray<TestResultAttachment> with get, set
    abstract attachmentsToDelete: ResizeArray<TestResultAttachmentIdentity> with get, set
    abstract projectName: string with get, set
    abstract shouldHyderate: bool with get, set
    abstract testRun: LegacyTestRun with get, set

type [<AllowNullLiteral>] UpdateTestRunResponse =
    abstract attachmentIds: ResizeArray<float> with get, set
    abstract updatedProperties: UpdatedProperties with get, set

type [<AllowNullLiteral>] UploadAttachmentsRequest =
    abstract attachments: ResizeArray<HttpPostedTcmAttachment> with get, set
    abstract requestParams: CloneOptionsOverrideParameters with get, set

/// WorkItem reference Details.
type [<AllowNullLiteral>] WorkItemReference =
    /// WorkItem Id.
    abstract id: string with get, set
    /// WorkItem Name.
    abstract name: string with get, set
    /// WorkItem Type.
    abstract ``type``: string with get, set
    /// WorkItem Url. Valid Values : (Bug, Task, User Story, Test Case)
    abstract url: string with get, set
    /// WorkItem WebUrl.
    abstract webUrl: string with get, set

type [<AllowNullLiteral>] WorkItemToTestLinks =
    abstract executedIn: Service with get, set
    abstract tests: ResizeArray<TestMethod> with get, set
    abstract workItem: WorkItemReference with get, set

type [<AllowNullLiteral>] AggregatedDataForResultTrendResultsByOutcome =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> AggregatedResultsByOutcome with get, set

type [<AllowNullLiteral>] AggregatedDataForResultTrendRunSummaryByState =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> AggregatedRunsByState with get, set

type [<AllowNullLiteral>] AggregatedResultsAnalysisRunSummaryByOutcome =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> AggregatedRunsByOutcome with get, set

type [<AllowNullLiteral>] CloneOptionsOverrideParameters =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] PointWorkItemPropertyWorkItem =
    abstract key: string with get, set
    abstract value: obj option with get, set

type [<AllowNullLiteral>] ResultsSummaryByOutcomeAggregatedResultDetailsByOutcome =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> AggregatedResultDetailsByOutcome with get, set

type [<AllowNullLiteral>] ResultSummaryResultSummaryByRunState =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> ResultsSummaryByOutcome with get, set

type [<AllowNullLiteral>] RunSummaryRunSummaryByOutcome =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> float with get, set

type [<AllowNullLiteral>] TestFieldDataDimensions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] TestTagSummaryTagsGroupByTestArtifact =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> ResizeArray<TestTag> with get, set

type [<AllowNullLiteral>] TestTagsUpdateModelTags =
    abstract key: OperationType with get, set
    abstract value: ResizeArray<TestTag> with get, set
module TfsCore = ___Core_Core
module Test = ___Test_Test
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract TestRestClient: TestRestClientStatic

type [<AllowNullLiteral>] TestRestClient =
    inherit RestClientBase
    /// <summary>Gets the action results for an iteration in a test result.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result that contains the iterations.</param>
    /// <param name="iterationId">- ID of the iteration that contains the actions.</param>
    /// <param name="actionPath">- Path of a specific action, used to get just that action.</param>
    abstract getActionResults: project: string * runId: float * testCaseResultId: float * iterationId: float * ?actionPath: string -> Promise<ResizeArray<Test.TestActionResultModel>>
    /// <summary>Attach a file to test step result</summary>
    /// <param name="attachmentRequestModel">- Attachment details TestAttachmentRequestModel</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result that contains the iteration</param>
    /// <param name="iterationId">- ID of the test result iteration.</param>
    /// <param name="actionPath">- Hex value of test result action path.</param>
    abstract createTestIterationResultAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float * testCaseResultId: float * iterationId: float * ?actionPath: string -> Promise<Test.TestAttachmentReference>
    /// <summary>Attach a file to a test result.</summary>
    /// <param name="attachmentRequestModel">- Attachment details TestAttachmentRequestModel</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result against which attachment has to be uploaded.</param>
    abstract createTestResultAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float * testCaseResultId: float -> Promise<Test.TestAttachmentReference>
    /// <summary>Attach a file to a test result</summary>
    /// <param name="attachmentRequestModel">- Attachment Request Model.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test results that contains sub result.</param>
    /// <param name="testSubResultId">- ID of the test sub results against which attachment has to be uploaded.</param>
    abstract createTestSubResultAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float * testCaseResultId: float * testSubResultId: float -> Promise<Test.TestAttachmentReference>
    /// <summary>Download a test result attachment by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the testCaseResultId.</param>
    /// <param name="testCaseResultId">- ID of the test result whose attachment has to be downloaded.</param>
    /// <param name="attachmentId">- ID of the test result attachment to be downloaded.</param>
    abstract getTestResultAttachmentContent: project: string * runId: float * testCaseResultId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <summary>Get list of test result attachments reference.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result.</param>
    abstract getTestResultAttachments: project: string * runId: float * testCaseResultId: float -> Promise<ResizeArray<Test.TestAttachment>>
    /// <summary>Download a test result attachment by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the testCaseResultId.</param>
    /// <param name="testCaseResultId">- ID of the test result whose attachment has to be downloaded.</param>
    /// <param name="attachmentId">- ID of the test result attachment to be downloaded.</param>
    abstract getTestResultAttachmentZip: project: string * runId: float * testCaseResultId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <summary>Download a test sub result attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test results that contains sub result.</param>
    /// <param name="attachmentId">- ID of the test result attachment to be downloaded</param>
    /// <param name="testSubResultId">- ID of the test sub result whose attachment has to be downloaded</param>
    abstract getTestSubResultAttachmentContent: project: string * runId: float * testCaseResultId: float * attachmentId: float * testSubResultId: float -> Promise<ArrayBuffer>
    /// <summary>Get list of test sub result attachments</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test results that contains sub result.</param>
    /// <param name="testSubResultId">- ID of the test sub result whose attachment has to be downloaded</param>
    abstract getTestSubResultAttachments: project: string * runId: float * testCaseResultId: float * testSubResultId: float -> Promise<ResizeArray<Test.TestAttachment>>
    /// <summary>Download a test sub result attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test results that contains sub result.</param>
    /// <param name="attachmentId">- ID of the test result attachment to be downloaded</param>
    /// <param name="testSubResultId">- ID of the test sub result whose attachment has to be downloaded</param>
    abstract getTestSubResultAttachmentZip: project: string * runId: float * testCaseResultId: float * attachmentId: float * testSubResultId: float -> Promise<ArrayBuffer>
    /// <summary>Attach a file to a test run.</summary>
    /// <param name="attachmentRequestModel">- Attachment details TestAttachmentRequestModel</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run against which attachment has to be uploaded.</param>
    abstract createTestRunAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float -> Promise<Test.TestAttachmentReference>
    /// <summary>Download a test run attachment by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run whose attachment has to be downloaded.</param>
    /// <param name="attachmentId">- ID of the test run attachment to be downloaded.</param>
    abstract getTestRunAttachmentContent: project: string * runId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <summary>Get list of test run attachments reference.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run.</param>
    abstract getTestRunAttachments: project: string * runId: float -> Promise<ResizeArray<Test.TestAttachment>>
    /// <summary>Download a test run attachment by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run whose attachment has to be downloaded.</param>
    /// <param name="attachmentId">- ID of the test run attachment to be downloaded.</param>
    abstract getTestRunAttachmentZip: project: string * runId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    abstract getBugsLinkedToTestResult: project: string * runId: float * testCaseResultId: float -> Promise<ResizeArray<Test.WorkItemReference>>
    /// <summary>Get code coverage data for a build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- ID of the build for which code coverage data needs to be fetched.</param>
    /// <param name="flags">- Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.</param>
    abstract getBuildCodeCoverage: project: string * buildId: float * flags: float -> Promise<ResizeArray<Test.BuildCoverage>>
    /// <summary>Get Code Coverage Summary for Build.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- ID of the build for which code coverage data needs to be fetched.</param>
    /// <param name="deltaBuildId">- Delta Build id (optional)</param>
    abstract getCodeCoverageSummary: project: string * buildId: float * ?deltaBuildId: float -> Promise<Test.CodeCoverageSummary>
    /// <summary>http://(tfsserver):8080/tfs/DefaultCollection/_apis/test/CodeCoverage?buildId=10 Request: Json of code coverage summary</summary>
    /// <param name="coverageData">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    abstract updateCodeCoverageSummary: coverageData: Test.CodeCoverageData * project: string * buildId: float -> Promise<unit>
    /// <summary>Get code coverage data for a test run</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run for which code coverage data needs to be fetched.</param>
    /// <param name="flags">- Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.</param>
    abstract getTestRunCodeCoverage: project: string * runId: float * flags: float -> Promise<ResizeArray<Test.TestRunCoverage>>
    /// <param name="newFields">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addCustomFields: newFields: ResizeArray<Test.CustomTestFieldDefinition> * project: string -> Promise<ResizeArray<Test.CustomTestFieldDefinition>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopeFilter">-</param>
    abstract queryCustomFields: project: string * scopeFilter: Test.CustomTestFieldScope -> Promise<ResizeArray<Test.CustomTestFieldDefinition>>
    /// <param name="filter">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestResultHistory: filter: Test.ResultsFilter * project: string -> Promise<Test.TestResultHistory>
    /// <summary>Get iteration for a result</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result that contains the iterations.</param>
    /// <param name="iterationId">- Id of the test results Iteration.</param>
    /// <param name="includeActionResults">- Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.</param>
    abstract getTestIteration: project: string * runId: float * testCaseResultId: float * iterationId: float * ?includeActionResults: bool -> Promise<Test.TestIterationDetailsModel>
    /// <summary>Get iterations for a result</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result that contains the iterations.</param>
    /// <param name="includeActionResults">- Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.</param>
    abstract getTestIterations: project: string * runId: float * testCaseResultId: float * ?includeActionResults: bool -> Promise<ResizeArray<Test.TestIterationDetailsModel>>
    /// <param name="workItemQuery">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getLinkedWorkItemsByQuery: workItemQuery: Test.LinkedWorkItemsQuery * project: string -> Promise<ResizeArray<Test.LinkedWorkItemsQueryResult>>
    /// <summary>Get test run message logs</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to get.</param>
    abstract getTestRunLogs: project: string * runId: float -> Promise<ResizeArray<Test.TestMessageLogDetails>>
    /// <summary>Get a list of parameterized results</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the test run that contains the result.</param>
    /// <param name="testCaseResultId">- ID of the test result that contains the iterations.</param>
    /// <param name="iterationId">- ID of the iteration that contains the parameterized results.</param>
    /// <param name="paramName">- Name of the parameter.</param>
    abstract getResultParameters: project: string * runId: float * testCaseResultId: float * iterationId: float * ?paramName: string -> Promise<ResizeArray<Test.TestResultParameterModel>>
    /// <summary>Get a test point.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan.</param>
    /// <param name="suiteId">- ID of the suite that contains the point.</param>
    /// <param name="pointIds">- ID of the test point to get.</param>
    /// <param name="witFields">- Comma-separated list of work item field names.</param>
    abstract getPoint: project: string * planId: float * suiteId: float * pointIds: float * ?witFields: string -> Promise<Test.TestPoint>
    /// <summary>Get a list of test points.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan.</param>
    /// <param name="suiteId">- ID of the suite that contains the points.</param>
    /// <param name="witFields">- Comma-separated list of work item field names.</param>
    /// <param name="configurationId">- Get test points for specific configuration.</param>
    /// <param name="testCaseId">- Get test points for a specific test case, valid when configurationId is not set.</param>
    /// <param name="testPointIds">- Get test points for comma-separated list of test point IDs, valid only when configurationId and testCaseId are not set.</param>
    /// <param name="includePointDetails">- Include all properties for the test point.</param>
    /// <param name="skip">- Number of test points to skip..</param>
    /// <param name="top">- Number of test points to return.</param>
    abstract getPoints: project: string * planId: float * suiteId: float * ?witFields: string * ?configurationId: string * ?testCaseId: string * ?testPointIds: string * ?includePointDetails: bool * ?skip: float * ?top: float -> Promise<ResizeArray<Test.TestPoint>>
    /// <summary>Update test points.</summary>
    /// <param name="pointUpdateModel">- Data to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan.</param>
    /// <param name="suiteId">- ID of the suite that contains the points.</param>
    /// <param name="pointIds">- ID of the test point to get. Use a comma-separated list of IDs to update multiple test points.</param>
    abstract updateTestPoints: pointUpdateModel: Test.PointUpdateModel * project: string * planId: float * suiteId: float * pointIds: string -> Promise<ResizeArray<Test.TestPoint>>
    /// <summary>Get test points using query.</summary>
    /// <param name="query">- TestPointsQuery to get test points.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="skip">- Number of test points to skip..</param>
    /// <param name="top">- Number of test points to return.</param>
    abstract getPointsByQuery: query: Test.TestPointsQuery * project: string * ?skip: float * ?top: float -> Promise<Test.TestPointsQuery>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="groupBy">-</param>
    /// <param name="filter">-</param>
    /// <param name="orderby">-</param>
    /// <param name="shouldIncludeResults">-</param>
    /// <param name="queryRunSummaryForInProgress">-</param>
    abstract getTestResultDetailsForBuild: project: string * buildId: float * ?publishContext: string * ?groupBy: string * ?filter: string * ?orderby: string * ?shouldIncludeResults: bool * ?queryRunSummaryForInProgress: bool -> Promise<Test.TestResultsDetails>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="groupBy">-</param>
    /// <param name="filter">-</param>
    /// <param name="orderby">-</param>
    /// <param name="shouldIncludeResults">-</param>
    /// <param name="queryRunSummaryForInProgress">-</param>
    abstract getTestResultDetailsForRelease: project: string * releaseId: float * releaseEnvId: float * ?publishContext: string * ?groupBy: string * ?filter: string * ?orderby: string * ?shouldIncludeResults: bool * ?queryRunSummaryForInProgress: bool -> Promise<Test.TestResultsDetails>
    /// <param name="document">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract publishTestResultDocument: document: Test.TestResultDocument * project: string * runId: float -> Promise<Test.TestResultDocument>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="fields">-</param>
    /// <param name="continuationToken">-</param>
    abstract getResultGroupsByBuild: project: string * buildId: float * publishContext: string * ?fields: ResizeArray<string> * ?continuationToken: string -> Promise<ResizeArray<Test.FieldDetailsForTestResults>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="releaseEnvId">-</param>
    /// <param name="fields">-</param>
    /// <param name="continuationToken">-</param>
    abstract getResultGroupsByRelease: project: string * releaseId: float * publishContext: string * ?releaseEnvId: float * ?fields: ResizeArray<string> * ?continuationToken: string -> Promise<ResizeArray<Test.FieldDetailsForTestResults>>
    /// <summary>Get list of test Result meta data details for corresponding testcasereferenceId</summary>
    /// <param name="testReferenceIds">- TestCaseReference Ids of the test Result to be queried, comma seperated list of valid ids (limit no. of ids 200).</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestResultsMetaData: testReferenceIds: ResizeArray<string> * project: string -> Promise<ResizeArray<Test.TestResultMetaData>>
    /// <summary>Get test result retention settings</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getResultRetentionSettings: project: string -> Promise<Test.ResultRetentionSettings>
    /// <summary>Update test result retention settings</summary>
    /// <param name="retentionSettings">- Test result retention settings details to be updated</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateResultRetentionSettings: retentionSettings: Test.ResultRetentionSettings * project: string -> Promise<Test.ResultRetentionSettings>
    /// <summary>Add test results to a test run.</summary>
    /// <param name="results">- List of test results to add.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Test run ID into which test results to add.</param>
    abstract addTestResultsToTestRun: results: ResizeArray<Test.TestCaseResult> * project: string * runId: float -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <summary>Get a test result for a test run.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Test run ID of a test result to fetch.</param>
    /// <param name="testCaseResultId">- Test result ID.</param>
    /// <param name="detailsToInclude">- Details to include with test results. Default is None. Other values are Iterations, WorkItems and SubResults.</param>
    abstract getTestResultById: project: string * runId: float * testCaseResultId: float * ?detailsToInclude: Test.ResultDetails -> Promise<Test.TestCaseResult>
    /// <summary>Get test results for a test run.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Test run ID of test results to fetch.</param>
    /// <param name="detailsToInclude">- Details to include with test results. Default is None. Other values are Iterations and WorkItems.</param>
    /// <param name="skip">- Number of test results to skip from beginning.</param>
    /// <param name="top">- Number of test results to return. Maximum is 1000 when detailsToInclude is None and 200 otherwise.</param>
    /// <param name="outcomes">- Comma separated list of test outcomes to filter test results.</param>
    abstract getTestResults: project: string * runId: float * ?detailsToInclude: Test.ResultDetails * ?skip: float * ?top: float * ?outcomes: ResizeArray<Test.TestOutcome> -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <summary>Update test results in a test run.</summary>
    /// <param name="results">- List of test results to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Test run ID whose test results to update.</param>
    abstract updateTestResults: results: ResizeArray<Test.TestCaseResult> * project: string * runId: float -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <param name="query">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getTestResultsByQuery: query: Test.TestResultsQuery * project: string -> Promise<Test.TestResultsQuery>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="outcomes">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    abstract getTestResultsByBuild: project: string * buildId: float * ?publishContext: string * ?outcomes: ResizeArray<Test.TestOutcome> * ?top: float * ?continuationToken: string -> Promise<ResizeArray<Test.ShallowTestCaseResult>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvid">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="outcomes">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    abstract getTestResultsByRelease: project: string * releaseId: float * ?releaseEnvid: float * ?publishContext: string * ?outcomes: ResizeArray<Test.TestOutcome> * ?top: float * ?continuationToken: string -> Promise<ResizeArray<Test.ShallowTestCaseResult>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="includeFailureDetails">-</param>
    /// <param name="buildToCompare">-</param>
    abstract queryTestResultsReportForBuild: project: string * buildId: float * ?publishContext: string * ?includeFailureDetails: bool * ?buildToCompare: Test.BuildReference -> Promise<Test.TestResultSummary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="includeFailureDetails">-</param>
    /// <param name="releaseToCompare">-</param>
    abstract queryTestResultsReportForRelease: project: string * releaseId: float * releaseEnvId: float * ?publishContext: string * ?includeFailureDetails: bool * ?releaseToCompare: Test.ReleaseReference -> Promise<Test.TestResultSummary>
    /// <param name="releases">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestResultsSummaryForReleases: releases: ResizeArray<Test.ReleaseReference> * project: string -> Promise<ResizeArray<Test.TestResultSummary>>
    /// <param name="resultsContext">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="workItemIds">-</param>
    abstract queryTestSummaryByRequirement: resultsContext: Test.TestResultsContext * project: string * ?workItemIds: ResizeArray<float> -> Promise<ResizeArray<Test.TestSummaryForWorkItem>>
    /// <param name="filter">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryResultTrendForBuild: filter: Test.TestResultTrendFilter * project: string -> Promise<ResizeArray<Test.AggregatedDataForResultTrend>>
    /// <param name="filter">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryResultTrendForRelease: filter: Test.TestResultTrendFilter * project: string -> Promise<ResizeArray<Test.AggregatedDataForResultTrend>>
    /// <summary>Get test run statistics , used when we want to get summary of a run by outcome.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to get.</param>
    abstract getTestRunStatistics: project: string * runId: float -> Promise<Test.TestRunStatistic>
    /// <summary>Create new test run.</summary>
    /// <param name="testRun">- Run details RunCreateModel</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestRun: testRun: Test.RunCreateModel * project: string -> Promise<Test.TestRun>
    /// <summary>Delete a test run by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to delete.</param>
    abstract deleteTestRun: project: string * runId: float -> Promise<unit>
    /// <summary>Get a test run by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to get.</param>
    /// <param name="includeDetails">- Defualt value is true. It includes details like run statistics,release,build,Test enviornment,Post process state and more</param>
    abstract getTestRunById: project: string * runId: float * ?includeDetails: bool -> Promise<Test.TestRun>
    /// <summary>Get a list of test runs.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildUri">- URI of the build that the runs used.</param>
    /// <param name="owner">- Team foundation ID of the owner of the runs.</param>
    /// <param name="tmiRunId">-</param>
    /// <param name="planId">- ID of the test plan that the runs are a part of.</param>
    /// <param name="includeRunDetails">- If true, include all the properties of the runs.</param>
    /// <param name="automated">- If true, only returns automated runs.</param>
    /// <param name="skip">- Number of test runs to skip.</param>
    /// <param name="top">- Number of test runs to return.</param>
    abstract getTestRuns: project: string * ?buildUri: string * ?owner: string * ?tmiRunId: string * ?planId: float * ?includeRunDetails: bool * ?automated: bool * ?skip: float * ?top: float -> Promise<ResizeArray<Test.TestRun>>
    /// <summary>Query Test Runs based on filters. Mandatory fields are minLastUpdatedDate and maxLastUpdatedDate.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="minLastUpdatedDate">- Minimum Last Modified Date of run to be queried (Mandatory).</param>
    /// <param name="maxLastUpdatedDate">- Maximum Last Modified Date of run to be queried (Mandatory, difference between min and max date can be atmost 7 days).</param>
    /// <param name="state">- Current state of the Runs to be queried.</param>
    /// <param name="planIds">- Plan Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="isAutomated">- Automation type of the Runs to be queried.</param>
    /// <param name="publishContext">- PublishContext of the Runs to be queried.</param>
    /// <param name="buildIds">- Build Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="buildDefIds">- Build Definition Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="branchName">- Source Branch name of the Runs to be queried.</param>
    /// <param name="releaseIds">- Release Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="releaseDefIds">- Release Definition Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="releaseEnvIds">- Release Environment Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="releaseEnvDefIds">- Release Environment Definition Ids of the Runs to be queried, comma seperated list of valid ids (limit no. of ids 10).</param>
    /// <param name="runTitle">- Run Title of the Runs to be queried.</param>
    /// <param name="top">- Number of runs to be queried. Limit is 100</param>
    /// <param name="continuationToken">- continuationToken received from previous batch or null for first batch. It is not supposed to be created (or altered, if received from last batch) by user.</param>
    abstract queryTestRuns: project: string * minLastUpdatedDate: DateTime * maxLastUpdatedDate: DateTime * ?state: Test.TestRunState * ?planIds: ResizeArray<float> * ?isAutomated: bool * ?publishContext: Test.TestRunPublishContext * ?buildIds: ResizeArray<float> * ?buildDefIds: ResizeArray<float> * ?branchName: string * ?releaseIds: ResizeArray<float> * ?releaseDefIds: ResizeArray<float> * ?releaseEnvIds: ResizeArray<float> * ?releaseEnvDefIds: ResizeArray<float> * ?runTitle: string * ?top: float * ?continuationToken: string -> Promise<ResizeArray<Test.TestRun>>
    /// <summary>Update test run by its ID.</summary>
    /// <param name="runUpdateModel">- Run details RunUpdateModel</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to update.</param>
    abstract updateTestRun: runUpdateModel: Test.RunUpdateModel * project: string * runId: float -> Promise<Test.TestRun>
    /// <summary>Create a test session</summary>
    /// <param name="testSession">- Test session details for creation</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract createTestSession: testSession: Test.TestSession * teamContext: TfsCore.TeamContext -> Promise<Test.TestSession>
    /// <summary>Get a list of test sessions</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="period">- Period in days from now, for which test sessions are fetched.</param>
    /// <param name="allSessions">- If false, returns test sessions for current user. Otherwise, it returns test sessions for all users</param>
    /// <param name="includeAllProperties">- If true, it returns all properties of the test sessions. Otherwise, it returns the skinny version.</param>
    /// <param name="source">- Source of the test session.</param>
    /// <param name="includeOnlyCompletedSessions">- If true, it returns test sessions in completed state. Otherwise, it returns test sessions for all states</param>
    abstract getTestSessions: teamContext: TfsCore.TeamContext * ?period: float * ?allSessions: bool * ?includeAllProperties: bool * ?source: Test.TestSessionSource * ?includeOnlyCompletedSessions: bool -> Promise<ResizeArray<Test.TestSession>>
    /// <summary>Update a test session</summary>
    /// <param name="testSession">- Test session details for update</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract updateTestSession: testSession: Test.TestSession * teamContext: TfsCore.TeamContext -> Promise<Test.TestSession>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="sharedParameterId">-</param>
    abstract deleteSharedParameter: project: string * sharedParameterId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="sharedStepId">-</param>
    abstract deleteSharedStep: project: string * sharedStepId: float -> Promise<unit>
    /// <summary>Add test cases to suite.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suite.</param>
    /// <param name="suiteId">- ID of the test suite to which the test cases must be added.</param>
    /// <param name="testCaseIds">- IDs of the test cases to add to the suite. Ids are specified in comma separated format.</param>
    abstract addTestCasesToSuite: project: string * planId: float * suiteId: float * testCaseIds: string -> Promise<ResizeArray<Test.SuiteTestCase>>
    /// <summary>Get a specific test case in a test suite with test case id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suites.</param>
    /// <param name="suiteId">- ID of the suite that contains the test case.</param>
    /// <param name="testCaseIds">- ID of the test case to get.</param>
    abstract getTestCaseById: project: string * planId: float * suiteId: float * testCaseIds: float -> Promise<Test.SuiteTestCase>
    /// <summary>Get all test cases in a suite.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suites.</param>
    /// <param name="suiteId">- ID of the suite to get.</param>
    abstract getTestCases: project: string * planId: float * suiteId: float -> Promise<ResizeArray<Test.SuiteTestCase>>
    /// <summary>The test points associated with the test cases are removed from the test suite. The test case work item is not deleted from the system. See test cases resource to delete a test case permanently.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suite.</param>
    /// <param name="suiteId">- ID of the suite to get.</param>
    /// <param name="testCaseIds">- IDs of the test cases to remove from the suite.</param>
    abstract removeTestCasesFromSuiteUrl: project: string * planId: float * suiteId: float * testCaseIds: string -> Promise<unit>
    /// <summary>Updates the properties of the test case association in a suite.</summary>
    /// <param name="suiteTestCaseUpdateModel">- Model for updation of the properties of test case suite association.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suite.</param>
    /// <param name="suiteId">- ID of the test suite to which the test cases must be added.</param>
    /// <param name="testCaseIds">- IDs of the test cases to add to the suite. Ids are specified in comma separated format.</param>
    abstract updateSuiteTestCases: suiteTestCaseUpdateModel: Test.SuiteTestCaseUpdateModel * project: string * planId: float * suiteId: float * testCaseIds: string -> Promise<ResizeArray<Test.SuiteTestCase>>
    /// <summary>Delete a test case.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testCaseId">- Id of test case to delete.</param>
    abstract deleteTestCase: project: string * testCaseId: float -> Promise<unit>
    /// <summary>Get history of a test method using TestHistoryQuery</summary>
    /// <param name="filter">- TestHistoryQuery to get history</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestHistory: filter: Test.TestHistoryQuery * project: string -> Promise<Test.TestHistoryQuery>
    /// <param name="testSettings">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestSettings: testSettings: Test.TestSettings * project: string -> Promise<float>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testSettingsId">-</param>
    abstract deleteTestSettings: project: string * testSettingsId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testSettingsId">-</param>
    abstract getTestSettingsById: project: string * testSettingsId: float -> Promise<Test.TestSettings>
    /// <param name="workItemToTestLinks">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addWorkItemToTestLinks: workItemToTestLinks: Test.WorkItemToTestLinks * project: string -> Promise<Test.WorkItemToTestLinks>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testName">-</param>
    /// <param name="workItemId">-</param>
    abstract deleteTestMethodToWorkItemLink: project: string * testName: string * workItemId: float -> Promise<bool>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testName">-</param>
    abstract queryTestMethodLinkedWorkItems: project: string * testName: string -> Promise<Test.TestToWorkItemLinks>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="workItemCategory">-</param>
    /// <param name="automatedTestName">-</param>
    /// <param name="testCaseId">-</param>
    /// <param name="maxCompleteDate">-</param>
    /// <param name="days">-</param>
    /// <param name="workItemCount">-</param>
    abstract queryTestResultWorkItems: project: string * workItemCategory: string * ?automatedTestName: string * ?testCaseId: float * ?maxCompleteDate: DateTime * ?days: float * ?workItemCount: float -> Promise<ResizeArray<Test.WorkItemReference>>

type [<AllowNullLiteral>] TestRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> TestRestClient
    abstract RESOURCE_AREA_ID: string
module TfsCore = ___Core_Core
module Test = ___Test_Test
module WebApi = ___WebApi_WebApi

/// The build definition reference resource
type [<AllowNullLiteral>] BuildDefinitionReference =
    /// ID of the build definition
    abstract id: float with get, set
    /// Name of the build definition
    abstract name: string with get, set

/// Common Response for clone operation
type [<AllowNullLiteral>] CloneOperationCommonResponse =
    /// Various statistics related to the clone operation
    abstract cloneStatistics: Test.CloneStatistics with get, set
    /// Completion data of the operation
    abstract completionDate: DateTime with get, set
    /// Creation data of the operation
    abstract creationDate: DateTime with get, set
    /// Reference links
    abstract links: obj option with get, set
    /// Message related to the job
    abstract message: string with get, set
    /// Clone operation Id
    abstract opId: float with get, set
    /// Clone operation state
    abstract state: Test.CloneOperationState with get, set

/// Response for Test Plan clone operation
type [<AllowNullLiteral>] CloneTestPlanOperationInformation =
    /// Various information related to the clone
    abstract cloneOperationResponse: CloneOperationCommonResponse with get, set
    /// Test Plan Clone create parameters
    abstract cloneOptions: Test.CloneOptions with get, set
    /// Information of destination Test Plan
    abstract destinationTestPlan: TestPlan with get, set
    /// Information of source Test Plan
    abstract sourceTestPlan: SourceTestplanResponse with get, set

/// Parameters for Test Plan clone operation
type [<AllowNullLiteral>] CloneTestPlanParams =
    /// Test Plan Clone create parameters
    abstract cloneOptions: Test.CloneOptions with get, set
    /// Information about destination Test Plan
    abstract destinationTestPlan: DestinationTestPlanCloneParams with get, set
    /// Information about source Test Plan
    abstract sourceTestPlan: SourceTestPlanInfo with get, set

/// Response for Test Suite clone operation
type [<AllowNullLiteral>] CloneTestSuiteOperationInformation =
    /// Information of newly cloned Test Suite
    abstract clonedTestSuite: TestSuiteReferenceWithProject with get, set
    /// Various information related to the clone
    abstract cloneOperationResponse: CloneOperationCommonResponse with get, set
    /// Test Plan Clone create parameters
    abstract cloneOptions: Test.CloneOptions with get, set
    /// Information of destination Test Suite
    abstract destinationTestSuite: TestSuiteReferenceWithProject with get, set
    /// Information of source Test Suite
    abstract sourceTestSuite: TestSuiteReferenceWithProject with get, set

/// Parameters for Test Suite clone operation
type [<AllowNullLiteral>] CloneTestSuiteParams =
    /// Test Plan Clone create parameters
    abstract cloneOptions: Test.CloneOptions with get, set
    /// Information about destination Test Suite
    abstract destinationTestSuite: DestinationTestSuiteInfo with get, set
    /// Information about source Test Suite
    abstract sourceTestSuite: SourceTestSuiteInfo with get, set

/// Configuration of the Test Point
type [<AllowNullLiteral>] Configuration =
    /// Id of the Configuration Assigned to the Test Point
    abstract configurationId: float with get, set

/// Destination Test Plan create parameters
type [<AllowNullLiteral>] DestinationTestPlanCloneParams =
    inherit TestPlanCreateParams
    /// Destination Project Name
    abstract project: string with get, set

/// Destination Test Suite information for Test Suite clone operation
type [<AllowNullLiteral>] DestinationTestSuiteInfo =
    /// Destination Suite Id
    abstract id: float with get, set
    /// Destination Project Name
    abstract project: string with get, set

type [<RequireQualifiedAccess>] ExcludeFlags =
    | None = 0
    | PointAssignments = 1
    | ExtraInformation = 2

type [<RequireQualifiedAccess>] FailureType =
    | None = 0
    | Regression = 1
    | New_Issue = 2
    | Known_Issue = 3
    | Unknown = 4
    | Null_Value = 5
    | MaxValue = 5

type [<RequireQualifiedAccess>] LastResolutionState =
    | None = 0
    | NeedsInvestigation = 1
    | TestIssue = 2
    | ProductIssue = 3
    | ConfigurationIssue = 4
    | NullValue = 5
    | MaxValue = 5

type [<RequireQualifiedAccess>] Outcome =
    | Unspecified = 0
    | None = 1
    | Passed = 2
    | Failed = 3
    | Inconclusive = 4
    | Timeout = 5
    | Aborted = 6
    | Blocked = 7
    | NotExecuted = 8
    | Warning = 9
    | Error = 10
    | NotApplicable = 11
    | Paused = 12
    | InProgress = 13
    | NotImpacted = 14
    | MaxValue = 14

/// Assignments for the Test Point
type [<AllowNullLiteral>] PointAssignment =
    inherit Configuration
    /// Name of the Configuration Assigned to the Test Point
    abstract configurationName: string with get, set
    /// Id of the Test Point
    abstract id: float with get, set
    /// Tester Assigned to the Test Point
    abstract tester: WebApi.IdentityRef with get, set

type [<RequireQualifiedAccess>] PointState =
    | None = 0
    | Ready = 1
    | Completed = 2
    | NotReady = 3
    | InProgress = 4
    | MaxValue = 4

/// Results class for Test Point
type [<AllowNullLiteral>] Results =
    /// Outcome of the Test Point
    abstract outcome: Outcome with get, set

type [<RequireQualifiedAccess>] ResultState =
    | Unspecified = 0
    | Pending = 1
    | Queued = 2
    | InProgress = 3
    | Paused = 4
    | Completed = 5
    | MaxValue = 5

/// Source Test Plan information for Test Plan clone operation
type [<AllowNullLiteral>] SourceTestPlanInfo =
    /// ID of the source Test Plan
    abstract id: float with get, set
    /// Id of suites to be cloned inside source Test Plan
    abstract suiteIds: ResizeArray<float> with get, set

/// Source Test Plan Response for Test Plan clone operation
type [<AllowNullLiteral>] SourceTestplanResponse =
    inherit TestPlanReference
    /// project reference
    abstract project: TfsCore.TeamProjectReference with get, set
    /// Id of suites to be cloned inside source Test Plan
    abstract suiteIds: ResizeArray<float> with get, set

/// Source Test Suite information for Test Suite clone operation
type [<AllowNullLiteral>] SourceTestSuiteInfo =
    /// Id of the Source Test Suite
    abstract id: float with get, set

/// A suite entry defines properties for a test suite.
type [<AllowNullLiteral>] SuiteEntry =
    inherit SuiteEntryUpdateParams
    /// Id for the test suite.
    abstract suiteId: float with get, set

type [<RequireQualifiedAccess>] SuiteEntryTypes =
    | TestCase = 0
    | Suite = 1

/// A suite entry defines properties for a test suite.
type [<AllowNullLiteral>] SuiteEntryUpdateParams =
    /// Id of the suite entry in the test suite: either a test case id or child suite id.
    abstract id: float with get, set
    /// Sequence number for the suite entry object in the test suite.
    abstract sequenceNumber: float with get, set
    /// Defines whether the entry is of type test case or suite.
    abstract suiteEntryType: SuiteEntryTypes with get, set

type [<RequireQualifiedAccess>] SuiteExpand =
    | None = 0
    | Children = 1
    | DefaultTesters = 2

/// Create and Update Suite Test Case Parameters
type [<AllowNullLiteral>] SuiteTestCaseCreateUpdateParameters =
    /// Configurations Ids
    abstract pointAssignments: ResizeArray<Configuration> with get, set
    /// Id of Test Case to be updated or created
    abstract workItem: WorkItem with get, set

/// Test Case Class
type [<AllowNullLiteral>] TestCase =
    /// Reference links
    abstract links: obj option with get, set
    /// Order of the TestCase in the Suite
    abstract order: float with get, set
    /// List of Points associated with the Test Case
    abstract pointAssignments: ResizeArray<PointAssignment> with get, set
    /// Project under which the Test Case is
    abstract project: TfsCore.TeamProjectReference with get, set
    /// Test Plan under which the Test Case is
    abstract testPlan: TestPlanReference with get, set
    /// Test Suite under which the Test Case is
    abstract testSuite: TestSuiteReference with get, set
    /// Work Item details of the TestCase
    abstract workItem: WorkItemDetails with get, set

type [<AllowNullLiteral>] TestCaseAssociatedResult =
    abstract completedDate: DateTime with get, set
    abstract configuration: TestConfigurationReference with get, set
    abstract outcome: UserFriendlyTestOutcome with get, set
    abstract plan: TestPlanReference with get, set
    abstract pointId: float with get, set
    abstract resultId: float with get, set
    abstract runBy: WebApi.IdentityRef with get, set
    abstract runId: float with get, set
    abstract suite: TestSuiteReference with get, set
    abstract tester: WebApi.IdentityRef with get, set

/// Test Case Reference
type [<AllowNullLiteral>] TestCaseReference =
    /// Identity to whom the test case is assigned
    abstract assignedTo: WebApi.IdentityRef with get, set
    /// Test Case Id
    abstract id: float with get, set
    /// Test Case Name
    abstract name: string with get, set
    /// State of the test case work item
    abstract state: string with get, set

/// This data model is used in TestCaseResultsDataProvider and populates the data required for initial page load
type [<AllowNullLiteral>] TestCaseResultsData =
    /// Point information from where the execution history was viewed. Used to set initial filters.
    abstract contextPoint: TestPointDetailedReference with get, set
    /// Use to store the results displayed in the table
    abstract results: ResizeArray<TestCaseAssociatedResult> with get, set
    /// Test Case Name to be displayed in the table header
    abstract testCaseName: string with get, set

/// Test configuration
type [<AllowNullLiteral>] TestConfiguration =
    inherit TestConfigurationCreateUpdateParameters
    /// Id of the configuration
    abstract id: float with get, set
    /// Id of the test configuration variable
    abstract project: TfsCore.TeamProjectReference with get, set

/// Test Configuration Create or Update Parameters
type [<AllowNullLiteral>] TestConfigurationCreateUpdateParameters =
    /// Description of the configuration
    abstract description: string with get, set
    /// Is the configuration a default for the test plans
    abstract isDefault: bool with get, set
    /// Name of the configuration
    abstract name: string with get, set
    /// State of the configuration
    abstract state: Test.TestConfigurationState with get, set
    /// Dictionary of Test Variable, Selected Value
    abstract values: ResizeArray<Test.NameValuePair> with get, set

/// Test Configuration Reference
type [<AllowNullLiteral>] TestConfigurationReference =
    /// Id of the configuration
    abstract id: float with get, set
    /// Name of the configuration
    abstract name: string with get, set

/// The test plan resource.
type [<AllowNullLiteral>] TestPlan =
    inherit TestPlanUpdateParams
    /// Relevant links
    abstract _links: obj option with get, set
    /// ID of the test plan.
    abstract id: float with get, set
    /// Previous build Id associated with the test plan
    abstract previousBuildId: float with get, set
    /// Project which contains the test plan.
    abstract project: TfsCore.TeamProjectReference with get, set
    /// Root test suite of the test plan.
    abstract rootSuite: TestSuiteReference with get, set
    /// Identity Reference for the last update of the test plan
    abstract updatedBy: WebApi.IdentityRef with get, set
    /// Updated date of the test plan
    abstract updatedDate: DateTime with get, set

/// The test plan create parameters.
type [<AllowNullLiteral>] TestPlanCreateParams =
    /// Area of the test plan.
    abstract areaPath: string with get, set
    abstract automatedTestEnvironment: Test.TestEnvironment with get, set
    abstract automatedTestSettings: Test.TestSettings with get, set
    /// The Build Definition that generates a build associated with this test plan.
    abstract buildDefinition: BuildDefinitionReference with get, set
    /// Build to be tested.
    abstract buildId: float with get, set
    /// Description of the test plan.
    abstract description: string with get, set
    /// End date for the test plan.
    abstract endDate: DateTime with get, set
    /// Iteration path of the test plan.
    abstract iteration: string with get, set
    abstract manualTestEnvironment: Test.TestEnvironment with get, set
    abstract manualTestSettings: Test.TestSettings with get, set
    /// Name of the test plan.
    abstract name: string with get, set
    /// Owner of the test plan.
    abstract owner: WebApi.IdentityRef with get, set
    /// Release Environment to be used to deploy the build and run automated tests from this test plan.
    abstract releaseEnvironmentDefinition: Test.ReleaseEnvironmentDefinitionReference with get, set
    /// Start date for the test plan.
    abstract startDate: DateTime with get, set
    /// State of the test plan.
    abstract state: string with get, set
    /// Value to configure how same tests across test suites under a test plan need to behave
    abstract testOutcomeSettings: Test.TestOutcomeSettings with get, set

/// The test plan detailed reference resource. Contains additional workitem realted information
type [<AllowNullLiteral>] TestPlanDetailedReference =
    inherit TestPlanReference
    /// Area of the test plan.
    abstract areaPath: string with get, set
    /// End date for the test plan.
    abstract endDate: DateTime with get, set
    /// Iteration path of the test plan.
    abstract iteration: string with get, set
    /// Root Suite Id
    abstract rootSuiteId: float with get, set
    /// Start date for the test plan.
    abstract startDate: DateTime with get, set

/// The test plan reference resource.
type [<AllowNullLiteral>] TestPlanReference =
    /// ID of the test plan.
    abstract id: float with get, set
    /// Name of the test plan.
    abstract name: string with get, set

/// This data model is used in TestPlansHubRefreshDataProvider and populates the data required for initial page load
type [<AllowNullLiteral>] TestPlansHubRefreshData =
    abstract defineColumnOptionFields: ResizeArray<string> with get, set
    abstract executeColumnOptionFields: ResizeArray<string> with get, set
    abstract isAdvancedExtensionEnabled: bool with get, set
    abstract selectedSuiteId: float with get, set
    abstract testCasePageSize: float with get, set
    abstract testCases: ResizeArray<TestCase> with get, set
    abstract testCasesContinuationToken: string with get, set
    abstract testPlan: TestPlanDetailedReference with get, set
    abstract testPointPageSize: float with get, set
    abstract testPoints: ResizeArray<TestPoint> with get, set
    abstract testPointsContinuationToken: string with get, set
    abstract testSuites: ResizeArray<TestSuite> with get, set
    abstract testSuitesContinuationToken: string with get, set

/// The test plan update parameters.
type [<AllowNullLiteral>] TestPlanUpdateParams =
    inherit TestPlanCreateParams
    /// Revision of the test plan.
    abstract revision: float with get, set

/// Test Point Class
type [<AllowNullLiteral>] TestPoint =
    /// Comment associated to the Test Point
    abstract comment: string with get, set
    /// Configuration associated with the Test Point
    abstract configuration: TestConfigurationReference with get, set
    /// Id of the Test Point
    abstract id: float with get, set
    /// Variable to decide whether the test case is Active or not
    abstract isActive: bool with get, set
    /// Is the Test Point for Automated Test Case or Manual
    abstract isAutomated: bool with get, set
    /// Last Reset to Active Time Stamp for the Test Point
    abstract lastResetToActive: DateTime with get, set
    /// Last Updated details for the Test Point
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last Update Time Stamp for the Test Point
    abstract lastUpdatedDate: DateTime with get, set
    /// Reference links
    abstract links: obj option with get, set
    /// Project under which the Test Point is
    abstract project: TfsCore.TeamProjectReference with get, set
    /// Results associated to the Test Point
    abstract results: TestPointResults with get, set
    /// Test Case Reference
    abstract testCaseReference: TestCaseReference with get, set
    /// Tester associated with the Test Point
    abstract tester: WebApi.IdentityRef with get, set
    /// Test Plan under which the Test Point is
    abstract testPlan: TestPlanReference with get, set
    /// Test Suite under which the Test Point is
    abstract testSuite: TestSuiteReference with get, set

/// Test Point Count
type [<AllowNullLiteral>] TestPointCount =
    /// Test Point Count
    abstract count: float with get, set
    /// Test Plan under which the Test Points are
    abstract testPlanId: float with get, set
    /// Test Suite under which the Test Points are
    abstract testSuiteId: float with get, set

type [<AllowNullLiteral>] TestPointDetailedReference =
    abstract configuration: TestConfigurationReference with get, set
    abstract plan: TestPlanReference with get, set
    abstract pointId: float with get, set
    abstract suite: TestSuiteReference with get, set
    abstract tester: WebApi.IdentityRef with get, set

/// Test Point Results
type [<AllowNullLiteral>] TestPointResults =
    /// Failure Type for the Test Point
    abstract failureType: FailureType with get, set
    /// Last Resolution State Id for the Test Point
    abstract lastResolutionState: LastResolutionState with get, set
    /// Last Result Details for the Test Point
    abstract lastResultDetails: Test.LastResultDetails with get, set
    /// Last Result Id
    abstract lastResultId: float with get, set
    /// Last Result State of the Test Point
    abstract lastResultState: ResultState with get, set
    /// Last RUn Build Number for the Test Point
    abstract lastRunBuildNumber: string with get, set
    /// Last Test Run Id for the Test Point
    abstract lastTestRunId: float with get, set
    /// Outcome of the Test Point
    abstract outcome: Outcome with get, set
    /// State of the Test Point
    abstract state: PointState with get, set

/// Test Point Update Parameters
type [<AllowNullLiteral>] TestPointUpdateParams =
    /// Id of Test Point to be updated
    abstract id: float with get, set
    /// Reset the Test Point to Active
    abstract isActive: bool with get, set
    /// Results of the test point
    abstract results: Results with get, set
    /// Tester of the Test Point
    abstract tester: WebApi.IdentityRef with get, set

/// Test suite
type [<AllowNullLiteral>] TestSuite =
    inherit TestSuiteCreateParams
    /// Links: self, testPoints, testCases, parent
    abstract _links: obj option with get, set
    /// Child test suites of current test suite.
    abstract children: ResizeArray<TestSuite> with get, set
    /// Boolean value dictating if Child test suites are present
    abstract hasChildren: bool with get, set
    /// Id of test suite.
    abstract id: float with get, set
    /// Last error for test suite.
    abstract lastError: string with get, set
    /// Last populated date.
    abstract lastPopulatedDate: DateTime with get, set
    /// IdentityRef of user who has updated test suite recently.
    abstract lastUpdatedBy: WebApi.IdentityRef with get, set
    /// Last update date.
    abstract lastUpdatedDate: DateTime with get, set
    /// Test plan to which the test suite belongs.
    abstract plan: TestPlanReference with get, set
    /// Test suite project shallow reference.
    abstract project: TfsCore.TeamProjectReference with get, set
    /// Test suite revision.
    abstract revision: float with get, set

/// Test suite Create Parameters
type [<AllowNullLiteral>] TestSuiteCreateParams =
    inherit TestSuiteCreateUpdateCommonParams
    /// Test suite requirement id.
    abstract requirementId: float with get, set
    /// Test suite type.
    abstract suiteType: TestSuiteType with get, set

/// Test Suite Create/Update Common Parameters
type [<AllowNullLiteral>] TestSuiteCreateUpdateCommonParams =
    /// Test suite default configurations.
    abstract defaultConfigurations: ResizeArray<TestConfigurationReference> with get, set
    /// Test suite default testers.
    abstract defaultTesters: ResizeArray<WebApi.IdentityRef> with get, set
    /// Default configuration was inherited or not.
    abstract inheritDefaultConfigurations: bool with get, set
    /// Name of test suite.
    abstract name: string with get, set
    /// Test suite parent shallow reference.
    abstract parentSuite: TestSuiteReference with get, set
    /// Test suite query string, for dynamic suites.
    abstract queryString: string with get, set

/// The test suite reference resource.
type [<AllowNullLiteral>] TestSuiteReference =
    /// ID of the test suite.
    abstract id: float with get, set
    /// Name of the test suite.
    abstract name: string with get, set

/// Test Suite Reference with Project
type [<AllowNullLiteral>] TestSuiteReferenceWithProject =
    inherit TestSuiteReference
    /// Reference of destination Project
    abstract project: TfsCore.TeamProjectReference with get, set

type [<RequireQualifiedAccess>] TestSuiteType =
    | None = 0
    | DynamicTestSuite = 1
    | StaticTestSuite = 2
    | RequirementTestSuite = 3

/// Test Suite Update Parameters
type [<AllowNullLiteral>] TestSuiteUpdateParams =
    inherit TestSuiteCreateUpdateCommonParams
    /// Test suite revision.
    abstract revision: float with get, set

/// Test Variable
type [<AllowNullLiteral>] TestVariable =
    inherit TestVariableCreateUpdateParameters
    /// Id of the test variable
    abstract id: float with get, set
    /// Id of the test variable
    abstract project: TfsCore.TeamProjectReference with get, set

/// Test Variable Create or Update Parameters
type [<AllowNullLiteral>] TestVariableCreateUpdateParameters =
    /// Description of the test variable
    abstract description: string with get, set
    /// Name of the test variable
    abstract name: string with get, set
    /// List of allowed values
    abstract values: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] UserFriendlyTestOutcome =
    | InProgress = 0
    | Blocked = 1
    | Failed = 2
    | Passed = 3
    | Ready = 4
    | NotApplicable = 5
    | Paused = 6
    | MaxValue = 6

/// Work Item
type [<AllowNullLiteral>] WorkItem =
    /// Id of the Work Item
    abstract id: float with get, set

/// Work Item Class
type [<AllowNullLiteral>] WorkItemDetails =
    /// Work Item Id
    abstract id: float with get, set
    /// Work Item Name
    abstract name: string with get, set
    /// Work Item Fields
    abstract workItemFields: ResizeArray<obj option> with get, set
module TestPlan = ___TestPlan_TestPlan
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract TestPlanRestClient: TestPlanRestClientStatic

type [<AllowNullLiteral>] TestPlanRestClient =
    inherit RestClientBase
    /// <summary>Create a test configuration.</summary>
    /// <param name="testConfigurationCreateUpdateParameters">- TestConfigurationCreateUpdateParameters</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestConfiguration: testConfigurationCreateUpdateParameters: TestPlan.TestConfigurationCreateUpdateParameters * project: string -> Promise<TestPlan.TestConfiguration>
    /// <summary>Delete a test configuration by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testConfiguartionId">- ID of the test configuration to delete.</param>
    abstract deleteTestConfguration: project: string * testConfiguartionId: float -> Promise<unit>
    /// <summary>Get a test configuration</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testConfigurationId">- ID of the test configuration to get.</param>
    abstract getTestConfigurationById: project: string * testConfigurationId: float -> Promise<TestPlan.TestConfiguration>
    /// <summary>Get a list of test configurations.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="continuationToken">- If the list of configurations returned is not complete, a continuation token to query next batch of configurations is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test configurations.</param>
    abstract getTestConfigurations: project: string * ?continuationToken: string -> Promise<ResizeArray<TestPlan.TestConfiguration>>
    /// <summary>Update a test configuration by its ID.</summary>
    /// <param name="testConfigurationCreateUpdateParameters">- TestConfigurationCreateUpdateParameters</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testConfiguartionId">- ID of the test configuration to update.</param>
    abstract updateTestConfiguration: testConfigurationCreateUpdateParameters: TestPlan.TestConfigurationCreateUpdateParameters * project: string * testConfiguartionId: float -> Promise<TestPlan.TestConfiguration>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">-</param>
    /// <param name="states">-</param>
    /// <param name="outcome">-</param>
    /// <param name="configurations">-</param>
    /// <param name="testers">-</param>
    /// <param name="assignedTo">-</param>
    abstract getTestPointCountByPlanId: project: string * planId: float * ?states: string * ?outcome: TestPlan.UserFriendlyTestOutcome * ?configurations: string * ?testers: string * ?assignedTo: string -> Promise<ResizeArray<TestPlan.TestPointCount>>
    /// <summary>Create a test plan.</summary>
    /// <param name="testPlanCreateParams">- A testPlanCreateParams object.TestPlanCreateParams</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestPlan: testPlanCreateParams: TestPlan.TestPlanCreateParams * project: string -> Promise<TestPlan.TestPlan>
    /// <summary>Delete a test plan.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan to be deleted.</param>
    abstract deleteTestPlan: project: string * planId: float -> Promise<unit>
    /// <summary>Get a test plan by Id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan to get.</param>
    abstract getTestPlanById: project: string * planId: float -> Promise<TestPlan.TestPlan>
    /// <summary>Get a list of test plans</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="owner">- Filter for test plan by owner ID or name</param>
    /// <param name="continuationToken">- If the list of plans returned is not complete, a continuation token to query next batch of plans is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test plans.</param>
    /// <param name="includePlanDetails">- Get all properties of the test plan</param>
    /// <param name="filterActivePlans">- Get just the active plans</param>
    abstract getTestPlans: project: string * ?owner: string * ?continuationToken: string * ?includePlanDetails: bool * ?filterActivePlans: bool -> Promise<ResizeArray<TestPlan.TestPlan>>
    /// <summary>Update a test plan.</summary>
    /// <param name="testPlanUpdateParams">- A testPlanUpdateParams object.TestPlanUpdateParams</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan to be updated.</param>
    abstract updateTestPlan: testPlanUpdateParams: TestPlan.TestPlanUpdateParams * project: string * planId: float -> Promise<TestPlan.TestPlan>
    /// <summary>Get a list of test suite entries in the test suite.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="suiteId">- Id of the parent suite.</param>
    /// <param name="suiteEntryType">-</param>
    abstract getSuiteEntries: project: string * suiteId: float * ?suiteEntryType: TestPlan.SuiteEntryTypes -> Promise<ResizeArray<TestPlan.SuiteEntry>>
    /// <summary>Reorder test suite entries in the test suite.</summary>
    /// <param name="suiteEntries">- List of SuiteEntry to reorder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="suiteId">- Id of the parent test suite.</param>
    abstract reorderSuiteEntries: suiteEntries: ResizeArray<TestPlan.SuiteEntryUpdateParams> * project: string * suiteId: float -> Promise<ResizeArray<TestPlan.SuiteEntry>>
    /// <summary>Create test suite.</summary>
    /// <param name="testSuiteCreateParams">- Parameters for suite creation</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suites.</param>
    abstract createTestSuite: testSuiteCreateParams: TestPlan.TestSuiteCreateParams * project: string * planId: float -> Promise<TestPlan.TestSuite>
    /// <summary>Delete test suite.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suite.</param>
    /// <param name="suiteId">- ID of the test suite to delete.</param>
    abstract deleteTestSuite: project: string * planId: float * suiteId: float -> Promise<unit>
    /// <summary>Get test suite by suite id.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suites.</param>
    /// <param name="suiteId">- ID of the suite to get.</param>
    /// <param name="expand">- Include the children suites and testers details</param>
    abstract getTestSuiteById: project: string * planId: float * suiteId: float * ?expand: TestPlan.SuiteExpand -> Promise<TestPlan.TestSuite>
    /// <summary>Get test suites for plan.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan for which suites are requested.</param>
    /// <param name="expand">- Include the children suites and testers details.</param>
    /// <param name="continuationToken">- If the list of suites returned is not complete, a continuation token to query next batch of suites is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test suites.</param>
    /// <param name="asTreeView">- If the suites returned should be in a tree structure.</param>
    abstract getTestSuitesForPlan: project: string * planId: float * ?expand: TestPlan.SuiteExpand * ?continuationToken: string * ?asTreeView: bool -> Promise<ResizeArray<TestPlan.TestSuite>>
    /// <summary>Update test suite.</summary>
    /// <param name="testSuiteUpdateParams">- Parameters for suite updation</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan that contains the suites.</param>
    /// <param name="suiteId">- ID of the parent suite.</param>
    abstract updateTestSuite: testSuiteUpdateParams: TestPlan.TestSuiteUpdateParams * project: string * planId: float * suiteId: float -> Promise<TestPlan.TestSuite>
    /// <summary>Find the list of all test suites in which a given test case is present. This is helpful if you need to find out which test suites are using a test case, when you need to make changes to a test case.</summary>
    /// <param name="testCaseId">- ID of the test case for which suites need to be fetched.</param>
    abstract getSuitesByTestCaseId: testCaseId: float -> Promise<ResizeArray<TestPlan.TestSuite>>
    /// <summary>Add test cases to a suite with specified configurations</summary>
    /// <param name="suiteTestCaseCreateUpdateParameters">- SuiteTestCaseCreateUpdateParameters object.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan to which test cases are to be added.</param>
    /// <param name="suiteId">- ID of the test suite to which test cases are to be added.</param>
    abstract addTestCasesToSuite: suiteTestCaseCreateUpdateParameters: ResizeArray<TestPlan.SuiteTestCaseCreateUpdateParameters> * project: string * planId: float * suiteId: float -> Promise<ResizeArray<TestPlan.TestCase>>
    /// <summary>Get Test Cases For a Suite.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan for which test cases are requested.</param>
    /// <param name="suiteId">- ID of the test suite for which test cases are requested.</param>
    /// <param name="testCaseIds">- Test Case Ids to be fetched.</param>
    /// <param name="witFields">- Get the list of witFields.</param>
    /// <param name="returnIdentityRef">- If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.</param>
    abstract getTestCase: project: string * planId: float * suiteId: float * testCaseIds: string * ?witFields: string * ?returnIdentityRef: bool -> Promise<ResizeArray<TestPlan.TestCase>>
    /// <summary>Get Test Case List return those test cases which have all the configuration Ids as mentioned in the optional paramter. If configuration Ids is null, it return all the test cases</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan for which test cases are requested.</param>
    /// <param name="suiteId">- ID of the test suite for which test cases are requested.</param>
    /// <param name="testIds">- Test Case Ids to be fetched.</param>
    /// <param name="configurationIds">- Fetch Test Cases which contains all the configuration Ids specified.</param>
    /// <param name="witFields">- Get the list of witFields.</param>
    /// <param name="continuationToken">- If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test cases.</param>
    /// <param name="returnIdentityRef">- If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.</param>
    /// <param name="expand">- If set to false, will get a smaller payload containing only basic details about the suite test case object</param>
    /// <param name="excludeFlags">- Flag to exclude various values from payload. For example to remove point assignments pass exclude = 1. To remove extra information (links, test plan , test suite) pass exclude = 2. To remove both extra information and point assignments pass exclude = 3 (1 + 2).</param>
    abstract getTestCaseList: project: string * planId: float * suiteId: float * ?testIds: string * ?configurationIds: string * ?witFields: string * ?continuationToken: string * ?returnIdentityRef: bool * ?expand: bool * ?excludeFlags: TestPlan.ExcludeFlags -> Promise<ResizeArray<TestPlan.TestCase>>
    /// <summary>Removes test cases from a suite based on the list of test case Ids provided.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan from which test cases are to be removed.</param>
    /// <param name="suiteId">- ID of the test suite from which test cases are to be removed.</param>
    /// <param name="testCaseIds">- Test Case Ids to be removed.</param>
    abstract removeTestCasesFromSuite: project: string * planId: float * suiteId: float * testCaseIds: string -> Promise<unit>
    /// <summary>Update the configurations for test cases</summary>
    /// <param name="suiteTestCaseCreateUpdateParameters">- A SuiteTestCaseCreateUpdateParameters object.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan to which test cases are to be updated.</param>
    /// <param name="suiteId">- ID of the test suite to which test cases are to be updated.</param>
    abstract updateSuiteTestCases: suiteTestCaseCreateUpdateParameters: ResizeArray<TestPlan.SuiteTestCaseCreateUpdateParameters> * project: string * planId: float * suiteId: float -> Promise<ResizeArray<TestPlan.TestCase>>
    /// <summary>Delete a test case.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testCaseId">- Id of test case to be deleted.</param>
    abstract deleteTestCase: project: string * testCaseId: float -> Promise<unit>
    /// <summary>Clone test plan</summary>
    /// <param name="cloneRequestBody">- Plan Clone Request Body detail TestPlanCloneRequest</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deepClone">- Clones all the associated test cases as well</param>
    abstract cloneTestPlan: cloneRequestBody: TestPlan.CloneTestPlanParams * project: string * ?deepClone: bool -> Promise<TestPlan.CloneTestPlanOperationInformation>
    /// <summary>Get clone information.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="cloneOperationId">- Operation ID returned when we queue a clone operation</param>
    abstract getCloneInformation: project: string * cloneOperationId: float -> Promise<TestPlan.CloneTestPlanOperationInformation>
    /// <summary>Get a list of points based on point Ids provided.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan for which test points are requested.</param>
    /// <param name="suiteId">- ID of the test suite for which test points are requested.</param>
    /// <param name="pointIds">- ID of test points to be fetched.</param>
    /// <param name="returnIdentityRef">- If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
    /// <param name="includePointDetails">- If set to false, will get a smaller payload containing only basic details about the test point object</param>
    abstract getPoints: project: string * planId: float * suiteId: float * pointIds: string * ?returnIdentityRef: bool * ?includePointDetails: bool -> Promise<ResizeArray<TestPlan.TestPoint>>
    /// <summary>Get all the points inside a suite based on some filters</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan for which test points are requested.</param>
    /// <param name="suiteId">- ID of the test suite for which test points are requested</param>
    /// <param name="testPointIds">- ID of test points to fetch.</param>
    /// <param name="testCaseId">- Get Test Points for specific test case Ids.</param>
    /// <param name="continuationToken">- If the list of test point returned is not complete, a continuation token to query next batch of test points is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test points.</param>
    /// <param name="returnIdentityRef">- If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
    /// <param name="includePointDetails">- If set to false, will get a smaller payload containing only basic details about the test point object</param>
    abstract getPointsList: project: string * planId: float * suiteId: float * ?testPointIds: string * ?testCaseId: string * ?continuationToken: string * ?returnIdentityRef: bool * ?includePointDetails: bool -> Promise<ResizeArray<TestPlan.TestPoint>>
    /// <summary>Update Test Points. This is used to Reset test point to active, update the outcome of a test point or update the tester of a test point</summary>
    /// <param name="testPointUpdateParams">- A TestPointUpdateParams Object.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="planId">- ID of the test plan for which test points are requested.</param>
    /// <param name="suiteId">- ID of the test suite for which test points are requested.</param>
    /// <param name="includePointDetails">- If set to false, will get a smaller payload containing only basic details about the test point object</param>
    /// <param name="returnIdentityRef">- If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
    abstract updateTestPoints: testPointUpdateParams: ResizeArray<TestPlan.TestPointUpdateParams> * project: string * planId: float * suiteId: float * ?includePointDetails: bool * ?returnIdentityRef: bool -> Promise<ResizeArray<TestPlan.TestPoint>>
    /// <summary>Clone test suite</summary>
    /// <param name="cloneRequestBody">- Suite Clone Request Body detail TestSuiteCloneRequest</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="deepClone">- Clones all the associated test cases as well</param>
    abstract cloneTestSuite: cloneRequestBody: TestPlan.CloneTestSuiteParams * project: string * ?deepClone: bool -> Promise<TestPlan.CloneTestSuiteOperationInformation>
    /// <summary>Get clone information.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="cloneOperationId">- Operation ID returned when we queue a clone operation</param>
    abstract getSuiteCloneInformation: project: string * cloneOperationId: float -> Promise<TestPlan.CloneTestSuiteOperationInformation>
    /// <summary>Create a test variable.</summary>
    /// <param name="testVariableCreateUpdateParameters">- TestVariableCreateUpdateParameters</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestVariable: testVariableCreateUpdateParameters: TestPlan.TestVariableCreateUpdateParameters * project: string -> Promise<TestPlan.TestVariable>
    /// <summary>Delete a test variable by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testVariableId">- ID of the test variable to delete.</param>
    abstract deleteTestVariable: project: string * testVariableId: float -> Promise<unit>
    /// <summary>Get a test variable by its ID.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testVariableId">- ID of the test variable to get.</param>
    abstract getTestVariableById: project: string * testVariableId: float -> Promise<TestPlan.TestVariable>
    /// <summary>Get a list of test variables.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="continuationToken">- If the list of variables returned is not complete, a continuation token to query next batch of variables is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test variables.</param>
    abstract getTestVariables: project: string * ?continuationToken: string -> Promise<ResizeArray<TestPlan.TestVariable>>
    /// <summary>Update a test variable by its ID.</summary>
    /// <param name="testVariableCreateUpdateParameters">- TestVariableCreateUpdateParameters</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testVariableId">- ID of the test variable to update.</param>
    abstract updateTestVariable: testVariableCreateUpdateParameters: TestPlan.TestVariableCreateUpdateParameters * project: string * testVariableId: float -> Promise<TestPlan.TestVariable>

type [<AllowNullLiteral>] TestPlanRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> TestPlanRestClient

type [<AllowNullLiteral>] Attachment =
    abstract compressionType: string with get, set
    abstract fileName: string with get, set
    abstract stream: obj option with get, set
module Test = ___Test_Test
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract TestResultsRestClient: TestResultsRestClientStatic

type [<AllowNullLiteral>] TestResultsRestClient =
    inherit RestClientBase
    /// <param name="attachmentRequestModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="iterationId">-</param>
    /// <param name="actionPath">-</param>
    abstract createTestIterationResultAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float * testCaseResultId: float * iterationId: float * ?actionPath: string -> Promise<Test.TestAttachmentReference>
    /// <param name="attachmentRequestModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    abstract createTestResultAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float * testCaseResultId: float -> Promise<Test.TestAttachmentReference>
    /// <param name="attachmentRequestModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="testSubResultId">-</param>
    abstract createTestSubResultAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float * testCaseResultId: float * testSubResultId: float -> Promise<Test.TestAttachmentReference>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="attachmentId">-</param>
    abstract deleteTestResultAttachment: project: string * runId: float * testCaseResultId: float * attachmentId: float -> Promise<unit>
    /// <summary>Returns a test result attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="attachmentId">-</param>
    abstract getTestResultAttachmentContent: project: string * runId: float * testCaseResultId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    abstract getTestResultAttachments: project: string * runId: float * testCaseResultId: float -> Promise<ResizeArray<Test.TestAttachment>>
    /// <summary>Returns a test result attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="attachmentId">-</param>
    abstract getTestResultAttachmentZip: project: string * runId: float * testCaseResultId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <summary>Returns a test sub result attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="attachmentId">-</param>
    /// <param name="testSubResultId">-</param>
    abstract getTestSubResultAttachmentContent: project: string * runId: float * testCaseResultId: float * attachmentId: float * testSubResultId: float -> Promise<ArrayBuffer>
    /// <summary>Returns attachment references for test sub result.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="testSubResultId">-</param>
    abstract getTestSubResultAttachments: project: string * runId: float * testCaseResultId: float * testSubResultId: float -> Promise<ResizeArray<Test.TestAttachment>>
    /// <summary>Returns a test sub result attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    /// <param name="attachmentId">-</param>
    /// <param name="testSubResultId">-</param>
    abstract getTestSubResultAttachmentZip: project: string * runId: float * testCaseResultId: float * attachmentId: float * testSubResultId: float -> Promise<ArrayBuffer>
    /// <param name="attachmentRequestModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract createTestRunAttachment: attachmentRequestModel: Test.TestAttachmentRequestModel * project: string * runId: float -> Promise<Test.TestAttachmentReference>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="attachmentId">-</param>
    abstract deleteTestRunAttachment: project: string * runId: float * attachmentId: float -> Promise<unit>
    /// <summary>Returns a test run attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="attachmentId">-</param>
    abstract getTestRunAttachmentContent: project: string * runId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract getTestRunAttachments: project: string * runId: float -> Promise<ResizeArray<Test.TestAttachment>>
    /// <summary>Returns a test run attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="attachmentId">-</param>
    abstract getTestRunAttachmentZip: project: string * runId: float * attachmentId: float -> Promise<ArrayBuffer>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testCaseResultId">-</param>
    abstract getBugsLinkedToTestResult: project: string * runId: float * testCaseResultId: float -> Promise<ResizeArray<Test.WorkItemReference>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="flags">-</param>
    abstract getBuildCodeCoverage: project: string * buildId: float * flags: float -> Promise<ResizeArray<Test.BuildCoverage>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="deltaBuildId">-</param>
    abstract getCodeCoverageSummary: project: string * buildId: float * ?deltaBuildId: float -> Promise<Test.CodeCoverageSummary>
    /// <summary>http://(tfsserver):8080/tfs/DefaultCollection/_apis/test/CodeCoverage?buildId=10 Request: Json of code coverage summary</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="coverageData">-</param>
    abstract updateCodeCoverageSummary: project: string * buildId: float * ?coverageData: Test.CodeCoverageData -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="flags">-</param>
    abstract getTestRunCodeCoverage: project: string * runId: float * flags: float -> Promise<ResizeArray<Test.TestRunCoverage>>
    /// <summary>Get file coverage for the specified file</summary>
    /// <param name="fileCoverageRequest">- File details with pull request iteration context</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getFileLevelCodeCoverage: fileCoverageRequest: Test.FileCoverageRequest * project: string -> Promise<string>
    /// <param name="filter">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestResultHistory: filter: Test.ResultsFilter * project: string -> Promise<Test.TestResultHistory>
    /// <summary>Get test run message logs</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to get.</param>
    abstract getTestRunMessageLogs: project: string * runId: float -> Promise<ResizeArray<Test.TestMessageLogDetails>>
    /// <summary>Get summary of test results.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="pipelineId">- Pipeline Id. This is same as build Id.</param>
    /// <param name="stageName">- Name of the stage. Maximum supported length for name is 256 character.</param>
    /// <param name="phaseName">- Name of the phase. Maximum supported length for name is 256 character.</param>
    /// <param name="jobName">- Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.</param>
    /// <param name="metricNames">-</param>
    /// <param name="groupByNode">- Group summary for each node of the pipleine heirarchy</param>
    abstract getTestPipelineMetrics: project: string * pipelineId: float * ?stageName: string * ?phaseName: string * ?jobName: string * ?metricNames: ResizeArray<Test.Metrics> * ?groupByNode: bool -> Promise<Test.PipelineTestMetrics>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="groupBy">-</param>
    /// <param name="filter">-</param>
    /// <param name="orderby">-</param>
    /// <param name="shouldIncludeResults">-</param>
    /// <param name="queryRunSummaryForInProgress">-</param>
    abstract getTestResultDetailsForBuild: project: string * buildId: float * ?publishContext: string * ?groupBy: string * ?filter: string * ?orderby: string * ?shouldIncludeResults: bool * ?queryRunSummaryForInProgress: bool -> Promise<Test.TestResultsDetails>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="groupBy">-</param>
    /// <param name="filter">-</param>
    /// <param name="orderby">-</param>
    /// <param name="shouldIncludeResults">-</param>
    /// <param name="queryRunSummaryForInProgress">-</param>
    abstract getTestResultDetailsForRelease: project: string * releaseId: float * releaseEnvId: float * ?publishContext: string * ?groupBy: string * ?filter: string * ?orderby: string * ?shouldIncludeResults: bool * ?queryRunSummaryForInProgress: bool -> Promise<Test.TestResultsDetails>
    /// <param name="document">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract publishTestResultDocument: document: Test.TestResultDocument * project: string * runId: float -> Promise<Test.TestResultDocument>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="fields">-</param>
    /// <param name="continuationToken">-</param>
    abstract getResultGroupsByBuild: project: string * buildId: float * publishContext: string * ?fields: ResizeArray<string> * ?continuationToken: string -> Promise<ResizeArray<Test.FieldDetailsForTestResults>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="releaseEnvId">-</param>
    /// <param name="fields">-</param>
    /// <param name="continuationToken">-</param>
    abstract getResultGroupsByRelease: project: string * releaseId: float * publishContext: string * ?releaseEnvId: float * ?fields: ResizeArray<string> * ?continuationToken: string -> Promise<ResizeArray<Test.FieldDetailsForTestResults>>
    /// <summary>Get list of test Result meta data details for corresponding testcasereferenceId</summary>
    /// <param name="testCaseReferenceIds">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="detailsToInclude">- Details to include with test results metadata. Default is None. Other values are FlakyIdentifiers.</param>
    abstract queryTestResultsMetaData: testCaseReferenceIds: ResizeArray<string> * project: string * ?detailsToInclude: Test.ResultMetaDataDetails -> Promise<ResizeArray<Test.TestResultMetaData>>
    /// <summary>Update properties of test result meta data</summary>
    /// <param name="testResultMetaDataUpdateInput">- TestResultMetaData update input TestResultMetaDataUpdateInput</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testCaseReferenceId">- TestCaseReference Id of Test Result to be updated.</param>
    abstract updateTestResultsMetaData: testResultMetaDataUpdateInput: Test.TestResultMetaDataUpdateInput * project: string * testCaseReferenceId: float -> Promise<Test.TestResultMetaData>
    /// <param name="query">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getTestResultsByQuery: query: Test.TestResultsQuery * project: string -> Promise<Test.TestResultsQuery>
    /// <param name="queryModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeResultDetails">-</param>
    /// <param name="includeIterationDetails">-</param>
    /// <param name="skip">-</param>
    /// <param name="top">-</param>
    abstract getTestResultsByQueryWiql: queryModel: Test.QueryModel * project: string * ?includeResultDetails: bool * ?includeIterationDetails: bool * ?skip: float * ?top: float -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <param name="results">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract addTestResultsToTestRun: results: ResizeArray<Test.TestCaseResult> * project: string * runId: float -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="testResultId">-</param>
    /// <param name="detailsToInclude">-</param>
    abstract getTestResultById: project: string * runId: float * testResultId: float * ?detailsToInclude: Test.ResultDetails -> Promise<Test.TestCaseResult>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="detailsToInclude">-</param>
    /// <param name="skip">-</param>
    /// <param name="top">-</param>
    /// <param name="outcomes">-</param>
    abstract getTestResults: project: string * runId: float * ?detailsToInclude: Test.ResultDetails * ?skip: float * ?top: float * ?outcomes: ResizeArray<Test.TestOutcome> -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <param name="results">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract updateTestResults: results: ResizeArray<Test.TestCaseResult> * project: string * runId: float -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="outcomes">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    abstract getTestResultsByBuild: project: string * buildId: float * ?publishContext: string * ?outcomes: ResizeArray<Test.TestOutcome> * ?top: float * ?continuationToken: string -> Promise<ResizeArray<Test.ShallowTestCaseResult>>
    /// <summary>Get a list of results.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="pipelineId">- Pipeline Id. This is same as build Id.</param>
    /// <param name="stageName">- Name of the stage. Maximum supported length for name is 256 character.</param>
    /// <param name="phaseName">- Name of the phase. Maximum supported length for name is 256 character.</param>
    /// <param name="jobName">- Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.</param>
    /// <param name="outcomes">- List of outcome of results</param>
    /// <param name="top">- Maximum number of results to return</param>
    /// <param name="continuationToken">- Header to pass the continuationToken</param>
    abstract getTestResultsByPipeline: project: string * pipelineId: float * ?stageName: string * ?phaseName: string * ?jobName: string * ?outcomes: ResizeArray<Test.TestOutcome> * ?top: float * ?continuationToken: String -> Promise<ResizeArray<Test.ShallowTestCaseResult>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvid">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="outcomes">-</param>
    /// <param name="top">-</param>
    /// <param name="continuationToken">-</param>
    abstract getTestResultsByRelease: project: string * releaseId: float * ?releaseEnvid: float * ?publishContext: string * ?outcomes: ResizeArray<Test.TestOutcome> * ?top: float * ?continuationToken: string -> Promise<ResizeArray<Test.ShallowTestCaseResult>>
    /// <summary>Get all the available groups details and for these groups get failed and aborted results.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="pipelineId">- Pipeline Id. This is same as build Id.</param>
    /// <param name="stageName">- Name of the stage. Maximum supported length for name is 256 character.</param>
    /// <param name="phaseName">- Name of the phase. Maximum supported length for name is 256 character.</param>
    /// <param name="jobName">- Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.</param>
    /// <param name="shouldIncludeFailedAndAbortedResults">- If true, it will return Ids of failed and aborted results for each test group</param>
    /// <param name="queryGroupSummaryForInProgress">- If true, it will calculate summary for InProgress runs as well.</param>
    abstract testResultsGroupDetails: project: string * pipelineId: float * ?stageName: string * ?phaseName: string * ?jobName: string * ?shouldIncludeFailedAndAbortedResults: bool * ?queryGroupSummaryForInProgress: bool -> Promise<Test.TestResultsDetails>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="includeFailureDetails">-</param>
    /// <param name="buildToCompare">-</param>
    abstract queryTestResultsReportForBuild: project: string * buildId: float * ?publishContext: string * ?includeFailureDetails: bool * ?buildToCompare: Test.BuildReference -> Promise<Test.TestResultSummary>
    /// <summary>Get summary of test results.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="pipelineId">- Pipeline Id. This is same as build Id.</param>
    /// <param name="stageName">- Name of the stage. Maximum supported length for name is 256 character.</param>
    /// <param name="phaseName">- Name of the phase. Maximum supported length for name is 256 character.</param>
    /// <param name="jobName">- Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.</param>
    /// <param name="includeFailureDetails">- If true returns failure insights</param>
    abstract queryTestResultsReportForPipeline: project: string * pipelineId: float * ?stageName: string * ?phaseName: string * ?jobName: string * ?includeFailureDetails: bool -> Promise<Test.TestResultSummary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvId">-</param>
    /// <param name="publishContext">-</param>
    /// <param name="includeFailureDetails">-</param>
    /// <param name="releaseToCompare">-</param>
    abstract queryTestResultsReportForRelease: project: string * releaseId: float * releaseEnvId: float * ?publishContext: string * ?includeFailureDetails: bool * ?releaseToCompare: Test.ReleaseReference -> Promise<Test.TestResultSummary>
    /// <param name="releases">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestResultsSummaryForReleases: releases: ResizeArray<Test.ReleaseReference> * project: string -> Promise<ResizeArray<Test.TestResultSummary>>
    /// <param name="resultsContext">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="workItemIds">-</param>
    abstract queryTestSummaryByRequirement: resultsContext: Test.TestResultsContext * project: string * ?workItemIds: ResizeArray<float> -> Promise<ResizeArray<Test.TestSummaryForWorkItem>>
    /// <param name="filter">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryResultTrendForBuild: filter: Test.TestResultTrendFilter * project: string -> Promise<ResizeArray<Test.AggregatedDataForResultTrend>>
    /// <param name="filter">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryResultTrendForRelease: filter: Test.TestResultTrendFilter * project: string -> Promise<ResizeArray<Test.AggregatedDataForResultTrend>>
    /// <summary>Get test run statistics , used when we want to get summary of a run by outcome.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- ID of the run to get.</param>
    abstract getTestRunStatistics: project: string * runId: float -> Promise<Test.TestRunStatistic>
    /// <param name="testRun">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestRun: testRun: Test.RunCreateModel * project: string -> Promise<Test.TestRun>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract deleteTestRun: project: string * runId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    /// <param name="includeDetails">-</param>
    /// <param name="includeTags">-</param>
    abstract getTestRunById: project: string * runId: float * ?includeDetails: bool * ?includeTags: bool -> Promise<Test.TestRun>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildUri">-</param>
    /// <param name="owner">-</param>
    /// <param name="tmiRunId">-</param>
    /// <param name="planId">-</param>
    /// <param name="includeRunDetails">-</param>
    /// <param name="automated">-</param>
    /// <param name="skip">-</param>
    /// <param name="top">-</param>
    abstract getTestRuns: project: string * ?buildUri: string * ?owner: string * ?tmiRunId: string * ?planId: float * ?includeRunDetails: bool * ?automated: bool * ?skip: float * ?top: float -> Promise<ResizeArray<Test.TestRun>>
    /// <summary>Query Test Runs based on filters. Mandatory fields are minLastUpdatedDate and maxLastUpdatedDate.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="minLastUpdatedDate">- Minimum Last Modified Date of run to be queried (Mandatory).</param>
    /// <param name="maxLastUpdatedDate">- Maximum Last Modified Date of run to be queried (Mandatory, difference between min and max date can be atmost 7 days).</param>
    /// <param name="state">- Current state of the Runs to be queried.</param>
    /// <param name="planIds">- Plan Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="isAutomated">- Automation type of the Runs to be queried.</param>
    /// <param name="publishContext">- PublishContext of the Runs to be queried.</param>
    /// <param name="buildIds">- Build Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="buildDefIds">- Build Definition Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="branchName">- Source Branch name of the Runs to be queried.</param>
    /// <param name="releaseIds">- Release Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="releaseDefIds">- Release Definition Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="releaseEnvIds">- Release Environment Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="releaseEnvDefIds">- Release Environment Definition Ids of the Runs to be queried, comma seperated list of valid ids.</param>
    /// <param name="runTitle">- Run Title of the Runs to be queried.</param>
    /// <param name="top">- Number of runs to be queried. Limit is 100</param>
    /// <param name="continuationToken">- continuationToken received from previous batch or null for first batch. It is not supposed to be created (or altered, if received from last batch) by user.</param>
    abstract queryTestRuns: project: string * minLastUpdatedDate: DateTime * maxLastUpdatedDate: DateTime * ?state: Test.TestRunState * ?planIds: ResizeArray<float> * ?isAutomated: bool * ?publishContext: Test.TestRunPublishContext * ?buildIds: ResizeArray<float> * ?buildDefIds: ResizeArray<float> * ?branchName: string * ?releaseIds: ResizeArray<float> * ?releaseDefIds: ResizeArray<float> * ?releaseEnvIds: ResizeArray<float> * ?releaseEnvDefIds: ResizeArray<float> * ?runTitle: string * ?top: float * ?continuationToken: string -> Promise<ResizeArray<Test.TestRun>>
    /// <param name="runUpdateModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract updateTestRun: runUpdateModel: Test.RunUpdateModel * project: string * runId: float -> Promise<Test.TestRun>
    /// <summary>Get TestResultsSettings data</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="settingsType">-</param>
    abstract getTestResultsSettings: project: string * ?settingsType: Test.TestResultsSettingsType -> Promise<Test.TestResultsSettings>
    /// <summary>Update project settings of test results</summary>
    /// <param name="testResultsUpdateSettings">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updatePipelinesTestSettings: testResultsUpdateSettings: Test.TestResultsUpdateSettings * project: string -> Promise<Test.TestResultsSettings>
    /// <summary>Gets the list of results whose failure matches with the provided one.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- id of test run</param>
    /// <param name="testResultId">- id of test result inside a test run</param>
    /// <param name="testSubResultId">- id of subresult inside a test result</param>
    /// <param name="top">- Maximum number of results to return</param>
    /// <param name="continuationToken">- Header to pass the continuationToken</param>
    abstract getSimilarTestResults: project: string * runId: float * testResultId: float * testSubResultId: float * ?top: float * ?continuationToken: String -> Promise<ResizeArray<Test.TestCaseResult>>
    /// <summary>\<p\>Gets the coverage status for the last successful build of a definition, optionally scoped to a specific branch\</p\></summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="definition">- The ID or name of the definition.</param>
    /// <param name="branchName">- The branch name.</param>
    /// <param name="label">- The String to replace the default text on the left side of the badge.</param>
    abstract getCoverageStatusBadge: project: string * definition: string * ?branchName: string * ?label: string -> Promise<string>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    abstract getTestTagsForBuild: project: string * buildId: float -> Promise<ResizeArray<Test.TestTag>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvId">-</param>
    abstract getTestTagsForRelease: project: string * releaseId: float * releaseEnvId: float -> Promise<ResizeArray<Test.TestTag>>
    /// <param name="testTagsUpdateModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">-</param>
    abstract updateTestRunTags: testTagsUpdateModel: Test.TestTagsUpdateModel * project: string * runId: float -> Promise<ResizeArray<Test.TestTag>>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">-</param>
    abstract getTestTagSummaryForBuild: project: string * buildId: float -> Promise<Test.TestTagSummary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="releaseId">-</param>
    /// <param name="releaseEnvId">-</param>
    abstract getTestTagSummaryForRelease: project: string * releaseId: float * releaseEnvId: float -> Promise<Test.TestTagSummary>
    /// <summary>Get history of a test method using TestHistoryQuery</summary>
    /// <param name="filter">- TestHistoryQuery to get history</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryTestHistory: filter: Test.TestHistoryQuery * project: string -> Promise<Test.TestHistoryQuery>
    /// <summary>Get list of build attachments reference</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- Id of the build to get</param>
    /// <param name="type">- type of the attachment to get</param>
    /// <param name="directoryPath">- directory path for which attachments are needed</param>
    /// <param name="fileNamePrefix">- file name prefix to filter the list of attachment</param>
    /// <param name="fetchMetaData">- Default is false, set if metadata is needed</param>
    /// <param name="top">- Number of test attachments reference to return</param>
    /// <param name="continuationToken">- Header to pass the continuationToken</param>
    abstract getTestLogsForBuild: project: string * buildId: float * ``type``: Test.TestLogType * ?directoryPath: string * ?fileNamePrefix: string * ?fetchMetaData: bool * ?top: float * ?continuationToken: String -> Promise<ResizeArray<Test.TestLog>>
    /// <summary>Get list of test result attachments reference</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run that contains the result</param>
    /// <param name="resultId">- Id of the test result</param>
    /// <param name="type">- type of attachments to get</param>
    /// <param name="directoryPath">- directory path of attachments to get</param>
    /// <param name="fileNamePrefix">- file name prefix to filter the list of attachment</param>
    /// <param name="fetchMetaData">- Default is false, set if metadata is needed</param>
    /// <param name="top">- Numbe of attachments reference to return</param>
    /// <param name="continuationToken">- Header to pass the continuationToken</param>
    abstract getTestResultLogs: project: string * runId: float * resultId: float * ``type``: Test.TestLogType * ?directoryPath: string * ?fileNamePrefix: string * ?fetchMetaData: bool * ?top: float * ?continuationToken: String -> Promise<ResizeArray<Test.TestLog>>
    /// <summary>Get list of test subresult attachments reference</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run that contains the results</param>
    /// <param name="resultId">- Id of the test result that contains subresult</param>
    /// <param name="subResultId">- Id of the test subresult</param>
    /// <param name="type">- type of the attachments to get</param>
    /// <param name="directoryPath">- directory path of the attachment to get</param>
    /// <param name="fileNamePrefix">- file name prefix to filter the list of attachments</param>
    /// <param name="fetchMetaData">- Default is false, set if metadata is needed</param>
    /// <param name="top">- Number of attachments reference to return</param>
    /// <param name="continuationToken">- Header to pass the continuationToken</param>
    abstract getTestSubResultLogs: project: string * runId: float * resultId: float * subResultId: float * ``type``: Test.TestLogType * ?directoryPath: string * ?fileNamePrefix: string * ?fetchMetaData: bool * ?top: float * ?continuationToken: String -> Promise<ResizeArray<Test.TestLog>>
    /// <summary>Get list of test run attachments reference</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run</param>
    /// <param name="type">- type of the attachments to get</param>
    /// <param name="directoryPath">- directory path for which attachments are needed</param>
    /// <param name="fileNamePrefix">- file name prefix to filter the list of attachment</param>
    /// <param name="fetchMetaData">- Default is false, set if metadata is needed</param>
    /// <param name="top">- Number of attachments reference to return</param>
    /// <param name="continuationToken">- Header to pass the continuationToken</param>
    abstract getTestRunLogs: project: string * runId: float * ``type``: Test.TestLogType * ?directoryPath: string * ?fileNamePrefix: string * ?fetchMetaData: bool * ?top: float * ?continuationToken: String -> Promise<ResizeArray<Test.TestLog>>
    /// <summary>Get SAS Uri of a build attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="build">- Id of the build to get</param>
    /// <param name="type">- type of the file</param>
    /// <param name="filePath">- filePath for which sas uri is needed</param>
    abstract getTestLogStoreEndpointDetailsForBuildLog: project: string * build: float * ``type``: Test.TestLogType * filePath: string -> Promise<Test.TestLogStoreEndpointDetails>
    /// <summary>Create and Get sas uri of the build container</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="buildId">- Id of the build to get</param>
    /// <param name="testLogStoreOperationType">- Type of operation to perform using sas uri</param>
    abstract testLogStoreEndpointDetailsForBuild: project: string * buildId: float * testLogStoreOperationType: Test.TestLogStoreOperationType -> Promise<Test.TestLogStoreEndpointDetails>
    /// <summary>Get SAS Uri of a test results attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run that contains result</param>
    /// <param name="resultId">- Id of the test result whose files need to be downloaded</param>
    /// <param name="type">- type of the file</param>
    /// <param name="filePath">- filePath for which sas uri is needed</param>
    abstract getTestLogStoreEndpointDetailsForResultLog: project: string * runId: float * resultId: float * ``type``: Test.TestLogType * filePath: string -> Promise<Test.TestLogStoreEndpointDetails>
    /// <summary>Get SAS Uri of a test subresults attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run that contains result</param>
    /// <param name="resultId">- Id of the test result that contains subresult</param>
    /// <param name="subResultId">- Id of the test subresult whose file sas uri is needed</param>
    /// <param name="type">- type of the file</param>
    /// <param name="filePath">- filePath for which sas uri is needed</param>
    abstract getTestLogStoreEndpointDetailsForSubResultLog: project: string * runId: float * resultId: float * subResultId: float * ``type``: Test.TestLogType * filePath: string -> Promise<Test.TestLogStoreEndpointDetails>
    /// <summary>Create empty file for a result and Get Sas uri for the file</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run that contains the result</param>
    /// <param name="resultId">- Id of the test results that contains sub result</param>
    /// <param name="subResultId">- Id of the test sub result whose file sas uri is needed</param>
    /// <param name="filePath">- file path inside the sub result for which sas uri is needed</param>
    /// <param name="type">- Type of the file for download</param>
    abstract testLogStoreEndpointDetailsForResult: project: string * runId: float * resultId: float * subResultId: float * filePath: string * ``type``: Test.TestLogType -> Promise<Test.TestLogStoreEndpointDetails>
    /// <summary>Get SAS Uri of a test run attachment</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the test run whose file has to be downloaded</param>
    /// <param name="type">- type of the file</param>
    /// <param name="filePath">- filePath for which sas uri is needed</param>
    abstract getTestLogStoreEndpointDetailsForRunLog: project: string * runId: float * ``type``: Test.TestLogType * filePath: string -> Promise<Test.TestLogStoreEndpointDetails>
    /// <summary>Create empty file for a run and Get Sas uri for the file</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="runId">- Id of the run to get endpoint details</param>
    /// <param name="testLogStoreOperationType">- Type of operation to perform using sas uri</param>
    /// <param name="filePath">- file path to create an empty file</param>
    /// <param name="type">- Default is GeneralAttachment, type of empty file to be created</param>
    abstract testLogStoreEndpointDetailsForRun: project: string * runId: float * testLogStoreOperationType: Test.TestLogStoreOperationType * ?filePath: string * ?``type``: Test.TestLogType -> Promise<Test.TestLogStoreEndpointDetails>
    /// <param name="testSettings">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createTestSettings: testSettings: Test.TestSettings * project: string -> Promise<float>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testSettingsId">-</param>
    abstract deleteTestSettings: project: string * testSettingsId: float -> Promise<unit>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testSettingsId">-</param>
    abstract getTestSettingsById: project: string * testSettingsId: float -> Promise<Test.TestSettings>
    /// <param name="workItemToTestLinks">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract addWorkItemToTestLinks: workItemToTestLinks: Test.WorkItemToTestLinks * project: string -> Promise<Test.WorkItemToTestLinks>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testName">-</param>
    /// <param name="workItemId">-</param>
    abstract deleteTestMethodToWorkItemLink: project: string * testName: string * workItemId: float -> Promise<bool>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="testName">-</param>
    abstract queryTestMethodLinkedWorkItems: project: string * testName: string -> Promise<Test.TestToWorkItemLinks>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="workItemCategory">-</param>
    /// <param name="automatedTestName">-</param>
    /// <param name="testCaseId">-</param>
    /// <param name="maxCompleteDate">-</param>
    /// <param name="days">-</param>
    /// <param name="workItemCount">-</param>
    abstract queryTestResultWorkItems: project: string * workItemCategory: string * ?automatedTestName: string * ?testCaseId: float * ?maxCompleteDate: DateTime * ?days: float * ?workItemCount: float -> Promise<ResizeArray<Test.WorkItemReference>>

type [<AllowNullLiteral>] TestResultsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> TestResultsRestClient
module TfsCore = ___Core_Core
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] AssociatedWorkItem =
    abstract assignedTo: string with get, set
    /// Id of associated the work item.
    abstract id: float with get, set
    abstract state: string with get, set
    abstract title: string with get, set
    /// REST Url of the work item.
    abstract url: string with get, set
    abstract webUrl: string with get, set
    abstract workItemType: string with get, set

type [<AllowNullLiteral>] Change<'T> =
    /// The type of change that was made to the item.
    abstract changeType: VersionControlChangeType with get, set
    /// Current version.
    abstract item: 'T with get, set
    /// Content of the item after the change.
    abstract newContent: ItemContent with get, set
    /// Path of the item on the server.
    abstract sourceServerItem: string with get, set
    /// URL to retrieve the item.
    abstract url: string with get, set

type [<AllowNullLiteral>] CheckinNote =
    abstract name: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] FileContentMetadata =
    abstract contentType: string with get, set
    abstract encoding: float with get, set
    abstract extension: string with get, set
    abstract fileName: string with get, set
    abstract isBinary: bool with get, set
    abstract isImage: bool with get, set
    abstract vsLink: string with get, set

type [<AllowNullLiteral>] GitRepository =
    abstract _links: obj option with get, set
    abstract defaultBranch: string with get, set
    abstract id: string with get, set
    /// True if the repository was created as a fork
    abstract isFork: bool with get, set
    abstract name: string with get, set
    abstract parentRepository: GitRepositoryRef with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract remoteUrl: string with get, set
    /// Compressed size (bytes) of the repository.
    abstract size: float with get, set
    abstract sshUrl: string with get, set
    abstract url: string with get, set
    abstract validRemoteUrls: ResizeArray<string> with get, set
    abstract webUrl: string with get, set

type [<AllowNullLiteral>] GitRepositoryRef =
    /// Team Project Collection where this Fork resides
    abstract collection: TfsCore.TeamProjectCollectionReference with get, set
    abstract id: string with get, set
    /// True if the repository was created as a fork
    abstract isFork: bool with get, set
    abstract name: string with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract remoteUrl: string with get, set
    abstract sshUrl: string with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] ItemContent =
    abstract content: string with get, set
    abstract contentType: ItemContentType with get, set

type [<RequireQualifiedAccess>] ItemContentType =
    | RawText = 0
    | Base64Encoded = 1

type [<AllowNullLiteral>] ItemModel =
    abstract _links: obj option with get, set
    abstract content: string with get, set
    abstract contentMetadata: FileContentMetadata with get, set
    abstract isFolder: bool with get, set
    abstract isSymLink: bool with get, set
    abstract path: string with get, set
    abstract url: string with get, set

/// Class representing a branch object.
type [<AllowNullLiteral>] TfvcBranch =
    inherit TfvcBranchRef
    /// List of children for the branch.
    abstract children: ResizeArray<TfvcBranch> with get, set
    /// List of branch mappings.
    abstract mappings: ResizeArray<TfvcBranchMapping> with get, set
    /// Path of the branch's parent.
    abstract parent: TfvcShallowBranchRef with get, set
    /// List of paths of the related branches.
    abstract relatedBranches: ResizeArray<TfvcShallowBranchRef> with get, set

/// A branch mapping.
type [<AllowNullLiteral>] TfvcBranchMapping =
    /// Depth of the branch.
    abstract depth: string with get, set
    /// Server item for the branch.
    abstract serverItem: string with get, set
    /// Type of the branch.
    abstract ``type``: string with get, set

/// Metadata for a branchref.
type [<AllowNullLiteral>] TfvcBranchRef =
    inherit TfvcShallowBranchRef
    /// A collection of REST reference links.
    abstract _links: obj option with get, set
    /// Creation date of the branch.
    abstract createdDate: DateTime with get, set
    /// Branch description.
    abstract description: string with get, set
    /// Is the branch deleted?
    abstract isDeleted: bool with get, set
    /// Alias or display name of user
    abstract owner: WebApi.IdentityRef with get, set
    /// URL to retrieve the item.
    abstract url: string with get, set

/// A change.
type [<AllowNullLiteral>] TfvcChange =
    inherit Change<TfvcItem>
    /// List of merge sources in case of rename or branch creation.
    abstract mergeSources: ResizeArray<TfvcMergeSource> with get, set
    /// Version at which a (shelved) change was pended against
    abstract pendingVersion: float with get, set

/// A collection of changes.
type [<AllowNullLiteral>] TfvcChangeset =
    inherit TfvcChangesetRef
    /// Changeset Account Id also known as Organization Id.
    abstract accountId: string with get, set
    /// List of associated changes.
    abstract changes: ResizeArray<TfvcChange> with get, set
    /// List of Checkin Notes for the changeset.
    abstract checkinNotes: ResizeArray<CheckinNote> with get, set
    /// Changeset collection Id.
    abstract collectionId: string with get, set
    /// True if more changes are available.
    abstract hasMoreChanges: bool with get, set
    /// Policy Override for the changeset.
    abstract policyOverride: TfvcPolicyOverrideInfo with get, set
    /// Team Project Ids for the changeset.
    abstract teamProjectIds: ResizeArray<string> with get, set
    /// List of work items associated with the changeset.
    abstract workItems: ResizeArray<AssociatedWorkItem> with get, set

/// Metadata for a changeset.
type [<AllowNullLiteral>] TfvcChangesetRef =
    /// A collection of REST reference links.
    abstract _links: obj option with get, set
    /// Alias or display name of user.
    abstract author: WebApi.IdentityRef with get, set
    /// Changeset Id.
    abstract changesetId: float with get, set
    /// Alias or display name of user.
    abstract checkedInBy: WebApi.IdentityRef with get, set
    /// Comment for the changeset.
    abstract comment: string with get, set
    /// Was the Comment result truncated?
    abstract commentTruncated: bool with get, set
    /// Creation date of the changeset.
    abstract createdDate: DateTime with get, set
    /// URL to retrieve the item.
    abstract url: string with get, set

/// Criteria used in a search for change lists.
type [<AllowNullLiteral>] TfvcChangesetSearchCriteria =
    /// Alias or display name of user who made the changes.
    abstract author: string with get, set
    /// Whether or not to follow renames for the given item being queried.
    abstract followRenames: bool with get, set
    /// If provided, only include changesets created after this date (string).
    abstract fromDate: string with get, set
    /// If provided, only include changesets after this changesetID.
    abstract fromId: float with get, set
    /// Whether to include the _links field on the shallow references.
    abstract includeLinks: bool with get, set
    /// Path of item to search under.
    abstract itemPath: string with get, set
    abstract mappings: ResizeArray<TfvcMappingFilter> with get, set
    /// If provided, only include changesets created before this date (string).
    abstract toDate: string with get, set
    /// If provided, a version descriptor for the latest change list to include.
    abstract toId: float with get, set

/// Request body for Get batched changesets.
type [<AllowNullLiteral>] TfvcChangesetsRequestData =
    /// List of changeset Ids.
    abstract changesetIds: ResizeArray<float> with get, set
    /// Max length of the comment.
    abstract commentLength: float with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set

/// Metadata for an item.
type [<AllowNullLiteral>] TfvcItem =
    inherit ItemModel
    /// Item changed datetime.
    abstract changeDate: DateTime with get, set
    /// Greater than 0 if item is deleted.
    abstract deletionId: float with get, set
    /// File encoding from database, -1 represents binary.
    abstract encoding: float with get, set
    /// MD5 hash as a base 64 string, applies to files only.
    abstract hashValue: string with get, set
    /// True if item is a branch.
    abstract isBranch: bool with get, set
    /// True if there is a change pending.
    abstract isPendingChange: bool with get, set
    /// The size of the file, if applicable.
    abstract size: float with get, set
    /// Changeset version Id.
    abstract version: float with get, set

/// Item path and Version descriptor properties
type [<AllowNullLiteral>] TfvcItemDescriptor =
    /// Item path.
    abstract path: string with get, set
    /// Defaults to OneLevel.
    abstract recursionLevel: VersionControlRecursionType with get, set
    /// Specify the desired version, can be null or empty string only if VersionType is latest or tip.
    abstract version: string with get, set
    /// Defaults to None.
    abstract versionOption: TfvcVersionOption with get, set
    /// Defaults to Latest.
    abstract versionType: TfvcVersionType with get, set

/// Request body used by Get Items Batch
type [<AllowNullLiteral>] TfvcItemRequestData =
    /// If true, include metadata about the file type
    abstract includeContentMetadata: bool with get, set
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    abstract itemDescriptors: ResizeArray<TfvcItemDescriptor> with get, set

/// Metadata for a label.
type [<AllowNullLiteral>] TfvcLabel =
    inherit TfvcLabelRef
    /// List of items.
    abstract items: ResizeArray<TfvcItem> with get, set

/// Metadata for a Label.
type [<AllowNullLiteral>] TfvcLabelRef =
    /// Collection of reference links.
    abstract _links: obj option with get, set
    /// Label description.
    abstract description: string with get, set
    /// Label Id.
    abstract id: float with get, set
    /// Label scope.
    abstract labelScope: string with get, set
    /// Last modified datetime for the label.
    abstract modifiedDate: DateTime with get, set
    /// Label name.
    abstract name: string with get, set
    /// Label owner.
    abstract owner: WebApi.IdentityRef with get, set
    /// Label Url.
    abstract url: string with get, set

type [<AllowNullLiteral>] TfvcLabelRequestData =
    /// Whether to include the _links field on the shallow references
    abstract includeLinks: bool with get, set
    abstract itemLabelFilter: string with get, set
    abstract labelScope: string with get, set
    abstract maxItemCount: float with get, set
    abstract name: string with get, set
    abstract owner: string with get, set

/// MappingFilter can be used to include or exclude specific paths.
type [<AllowNullLiteral>] TfvcMappingFilter =
    /// True if ServerPath should be excluded.
    abstract exclude: bool with get, set
    /// Path to be included or excluded.
    abstract serverPath: string with get, set

type [<AllowNullLiteral>] TfvcMergeSource =
    /// Indicates if this a rename source. If false, it is a merge source.
    abstract isRename: bool with get, set
    /// The server item of the merge source.
    abstract serverItem: string with get, set
    /// Start of the version range.
    abstract versionFrom: float with get, set
    /// End of the version range.
    abstract versionTo: float with get, set

/// Policy failure information.
type [<AllowNullLiteral>] TfvcPolicyFailureInfo =
    /// Policy failure message.
    abstract message: string with get, set
    /// Name of the policy that failed.
    abstract policyName: string with get, set

/// Information on the policy override.
type [<AllowNullLiteral>] TfvcPolicyOverrideInfo =
    /// Overidden policy comment.
    abstract comment: string with get, set
    /// Information on the failed policy that was overridden.
    abstract policyFailures: ResizeArray<TfvcPolicyFailureInfo> with get, set

/// This is the shallow branchref class.
type [<AllowNullLiteral>] TfvcShallowBranchRef =
    /// Path for the branch.
    abstract path: string with get, set

/// Metadata for a shelveset.
type [<AllowNullLiteral>] TfvcShelveset =
    inherit TfvcShelvesetRef
    /// List of changes.
    abstract changes: ResizeArray<TfvcChange> with get, set
    /// List of checkin notes.
    abstract notes: ResizeArray<CheckinNote> with get, set
    /// Policy override information if applicable.
    abstract policyOverride: TfvcPolicyOverrideInfo with get, set
    /// List of associated workitems.
    abstract workItems: ResizeArray<AssociatedWorkItem> with get, set

/// Metadata for a shallow shelveset.
type [<AllowNullLiteral>] TfvcShelvesetRef =
    /// List of reference links for the shelveset.
    abstract _links: obj option with get, set
    /// Shelveset comment.
    abstract comment: string with get, set
    /// Shelveset comment truncated as applicable.
    abstract commentTruncated: bool with get, set
    /// Shelveset create date.
    abstract createdDate: DateTime with get, set
    /// Shelveset Id.
    abstract id: string with get, set
    /// Shelveset name.
    abstract name: string with get, set
    /// Shelveset Owner.
    abstract owner: WebApi.IdentityRef with get, set
    /// Shelveset Url.
    abstract url: string with get, set

type [<AllowNullLiteral>] TfvcShelvesetRequestData =
    /// Whether to include policyOverride and notes Only applies when requesting a single deep shelveset
    abstract includeDetails: bool with get, set
    /// Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.
    abstract includeLinks: bool with get, set
    /// Whether to include workItems
    abstract includeWorkItems: bool with get, set
    /// Max number of changes to include
    abstract maxChangeCount: float with get, set
    /// Max length of comment
    abstract maxCommentLength: float with get, set
    /// Shelveset name
    abstract name: string with get, set
    /// Owner's ID. Could be a name or a guid.
    abstract owner: string with get, set

type [<AllowNullLiteral>] TfvcStatistics =
    /// Id of the last changeset the stats are based on.
    abstract changesetId: float with get, set
    /// Count of files at the requested scope.
    abstract fileCountTotal: float with get, set

/// Version descriptor properties.
type [<AllowNullLiteral>] TfvcVersionDescriptor =
    /// Version object.
    abstract version: string with get, set
    abstract versionOption: TfvcVersionOption with get, set
    abstract versionType: TfvcVersionType with get, set

type [<RequireQualifiedAccess>] TfvcVersionOption =
    | None = 0
    | Previous = 1
    | UseRename = 2

type [<RequireQualifiedAccess>] TfvcVersionType =
    | None = 0
    | Changeset = 1
    | Shelveset = 2
    | Change = 3
    | Date = 4
    | Latest = 5
    | Tip = 6
    | MergeSource = 7

type [<RequireQualifiedAccess>] VersionControlChangeType =
    | None = 0
    | Add = 1
    | Edit = 2
    | Encoding = 4
    | Rename = 8
    | Delete = 16
    | Undelete = 32
    | Branch = 64
    | Merge = 128
    | Lock = 256
    | Rollback = 512
    | SourceRename = 1024
    | TargetRename = 2048
    | Property = 4096
    | All = 8191

type [<AllowNullLiteral>] VersionControlProjectInfo =
    abstract defaultSourceControlType: TfsCore.SourceControlTypes with get, set
    abstract project: TfsCore.TeamProjectReference with get, set
    abstract supportsGit: bool with get, set
    abstract supportsTFVC: bool with get, set

type [<RequireQualifiedAccess>] VersionControlRecursionType =
    | None = 0
    | OneLevel = 1
    | OneLevelPlusNestedEmptyFolders = 4
    | Full = 120
module Tfvc = ___Tfvc_Tfvc
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract TfvcRestClient: TfvcRestClientStatic

type [<AllowNullLiteral>] TfvcRestClient =
    inherit RestClientBase
    /// <summary>Get a single branch hierarchy at the given path with parents or children as specified.</summary>
    /// <param name="path">- Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeParent">- Return the parent branch, if there is one. Default: False</param>
    /// <param name="includeChildren">- Return child branches, if there are any. Default: False</param>
    abstract getBranch: path: string * ?project: string * ?includeParent: bool * ?includeChildren: bool -> Promise<Tfvc.TfvcBranch>
    /// <summary>Get a collection of branch roots -- first-level children, branches with no parents.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeParent">- Return the parent branch, if there is one. Default: False</param>
    /// <param name="includeChildren">- Return the child branches for each root branch. Default: False</param>
    /// <param name="includeDeleted">- Return deleted branches. Default: False</param>
    /// <param name="includeLinks">- Return links. Default: False</param>
    abstract getBranches: ?project: string * ?includeParent: bool * ?includeChildren: bool * ?includeDeleted: bool * ?includeLinks: bool -> Promise<ResizeArray<Tfvc.TfvcBranch>>
    /// <summary>Get branch hierarchies below the specified scopePath</summary>
    /// <param name="scopePath">- Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="includeDeleted">- Return deleted branches. Default: False</param>
    /// <param name="includeLinks">- Return links. Default: False</param>
    abstract getBranchRefs: scopePath: string * ?project: string * ?includeDeleted: bool * ?includeLinks: bool -> Promise<ResizeArray<Tfvc.TfvcBranchRef>>
    /// <summary>Retrieve Tfvc changes for a given changeset.</summary>
    /// <param name="id">- ID of the changeset. Default: null</param>
    /// <param name="skip">- Number of results to skip. Default: null</param>
    /// <param name="top">- The maximum number of results to return. Default: null</param>
    abstract getChangesetChanges: ?id: float * ?skip: float * ?top: float -> Promise<ResizeArray<Tfvc.TfvcChange>>
    /// <summary>Create a new changeset.</summary>
    /// <param name="changeset">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createChangeset: changeset: Tfvc.TfvcChangeset * ?project: string -> Promise<Tfvc.TfvcChangesetRef>
    /// <summary>Retrieve a Tfvc Changeset</summary>
    /// <param name="id">- Changeset Id to retrieve.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="maxChangeCount">- Number of changes to return (maximum 100 changes) Default: 0</param>
    /// <param name="includeDetails">- Include policy details and check-in notes in the response. Default: false</param>
    /// <param name="includeWorkItems">- Include workitems. Default: false</param>
    /// <param name="maxCommentLength">- Include details about associated work items in the response. Default: null</param>
    /// <param name="includeSourceRename">- Include renames.  Default: false</param>
    /// <param name="skip">- Number of results to skip. Default: null</param>
    /// <param name="top">- The maximum number of results to return. Default: null</param>
    /// <param name="orderby">- Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.</param>
    /// <param name="searchCriteria">- Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null</param>
    abstract getChangeset: id: float * ?project: string * ?maxChangeCount: float * ?includeDetails: bool * ?includeWorkItems: bool * ?maxCommentLength: float * ?includeSourceRename: bool * ?skip: float * ?top: float * ?orderby: string * ?searchCriteria: Tfvc.TfvcChangesetSearchCriteria -> Promise<Tfvc.TfvcChangeset>
    /// <summary>Retrieve Tfvc Changesets</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="maxCommentLength">- Include details about associated work items in the response. Default: null</param>
    /// <param name="skip">- Number of results to skip. Default: null</param>
    /// <param name="top">- The maximum number of results to return. Default: null</param>
    /// <param name="orderby">- Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.</param>
    /// <param name="searchCriteria">- Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null</param>
    abstract getChangesets: ?project: string * ?maxCommentLength: float * ?skip: float * ?top: float * ?orderby: string * ?searchCriteria: Tfvc.TfvcChangesetSearchCriteria -> Promise<ResizeArray<Tfvc.TfvcChangesetRef>>
    /// <summary>Returns changesets for a given list of changeset Ids.</summary>
    /// <param name="changesetsRequestData">- List of changeset IDs.</param>
    abstract getBatchedChangesets: changesetsRequestData: Tfvc.TfvcChangesetsRequestData -> Promise<ResizeArray<Tfvc.TfvcChangesetRef>>
    /// <summary>Retrieves the work items associated with a particular changeset.</summary>
    /// <param name="id">- ID of the changeset.</param>
    abstract getChangesetWorkItems: ?id: float -> Promise<ResizeArray<Tfvc.AssociatedWorkItem>>
    /// <summary>Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.</summary>
    /// <param name="itemRequestData">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getItemsBatch: itemRequestData: Tfvc.TfvcItemRequestData * ?project: string -> Promise<ResizeArray<ResizeArray<Tfvc.TfvcItem>>>
    /// <summary>Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.</summary>
    /// <param name="itemRequestData">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getItemsBatchZip: itemRequestData: Tfvc.TfvcItemRequestData * ?project: string -> Promise<ArrayBuffer>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.</summary>
    /// <param name="path">- Version control path of an individual item to return.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- file name of item returned.</param>
    /// <param name="download">- If true, create a downloadable attachment.</param>
    /// <param name="scopePath">- Version control path of a folder to return multiple items.</param>
    /// <param name="recursionLevel">- None (just the item), or OneLevel (contents of a folder).</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is null.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    abstract getItem: path: string * ?project: string * ?fileName: string * ?download: bool * ?scopePath: string * ?recursionLevel: Tfvc.VersionControlRecursionType * ?versionDescriptor: Tfvc.TfvcVersionDescriptor * ?includeContent: bool -> Promise<Tfvc.TfvcItem>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.</summary>
    /// <param name="path">- Version control path of an individual item to return.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- file name of item returned.</param>
    /// <param name="download">- If true, create a downloadable attachment.</param>
    /// <param name="scopePath">- Version control path of a folder to return multiple items.</param>
    /// <param name="recursionLevel">- None (just the item), or OneLevel (contents of a folder).</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is null.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    abstract getItemContent: path: string * ?project: string * ?fileName: string * ?download: bool * ?scopePath: string * ?recursionLevel: Tfvc.VersionControlRecursionType * ?versionDescriptor: Tfvc.TfvcVersionDescriptor * ?includeContent: bool -> Promise<ArrayBuffer>
    /// <summary>Get a list of Tfvc items</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- Version control path of a folder to return multiple items.</param>
    /// <param name="recursionLevel">- None (just the item), or OneLevel (contents of a folder).</param>
    /// <param name="includeLinks">- True to include links.</param>
    /// <param name="versionDescriptor">-</param>
    abstract getItems: ?project: string * ?scopePath: string * ?recursionLevel: Tfvc.VersionControlRecursionType * ?includeLinks: bool * ?versionDescriptor: Tfvc.TfvcVersionDescriptor -> Promise<ResizeArray<Tfvc.TfvcItem>>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.</summary>
    /// <param name="path">- Version control path of an individual item to return.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- file name of item returned.</param>
    /// <param name="download">- If true, create a downloadable attachment.</param>
    /// <param name="scopePath">- Version control path of a folder to return multiple items.</param>
    /// <param name="recursionLevel">- None (just the item), or OneLevel (contents of a folder).</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is null.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    abstract getItemText: path: string * ?project: string * ?fileName: string * ?download: bool * ?scopePath: string * ?recursionLevel: Tfvc.VersionControlRecursionType * ?versionDescriptor: Tfvc.TfvcVersionDescriptor * ?includeContent: bool -> Promise<string>
    /// <summary>Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.</summary>
    /// <param name="path">- Version control path of an individual item to return.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- file name of item returned.</param>
    /// <param name="download">- If true, create a downloadable attachment.</param>
    /// <param name="scopePath">- Version control path of a folder to return multiple items.</param>
    /// <param name="recursionLevel">- None (just the item), or OneLevel (contents of a folder).</param>
    /// <param name="versionDescriptor">- Version descriptor.  Default is null.</param>
    /// <param name="includeContent">- Set to true to include item content when requesting json.  Default is false.</param>
    abstract getItemZip: path: string * ?project: string * ?fileName: string * ?download: bool * ?scopePath: string * ?recursionLevel: Tfvc.VersionControlRecursionType * ?versionDescriptor: Tfvc.TfvcVersionDescriptor * ?includeContent: bool -> Promise<ArrayBuffer>
    /// <summary>Get items under a label.</summary>
    /// <param name="labelId">- Unique identifier of label</param>
    /// <param name="top">- Max number of items to return</param>
    /// <param name="skip">- Number of items to skip</param>
    abstract getLabelItems: labelId: string * ?top: float * ?skip: float -> Promise<ResizeArray<Tfvc.TfvcItem>>
    /// <summary>Get a single deep label.</summary>
    /// <param name="labelId">- Unique identifier of label</param>
    /// <param name="requestData">- maxItemCount</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getLabel: labelId: string * requestData: Tfvc.TfvcLabelRequestData * ?project: string -> Promise<Tfvc.TfvcLabel>
    /// <summary>Get a collection of shallow label references.</summary>
    /// <param name="requestData">- labelScope, name, owner, and itemLabelFilter</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">- Max number of labels to return</param>
    /// <param name="skip">- Number of labels to skip</param>
    abstract getLabels: requestData: Tfvc.TfvcLabelRequestData * ?project: string * ?top: float * ?skip: float -> Promise<ResizeArray<Tfvc.TfvcLabelRef>>
    /// <summary>Get changes included in a shelveset.</summary>
    /// <param name="shelvesetId">- Shelveset's unique ID</param>
    /// <param name="top">- Max number of changes to return</param>
    /// <param name="skip">- Number of changes to skip</param>
    abstract getShelvesetChanges: shelvesetId: string * ?top: float * ?skip: float -> Promise<ResizeArray<Tfvc.TfvcChange>>
    /// <summary>Get a single deep shelveset.</summary>
    /// <param name="shelvesetId">- Shelveset's unique ID</param>
    /// <param name="requestData">- includeDetails, includeWorkItems, maxChangeCount, and maxCommentLength</param>
    abstract getShelveset: shelvesetId: string * ?requestData: Tfvc.TfvcShelvesetRequestData -> Promise<Tfvc.TfvcShelveset>
    /// <summary>Return a collection of shallow shelveset references.</summary>
    /// <param name="requestData">- name, owner, and maxCommentLength</param>
    /// <param name="top">- Max number of shelvesets to return</param>
    /// <param name="skip">- Number of shelvesets to skip</param>
    abstract getShelvesets: ?requestData: Tfvc.TfvcShelvesetRequestData * ?top: float * ?skip: float -> Promise<ResizeArray<Tfvc.TfvcShelvesetRef>>
    /// <summary>Get work items associated with a shelveset.</summary>
    /// <param name="shelvesetId">- Shelveset's unique ID</param>
    abstract getShelvesetWorkItems: shelvesetId: string -> Promise<ResizeArray<Tfvc.AssociatedWorkItem>>
    /// <summary>Provides File Count and Uncompressed Bytes for a Collection/Project at a particular scope for TFVC.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="scopePath">- '$/' for collection, '$/project' for specific project</param>
    abstract getTfvcStatistics: ?project: string * ?scopePath: string -> Promise<Tfvc.TfvcStatistics>

type [<AllowNullLiteral>] TfvcRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> TfvcRestClient
    abstract RESOURCE_AREA_ID: string
module Graph = ___Graph_Graph

/// Information about the location of a REST API resource
type [<AllowNullLiteral>] ApiResourceLocation =
    /// Area name for this resource
    abstract area: string with get, set
    /// Unique Identifier for this location
    abstract id: string with get, set
    /// Maximum api version that this resource supports (current server version for this resource)
    abstract maxVersion: string with get, set
    /// Minimum api version that this resource supports
    abstract minVersion: string with get, set
    /// The latest version of this resource location that is in "Release" (non-preview) mode
    abstract releasedVersion: string with get, set
    /// Resource name
    abstract resourceName: string with get, set
    /// The current resource version supported by this resource location
    abstract resourceVersion: float with get, set
    /// This location's route template (templated relative path)
    abstract routeTemplate: string with get, set

/// Represents version information for a REST Api resource
type [<AllowNullLiteral>] ApiResourceVersion =
    /// String representation of the Public API version. This is the version that the public sees and is used for a large group of services (e.g. the TFS 1.0 API)
    abstract apiVersion: string with get, set
    /// Is the public API version in preview
    abstract isPreview: bool with get, set
    /// Internal resource version. This is defined per-resource and is used to support build-to-build compatibility of API changes within a given (in-preview) public api version. For example, within the TFS 1.0 API release cycle, while it is still in preview, a resource's data structure may be changed. This resource can be versioned such that older clients will still work (requests will be sent to the older version) and new/upgraded clients will talk to the new version of the resource.
    abstract resourceVersion: float with get, set

type [<RequireQualifiedAccess>] ConnectOptions =
    | None = 0
    | IncludeServices = 1
    | IncludeLastUserAccess = 2
    | IncludeInheritedDefinitionsOnly = 4
    | IncludeNonInheritedDefinitionsOnly = 8

type [<RequireQualifiedAccess>] DeploymentFlags =
    | None = 0
    | Hosted = 1
    | OnPremises = 2

/// Defines an "actor" for an event.
type [<AllowNullLiteral>] EventActor =
    /// Required: This is the identity of the user for the specified role.
    abstract id: string with get, set
    /// Required: The event specific name of a role.
    abstract role: string with get, set

/// Defines a scope for an event.
type [<AllowNullLiteral>] EventScope =
    /// Required: This is the identity of the scope for the type.
    abstract id: string with get, set
    /// Optional: The display name of the scope
    abstract name: string with get, set
    /// Required: The event specific type of a scope.
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] IdentityRef =
    inherit Graph.GraphSubjectBase
    /// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
    abstract directoryAlias: string with get, set
    abstract id: string with get, set
    /// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
    abstract imageUrl: string with get, set
    /// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
    abstract inactive: bool with get, set
    /// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
    abstract isAadIdentity: bool with get, set
    /// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
    abstract isContainer: bool with get, set
    abstract isDeletedInOrigin: bool with get, set
    /// Deprecated - not in use in most preexisting implementations of ToIdentityRef
    abstract profileUrl: string with get, set
    /// Deprecated - use Domain+PrincipalName instead
    abstract uniqueName: string with get, set

type [<AllowNullLiteral>] IdentityRefWithEmail =
    inherit IdentityRef
    abstract preferredEmailAddress: string with get, set

/// The JSON model for JSON Patch Operations
type [<AllowNullLiteral>] JsonPatchDocument =
    interface end

/// The JSON model for a JSON Patch operation
type [<AllowNullLiteral>] JsonPatchOperation =
    /// The path to copy from for the Move/Copy operation.
    abstract from: string with get, set
    /// The patch operation
    abstract op: Operation with get, set
    /// The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
    abstract path: string with get, set
    /// The value for the operation. This is either a primitive or a JToken.
    abstract value: obj option with get, set

type [<AllowNullLiteral>] JsonWebToken =
    interface end

type [<RequireQualifiedAccess>] JWTAlgorithm =
    | None = 0
    | HS256 = 1
    | RS256 = 2

type [<RequireQualifiedAccess>] Operation =
    | Add = 0
    | Remove = 1
    | Replace = 2
    | Move = 3
    | Copy = 4
    | Test = 5

type [<AllowNullLiteral>] PagedList<'T> =
    interface end

/// Represents the public key portion of an RSA asymmetric key.
type [<AllowNullLiteral>] PublicKey =
    /// Gets or sets the exponent for the public key.
    abstract exponent: ResizeArray<float> with get, set
    /// Gets or sets the modulus for the public key.
    abstract modulus: ResizeArray<float> with get, set

type [<AllowNullLiteral>] Publisher =
    /// Name of the publishing service.
    abstract name: string with get, set
    /// Service Owner Guid Eg. Tfs : 00025394-6065-48CA-87D9-7F5672854EF7
    abstract serviceOwnerId: string with get, set

/// The class to represent a REST reference link.  RFC: http://tools.ietf.org/html/draft-kelly-json-hal-06  The RFC is not fully implemented, additional properties are allowed on the reference link but as of yet we don't have a need for them.
type [<AllowNullLiteral>] ReferenceLink =
    abstract href: string with get, set

type [<AllowNullLiteral>] ResourceRef =
    abstract id: string with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] ServiceEvent =
    /// This is the id of the type. Constants that will be used by subscribers to identify/filter events being published on a topic.
    abstract eventType: string with get, set
    /// This is the service that published this event.
    abstract publisher: Publisher with get, set
    /// The resource object that carries specific information about the event. The object must have the ServiceEventObject applied for serialization/deserialization to work.
    abstract resource: obj option with get, set
    /// This dictionary carries the context descriptors along with their ids.
    abstract resourceContainers: ServiceEventResourceContainers with get, set
    /// This is the version of the resource.
    abstract resourceVersion: string with get, set

/// A signed url allowing limited-time anonymous access to private resources.
type [<AllowNullLiteral>] SignedUrl =
    abstract signatureExpires: DateTime with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] TeamMember =
    abstract identity: IdentityRef with get, set
    abstract isTeamAdmin: bool with get, set

/// A single secured timing consisting of a duration and start time
type [<AllowNullLiteral>] TimingEntry =
    /// Duration of the entry in ticks
    abstract elapsedTicks: float with get, set
    /// Properties to distinguish timings within the same group or to provide data to send with telemetry
    abstract properties: ServiceEventResourceContainers with get, set
    /// Offset from Server Request Context start time in microseconds
    abstract startOffset: float with get, set

/// A set of secured performance timings all keyed off of the same string
type [<AllowNullLiteral>] TimingGroup =
    /// The total number of timing entries associated with this group
    abstract count: float with get, set
    /// Overall duration of all entries in this group in ticks
    abstract elapsedTicks: float with get, set
    /// A list of timing entries in this group. Only the first few entries in each group are collected.
    abstract timings: ResizeArray<TimingEntry> with get, set

/// This class describes a trace filter, i.e. a set of criteria on whether or not a trace event should be emitted
type [<AllowNullLiteral>] TraceFilter =
    abstract area: string with get, set
    abstract exceptionType: string with get, set
    abstract isEnabled: bool with get, set
    abstract layer: string with get, set
    abstract level: float with get, set
    abstract ``method``: string with get, set
    /// Used to serialize additional identity information (display name, etc) to clients. Not set by default. Server-side callers should use OwnerId.
    abstract owner: IdentityRef with get, set
    abstract ownerId: string with get, set
    abstract path: string with get, set
    abstract processName: string with get, set
    abstract service: string with get, set
    abstract serviceHost: string with get, set
    abstract timeCreated: DateTime with get, set
    abstract traceId: string with get, set
    abstract tracepoint: float with get, set
    abstract uri: string with get, set
    abstract userAgent: string with get, set
    abstract userLogin: string with get, set

type [<AllowNullLiteral>] VssJsonCollectionWrapper =
    inherit VssJsonCollectionWrapperBase
    abstract value: ResizeArray<obj option> with get, set

/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
type [<AllowNullLiteral>] VssJsonCollectionWrapperV<'T> =
    inherit VssJsonCollectionWrapperBase
    abstract value: 'T with get, set

type [<AllowNullLiteral>] VssJsonCollectionWrapperBase =
    abstract count: float with get, set

/// This is the type used for firing notifications intended for the subsystem in the Notifications SDK. For components that can't take a dependency on the Notifications SDK directly, they can use ITeamFoundationEventService.PublishNotification and the Notifications SDK ISubscriber implementation will get it.
type [<AllowNullLiteral>] VssNotificationEvent =
    /// Optional: A list of actors which are additional identities with corresponding roles that are relevant to the event.
    abstract actors: ResizeArray<EventActor> with get, set
    /// Optional: A list of artifacts referenced or impacted by this event.
    abstract artifactUris: ResizeArray<string> with get, set
    /// Required: The event payload.  If Data is a string, it must be in Json or XML format.  Otherwise it must have a serialization format attribute.
    abstract data: obj option with get, set
    /// Required: The name of the event.  This event must be registered in the context it is being fired.
    abstract eventType: string with get, set
    /// How long before the event expires and will be cleaned up.  The default is to use the system default.
    abstract expiresIn: obj option with get, set
    /// The id of the item, artifact, extension, project, etc.
    abstract itemId: string with get, set
    /// How long to wait before processing this event.  The default is to process immediately.
    abstract processDelay: obj option with get, set
    /// Optional: A list of scopes which are are relevant to the event.
    abstract scopes: ResizeArray<EventScope> with get, set
    /// This is the time the original source event for this VssNotificationEvent was created.  For example, for something like a build completion notification SourceEventCreatedTime should be the time the build finished not the time this event was raised.
    abstract sourceEventCreatedTime: DateTime with get, set

type [<AllowNullLiteral>] WrappedException =
    abstract customProperties: ServiceEventResourceContainers with get, set
    abstract errorCode: float with get, set
    abstract eventId: float with get, set
    abstract helpLink: string with get, set
    abstract innerException: WrappedException with get, set
    abstract message: string with get, set
    abstract stackTrace: string with get, set
    abstract typeKey: string with get, set
    abstract typeName: string with get, set

type [<AllowNullLiteral>] ServiceEventResourceContainers =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set
module Git = ___Git_Git

/// Defines a wiki repository which encapsulates the git repository backing the wiki.
type [<AllowNullLiteral>] Wiki =
    inherit WikiCreateParameters
    /// The head commit associated with the git repository backing up the wiki.
    abstract headCommit: string with get, set
    /// The ID of the wiki which is same as the ID of the Git repository that it is backed by.
    abstract id: string with get, set
    /// The git repository that backs up the wiki.
    abstract repository: Git.GitRepository with get, set

/// Defines properties for wiki attachment file.
type [<AllowNullLiteral>] WikiAttachment =
    /// Name of the wiki attachment file.
    abstract name: string with get, set
    /// Path of the wiki attachment file.
    abstract path: string with get, set

/// Response contract for the Wiki Attachments API
type [<AllowNullLiteral>] WikiAttachmentResponse =
    /// Defines properties for wiki attachment file.
    abstract attachment: WikiAttachment with get, set
    /// Contains the list of ETag values from the response header of the attachments API call. The first item in the list contains the version of the wiki attachment.
    abstract eTag: ResizeArray<string> with get, set

/// Base wiki creation parameters.
type [<AllowNullLiteral>] WikiCreateBaseParameters =
    /// Folder path inside repository which is shown as Wiki. Not required for ProjectWiki type.
    abstract mappedPath: string with get, set
    /// Wiki name.
    abstract name: string with get, set
    /// ID of the project in which the wiki is to be created.
    abstract projectId: string with get, set
    /// ID of the git repository that backs up the wiki. Not required for ProjectWiki type.
    abstract repositoryId: string with get, set
    /// Type of the wiki.
    abstract ``type``: WikiType with get, set

/// Wiki creations parameters.
type [<AllowNullLiteral>] WikiCreateParameters =
    /// Wiki name.
    abstract name: string with get, set
    /// ID of the project in which the wiki is to be created.
    abstract projectId: string with get, set

/// Wiki creation parameters.
type [<AllowNullLiteral>] WikiCreateParametersV2 =
    inherit WikiCreateBaseParameters
    /// Version of the wiki. Not required for ProjectWiki type.
    abstract version: Git.GitVersionDescriptor with get, set

/// Defines a page in a wiki.
type [<AllowNullLiteral>] WikiPage =
    inherit WikiPageCreateOrUpdateParameters
    /// Path of the git item corresponding to the wiki page stored in the backing Git repository.
    abstract gitItemPath: string with get, set
    /// When present, permanent identifier for the wiki page
    abstract id: float with get, set
    /// True if a page is non-conforming, i.e. 1) if the name doesn't match page naming standards. 2) if the page does not have a valid entry in the appropriate order file.
    abstract isNonConformant: bool with get, set
    /// True if this page has subpages under its path.
    abstract isParentPage: bool with get, set
    /// Order of the wiki page, relative to other pages in the same hierarchy level.
    abstract order: float with get, set
    /// Path of the wiki page.
    abstract path: string with get, set
    /// Remote web url to the wiki page.
    abstract remoteUrl: string with get, set
    /// List of subpages of the current page.
    abstract subPages: ResizeArray<WikiPage> with get, set
    /// REST url for this wiki page.
    abstract url: string with get, set

/// Contract encapsulating parameters for the page create or update operations.
type [<AllowNullLiteral>] WikiPageCreateOrUpdateParameters =
    /// Content of the wiki page.
    abstract content: string with get, set

/// Request contract for Wiki Page Move.
type [<AllowNullLiteral>] WikiPageMove =
    inherit WikiPageMoveParameters
    /// Resultant page of this page move operation.
    abstract page: WikiPage with get, set

/// Contract encapsulating parameters for the page move operation.
type [<AllowNullLiteral>] WikiPageMoveParameters =
    /// New order of the wiki page.
    abstract newOrder: float with get, set
    /// New path of the wiki page.
    abstract newPath: string with get, set
    /// Current path of the wiki page.
    abstract path: string with get, set

/// Response contract for the Wiki Page Move API.
type [<AllowNullLiteral>] WikiPageMoveResponse =
    /// Contains the list of ETag values from the response header of the page move API call. The first item in the list contains the version of the wiki page subject to page move.
    abstract eTag: ResizeArray<string> with get, set
    /// Defines properties for wiki page move.
    abstract pageMove: WikiPageMove with get, set

/// Response contract for the Wiki Pages PUT, PATCH and DELETE APIs.
type [<AllowNullLiteral>] WikiPageResponse =
    /// Contains the list of ETag values from the response header of the pages API call. The first item in the list contains the version of the wiki page.
    abstract eTag: ResizeArray<string> with get, set
    /// Defines properties for wiki page.
    abstract page: WikiPage with get, set

/// Defines properties for wiki page view stats.
type [<AllowNullLiteral>] WikiPageViewStats =
    /// Wiki page view count.
    abstract count: float with get, set
    /// Wiki page last viewed time.
    abstract lastViewedTime: DateTime with get, set
    /// Wiki page path.
    abstract path: string with get, set

type [<RequireQualifiedAccess>] WikiType =
    | ProjectWiki = 0
    | CodeWiki = 1

type [<AllowNullLiteral>] WikiUpdatedNotificationMessage =
    /// Collection host Id for which the wikis are updated.
    abstract collectionId: string with get, set
    /// Project Id for which the wikis are updated.
    abstract projectId: string with get, set
    /// Repository Id associated with the particular wiki which is added, updated or deleted.
    abstract repositoryId: string with get, set

/// Wiki update parameters.
type [<AllowNullLiteral>] WikiUpdateParameters =
    /// Name for wiki.
    abstract name: string with get, set
    /// Versions of the wiki.
    abstract versions: ResizeArray<Git.GitVersionDescriptor> with get, set

/// Defines a wiki resource.
type [<AllowNullLiteral>] WikiV2 =
    inherit WikiCreateBaseParameters
    /// ID of the wiki.
    abstract id: string with get, set
    /// Properties of the wiki.
    abstract properties: WikiV2Properties with get, set
    /// Remote web url to the wiki.
    abstract remoteUrl: string with get, set
    /// REST url for this wiki.
    abstract url: string with get, set
    /// Versions of the wiki.
    abstract versions: ResizeArray<Git.GitVersionDescriptor> with get, set

type [<AllowNullLiteral>] WikiV2Properties =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
module Comments_Contracts = ___Comments_Comments
module Git = ___Git_Git
module WebApi = ___WebApi_WebApi
module Wiki = ___Wiki_Wiki
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract WikiRestClient: WikiRestClientStatic

type [<AllowNullLiteral>] WikiRestClient =
    inherit RestClientBase
    /// <summary>Uploads an attachment on a comment on a wiki page.</summary>
    /// <param name="content">- Content to upload</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    abstract createCommentAttachment: content: obj option * project: string * wikiIdentifier: string * pageId: float -> Promise<Comments_Contracts.CommentAttachment>
    /// <summary>Downloads an attachment on a comment on a wiki page.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    /// <param name="attachmentId">- Attachment ID.</param>
    abstract getAttachmentContent: project: string * wikiIdentifier: string * pageId: float * attachmentId: string -> Promise<ArrayBuffer>
    /// <summary>Add a reaction on a wiki page comment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name</param>
    /// <param name="pageId">- Wiki page ID</param>
    /// <param name="commentId">- ID of the associated comment</param>
    /// <param name="type">- Type of the reaction being added</param>
    abstract addCommentReaction: project: string * wikiIdentifier: string * pageId: float * commentId: float * ``type``: Comments_Contracts.CommentReactionType -> Promise<Comments_Contracts.CommentReaction>
    /// <summary>Delete a reaction on a wiki page comment.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or name</param>
    /// <param name="pageId">- Wiki page ID</param>
    /// <param name="commentId">- ID of the associated comment</param>
    /// <param name="type">- Type of the reaction being deleted</param>
    abstract deleteCommentReaction: project: string * wikiIdentifier: string * pageId: float * commentId: float * ``type``: Comments_Contracts.CommentReactionType -> Promise<Comments_Contracts.CommentReaction>
    /// <summary>Gets a list of users who have reacted for the given wiki comment with a given reaction type. Supports paging, with a default page size of 100 users at a time.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    /// <param name="commentId">- ID of the associated comment</param>
    /// <param name="type">- Type of the reaction for which the engaged users are being requested</param>
    /// <param name="top">- Number of enagaged users to be returned in a given page. Optional, defaults to 100</param>
    /// <param name="skip">- Number of engaged users to be skipped to page the next set of engaged users, defaults to 0</param>
    abstract getEngagedUsers: project: string * wikiIdentifier: string * pageId: float * commentId: float * ``type``: Comments_Contracts.CommentReactionType * ?top: float * ?skip: float -> Promise<ResizeArray<WebApi.IdentityRef>>
    /// <summary>Add a comment on a wiki page.</summary>
    /// <param name="request">- Comment create request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    abstract addComment: request: Comments_Contracts.CommentCreateParameters * project: string * wikiIdentifier: string * pageId: float -> Promise<Comments_Contracts.Comment>
    /// <summary>Delete a comment on a wiki page.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    /// <param name="id">- Comment ID.</param>
    abstract deleteComment: project: string * wikiIdentifier: string * pageId: float * id: float -> Promise<unit>
    /// <summary>Returns a comment associated with the Wiki Page.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    /// <param name="id">- ID of the comment to return.</param>
    /// <param name="excludeDeleted">- Specify if the deleted comment should be skipped.</param>
    /// <param name="expand">- Specifies the additional data retrieval options for comments.</param>
    abstract getComment: project: string * wikiIdentifier: string * pageId: float * id: float * ?excludeDeleted: bool * ?expand: Comments_Contracts.CommentExpandOptions -> Promise<Comments_Contracts.Comment>
    /// <summary>Returns a pageable list of comments.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    /// <param name="top">- Max number of comments to return.</param>
    /// <param name="continuationToken">- Used to query for the next page of comments.</param>
    /// <param name="excludeDeleted">- Specify if the deleted comments should be skipped.</param>
    /// <param name="expand">- Specifies the additional data retrieval options for comments.</param>
    /// <param name="order">- Order in which the comments should be returned.</param>
    /// <param name="parentId">- CommentId of the parent comment.</param>
    abstract listComments: project: string * wikiIdentifier: string * pageId: float * ?top: float * ?continuationToken: string * ?excludeDeleted: bool * ?expand: Comments_Contracts.CommentExpandOptions * ?order: Comments_Contracts.CommentSortOrder * ?parentId: float -> Promise<Comments_Contracts.CommentList>
    /// <summary>Update a comment on a wiki page.</summary>
    /// <param name="comment">- Comment update request.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="pageId">- Wiki page ID.</param>
    /// <param name="id">- Comment ID.</param>
    abstract updateComment: comment: Comments_Contracts.CommentUpdateParameters * project: string * wikiIdentifier: string * pageId: float * id: float -> Promise<Comments_Contracts.Comment>
    /// <summary>Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the \`Accept\` header sent in the request.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="path">- Wiki page path.</param>
    /// <param name="recursionLevel">- Recursion level for subpages retrieval. Defaults to \`None\` (Optional).</param>
    /// <param name="versionDescriptor">- GitVersionDescriptor for the page. Defaults to the default branch (Optional).</param>
    /// <param name="includeContent">- True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
    abstract getPageText: project: string * wikiIdentifier: string * ?path: string * ?recursionLevel: Git.VersionControlRecursionType * ?versionDescriptor: Git.GitVersionDescriptor * ?includeContent: bool -> Promise<string>
    /// <summary>Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the \`Accept\` header sent in the request.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="path">- Wiki page path.</param>
    /// <param name="recursionLevel">- Recursion level for subpages retrieval. Defaults to \`None\` (Optional).</param>
    /// <param name="versionDescriptor">- GitVersionDescriptor for the page. Defaults to the default branch (Optional).</param>
    /// <param name="includeContent">- True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
    abstract getPageZip: project: string * wikiIdentifier: string * ?path: string * ?recursionLevel: Git.VersionControlRecursionType * ?versionDescriptor: Git.GitVersionDescriptor * ?includeContent: bool -> Promise<ArrayBuffer>
    /// <summary>Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the \`Accept\` header sent in the request.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name..</param>
    /// <param name="id">- Wiki page ID.</param>
    /// <param name="recursionLevel">- Recursion level for subpages retrieval. Defaults to \`None\` (Optional).</param>
    /// <param name="includeContent">- True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
    abstract getPageByIdText: project: string * wikiIdentifier: string * id: float * ?recursionLevel: Git.VersionControlRecursionType * ?includeContent: bool -> Promise<string>
    /// <summary>Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the \`Accept\` header sent in the request.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name..</param>
    /// <param name="id">- Wiki page ID.</param>
    /// <param name="recursionLevel">- Recursion level for subpages retrieval. Defaults to \`None\` (Optional).</param>
    /// <param name="includeContent">- True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
    abstract getPageByIdZip: project: string * wikiIdentifier: string * id: float * ?recursionLevel: Git.VersionControlRecursionType * ?includeContent: bool -> Promise<ArrayBuffer>
    /// <summary>Creates a new page view stats resource or updates an existing page view stats resource.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="wikiVersion">- Wiki version.</param>
    /// <param name="path">- Wiki page path.</param>
    /// <param name="oldPath">- Old page path. This is optional and required to rename path in existing page view stats.</param>
    abstract createOrUpdatePageViewStats: project: string * wikiIdentifier: string * wikiVersion: Git.GitVersionDescriptor * path: string * ?oldPath: string -> Promise<Wiki.WikiPageViewStats>
    /// <summary>Creates the wiki resource.</summary>
    /// <param name="wikiCreateParams">- Parameters for the wiki creation.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createWiki: wikiCreateParams: Wiki.WikiCreateParametersV2 * ?project: string -> Promise<Wiki.WikiV2>
    /// <summary>Deletes the wiki corresponding to the wiki ID or wiki name provided.</summary>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteWiki: wikiIdentifier: string * ?project: string -> Promise<Wiki.WikiV2>
    /// <summary>Gets all wikis in a project or collection.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getAllWikis: ?project: string -> Promise<ResizeArray<Wiki.WikiV2>>
    /// <summary>Gets the wiki corresponding to the wiki ID or wiki name provided.</summary>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getWiki: wikiIdentifier: string * ?project: string -> Promise<Wiki.WikiV2>
    /// <summary>Updates the wiki corresponding to the wiki ID or wiki name provided using the update parameters.</summary>
    /// <param name="updateParameters">- Update parameters.</param>
    /// <param name="wikiIdentifier">- Wiki ID or wiki name.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateWiki: updateParameters: Wiki.WikiUpdateParameters * wikiIdentifier: string * ?project: string -> Promise<Wiki.WikiV2>

type [<AllowNullLiteral>] WikiRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> WikiRestClient
    abstract RESOURCE_AREA_ID: string
module System = ___Common_System
module WebApi = ___WebApi_WebApi
module WorkItemTracking = ___WorkItemTracking_WorkItemTracking

type [<AllowNullLiteral>] Activity =
    abstract capacityPerDay: float with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] attribute =
    interface end

type [<AllowNullLiteral>] BacklogColumn =
    abstract columnFieldReference: WorkItemTracking.WorkItemFieldReference with get, set
    abstract width: float with get, set

type [<AllowNullLiteral>] BacklogConfiguration =
    /// Behavior/type field mapping
    abstract backlogFields: BacklogFields with get, set
    /// Bugs behavior
    abstract bugsBehavior: BugsBehavior with get, set
    /// Hidden Backlog
    abstract hiddenBacklogs: ResizeArray<string> with get, set
    /// Is BugsBehavior Configured in the process
    abstract isBugsBehaviorConfigured: bool with get, set
    /// Portfolio backlog descriptors
    abstract portfolioBacklogs: ResizeArray<BacklogLevelConfiguration> with get, set
    /// Requirement backlog
    abstract requirementBacklog: BacklogLevelConfiguration with get, set
    /// Task backlog
    abstract taskBacklog: BacklogLevelConfiguration with get, set
    abstract url: string with get, set
    /// Mapped states for work item types
    abstract workItemTypeMappedStates: ResizeArray<WorkItemTypeStateInfo> with get, set

type [<AllowNullLiteral>] BacklogFields =
    /// Field Type (e.g. Order, Activity) to Field Reference Name map
    abstract typeFields: BacklogFieldsTypeFields with get, set

/// Contract representing a backlog level
type [<AllowNullLiteral>] BacklogLevel =
    /// Reference name of the corresponding WIT category
    abstract categoryReferenceName: string with get, set
    /// Plural name for the backlog level
    abstract pluralName: string with get, set
    /// Collection of work item states that are included in the plan. The server will filter to only these work item types.
    abstract workItemStates: ResizeArray<string> with get, set
    /// Collection of valid workitem type names for the given backlog level
    abstract workItemTypes: ResizeArray<string> with get, set

type [<AllowNullLiteral>] BacklogLevelConfiguration =
    /// List of fields to include in Add Panel
    abstract addPanelFields: ResizeArray<WorkItemTracking.WorkItemFieldReference> with get, set
    /// Color for the backlog level
    abstract color: string with get, set
    /// Default list of columns for the backlog
    abstract columnFields: ResizeArray<BacklogColumn> with get, set
    /// Default Work Item Type for the backlog
    abstract defaultWorkItemType: WorkItemTracking.WorkItemTypeReference with get, set
    /// Backlog Id (for Legacy Backlog Level from process config it can be categoryref name)
    abstract id: string with get, set
    /// Indicates whether the backlog level is hidden
    abstract isHidden: bool with get, set
    /// Backlog Name
    abstract name: string with get, set
    /// Backlog Rank (Taskbacklog is 0)
    abstract rank: float with get, set
    /// The type of this backlog level
    abstract ``type``: BacklogType with get, set
    /// Max number of work items to show in the given backlog
    abstract workItemCountLimit: float with get, set
    /// Work Item types participating in this backlog as known by the project/Process, can be overridden by team settings for bugs
    abstract workItemTypes: ResizeArray<WorkItemTracking.WorkItemTypeReference> with get, set

/// Represents work items in a backlog level
type [<AllowNullLiteral>] BacklogLevelWorkItems =
    /// A list of work items within a backlog level
    abstract workItems: ResizeArray<WorkItemTracking.WorkItemLink> with get, set

type [<RequireQualifiedAccess>] BacklogType =
    | Portfolio = 0
    | Requirement = 1
    | Task = 2

type [<AllowNullLiteral>] Board =
    inherit BoardReference
    abstract _links: obj option with get, set
    abstract allowedMappings: BoardAllowedMappings with get, set
    abstract canEdit: bool with get, set
    abstract columns: ResizeArray<BoardColumn> with get, set
    abstract fields: BoardFields with get, set
    abstract isValid: bool with get, set
    abstract revision: float with get, set
    abstract rows: ResizeArray<BoardRow> with get, set

/// Represents a board badge.
type [<AllowNullLiteral>] BoardBadge =
    /// The ID of the board represented by this badge.
    abstract boardId: string with get, set
    /// A link to the SVG resource.
    abstract imageUrl: string with get, set

type [<RequireQualifiedAccess>] BoardBadgeColumnOptions =
    | InProgressColumns = 0
    | AllColumns = 1
    | CustomColumns = 2

type [<AllowNullLiteral>] BoardCardRuleSettings =
    abstract _links: obj option with get, set
    abstract rules: BoardCardRuleSettingsRules with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] BoardCardSettings =
    abstract cards: BoardCardSettingsCards with get, set

type [<AllowNullLiteral>] BoardChart =
    inherit BoardChartReference
    /// The links for the resource
    abstract _links: obj option with get, set
    /// The settings for the resource
    abstract settings: BoardChartSettings with get, set

type [<AllowNullLiteral>] BoardChartReference =
    /// Name of the resource
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] BoardColumn =
    abstract columnType: BoardColumnType with get, set
    abstract description: string with get, set
    abstract id: string with get, set
    abstract isSplit: bool with get, set
    abstract itemLimit: float with get, set
    abstract name: string with get, set
    abstract stateMappings: BacklogFieldsTypeFields with get, set

type [<RequireQualifiedAccess>] BoardColumnType =
    | Incoming = 0
    | InProgress = 1
    | Outgoing = 2

type [<AllowNullLiteral>] BoardFields =
    abstract columnField: FieldReference with get, set
    abstract doneField: FieldReference with get, set
    abstract rowField: FieldReference with get, set

type [<AllowNullLiteral>] BoardReference =
    /// Id of the resource
    abstract id: string with get, set
    /// Name of the resource
    abstract name: string with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] BoardRow =
    abstract id: string with get, set
    abstract name: string with get, set

type [<AllowNullLiteral>] BoardSuggestedValue =
    abstract name: string with get, set

type [<AllowNullLiteral>] BoardUserSettings =
    abstract autoRefreshState: bool with get, set

type [<RequireQualifiedAccess>] BugsBehavior =
    | Off = 0
    | AsRequirements = 1
    | AsTasks = 2

type [<AllowNullLiteral>] CapacityContractBase =
    inherit TeamSettingsDataContractBase
    /// Collection of capacities associated with the team member
    abstract activities: ResizeArray<Activity> with get, set
    /// The days off associated with the team member
    abstract daysOff: ResizeArray<DateRange> with get, set

/// Expected data from PATCH
type [<AllowNullLiteral>] CapacityPatch =
    abstract activities: ResizeArray<Activity> with get, set
    abstract daysOff: ResizeArray<DateRange> with get, set

/// Card settings, such as fields and rules
type [<AllowNullLiteral>] CardFieldSettings =
    /// A collection of field information of additional fields on cards. The index in the collection signifies the order of the field among the additional fields. Currently unused. Should be used with User Story 691539: Card setting: additional fields
    abstract additionalFields: ResizeArray<FieldInfo> with get, set
    /// Display format for the assigned to field
    abstract assignedToDisplayFormat: IdentityDisplayFormat with get, set
    /// A collection of field information of rendered core fields on cards.
    abstract coreFields: ResizeArray<FieldInfo> with get, set
    /// Flag indicating whether to show assigned to field on cards. When true, AssignedToDisplayFormat will determine how the field will be displayed
    abstract showAssignedTo: bool with get, set
    /// Flag indicating whether to show empty fields on cards
    abstract showEmptyFields: bool with get, set
    /// Flag indicating whether to show ID on cards
    abstract showId: bool with get, set
    /// Flag indicating whether to show state field on cards
    abstract showState: bool with get, set
    /// Flag indicating whether to show tags on cards
    abstract showTags: bool with get, set

/// Card settings, such as fields and rules
type [<AllowNullLiteral>] CardSettings =
    /// A collection of settings related to rendering of fields on cards
    abstract fields: CardFieldSettings with get, set

/// Details about a given backlog category
type [<AllowNullLiteral>] CategoryConfiguration =
    /// Name
    abstract name: string with get, set
    /// Category Reference Name
    abstract referenceName: string with get, set
    /// Work item types for the backlog category
    abstract workItemTypes: ResizeArray<WorkItemTracking.WorkItemTypeReference> with get, set

type [<AllowNullLiteral>] CreatePlan =
    /// Description of the plan
    abstract description: string with get, set
    /// Name of the plan to create.
    abstract name: string with get, set
    /// Plan properties.
    abstract properties: obj option with get, set
    /// Type of plan to create.
    abstract ``type``: PlanType with get, set

type [<AllowNullLiteral>] DateRange =
    /// End of the date range.
    abstract ``end``: DateTime with get, set
    /// Start of the date range.
    abstract start: DateTime with get, set

/// Data contract for Data of Delivery View
type [<AllowNullLiteral>] DeliveryViewData =
    inherit PlanViewData
    /// Work item child id to parent id map
    abstract childIdToParentIdMap: DeliveryViewDataChildIdToParentIdMap with get, set
    /// Filter criteria status of the timeline
    abstract criteriaStatus: TimelineCriteriaStatus with get, set
    /// The end date of the delivery view data
    abstract endDate: DateTime with get, set
    /// Max number of teams can be configured for a delivery plan.
    abstract maxExpandedTeams: float with get, set
    /// The start date for the delivery view data
    abstract startDate: DateTime with get, set
    /// All the team data
    abstract teams: ResizeArray<TimelineTeamData> with get, set

/// Collection of properties, specific to the DeliveryTimelineView
type [<AllowNullLiteral>] DeliveryViewPropertyCollection =
    /// Card settings
    abstract cardSettings: CardSettings with get, set
    /// Field criteria
    abstract criteria: ResizeArray<FilterClause> with get, set
    /// Markers. Will be missing/null if there are no markers.
    abstract markers: ResizeArray<Marker> with get, set
    /// Team backlog mappings
    abstract teamBacklogMappings: ResizeArray<TeamBacklogMapping> with get, set

/// Object bag storing the set of permissions relevant to this plan
type [<AllowNullLiteral>] FieldInfo =
    /// The additional field display name
    abstract displayName: string with get, set
    /// The additional field type
    abstract fieldType: FieldType with get, set
    /// Indicates if the field definition is for an identity field.
    abstract isIdentity: bool with get, set
    /// The additional field reference name
    abstract referenceName: string with get, set

/// An abstracted reference to a field
type [<AllowNullLiteral>] FieldReference =
    /// fieldRefName for the field
    abstract referenceName: string with get, set
    /// Full http link to more information about the field
    abstract url: string with get, set

type [<AllowNullLiteral>] FieldSetting =
    interface end

type [<RequireQualifiedAccess>] FieldType =
    | String = 0
    | PlainText = 1
    | Integer = 2
    | DateTime = 3
    | TreePath = 4
    | Boolean = 5
    | Double = 6

type [<AllowNullLiteral>] FilterClause =
    abstract fieldName: string with get, set
    abstract index: float with get, set
    abstract logicalOperator: string with get, set
    abstract operator: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] FilterGroup =
    abstract ``end``: float with get, set
    abstract level: float with get, set
    abstract start: float with get, set

type [<RequireQualifiedAccess>] IdentityDisplayFormat =
    | AvatarOnly = 0
    | FullName = 1
    | AvatarAndFullName = 2

type [<AllowNullLiteral>] ITaskboardColumnMapping =
    abstract state: string with get, set
    abstract workItemType: string with get, set

/// Represents work items in an iteration backlog
type [<AllowNullLiteral>] IterationWorkItems =
    inherit TeamSettingsDataContractBase
    /// Work item relations
    abstract workItemRelations: ResizeArray<WorkItemTracking.WorkItemLink> with get, set

/// Client serialization contract for Delivery Timeline Markers.
type [<AllowNullLiteral>] Marker =
    /// Color associated with the marker.
    abstract color: string with get, set
    /// Where the marker should be displayed on the timeline.
    abstract date: DateTime with get, set
    /// Label/title for the marker.
    abstract label: string with get, set

type [<AllowNullLiteral>] Member =
    abstract displayName: string with get, set
    abstract id: string with get, set
    abstract imageUrl: string with get, set
    abstract uniqueName: string with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] ParentChildWIMap =
    abstract childWorkItemIds: ResizeArray<float> with get, set
    abstract id: float with get, set
    abstract title: string with get, set

/// Data contract for the plan definition
type [<AllowNullLiteral>] Plan =
    /// Identity that created this plan. Defaults to null for records before upgrading to ScaledAgileViewComponent4.
    abstract createdByIdentity: WebApi.IdentityRef with get, set
    /// Date when the plan was created
    abstract createdDate: DateTime with get, set
    /// Description of the plan
    abstract description: string with get, set
    /// Id of the plan
    abstract id: string with get, set
    /// Identity that last modified this plan. Defaults to null for records before upgrading to ScaledAgileViewComponent4.
    abstract modifiedByIdentity: WebApi.IdentityRef with get, set
    /// Date when the plan was last modified. Default to CreatedDate when the plan is first created.
    abstract modifiedDate: DateTime with get, set
    /// Name of the plan
    abstract name: string with get, set
    /// The PlanPropertyCollection instance associated with the plan. These are dependent on the type of the plan. For example, DeliveryTimelineView, it would be of type DeliveryViewPropertyCollection.
    abstract properties: obj option with get, set
    /// Revision of the plan. Used to safeguard users from overwriting each other's changes.
    abstract revision: float with get, set
    /// Type of the plan
    abstract ``type``: PlanType with get, set
    /// The resource url to locate the plan via rest api
    abstract url: string with get, set
    /// Bit flag indicating set of permissions a user has to the plan.
    abstract userPermissions: PlanUserPermissions with get, set

/// Metadata about a plan definition that is stored in favorites service
type [<AllowNullLiteral>] PlanMetadata =
    /// Identity of the creator of the plan
    abstract createdByIdentity: WebApi.IdentityRef with get, set
    /// Description of plan
    abstract description: string with get, set
    /// Last modified date of the plan
    abstract modifiedDate: DateTime with get, set
    /// Bit flag indicating set of permissions a user has to the plan.
    abstract userPermissions: PlanUserPermissions with get, set

type [<RequireQualifiedAccess>] PlanType =
    | DeliveryTimelineView = 0

type [<RequireQualifiedAccess>] PlanUserPermissions =
    | None = 0
    | View = 1
    | Edit = 2
    | Delete = 4
    | Manage = 8
    | AllPermissions = 15

/// Base class for plan view data contracts. Anything common goes here.
type [<AllowNullLiteral>] PlanViewData =
    abstract id: string with get, set
    abstract revision: float with get, set

/// Represents a single pre-defined query.
type [<AllowNullLiteral>] PredefinedQuery =
    /// Whether or not the query returned the complete set of data or if the data was truncated.
    abstract hasMore: bool with get, set
    /// Id of the query
    abstract id: string with get, set
    /// Localized name of the query
    abstract name: string with get, set
    /// The results of the query.  This will be a set of WorkItem objects with only the 'id' set.  The client is responsible for paging in the data as needed.
    abstract results: ResizeArray<WorkItemTracking.WorkItem> with get, set
    /// REST API Url to use to retrieve results for this query
    abstract url: string with get, set
    /// Url to use to display a page in the browser with the results of this query
    abstract webUrl: string with get, set

/// Process Configurations for the project
type [<AllowNullLiteral>] ProcessConfiguration =
    /// Details about bug work items
    abstract bugWorkItems: CategoryConfiguration with get, set
    /// Details about portfolio backlogs
    abstract portfolioBacklogs: ResizeArray<CategoryConfiguration> with get, set
    /// Details of requirement backlog
    abstract requirementBacklog: CategoryConfiguration with get, set
    /// Details of task backlog
    abstract taskBacklog: CategoryConfiguration with get, set
    /// Type fields for the process configuration
    abstract typeFields: ProcessConfigurationTypeFields with get, set
    abstract url: string with get, set

/// Represents a reorder request for one or more work items.
type [<AllowNullLiteral>] ReorderOperation =
    /// IDs of the work items to be reordered.  Must be valid WorkItem Ids.
    abstract ids: ResizeArray<float> with get, set
    /// IterationPath for reorder operation. This is only used when we reorder from the Iteration Backlog
    abstract iterationPath: string with get, set
    /// ID of the work item that should be after the reordered items. Can use 0 to specify the end of the list.
    abstract nextId: float with get, set
    /// Parent ID for all of the work items involved in this operation. Can use 0 to indicate the items don't have a parent.
    abstract parentId: float with get, set
    /// ID of the work item that should be before the reordered items. Can use 0 to specify the beginning of the list.
    abstract previousId: float with get, set

/// Represents a reorder result for a work item.
type [<AllowNullLiteral>] ReorderResult =
    /// The ID of the work item that was reordered.
    abstract id: float with get, set
    /// The updated order value of the work item that was reordered.
    abstract order: float with get, set

type [<AllowNullLiteral>] Rule =
    abstract clauses: ResizeArray<FilterClause> with get, set
    abstract filter: string with get, set
    abstract isEnabled: string with get, set
    abstract name: string with get, set
    abstract settings: attribute with get, set

/// Represents the taskbord column
type [<AllowNullLiteral>] TaskboardColumn =
    /// Column ID
    abstract id: string with get, set
    /// Work item type states mapped to this column to support auto state update when column is updated.
    abstract mappings: ResizeArray<ITaskboardColumnMapping> with get, set
    /// Column name
    abstract name: string with get, set
    /// Column position relative to other columns in the same board
    abstract order: float with get, set

/// Represents the state to column mapping per work item type This allows auto state update when the column changes
type [<AllowNullLiteral>] TaskboardColumnMapping =
    /// State of the work item type mapped to the column
    abstract state: string with get, set
    /// Work Item Type name who's state is mapped to the column
    abstract workItemType: string with get, set

type [<AllowNullLiteral>] TaskboardColumns =
    abstract columns: ResizeArray<TaskboardColumn> with get, set
    /// Are the columns cutomized for this team
    abstract isCustomized: bool with get, set
    /// Specifies if the referenced WIT and State is valid
    abstract isValid: bool with get, set
    /// Details of validation failure if the state to column mapping is invalid
    abstract validationMesssage: string with get, set

/// Column value of a work item in the taskboard
type [<AllowNullLiteral>] TaskboardWorkItemColumn =
    /// Work item column value in the taskboard
    abstract column: string with get, set
    /// Work item column id in the taskboard
    abstract columnId: string with get, set
    /// Work Item state value
    abstract state: string with get, set
    /// Work item id
    abstract workItemId: float with get, set

/// Mapping of teams to the corresponding work item category
type [<AllowNullLiteral>] TeamBacklogMapping =
    abstract categoryReferenceName: string with get, set
    abstract teamId: string with get, set

/// Represents a single TeamFieldValue
type [<AllowNullLiteral>] TeamFieldValue =
    abstract includeChildren: bool with get, set
    abstract value: string with get, set

/// Essentially a collection of team field values
type [<AllowNullLiteral>] TeamFieldValues =
    inherit TeamSettingsDataContractBase
    /// The default team field value
    abstract defaultValue: string with get, set
    /// Shallow ref to the field being used as a team field
    abstract field: FieldReference with get, set
    /// Collection of all valid team field values
    abstract values: ResizeArray<TeamFieldValue> with get, set

/// Expected data from PATCH
type [<AllowNullLiteral>] TeamFieldValuesPatch =
    abstract defaultValue: string with get, set
    abstract values: ResizeArray<TeamFieldValue> with get, set

type [<AllowNullLiteral>] TeamIterationAttributes =
    /// Finish date of the iteration. Date-only, correct unadjusted at midnight in UTC.
    abstract finishDate: DateTime with get, set
    /// Start date of the iteration. Date-only, correct unadjusted at midnight in UTC.
    abstract startDate: DateTime with get, set
    /// Time frame of the iteration, such as past, current or future.
    abstract timeFrame: TimeFrame with get, set

/// Represents capacity for a specific team member
type [<AllowNullLiteral>] TeamMemberCapacity =
    inherit CapacityContractBase
    /// Shallow Ref to the associated team member
    abstract teamMember: Member with get, set

/// Represents capacity for a specific team member
type [<AllowNullLiteral>] TeamMemberCapacityIdentityRef =
    inherit CapacityContractBase
    /// Identity ref of the associated team member
    abstract teamMember: WebApi.IdentityRef with get, set

/// Data contract for TeamSettings
type [<AllowNullLiteral>] TeamSetting =
    inherit TeamSettingsDataContractBase
    /// Backlog Iteration
    abstract backlogIteration: TeamSettingsIteration with get, set
    /// Information about categories that are visible on the backlog.
    abstract backlogVisibilities: TeamSettingBacklogVisibilities with get, set
    /// BugsBehavior (Off, AsTasks, AsRequirements, ...)
    abstract bugsBehavior: BugsBehavior with get, set
    /// Default Iteration, the iteration used when creating a new work item on the queries page.
    abstract defaultIteration: TeamSettingsIteration with get, set
    /// Default Iteration macro (if any)
    abstract defaultIterationMacro: string with get, set
    /// Days that the team is working
    abstract workingDays: ResizeArray<System.DayOfWeek> with get, set

/// Base class for TeamSettings data contracts. Anything common goes here.
type [<AllowNullLiteral>] TeamSettingsDataContractBase =
    /// Collection of links relevant to resource
    abstract _links: obj option with get, set
    /// Full http link to the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] TeamSettingsDaysOff =
    inherit TeamSettingsDataContractBase
    abstract daysOff: ResizeArray<DateRange> with get, set

type [<AllowNullLiteral>] TeamSettingsDaysOffPatch =
    abstract daysOff: ResizeArray<DateRange> with get, set

/// Represents a shallow ref for a single iteration.
type [<AllowNullLiteral>] TeamSettingsIteration =
    inherit TeamSettingsDataContractBase
    /// Attributes of the iteration such as start and end date.
    abstract attributes: TeamIterationAttributes with get, set
    /// Id of the iteration.
    abstract id: string with get, set
    /// Name of the iteration.
    abstract name: string with get, set
    /// Relative path of the iteration.
    abstract path: string with get, set

/// Data contract for what we expect to receive when PATCH
type [<AllowNullLiteral>] TeamSettingsPatch =
    abstract backlogIteration: string with get, set
    abstract backlogVisibilities: TeamSettingBacklogVisibilities with get, set
    abstract bugsBehavior: BugsBehavior with get, set
    abstract defaultIteration: string with get, set
    abstract defaultIterationMacro: string with get, set
    abstract workingDays: ResizeArray<System.DayOfWeek> with get, set

type [<RequireQualifiedAccess>] TimeFrame =
    | Past = 0
    | Current = 1
    | Future = 2

type [<AllowNullLiteral>] TimelineCriteriaStatus =
    abstract message: string with get, set
    abstract ``type``: TimelineCriteriaStatusCode with get, set

type [<RequireQualifiedAccess>] TimelineCriteriaStatusCode =
    | OK = 0
    | InvalidFilterClause = 1
    | Unknown = 2

type [<AllowNullLiteral>] TimelineIterationStatus =
    abstract message: string with get, set
    abstract ``type``: TimelineIterationStatusCode with get, set

type [<RequireQualifiedAccess>] TimelineIterationStatusCode =
    | OK = 0
    | IsOverlapping = 1

type [<AllowNullLiteral>] TimelineTeamData =
    /// Backlog matching the mapped backlog associated with this team.
    abstract backlog: BacklogLevel with get, set
    /// The field reference names of the work item data
    abstract fieldReferenceNames: ResizeArray<string> with get, set
    /// The id of the team
    abstract id: string with get, set
    /// Was iteration and work item data retrieved for this team. \<remarks\> Teams with IsExpanded false have not had their iteration, work item, and field related data queried and will never contain this data. If true then these items are queried and, if there are items in the queried range, there will be data. \</remarks\>
    abstract isExpanded: bool with get, set
    /// The iteration data, including the work items, in the queried date range.
    abstract iterations: ResizeArray<TimelineTeamIteration> with get, set
    /// The name of the team
    abstract name: string with get, set
    /// The order by field name of this team
    abstract orderByField: string with get, set
    /// The field reference names of the partially paged work items, such as ID, WorkItemType
    abstract partiallyPagedFieldReferenceNames: ResizeArray<string> with get, set
    /// The project id the team belongs team
    abstract projectId: string with get, set
    /// Status for this team.
    abstract status: TimelineTeamStatus with get, set
    /// The team field default value
    abstract teamFieldDefaultValue: string with get, set
    /// The team field name of this team
    abstract teamFieldName: string with get, set
    /// The team field values
    abstract teamFieldValues: ResizeArray<TeamFieldValue> with get, set
    /// Colors for the work item types.
    abstract workItemTypeColors: ResizeArray<WorkItemColor> with get, set

type [<AllowNullLiteral>] TimelineTeamIteration =
    /// The iteration CSS Node Id
    abstract cssNodeId: string with get, set
    /// The end date of the iteration
    abstract finishDate: DateTime with get, set
    /// The iteration name
    abstract name: string with get, set
    /// All the partially paged workitems in this iteration.
    abstract partiallyPagedWorkItems: ResizeArray<ResizeArray<obj option>> with get, set
    /// The iteration path
    abstract path: string with get, set
    /// The start date of the iteration
    abstract startDate: DateTime with get, set
    /// The status of this iteration
    abstract status: TimelineIterationStatus with get, set
    /// The work items that have been paged in this iteration
    abstract workItems: ResizeArray<ResizeArray<obj option>> with get, set

type [<AllowNullLiteral>] TimelineTeamStatus =
    abstract message: string with get, set
    abstract ``type``: TimelineTeamStatusCode with get, set

type [<RequireQualifiedAccess>] TimelineTeamStatusCode =
    | OK = 0
    | DoesntExistOrAccessDenied = 1
    | MaxTeamsExceeded = 2
    | MaxTeamFieldsExceeded = 3
    | BacklogInError = 4
    | MissingTeamFieldValue = 5
    | NoIterationsExist = 6

type [<AllowNullLiteral>] UpdatePlan =
    /// Description of the plan
    abstract description: string with get, set
    /// Name of the plan to create.
    abstract name: string with get, set
    /// Plan properties.
    abstract properties: obj option with get, set
    /// Revision of the plan that was updated - the value used here should match the one the server gave the client in the Plan.
    abstract revision: float with get, set
    /// Type of the plan
    abstract ``type``: PlanType with get, set

type [<AllowNullLiteral>] UpdateTaskboardColumn =
    /// Column ID, keep it null for new column
    abstract id: string with get, set
    /// Work item type states mapped to this column to support auto state update when column is updated.
    abstract mappings: ResizeArray<TaskboardColumnMapping> with get, set
    /// Column name is required
    abstract name: string with get, set
    /// Column position relative to other columns in the same board
    abstract order: float with get, set

type [<AllowNullLiteral>] UpdateTaskboardWorkItemColumn =
    abstract newColumn: string with get, set

/// Work item color and icon.
type [<AllowNullLiteral>] WorkItemColor =
    abstract icon: string with get, set
    abstract primaryColor: string with get, set
    abstract workItemTypeName: string with get, set

type [<AllowNullLiteral>] WorkItemTypeStateInfo =
    /// State name to state category map
    abstract states: BacklogFieldsTypeFields with get, set
    /// Work Item type name
    abstract workItemTypeName: string with get, set

type [<AllowNullLiteral>] BacklogFieldsTypeFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] BoardAllowedMappingsItem =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<string> with get, set

type [<AllowNullLiteral>] BoardAllowedMappings =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> BoardAllowedMappingsItem with get, set

type [<AllowNullLiteral>] BoardCardRuleSettingsRules =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<Rule> with get, set

type [<AllowNullLiteral>] BoardCardSettingsCards =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<FieldSetting> with get, set

type [<AllowNullLiteral>] BoardChartSettings =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] DeliveryViewDataChildIdToParentIdMap =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: float -> float with get, set

type [<AllowNullLiteral>] ProcessConfigurationTypeFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> WorkItemTracking.WorkItemFieldReference with get, set

type [<AllowNullLiteral>] TeamSettingBacklogVisibilities =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> bool with get, set
module TfsCore = ___Core_Core
module Work = ___Work_Work
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract WorkRestClient: WorkRestClientStatic

type [<AllowNullLiteral>] WorkRestClient =
    inherit RestClientBase
    /// <summary>Gets backlog configuration for a team</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getBacklogConfigurations: teamContext: TfsCore.TeamContext -> Promise<Work.BacklogConfiguration>
    /// <summary>Get a list of work items within a backlog level</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="backlogId">-</param>
    abstract getBacklogLevelWorkItems: teamContext: TfsCore.TeamContext * backlogId: string -> Promise<Work.BacklogLevelWorkItems>
    /// <summary>Get a backlog level</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- The id of the backlog level</param>
    abstract getBacklog: teamContext: TfsCore.TeamContext * id: string -> Promise<Work.BacklogLevelConfiguration>
    /// <summary>List all backlog levels</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getBacklogs: teamContext: TfsCore.TeamContext -> Promise<ResizeArray<Work.BacklogLevelConfiguration>>
    /// <summary>Gets a badge that displays the status of columns on the board.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- The id of the board.</param>
    /// <param name="columnOptions">- Determines what columns to show.</param>
    /// <param name="columns">- If columnOptions is set to custom, specify the list of column names.</param>
    abstract getBoardBadge: teamContext: TfsCore.TeamContext * id: string * ?columnOptions: Work.BoardBadgeColumnOptions * ?columns: ResizeArray<string> -> Promise<Work.BoardBadge>
    /// <summary>Gets a badge that displays the status of columns on the board.</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- The id of the board.</param>
    /// <param name="columnOptions">- Determines what columns to show.</param>
    /// <param name="columns">- If columnOptions is set to custom, specify the list of column names.</param>
    abstract getBoardBadgeData: teamContext: TfsCore.TeamContext * id: string * ?columnOptions: Work.BoardBadgeColumnOptions * ?columns: ResizeArray<string> -> Promise<string>
    /// <summary>Get available board columns in a project</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getColumnSuggestedValues: ?project: string -> Promise<ResizeArray<Work.BoardSuggestedValue>>
    /// <summary>Returns the list of parent field filter model for the given list of workitem ids</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="childBacklogContextCategoryRefName">-</param>
    /// <param name="workitemIds">-</param>
    abstract getBoardMappingParentItems: teamContext: TfsCore.TeamContext * childBacklogContextCategoryRefName: string * workitemIds: ResizeArray<float> -> Promise<ResizeArray<Work.ParentChildWIMap>>
    /// <summary>Get available board rows in a project</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getRowSuggestedValues: ?project: string -> Promise<ResizeArray<Work.BoardSuggestedValue>>
    /// <summary>Get board</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
    abstract getBoard: teamContext: TfsCore.TeamContext * id: string -> Promise<Work.Board>
    /// <summary>Get boards</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getBoards: teamContext: TfsCore.TeamContext -> Promise<ResizeArray<Work.BoardReference>>
    /// <summary>Update board options</summary>
    /// <param name="options">- options to updated</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- identifier for board, either category plural name (Eg:"Stories") or guid</param>
    abstract setBoardOptions: options: WorkRestClientSetBoardOptionsOptions * teamContext: TfsCore.TeamContext * id: string -> Promise<WorkRestClientSetBoardOptionsPromise>
    /// <summary>Get board user settings for a board id</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Board ID or Name</param>
    abstract getBoardUserSettings: teamContext: TfsCore.TeamContext * board: string -> Promise<Work.BoardUserSettings>
    /// <summary>Update board user settings for the board id</summary>
    /// <param name="boardUserSettings">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">-</param>
    abstract updateBoardUserSettings: boardUserSettings: WorkRestClientUpdateBoardUserSettingsBoardUserSettings * teamContext: TfsCore.TeamContext * board: string -> Promise<Work.BoardUserSettings>
    /// <summary>Get a team's capacity</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    abstract getCapacitiesWithIdentityRef: teamContext: TfsCore.TeamContext * iterationId: string -> Promise<ResizeArray<Work.TeamMemberCapacityIdentityRef>>
    /// <summary>Get a team member's capacity</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    /// <param name="teamMemberId">- ID of the team member</param>
    abstract getCapacityWithIdentityRef: teamContext: TfsCore.TeamContext * iterationId: string * teamMemberId: string -> Promise<Work.TeamMemberCapacityIdentityRef>
    /// <summary>Replace a team's capacity</summary>
    /// <param name="capacities">- Team capacity to replace</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    abstract replaceCapacitiesWithIdentityRef: capacities: ResizeArray<Work.TeamMemberCapacityIdentityRef> * teamContext: TfsCore.TeamContext * iterationId: string -> Promise<ResizeArray<Work.TeamMemberCapacityIdentityRef>>
    /// <summary>Update a team member's capacity</summary>
    /// <param name="patch">- Updated capacity</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    /// <param name="teamMemberId">- ID of the team member</param>
    abstract updateCapacityWithIdentityRef: patch: Work.CapacityPatch * teamContext: TfsCore.TeamContext * iterationId: string * teamMemberId: string -> Promise<Work.TeamMemberCapacityIdentityRef>
    /// <summary>Get board card Rule settings for the board id or board by name</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">-</param>
    abstract getBoardCardRuleSettings: teamContext: TfsCore.TeamContext * board: string -> Promise<Work.BoardCardRuleSettings>
    /// <summary>Update board card Rule settings for the board id or board by name</summary>
    /// <param name="boardCardRuleSettings">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">-</param>
    abstract updateBoardCardRuleSettings: boardCardRuleSettings: Work.BoardCardRuleSettings * teamContext: TfsCore.TeamContext * board: string -> Promise<Work.BoardCardRuleSettings>
    /// <summary>Update taskboard card Rule settings</summary>
    /// <param name="boardCardRuleSettings">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract updateTaskboardCardRuleSettings: boardCardRuleSettings: Work.BoardCardRuleSettings * teamContext: TfsCore.TeamContext -> Promise<unit>
    /// <summary>Get board card settings for the board id or board by name</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">-</param>
    abstract getBoardCardSettings: teamContext: TfsCore.TeamContext * board: string -> Promise<Work.BoardCardSettings>
    /// <summary>Update board card settings for the board id or board by name</summary>
    /// <param name="boardCardSettingsToSave">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">-</param>
    abstract updateBoardCardSettings: boardCardSettingsToSave: Work.BoardCardSettings * teamContext: TfsCore.TeamContext * board: string -> Promise<Work.BoardCardSettings>
    /// <summary>Update taskboard card settings</summary>
    /// <param name="boardCardSettingsToSave">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract updateTaskboardCardSettings: boardCardSettingsToSave: Work.BoardCardSettings * teamContext: TfsCore.TeamContext -> Promise<unit>
    /// <summary>Get a board chart</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
    /// <param name="name">- The chart name</param>
    abstract getBoardChart: teamContext: TfsCore.TeamContext * board: string * name: string -> Promise<Work.BoardChart>
    /// <summary>Get board charts</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
    abstract getBoardCharts: teamContext: TfsCore.TeamContext * board: string -> Promise<ResizeArray<Work.BoardChartReference>>
    /// <summary>Update a board chart</summary>
    /// <param name="chart">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
    /// <param name="name">- The chart name</param>
    abstract updateBoardChart: chart: Work.BoardChart * teamContext: TfsCore.TeamContext * board: string * name: string -> Promise<Work.BoardChart>
    /// <summary>Get columns on a board</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Name or ID of the specific board</param>
    abstract getBoardColumns: teamContext: TfsCore.TeamContext * board: string -> Promise<ResizeArray<Work.BoardColumn>>
    /// <summary>Update columns on a board</summary>
    /// <param name="boardColumns">- List of board columns to update</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Name or ID of the specific board</param>
    abstract updateBoardColumns: boardColumns: ResizeArray<Work.BoardColumn> * teamContext: TfsCore.TeamContext * board: string -> Promise<ResizeArray<Work.BoardColumn>>
    /// <summary>Get Delivery View Data</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Identifier for delivery view</param>
    /// <param name="revision">- Revision of the plan for which you want data. If the current plan is a different revision you will get an ViewRevisionMismatchException exception. If you do not supply a revision you will get data for the latest revision.</param>
    /// <param name="startDate">- The start date of timeline</param>
    /// <param name="endDate">- The end date of timeline</param>
    abstract getDeliveryTimelineData: project: string * id: string * ?revision: float * ?startDate: DateTime * ?endDate: DateTime -> Promise<Work.DeliveryViewData>
    /// <summary>Delete a team's iteration by iterationId</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- ID of the iteration</param>
    abstract deleteTeamIteration: teamContext: TfsCore.TeamContext * id: string -> Promise<unit>
    /// <summary>Get team's iteration by iterationId</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="id">- ID of the iteration</param>
    abstract getTeamIteration: teamContext: TfsCore.TeamContext * id: string -> Promise<Work.TeamSettingsIteration>
    /// <summary>Get a team's iterations using timeframe filter</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="timeframe">- A filter for which iterations are returned based on relative time. Only Current is supported currently.</param>
    abstract getTeamIterations: teamContext: TfsCore.TeamContext * ?timeframe: string -> Promise<ResizeArray<Work.TeamSettingsIteration>>
    /// <summary>Add an iteration to the team</summary>
    /// <param name="iteration">- Iteration to add</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract postTeamIteration: iteration: Work.TeamSettingsIteration * teamContext: TfsCore.TeamContext -> Promise<Work.TeamSettingsIteration>
    /// <summary>Add a new plan for the team</summary>
    /// <param name="postedPlan">- Plan definition</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createPlan: postedPlan: Work.CreatePlan * project: string -> Promise<Work.Plan>
    /// <summary>Delete the specified plan</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Identifier of the plan</param>
    abstract deletePlan: project: string * id: string -> Promise<unit>
    /// <summary>Get the information for the specified plan</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Identifier of the plan</param>
    abstract getPlan: project: string * id: string -> Promise<Work.Plan>
    /// <summary>Get the information for all the plans configured for the given team</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getPlans: project: string -> Promise<ResizeArray<Work.Plan>>
    /// <summary>Update the information for the specified plan</summary>
    /// <param name="updatedPlan">- Plan definition to be updated</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="id">- Identifier of the plan</param>
    abstract updatePlan: updatedPlan: Work.UpdatePlan * project: string * id: string -> Promise<Work.Plan>
    /// <summary>Get process configuration</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getProcessConfiguration: project: string -> Promise<Work.ProcessConfiguration>
    /// <summary>Get rows on a board</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Name or ID of the specific board</param>
    abstract getBoardRows: teamContext: TfsCore.TeamContext * board: string -> Promise<ResizeArray<Work.BoardRow>>
    /// <summary>Update rows on a board</summary>
    /// <param name="boardRows">- List of board rows to update</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="board">- Name or ID of the specific board</param>
    abstract updateBoardRows: boardRows: ResizeArray<Work.BoardRow> * teamContext: TfsCore.TeamContext * board: string -> Promise<ResizeArray<Work.BoardRow>>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getColumns: teamContext: TfsCore.TeamContext -> Promise<Work.TaskboardColumns>
    /// <param name="updateColumns">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract updateColumns: updateColumns: ResizeArray<Work.UpdateTaskboardColumn> * teamContext: TfsCore.TeamContext -> Promise<Work.TaskboardColumns>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">-</param>
    abstract getWorkItemColumns: teamContext: TfsCore.TeamContext * iterationId: string -> Promise<ResizeArray<Work.TaskboardWorkItemColumn>>
    /// <param name="updateColumn">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">-</param>
    /// <param name="workItemId">-</param>
    abstract updateWorkItemColumn: updateColumn: Work.UpdateTaskboardWorkItemColumn * teamContext: TfsCore.TeamContext * iterationId: string * workItemId: float -> Promise<unit>
    /// <summary>Get team's days off for an iteration</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    abstract getTeamDaysOff: teamContext: TfsCore.TeamContext * iterationId: string -> Promise<Work.TeamSettingsDaysOff>
    /// <summary>Set a team's days off for an iteration</summary>
    /// <param name="daysOffPatch">- Team's days off patch containting a list of start and end dates</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    abstract updateTeamDaysOff: daysOffPatch: Work.TeamSettingsDaysOffPatch * teamContext: TfsCore.TeamContext * iterationId: string -> Promise<Work.TeamSettingsDaysOff>
    /// <summary>Get a collection of team field values</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getTeamFieldValues: teamContext: TfsCore.TeamContext -> Promise<Work.TeamFieldValues>
    /// <summary>Update team field values</summary>
    /// <param name="patch">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract updateTeamFieldValues: patch: Work.TeamFieldValuesPatch * teamContext: TfsCore.TeamContext -> Promise<Work.TeamFieldValues>
    /// <summary>Get a team's settings</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract getTeamSettings: teamContext: TfsCore.TeamContext -> Promise<Work.TeamSetting>
    /// <summary>Update a team's settings</summary>
    /// <param name="teamSettingsPatch">- TeamSettings changes</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract updateTeamSettings: teamSettingsPatch: Work.TeamSettingsPatch * teamContext: TfsCore.TeamContext -> Promise<Work.TeamSetting>
    /// <summary>Get work items for iteration</summary>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- ID of the iteration</param>
    abstract getIterationWorkItems: teamContext: TfsCore.TeamContext * iterationId: string -> Promise<Work.IterationWorkItems>
    /// <summary>Reorder Product Backlog/Boards Work Items</summary>
    /// <param name="operation">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    abstract reorderBacklogWorkItems: operation: Work.ReorderOperation * teamContext: TfsCore.TeamContext -> Promise<ResizeArray<Work.ReorderResult>>
    /// <summary>Reorder Sprint Backlog/Taskboard Work Items</summary>
    /// <param name="operation">-</param>
    /// <param name="teamContext">- The team context for the operation</param>
    /// <param name="iterationId">- The id of the iteration</param>
    abstract reorderIterationWorkItems: operation: Work.ReorderOperation * teamContext: TfsCore.TeamContext * iterationId: string -> Promise<ResizeArray<Work.ReorderResult>>

type [<AllowNullLiteral>] WorkRestClientSetBoardOptionsOptions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] WorkRestClientUpdateBoardUserSettingsBoardUserSettings =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] WorkRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> WorkRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] WorkRestClientSetBoardOptionsPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set
module WebApi = ___WebApi_WebApi

type [<AllowNullLiteral>] AccountMyWorkResult =
    /// True, when length of WorkItemDetails is same as the limit
    abstract querySizeLimitExceeded: bool with get, set
    /// WorkItem Details
    abstract workItemDetails: ResizeArray<AccountWorkWorkItemModel> with get, set

/// Represents Work Item Recent Activity
type [<AllowNullLiteral>] AccountRecentActivityWorkItemModel =
    inherit AccountRecentActivityWorkItemModelBase
    /// Assigned To
    abstract assignedTo: string with get, set

/// Represents Work Item Recent Activity
type [<AllowNullLiteral>] AccountRecentActivityWorkItemModel2 =
    inherit AccountRecentActivityWorkItemModelBase
    /// Assigned To
    abstract assignedTo: WebApi.IdentityRef with get, set

/// Represents Work Item Recent Activity
type [<AllowNullLiteral>] AccountRecentActivityWorkItemModelBase =
    /// Date of the last Activity by the user
    abstract activityDate: DateTime with get, set
    /// Type of the activity
    abstract activityType: WorkItemRecentActivityType with get, set
    /// Last changed date of the work item
    abstract changedDate: DateTime with get, set
    /// Work Item Id
    abstract id: float with get, set
    /// TeamFoundationId of the user this activity belongs to
    abstract identityId: string with get, set
    /// State of the work item
    abstract state: string with get, set
    /// Team project the work item belongs to
    abstract teamProject: string with get, set
    /// Title of the work item
    abstract title: string with get, set
    /// Type of Work Item
    abstract workItemType: string with get, set

/// Represents Recent Mention Work Item
type [<AllowNullLiteral>] AccountRecentMentionWorkItemModel =
    /// Assigned To
    abstract assignedTo: string with get, set
    /// Work Item Id
    abstract id: float with get, set
    /// Latest date that the user were mentioned
    abstract mentionedDateField: DateTime with get, set
    /// State of the work item
    abstract state: string with get, set
    /// Team project the work item belongs to
    abstract teamProject: string with get, set
    /// Title of the work item
    abstract title: string with get, set
    /// Type of Work Item
    abstract workItemType: string with get, set

type [<AllowNullLiteral>] AccountWorkWorkItemModel =
    abstract assignedTo: string with get, set
    abstract changedDate: DateTime with get, set
    abstract id: float with get, set
    abstract state: string with get, set
    abstract teamProject: string with get, set
    abstract title: string with get, set
    abstract workItemType: string with get, set

/// Contains criteria for querying work items based on artifact URI.
type [<AllowNullLiteral>] ArtifactUriQuery =
    /// List of artifact URIs to use for querying work items.
    abstract artifactUris: ResizeArray<string> with get, set

/// Defines result of artifact URI query on work items. Contains mapping of work item IDs to artifact URI.
type [<AllowNullLiteral>] ArtifactUriQueryResult =
    /// A Dictionary that maps a list of work item references to the given list of artifact URI.
    abstract artifactUrisQueryResult: ArtifactUriQueryResultArtifactUrisQueryResult with get, set

type [<AllowNullLiteral>] AttachmentReference =
    abstract id: string with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ClassificationNodesErrorPolicy =
    | Fail = 1
    | Omit = 2

/// Comment on a Work Item.
type [<AllowNullLiteral>] Comment =
    inherit WorkItemTrackingResource
    /// IdentityRef of the creator of the comment.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The creation date of the comment.
    abstract createdDate: DateTime with get, set
    /// Effective Date/time value for adding the comment. Can be optionally different from CreatedDate.
    abstract createdOnBehalfDate: DateTime with get, set
    /// Identity on whose behalf this comment has been added. Can be optionally different from CreatedBy.
    abstract createdOnBehalfOf: WebApi.IdentityRef with get, set
    /// The id assigned to the comment.
    abstract id: float with get, set
    /// Indicates if the comment has been deleted.
    abstract isDeleted: bool with get, set
    /// The mentions of the comment.
    abstract mentions: ResizeArray<CommentMention> with get, set
    /// IdentityRef of the user who last modified the comment.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// The last modification date of the comment.
    abstract modifiedDate: DateTime with get, set
    /// The reactions of the comment.
    abstract reactions: ResizeArray<CommentReaction> with get, set
    /// The text of the comment.
    abstract text: string with get, set
    /// The current version of the comment.
    abstract version: float with get, set
    /// The id of the work item this comment belongs to.
    abstract workItemId: float with get, set

/// Represents a request to create a work item comment.
type [<AllowNullLiteral>] CommentCreate =
    /// The text of the comment.
    abstract text: string with get, set

type [<RequireQualifiedAccess>] CommentExpandOptions =
    | None = 0
    | Reactions = 1
    | RenderedText = 8
    | RenderedTextOnly = 16
    | All = -17

/// Represents a list of work item comments.
type [<AllowNullLiteral>] CommentList =
    inherit WorkItemTrackingResource
    /// List of comments in the current batch.
    abstract comments: ResizeArray<Comment> with get, set
    /// A string token that can be used to retrieving next page of comments if available. Otherwise null.
    abstract continuationToken: string with get, set
    /// The count of comments in the current batch.
    abstract count: float with get, set
    /// Uri to the next page of comments if it is available. Otherwise null.
    abstract nextPage: string with get, set
    /// Total count of comments on a work item.
    abstract totalCount: float with get, set

type [<AllowNullLiteral>] CommentMention =
    inherit WorkItemTrackingResource
    /// The artifact portion of the parsed text. (i.e. the work item's id)
    abstract artifactId: string with get, set
    /// The type the parser assigned to the mention. (i.e. person, work item, etc)
    abstract artifactType: string with get, set
    /// The comment id of the mention.
    abstract commentId: float with get, set
    /// The resolved target of the mention. An example of this could be a user's tfid
    abstract targetId: string with get, set

/// Contains information about work item comment reaction for a particular reaction type.
type [<AllowNullLiteral>] CommentReaction =
    inherit WorkItemTrackingResource
    /// The id of the comment this reaction belongs to.
    abstract commentId: float with get, set
    /// Total number of reactions for the CommentReactionType.
    abstract count: float with get, set
    /// Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
    abstract isCurrentUserEngaged: bool with get, set
    /// Type of the reaction.
    abstract ``type``: CommentReactionType with get, set

type [<RequireQualifiedAccess>] CommentReactionType =
    | Like = 0
    | Dislike = 1
    | Heart = 2
    | Hooray = 3
    | Smile = 4
    | Confused = 5

type [<RequireQualifiedAccess>] CommentSortOrder =
    | Asc = 1
    | Desc = 2

/// Represents a request to update a work item comment.
type [<AllowNullLiteral>] CommentUpdate =
    /// The updated text of the comment.
    abstract text: string with get, set

/// Represents a specific version of a comment on a work item.
type [<AllowNullLiteral>] CommentVersion =
    inherit WorkItemTrackingResource
    /// IdentityRef of the creator of the comment.
    abstract createdBy: WebApi.IdentityRef with get, set
    /// The creation date of the comment.
    abstract createdDate: DateTime with get, set
    /// Effective Date/time value for adding the comment. Can be optionally different from CreatedDate.
    abstract createdOnBehalfDate: DateTime with get, set
    /// Identity on whose behalf this comment has been added. Can be optionally different from CreatedBy.
    abstract createdOnBehalfOf: WebApi.IdentityRef with get, set
    /// The id assigned to the comment.
    abstract id: float with get, set
    /// Indicates if the comment has been deleted at this version.
    abstract isDeleted: bool with get, set
    /// IdentityRef of the user who modified the comment at this version.
    abstract modifiedBy: WebApi.IdentityRef with get, set
    /// The modification date of the comment for this version.
    abstract modifiedDate: DateTime with get, set
    /// The rendered content of the comment at this version.
    abstract renderedText: string with get, set
    /// The text of the comment at this version.
    abstract text: string with get, set
    /// The version number.
    abstract version: float with get, set

type [<AllowNullLiteral>] ExternalDeployment =
    abstract artifactId: string with get, set
    abstract createdBy: string with get, set
    abstract description: string with get, set
    abstract displayName: string with get, set
    abstract environment: ExternalEnvironment with get, set
    abstract group: string with get, set
    abstract pipeline: ExternalPipeline with get, set
    abstract relatedWorkItemIds: ResizeArray<float> with get, set
    abstract runId: float with get, set
    abstract sequenceNumber: float with get, set
    abstract status: string with get, set
    abstract statusDate: DateTime with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] ExternalEnvironment =
    abstract displayName: string with get, set
    abstract id: float with get, set
    abstract ``type``: string with get, set

type [<AllowNullLiteral>] ExternalPipeline =
    abstract displayName: string with get, set
    abstract id: float with get, set
    abstract url: string with get, set

/// Describes a list of dependent fields for a rule.
type [<AllowNullLiteral>] FieldDependentRule =
    inherit WorkItemTrackingResource
    /// The dependent fields.
    abstract dependentFields: ResizeArray<WorkItemFieldReference> with get, set

type [<RequireQualifiedAccess>] FieldType =
    | String = 0
    | Integer = 1
    | DateTime = 2
    | PlainText = 3
    | Html = 4
    | TreePath = 5
    | History = 6
    | Double = 7
    | Guid = 8
    | Boolean = 9
    | Identity = 10
    | PicklistString = 11
    | PicklistInteger = 12
    | PicklistDouble = 13

type [<RequireQualifiedAccess>] FieldUsage =
    | None = 0
    | WorkItem = 1
    | WorkItemLink = 2
    | Tree = 3
    | WorkItemTypeExtension = 4

type [<RequireQualifiedAccess>] GetFieldsExpand =
    | None = 0
    | ExtensionFields = 1
    | IncludeDeleted = 2

/// Describes a reference to an identity.
type [<AllowNullLiteral>] IdentityReference =
    inherit WebApi.IdentityRef
    abstract id: string with get, set
    /// Legacy back-compat property. This has been the WIT specific value from Constants. Will be hidden (but exists) on the client unless they are targeting the newest version
    abstract name: string with get, set

/// Link description.
type [<AllowNullLiteral>] Link =
    /// Collection of link attributes.
    abstract attributes: LinkAttributes with get, set
    /// Relation type.
    abstract rel: string with get, set
    /// Link url.
    abstract url: string with get, set

type [<RequireQualifiedAccess>] LinkQueryMode =
    | WorkItems = 0
    | LinksOneHopMustContain = 1
    | LinksOneHopMayContain = 2
    | LinksOneHopDoesNotContain = 3
    | LinksRecursiveMustContain = 4
    | LinksRecursiveMayContain = 5
    | LinksRecursiveDoesNotContain = 6

type [<RequireQualifiedAccess>] LogicalOperation =
    | NONE = 0
    | AND = 1
    | OR = 2

/// Project work item type state colors
type [<AllowNullLiteral>] ProjectWorkItemStateColors =
    /// Project name
    abstract projectName: string with get, set
    /// State colors for all work item type in a project
    abstract workItemTypeStateColors: ResizeArray<WorkItemTypeStateColors> with get, set

type [<RequireQualifiedAccess>] ProvisioningActionType =
    | Import = 0
    | Validate = 1

/// Result of an update work item type XML update operation.
type [<AllowNullLiteral>] ProvisioningResult =
    /// Details about of the provisioning import events.
    abstract provisioningImportEvents: ResizeArray<string> with get, set

/// Describes a request to get a list of queries
type [<AllowNullLiteral>] QueryBatchGetRequest =
    /// The expand parameters for queries. Possible options are \{ None, Wiql, Clauses, All, Minimal \}
    abstract ``$expand``: QueryExpand with get, set
    /// The flag to control error policy in a query batch request. Possible options are \{ Fail, Omit \}.
    abstract errorPolicy: QueryErrorPolicy with get, set
    /// The requested query ids
    abstract ids: ResizeArray<string> with get, set

type [<RequireQualifiedAccess>] QueryErrorPolicy =
    | Fail = 1
    | Omit = 2

type [<RequireQualifiedAccess>] QueryExpand =
    | None = 0
    | Wiql = 1
    | Clauses = 2
    | All = 3
    | Minimal = 4

/// Represents an item in the work item query hierarchy. This can be either a query or a folder.
type [<AllowNullLiteral>] QueryHierarchyItem =
    inherit WorkItemTrackingResource
    /// The child query items inside a query folder.
    abstract children: ResizeArray<QueryHierarchyItem> with get, set
    /// The clauses for a flat query.
    abstract clauses: WorkItemQueryClause with get, set
    /// The columns of the query.
    abstract columns: ResizeArray<WorkItemFieldReference> with get, set
    /// The identity who created the query item.
    abstract createdBy: IdentityReference with get, set
    /// When the query item was created.
    abstract createdDate: DateTime with get, set
    /// The link query mode.
    abstract filterOptions: LinkQueryMode with get, set
    /// If this is a query folder, indicates if it contains any children.
    abstract hasChildren: bool with get, set
    /// The id of the query item.
    abstract id: string with get, set
    /// Indicates if this query item is deleted. Setting this to false on a deleted query item will undelete it. Undeleting a query or folder will not bring back the permission changes that were previously applied to it.
    abstract isDeleted: bool with get, set
    /// Indicates if this is a query folder or a query.
    abstract isFolder: bool with get, set
    /// Indicates if the WIQL of this query is invalid. This could be due to invalid syntax or a no longer valid area/iteration path.
    abstract isInvalidSyntax: bool with get, set
    /// Indicates if this query item is public or private.
    abstract isPublic: bool with get, set
    /// The identity who last ran the query.
    abstract lastExecutedBy: IdentityReference with get, set
    /// When the query was last run.
    abstract lastExecutedDate: DateTime with get, set
    /// The identity who last modified the query item.
    abstract lastModifiedBy: IdentityReference with get, set
    /// When the query item was last modified.
    abstract lastModifiedDate: DateTime with get, set
    /// The link query clause.
    abstract linkClauses: WorkItemQueryClause with get, set
    /// The name of the query item.
    abstract name: string with get, set
    /// The path of the query item.
    abstract path: string with get, set
    /// The recursion option for use in a tree query.
    abstract queryRecursionOption: QueryRecursionOption with get, set
    /// The type of query.
    abstract queryType: QueryType with get, set
    /// The sort columns of the query.
    abstract sortColumns: ResizeArray<WorkItemQuerySortColumn> with get, set
    /// The source clauses in a tree or one-hop link query.
    abstract sourceClauses: WorkItemQueryClause with get, set
    /// The target clauses in a tree or one-hop link query.
    abstract targetClauses: WorkItemQueryClause with get, set
    /// The WIQL text of the query
    abstract wiql: string with get, set

type [<AllowNullLiteral>] QueryHierarchyItemsResult =
    /// The count of items.
    abstract count: float with get, set
    /// Indicates if the max return limit was hit but there are still more items
    abstract hasMore: bool with get, set
    /// The list of items
    abstract value: ResizeArray<QueryHierarchyItem> with get, set

type [<RequireQualifiedAccess>] QueryOption =
    | Doing = 1
    | Done = 2
    | Followed = 3

type [<RequireQualifiedAccess>] QueryRecursionOption =
    | ParentFirst = 0
    | ChildFirst = 1

type [<RequireQualifiedAccess>] QueryResultType =
    | WorkItem = 1
    | WorkItemLink = 2

type [<RequireQualifiedAccess>] QueryType =
    | Flat = 1
    | Tree = 2
    | OneHop = 3

type [<RequireQualifiedAccess>] ReportingRevisionsExpand =
    | None = 0
    | Fields = 1

type [<AllowNullLiteral>] ReportingWorkItemLinksBatch =
    inherit StreamedBatch<WorkItemRelation>

type [<AllowNullLiteral>] ReportingWorkItemRevisionsBatch =
    inherit StreamedBatch<WorkItem>

/// The class represents the reporting work item revision filer.
type [<AllowNullLiteral>] ReportingWorkItemRevisionsFilter =
    /// A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.
    abstract fields: ResizeArray<string> with get, set
    /// Include deleted work item in the result.
    abstract includeDeleted: bool with get, set
    /// Return an identity reference instead of a string value for identity fields.
    abstract includeIdentityRef: bool with get, set
    /// Include only the latest version of a work item, skipping over all previous revisions of the work item.
    abstract includeLatestOnly: bool with get, set
    /// Include tag reference instead of string value for System.Tags field
    abstract includeTagRef: bool with get, set
    /// A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.
    abstract types: ResizeArray<string> with get, set

/// The class describes reporting work item revision batch.
type [<AllowNullLiteral>] StreamedBatch<'T> =
    /// ContinuationToken acts as a waterMark. Used while querying large results.
    abstract continuationToken: string with get, set
    /// Returns 'true' if it's last batch, 'false' otherwise.
    abstract isLastBatch: bool with get, set
    /// The next link for the work item.
    abstract nextLink: string with get, set
    /// Values such as rel, sourceId, TargetId, ChangedDate, isActive.
    abstract values: ResizeArray<'T> with get, set

type [<RequireQualifiedAccess>] TemplateType =
    | WorkItemType = 0
    | GlobalWorkflow = 1

type [<RequireQualifiedAccess>] TreeNodeStructureType =
    | Area = 0
    | Iteration = 1

type [<RequireQualifiedAccess>] TreeStructureGroup =
    | Areas = 0
    | Iterations = 1

/// A WIQL query
type [<AllowNullLiteral>] Wiql =
    /// The text of the WIQL query
    abstract query: string with get, set

/// A work artifact link describes an outbound artifact link type.
type [<AllowNullLiteral>] WorkArtifactLink =
    /// Target artifact type.
    abstract artifactType: string with get, set
    /// Outbound link type.
    abstract linkType: string with get, set
    /// Target tool type.
    abstract toolType: string with get, set

/// Describes a work item.
type [<AllowNullLiteral>] WorkItem =
    inherit WorkItemTrackingResource
    /// Reference to a specific version of the comment added/edited/deleted in this revision.
    abstract commentVersionRef: WorkItemCommentVersionRef with get, set
    /// Map of field and values for the work item.
    abstract fields: LinkAttributes with get, set
    /// The work item ID.
    abstract id: float with get, set
    /// Relations of the work item.
    abstract relations: ResizeArray<WorkItemRelation> with get, set
    /// Revision number of the work item.
    abstract rev: float with get, set

/// Describes a request to get a set of work items
type [<AllowNullLiteral>] WorkItemBatchGetRequest =
    /// The expand parameters for work item attributes. Possible options are \{ None, Relations, Fields, Links, All \}
    abstract ``$expand``: WorkItemExpand with get, set
    /// AsOf UTC date time string
    abstract asOf: DateTime with get, set
    /// The flag to control error policy in a bulk get work items request. Possible options are \{Fail, Omit\}.
    abstract errorPolicy: WorkItemErrorPolicy with get, set
    /// The requested fields
    abstract fields: ResizeArray<string> with get, set
    /// The requested work item ids
    abstract ids: ResizeArray<float> with get, set

/// Defines a classification node for work item tracking.
type [<AllowNullLiteral>] WorkItemClassificationNode =
    inherit WorkItemTrackingResource
    /// Dictionary that has node attributes like start/finish date for iteration nodes.
    abstract attributes: LinkAttributes with get, set
    /// List of child nodes fetched.
    abstract children: ResizeArray<WorkItemClassificationNode> with get, set
    /// Flag that indicates if the classification node has any child nodes.
    abstract hasChildren: bool with get, set
    /// Integer ID of the classification node.
    abstract id: float with get, set
    /// GUID ID of the classification node.
    abstract identifier: string with get, set
    /// Name of the classification node.
    abstract name: string with get, set
    /// Path of the classification node.
    abstract path: string with get, set
    /// Node structure type.
    abstract structureType: TreeNodeStructureType with get, set

/// Comment on Work Item
type [<AllowNullLiteral>] WorkItemComment =
    inherit WorkItemTrackingResource
    /// Identity of user who added the comment.
    abstract revisedBy: IdentityReference with get, set
    /// The date of comment.
    abstract revisedDate: DateTime with get, set
    /// The work item revision number.
    abstract revision: float with get, set
    /// The text of the comment.
    abstract text: string with get, set

/// Collection of comments.
type [<AllowNullLiteral>] WorkItemComments =
    inherit WorkItemTrackingResource
    /// Comments collection.
    abstract comments: ResizeArray<WorkItemComment> with get, set
    /// The count of comments.
    abstract count: float with get, set
    /// Count of comments from the revision.
    abstract fromRevisionCount: float with get, set
    /// Total count of comments.
    abstract totalCount: float with get, set

/// Represents the reference to a specific version of a comment on a Work Item.
type [<AllowNullLiteral>] WorkItemCommentVersionRef =
    inherit WorkItemTrackingResourceReference
    /// The id assigned to the comment.
    abstract commentId: float with get, set
    /// [Internal] The work item revision where this comment was originally added.
    abstract createdInRevision: float with get, set
    /// [Internal] Specifies whether comment was deleted.
    abstract isDeleted: bool with get, set
    /// [Internal] The text of the comment.
    abstract text: string with get, set
    /// The version number.
    abstract version: float with get, set

/// Full deleted work item object. Includes the work item itself.
type [<AllowNullLiteral>] WorkItemDelete =
    inherit WorkItemDeleteReference
    /// The work item object that was deleted.
    abstract resource: WorkItem with get, set

/// Reference to a deleted work item.
type [<AllowNullLiteral>] WorkItemDeleteReference =
    /// The HTTP status code for work item operation in a batch request.
    abstract code: float with get, set
    /// The user who deleted the work item type.
    abstract deletedBy: string with get, set
    /// The work item deletion date.
    abstract deletedDate: string with get, set
    /// Work item ID.
    abstract id: float with get, set
    /// The exception message for work item operation in a batch request.
    abstract message: string with get, set
    /// Name or title of the work item.
    abstract name: string with get, set
    /// Parent project of the deleted work item.
    abstract project: string with get, set
    /// Type of work item.
    abstract ``type``: string with get, set
    /// REST API URL of the resource
    abstract url: string with get, set

/// Shallow Reference to a deleted work item.
type [<AllowNullLiteral>] WorkItemDeleteShallowReference =
    /// Work item ID.
    abstract id: float with get, set
    /// REST API URL of the resource
    abstract url: string with get, set

/// Describes an update request for a deleted work item.
type [<AllowNullLiteral>] WorkItemDeleteUpdate =
    /// Sets a value indicating whether this work item is deleted.
    abstract isDeleted: bool with get, set

type [<RequireQualifiedAccess>] WorkItemErrorPolicy =
    | Fail = 1
    | Omit = 2

type [<RequireQualifiedAccess>] WorkItemExpand =
    | None = 0
    | Relations = 1
    | Fields = 2
    | Links = 3
    | All = 4

/// Describes a field on a work item and it's properties specific to that work item type.
type [<AllowNullLiteral>] WorkItemField =
    inherit WorkItemTrackingResource
    /// Indicates whether the field is sortable in server queries.
    abstract canSortBy: bool with get, set
    /// The description of the field.
    abstract description: string with get, set
    /// Indicates whether this field is deleted.
    abstract isDeleted: bool with get, set
    /// Indicates whether this field is an identity field.
    abstract isIdentity: bool with get, set
    /// Indicates whether this instance is picklist.
    abstract isPicklist: bool with get, set
    /// Indicates whether this instance is a suggested picklist .
    abstract isPicklistSuggested: bool with get, set
    /// Indicates whether the field can be queried in the server.
    abstract isQueryable: bool with get, set
    /// The name of the field.
    abstract name: string with get, set
    /// If this field is picklist, the identifier of the picklist associated, otherwise null
    abstract picklistId: string with get, set
    /// Indicates whether the field is [read only].
    abstract readOnly: bool with get, set
    /// The reference name of the field.
    abstract referenceName: string with get, set
    /// The supported operations on this field.
    abstract supportedOperations: ResizeArray<WorkItemFieldOperation> with get, set
    /// The type of the field.
    abstract ``type``: FieldType with get, set
    /// The usage of the field.
    abstract usage: FieldUsage with get, set

/// Describes a work item field operation.
type [<AllowNullLiteral>] WorkItemFieldOperation =
    /// Friendly name of the operation.
    abstract name: string with get, set
    /// Reference name of the operation.
    abstract referenceName: string with get, set

/// Reference to a field in a work item
type [<AllowNullLiteral>] WorkItemFieldReference =
    /// The friendly name of the field.
    abstract name: string with get, set
    /// The reference name of the field.
    abstract referenceName: string with get, set
    /// The REST URL of the resource.
    abstract url: string with get, set

/// Describes an update to a work item field.
type [<AllowNullLiteral>] WorkItemFieldUpdate =
    /// The new value of the field.
    abstract newValue: obj option with get, set
    /// The old value of the field.
    abstract oldValue: obj option with get, set

type [<AllowNullLiteral>] WorkItemHistory =
    inherit WorkItemTrackingResource
    abstract rev: float with get, set
    abstract revisedBy: IdentityReference with get, set
    abstract revisedDate: DateTime with get, set
    abstract value: string with get, set

/// Reference to a work item icon.
type [<AllowNullLiteral>] WorkItemIcon =
    /// The identifier of the icon.
    abstract id: string with get, set
    /// The REST URL of the resource.
    abstract url: string with get, set

/// A link between two work items.
type [<AllowNullLiteral>] WorkItemLink =
    /// The type of link.
    abstract rel: string with get, set
    /// The source work item.
    abstract source: WorkItemReference with get, set
    /// The target work item.
    abstract target: WorkItemReference with get, set

/// Describes the next state for a work item.
type [<AllowNullLiteral>] WorkItemNextStateOnTransition =
    /// Error code if there is no next state transition possible.
    abstract errorCode: string with get, set
    /// Work item ID.
    abstract id: float with get, set
    /// Error message if there is no next state transition possible.
    abstract message: string with get, set
    /// Name of the next state on transition.
    abstract stateOnTransition: string with get, set

/// Represents a clause in a work item query. This shows the structure of a work item query.
type [<AllowNullLiteral>] WorkItemQueryClause =
    /// Child clauses if the current clause is a logical operator
    abstract clauses: ResizeArray<WorkItemQueryClause> with get, set
    /// Field associated with condition
    abstract field: WorkItemFieldReference with get, set
    /// Right side of the condition when a field to field comparison
    abstract fieldValue: WorkItemFieldReference with get, set
    /// Determines if this is a field to field comparison
    abstract isFieldValue: bool with get, set
    /// Logical operator separating the condition clause
    abstract logicalOperator: LogicalOperation with get, set
    /// The field operator
    abstract operator: WorkItemFieldOperation with get, set
    /// Right side of the condition when a field to value comparison
    abstract value: string with get, set

/// The result of a work item query.
type [<AllowNullLiteral>] WorkItemQueryResult =
    /// The date the query was run in the context of.
    abstract asOf: DateTime with get, set
    /// The columns of the query.
    abstract columns: ResizeArray<WorkItemFieldReference> with get, set
    /// The result type
    abstract queryResultType: QueryResultType with get, set
    /// The type of the query
    abstract queryType: QueryType with get, set
    /// The sort columns of the query.
    abstract sortColumns: ResizeArray<WorkItemQuerySortColumn> with get, set
    /// The work item links returned by the query.
    abstract workItemRelations: ResizeArray<WorkItemLink> with get, set
    /// The work items returned by the query.
    abstract workItems: ResizeArray<WorkItemReference> with get, set

/// A sort column.
type [<AllowNullLiteral>] WorkItemQuerySortColumn =
    /// The direction to sort by.
    abstract descending: bool with get, set
    /// A work item field.
    abstract field: WorkItemFieldReference with get, set

type [<RequireQualifiedAccess>] WorkItemRecentActivityType =
    | Visited = 0
    | Edited = 1
    | Deleted = 2
    | Restored = 3

/// Contains reference to a work item.
type [<AllowNullLiteral>] WorkItemReference =
    /// Work item ID.
    abstract id: float with get, set
    /// REST API URL of the resource
    abstract url: string with get, set

type [<AllowNullLiteral>] WorkItemRelation =
    inherit Link

/// Represents the work item type relation type.
type [<AllowNullLiteral>] WorkItemRelationType =
    inherit WorkItemTrackingReference
    /// The collection of relation type attributes.
    abstract attributes: LinkAttributes with get, set

/// Describes updates to a work item's relations.
type [<AllowNullLiteral>] WorkItemRelationUpdates =
    /// List of newly added relations.
    abstract added: ResizeArray<WorkItemRelation> with get, set
    /// List of removed relations.
    abstract removed: ResizeArray<WorkItemRelation> with get, set
    /// List of updated relations.
    abstract updated: ResizeArray<WorkItemRelation> with get, set

/// Work item type state name, color and state category
type [<AllowNullLiteral>] WorkItemStateColor =
    /// Category of state
    abstract category: string with get, set
    /// Color value
    abstract color: string with get, set
    /// Work item type state name
    abstract name: string with get, set

/// Describes a state transition in a work item.
type [<AllowNullLiteral>] WorkItemStateTransition =
    /// Gets a list of actions needed to transition to that state.
    abstract actions: ResizeArray<string> with get, set
    /// Name of the next state.
    abstract ``to``: string with get, set

type [<AllowNullLiteral>] WorkItemTagDefinition =
    abstract id: string with get, set
    abstract name: string with get, set
    abstract url: string with get, set

/// Describes a work item template.
type [<AllowNullLiteral>] WorkItemTemplate =
    inherit WorkItemTemplateReference
    /// Mapping of field and its templated value.
    abstract fields: WorkItemTemplateFields with get, set

/// Describes a shallow reference to a work item template.
type [<AllowNullLiteral>] WorkItemTemplateReference =
    inherit WorkItemTrackingResource
    /// The description of the work item template.
    abstract description: string with get, set
    /// The identifier of the work item template.
    abstract id: string with get, set
    /// The name of the work item template.
    abstract name: string with get, set
    /// The name of the work item type.
    abstract workItemTypeName: string with get, set

type [<AllowNullLiteral>] WorkItemTrackingReference =
    inherit WorkItemTrackingResource
    /// The name.
    abstract name: string with get, set
    /// The reference name.
    abstract referenceName: string with get, set

/// Base class for WIT REST resources.
type [<AllowNullLiteral>] WorkItemTrackingResource =
    inherit WorkItemTrackingResourceReference
    /// Link references to related REST resources.
    abstract _links: obj option with get, set

/// Base class for work item tracking resource references.
type [<AllowNullLiteral>] WorkItemTrackingResourceReference =
    abstract url: string with get, set

/// Describes a work item type.
type [<AllowNullLiteral>] WorkItemType =
    inherit WorkItemTrackingResource
    /// The color.
    abstract color: string with get, set
    /// The description of the work item type.
    abstract description: string with get, set
    /// The fields that exist on the work item type.
    abstract fieldInstances: ResizeArray<WorkItemTypeFieldInstance> with get, set
    /// The fields that exist on the work item type.
    abstract fields: ResizeArray<WorkItemTypeFieldInstance> with get, set
    /// The icon of the work item type.
    abstract icon: WorkItemIcon with get, set
    /// True if work item type is disabled
    abstract isDisabled: bool with get, set
    /// Gets the name of the work item type.
    abstract name: string with get, set
    /// The reference name of the work item type.
    abstract referenceName: string with get, set
    /// Gets state information for the work item type.
    abstract states: ResizeArray<WorkItemStateColor> with get, set
    /// Gets the various state transition mappings in the work item type.
    abstract transitions: WorkItemTypeTransitions with get, set
    /// The XML form.
    abstract xmlForm: string with get, set

/// Describes a work item type category.
type [<AllowNullLiteral>] WorkItemTypeCategory =
    inherit WorkItemTrackingResource
    /// Gets or sets the default type of the work item.
    abstract defaultWorkItemType: WorkItemTypeReference with get, set
    /// The name of the category.
    abstract name: string with get, set
    /// The reference name of the category.
    abstract referenceName: string with get, set
    /// The work item types that belong to the category.
    abstract workItemTypes: ResizeArray<WorkItemTypeReference> with get, set

/// Describes a work item type's colors.
type [<AllowNullLiteral>] WorkItemTypeColor =
    /// Gets or sets the color of the primary.
    abstract primaryColor: string with get, set
    /// Gets or sets the color of the secondary.
    abstract secondaryColor: string with get, set
    /// The name of the work item type.
    abstract workItemTypeName: string with get, set

/// Describes work item type nam, its icon and color.
type [<AllowNullLiteral>] WorkItemTypeColorAndIcon =
    /// The color of the work item type in hex format.
    abstract color: string with get, set
    /// The work item type icon.
    abstract icon: string with get, set
    /// The name of the work item type.
    abstract workItemTypeName: string with get, set

/// Field instance of a work item type.
type [<AllowNullLiteral>] WorkItemTypeFieldInstance =
    inherit WorkItemTypeFieldInstanceBase
    /// The list of field allowed values.
    abstract allowedValues: ResizeArray<string> with get, set
    /// Represents the default value of the field.
    abstract defaultValue: string with get, set

/// Base field instance for workItemType fields.
type [<AllowNullLiteral>] WorkItemTypeFieldInstanceBase =
    inherit WorkItemFieldReference
    /// Indicates whether field value is always required.
    abstract alwaysRequired: bool with get, set
    /// The list of dependent fields.
    abstract dependentFields: ResizeArray<WorkItemFieldReference> with get, set
    /// Gets the help text for the field.
    abstract helpText: string with get, set

type [<RequireQualifiedAccess>] WorkItemTypeFieldsExpandLevel =
    | None = 0
    | AllowedValues = 1
    | DependentFields = 2
    | All = 3

/// Field Instance of a workItemype with detailed references.
type [<AllowNullLiteral>] WorkItemTypeFieldWithReferences =
    inherit WorkItemTypeFieldInstanceBase
    /// The list of field allowed values.
    abstract allowedValues: ResizeArray<obj option> with get, set
    /// Represents the default value of the field.
    abstract defaultValue: obj option with get, set

/// Reference to a work item type.
type [<AllowNullLiteral>] WorkItemTypeReference =
    inherit WorkItemTrackingResourceReference
    /// Name of the work item type.
    abstract name: string with get, set

/// State colors for a work item type
type [<AllowNullLiteral>] WorkItemTypeStateColors =
    /// Work item type state colors
    abstract stateColors: ResizeArray<WorkItemStateColor> with get, set
    /// Work item type name
    abstract workItemTypeName: string with get, set

/// Describes a work item type template.
type [<AllowNullLiteral>] WorkItemTypeTemplate =
    /// XML template in string format.
    abstract template: string with get, set

/// Describes a update work item type template request body.
type [<AllowNullLiteral>] WorkItemTypeTemplateUpdateModel =
    /// Describes the type of the action for the update request.
    abstract actionType: ProvisioningActionType with get, set
    /// Methodology to which the template belongs, eg. Agile, Scrum, CMMI.
    abstract methodology: string with get, set
    /// String representation of the work item type template.
    abstract template: string with get, set
    /// The type of the template described in the request body.
    abstract templateType: TemplateType with get, set

/// Describes an update to a work item.
type [<AllowNullLiteral>] WorkItemUpdate =
    inherit WorkItemTrackingResource
    /// List of updates to fields.
    abstract fields: WorkItemUpdateFields with get, set
    /// ID of update.
    abstract id: float with get, set
    /// List of updates to relations.
    abstract relations: WorkItemRelationUpdates with get, set
    /// The revision number of work item update.
    abstract rev: float with get, set
    /// Identity for the work item update.
    abstract revisedBy: IdentityReference with get, set
    /// The work item updates revision date.
    abstract revisedDate: DateTime with get, set
    /// The work item ID.
    abstract workItemId: float with get, set

type [<AllowNullLiteral>] ArtifactUriQueryResultArtifactUrisQueryResult =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<WorkItemReference> with get, set

type [<AllowNullLiteral>] LinkAttributes =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

type [<AllowNullLiteral>] WorkItemTemplateFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> string with get, set

type [<AllowNullLiteral>] WorkItemTypeTransitions =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> ResizeArray<WorkItemStateTransition> with get, set

type [<AllowNullLiteral>] WorkItemUpdateFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> WorkItemFieldUpdate with get, set
module WebApi = ___WebApi_WebApi
module WorkItemTracking = ___WorkItemTracking_WorkItemTracking
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract WorkItemTrackingRestClient: WorkItemTrackingRestClientStatic

type [<AllowNullLiteral>] WorkItemTrackingRestClient =
    inherit RestClientBase
    /// <summary>INTERNAL ONLY: USED BY ACCOUNT MY WORK PAGE. This returns Doing, Done, Follows and activity work items details.</summary>
    /// <param name="queryOption">-</param>
    abstract getAccountMyWorkData: ?queryOption: WorkItemTracking.QueryOption -> Promise<WorkItemTracking.AccountMyWorkResult>
    /// Gets recent work item activities
    abstract getRecentActivityData: unit -> Promise<ResizeArray<WorkItemTracking.AccountRecentActivityWorkItemModel2>>
    /// INTERNAL ONLY: USED BY ACCOUNT MY WORK PAGE.
    abstract getRecentMentions: unit -> Promise<ResizeArray<WorkItemTracking.AccountRecentMentionWorkItemModel>>
    /// Get the list of work item tracking outbound artifact link types.
    abstract getWorkArtifactLinkTypes: unit -> Promise<ResizeArray<WorkItemTracking.WorkArtifactLink>>
    /// <summary>Queries work items linked to a given list of artifact URI.</summary>
    /// <param name="artifactUriQuery">- Defines a list of artifact URI for querying work items.</param>
    /// <param name="project">- Project ID or project name</param>
    abstract queryWorkItemsForArtifactUris: artifactUriQuery: WorkItemTracking.ArtifactUriQuery * ?project: string -> Promise<WorkItemTracking.ArtifactUriQueryResult>
    /// <summary>Uploads an attachment.</summary>
    /// <param name="content">- Content to upload</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- The name of the file</param>
    /// <param name="uploadType">- Attachment upload type: Simple or Chunked</param>
    /// <param name="areaPath">- Target project Area Path</param>
    abstract createAttachment: content: obj option * ?project: string * ?fileName: string * ?uploadType: string * ?areaPath: string -> Promise<WorkItemTracking.AttachmentReference>
    /// <summary>Downloads an attachment.</summary>
    /// <param name="id">- Attachment ID</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- Name of the file</param>
    /// <param name="download">- If set to \<c\>true\</c\> always download attachment</param>
    abstract getAttachmentContent: id: string * ?project: string * ?fileName: string * ?download: bool -> Promise<ArrayBuffer>
    /// <summary>Downloads an attachment.</summary>
    /// <param name="id">- Attachment ID</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fileName">- Name of the file</param>
    /// <param name="download">- If set to \<c\>true\</c\> always download attachment</param>
    abstract getAttachmentZip: id: string * ?project: string * ?fileName: string * ?download: bool -> Promise<ArrayBuffer>
    /// <summary>Gets root classification nodes or list of classification nodes for a given list of nodes ids, for a given project. In case ids parameter is supplied you will  get list of classification nodes for those ids. Otherwise you will get root classification nodes for this project.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="ids">- Comma separated integer classification nodes ids. It's not required, if you want root nodes.</param>
    /// <param name="depth">- Depth of children to fetch.</param>
    /// <param name="errorPolicy">- Flag to handle errors in getting some nodes. Possible options are Fail and Omit.</param>
    abstract getClassificationNodes: project: string * ids: ResizeArray<float> * ?depth: float * ?errorPolicy: WorkItemTracking.ClassificationNodesErrorPolicy -> Promise<ResizeArray<WorkItemTracking.WorkItemClassificationNode>>
    /// <summary>Gets root classification nodes under the project.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="depth">- Depth of children to fetch.</param>
    abstract getRootNodes: project: string * ?depth: float -> Promise<ResizeArray<WorkItemTracking.WorkItemClassificationNode>>
    /// <summary>Create new or update an existing classification node.</summary>
    /// <param name="postedNode">- Node to create or update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="structureGroup">- Structure group of the classification node, area or iteration.</param>
    /// <param name="path">- Path of the classification node.</param>
    abstract createOrUpdateClassificationNode: postedNode: WorkItemTracking.WorkItemClassificationNode * project: string * structureGroup: WorkItemTracking.TreeStructureGroup * ?path: string -> Promise<WorkItemTracking.WorkItemClassificationNode>
    /// <summary>Delete an existing classification node.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="structureGroup">- Structure group of the classification node, area or iteration.</param>
    /// <param name="path">- Path of the classification node.</param>
    /// <param name="reclassifyId">- Id of the target classification node for reclassification.</param>
    abstract deleteClassificationNode: project: string * structureGroup: WorkItemTracking.TreeStructureGroup * ?path: string * ?reclassifyId: float -> Promise<unit>
    /// <summary>Gets the classification node for a given node path.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="structureGroup">- Structure group of the classification node, area or iteration.</param>
    /// <param name="path">- Path of the classification node.</param>
    /// <param name="depth">- Depth of children to fetch.</param>
    abstract getClassificationNode: project: string * structureGroup: WorkItemTracking.TreeStructureGroup * ?path: string * ?depth: float -> Promise<WorkItemTracking.WorkItemClassificationNode>
    /// <summary>Update an existing classification node.</summary>
    /// <param name="postedNode">- Node to create or update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="structureGroup">- Structure group of the classification node, area or iteration.</param>
    /// <param name="path">- Path of the classification node.</param>
    abstract updateClassificationNode: postedNode: WorkItemTracking.WorkItemClassificationNode * project: string * structureGroup: WorkItemTracking.TreeStructureGroup * ?path: string -> Promise<WorkItemTracking.WorkItemClassificationNode>
    /// <summary>Gets a comment for a work item at the specified revision.</summary>
    /// <param name="id">- Work item id</param>
    /// <param name="revision">- Revision for which the comment need to be fetched</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getComment: id: float * revision: float * ?project: string -> Promise<WorkItemTracking.WorkItemComment>
    /// <summary>Gets the specified number of comments for a work item from the specified revision.</summary>
    /// <param name="id">- Work item id</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fromRevision">- Revision from which comments are to be fetched (default is 1)</param>
    /// <param name="top">- The number of comments to return (default is 200)</param>
    /// <param name="order">- Ascending or descending by revision id (default is ascending)</param>
    abstract getComments: id: float * ?project: string * ?fromRevision: float * ?top: float * ?order: WorkItemTracking.CommentSortOrder -> Promise<WorkItemTracking.WorkItemComments>
    /// <summary>Create a new field.</summary>
    /// <param name="workItemField">- New field definition</param>
    /// <param name="project">- Project ID or project name</param>
    abstract createField: workItemField: WorkItemTracking.WorkItemField * ?project: string -> Promise<WorkItemTracking.WorkItemField>
    /// <summary>Deletes the field.</summary>
    /// <param name="fieldNameOrRefName">- Field simple name or reference name</param>
    /// <param name="project">- Project ID or project name</param>
    abstract deleteField: fieldNameOrRefName: string * ?project: string -> Promise<unit>
    /// <summary>Gets information on a specific field.</summary>
    /// <param name="fieldNameOrRefName">- Field simple name or reference name</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getField: fieldNameOrRefName: string * ?project: string -> Promise<WorkItemTracking.WorkItemField>
    /// <summary>Returns information for all fields. The project ID/name parameter is optional.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="expand">- Use ExtensionFields to include extension fields, otherwise exclude them. Unless the feature flag for this parameter is enabled, extension fields are always included.</param>
    abstract getFields: ?project: string * ?expand: WorkItemTracking.GetFieldsExpand -> Promise<ResizeArray<WorkItemTracking.WorkItemField>>
    /// <summary>Creates a query, or moves a query.</summary>
    /// <param name="postedQuery">- The query to create.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="query">- The parent id or path under which the query is to be created.</param>
    /// <param name="validateWiqlOnly">- If you only want to validate your WIQL query without actually creating one, set it to true. Default is false.</param>
    abstract createQuery: postedQuery: WorkItemTracking.QueryHierarchyItem * project: string * query: string * ?validateWiqlOnly: bool -> Promise<WorkItemTracking.QueryHierarchyItem>
    /// <summary>Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="query">- ID or path of the query or folder to delete.</param>
    abstract deleteQuery: project: string * query: string -> Promise<unit>
    /// <summary>Gets the root queries and their children</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="expand">- Include the query string (wiql), clauses, query result columns, and sort options in the results.</param>
    /// <param name="depth">- In the folder of queries, return child queries and folders to this depth.</param>
    /// <param name="includeDeleted">- Include deleted queries and folders</param>
    abstract getQueries: project: string * ?expand: WorkItemTracking.QueryExpand * ?depth: float * ?includeDeleted: bool -> Promise<ResizeArray<WorkItemTracking.QueryHierarchyItem>>
    /// <summary>Retrieves an individual query and its children</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="query">- ID or path of the query.</param>
    /// <param name="expand">- Include the query string (wiql), clauses, query result columns, and sort options in the results.</param>
    /// <param name="depth">- In the folder of queries, return child queries and folders to this depth.</param>
    /// <param name="includeDeleted">- Include deleted queries and folders</param>
    abstract getQuery: project: string * query: string * ?expand: WorkItemTracking.QueryExpand * ?depth: float * ?includeDeleted: bool -> Promise<WorkItemTracking.QueryHierarchyItem>
    /// <summary>Searches all queries the user has access to in the current project</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="filter">- The text to filter the queries with.</param>
    /// <param name="top">- The number of queries to return (Default is 50 and maximum is 200).</param>
    /// <param name="expand">-</param>
    /// <param name="includeDeleted">- Include deleted queries and folders</param>
    abstract searchQueries: project: string * filter: string * ?top: float * ?expand: WorkItemTracking.QueryExpand * ?includeDeleted: bool -> Promise<WorkItemTracking.QueryHierarchyItemsResult>
    /// <summary>Update a query or a folder. This allows you to update, rename and move queries and folders.</summary>
    /// <param name="queryUpdate">- The query to update.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="query">- The ID or path for the query to update.</param>
    /// <param name="undeleteDescendants">- Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants.</param>
    abstract updateQuery: queryUpdate: WorkItemTracking.QueryHierarchyItem * project: string * query: string * ?undeleteDescendants: bool -> Promise<WorkItemTracking.QueryHierarchyItem>
    /// <summary>Gets a list of queries by ids (Maximum 1000)</summary>
    /// <param name="queryGetRequest">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getQueriesBatch: queryGetRequest: WorkItemTracking.QueryBatchGetRequest * project: string -> Promise<ResizeArray<WorkItemTracking.QueryHierarchyItem>>
    /// <summary>Destroys the specified work item permanently from the Recycle Bin. This action can not be undone.</summary>
    /// <param name="id">- ID of the work item to be destroyed permanently</param>
    /// <param name="project">- Project ID or project name</param>
    abstract destroyWorkItem: id: float * ?project: string -> Promise<unit>
    /// <summary>Gets a deleted work item from Recycle Bin.</summary>
    /// <param name="id">- ID of the work item to be returned</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getDeletedWorkItem: id: float * ?project: string -> Promise<WorkItemTracking.WorkItemDelete>
    /// <summary>Gets the work items from the recycle bin, whose IDs have been specified in the parameters</summary>
    /// <param name="ids">- Comma separated list of IDs of the deleted work items to be returned</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getDeletedWorkItems: ids: ResizeArray<float> * ?project: string -> Promise<ResizeArray<WorkItemTracking.WorkItemDeleteReference>>
    /// <summary>Gets a list of the IDs and the URLs of the deleted the work items in the Recycle Bin.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getDeletedWorkItemShallowReferences: ?project: string -> Promise<ResizeArray<WorkItemTracking.WorkItemDeleteShallowReference>>
    /// <summary>Restores the deleted work item from Recycle Bin.</summary>
    /// <param name="payload">- Paylod with instructions to update the IsDeleted flag to false</param>
    /// <param name="id">- ID of the work item to be restored</param>
    /// <param name="project">- Project ID or project name</param>
    abstract restoreWorkItem: payload: WorkItemTracking.WorkItemDeleteUpdate * id: float * ?project: string -> Promise<WorkItemTracking.WorkItemDelete>
    /// <summary>Returns a fully hydrated work item for the requested revision</summary>
    /// <param name="id">-</param>
    /// <param name="revisionNumber">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="expand">-</param>
    abstract getRevision: id: float * revisionNumber: float * ?project: string * ?expand: WorkItemTracking.WorkItemExpand -> Promise<WorkItemTracking.WorkItem>
    /// <summary>Returns the list of fully hydrated work item revisions, paged.</summary>
    /// <param name="id">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">-</param>
    /// <param name="skip">-</param>
    /// <param name="expand">-</param>
    abstract getRevisions: id: float * ?project: string * ?top: float * ?skip: float * ?expand: WorkItemTracking.WorkItemExpand -> Promise<ResizeArray<WorkItemTracking.WorkItem>>
    /// <summary>Creates a template</summary>
    /// <param name="template">- Template contents</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    abstract createTemplate: template: WorkItemTracking.WorkItemTemplate * project: string * team: string -> Promise<WorkItemTracking.WorkItemTemplate>
    /// <summary>Gets template</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="workitemtypename">- Optional, When specified returns templates for given Work item type.</param>
    abstract getTemplates: project: string * team: string * ?workitemtypename: string -> Promise<ResizeArray<WorkItemTracking.WorkItemTemplateReference>>
    /// <summary>Deletes the template with given id</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="templateId">- Template id</param>
    abstract deleteTemplate: project: string * team: string * templateId: string -> Promise<unit>
    /// <summary>Gets the template with specified id</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="templateId">- Template Id</param>
    abstract getTemplate: project: string * team: string * templateId: string -> Promise<WorkItemTracking.WorkItemTemplate>
    /// <summary>Replace template contents</summary>
    /// <param name="templateContent">- Template contents to replace with</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="templateId">- Template id</param>
    abstract replaceTemplate: templateContent: WorkItemTracking.WorkItemTemplate * project: string * team: string * templateId: string -> Promise<WorkItemTracking.WorkItemTemplate>
    /// <summary>Returns a single update for a work item</summary>
    /// <param name="id">-</param>
    /// <param name="updateNumber">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getUpdate: id: float * updateNumber: float * ?project: string -> Promise<WorkItemTracking.WorkItemUpdate>
    /// <summary>Returns a the deltas between work item revisions</summary>
    /// <param name="id">-</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="top">-</param>
    /// <param name="skip">-</param>
    abstract getUpdates: id: float * ?project: string * ?top: float * ?skip: float -> Promise<ResizeArray<WorkItemTracking.WorkItemUpdate>>
    /// <summary>Gets the results of the query given its WIQL.</summary>
    /// <param name="wiql">- The query containing the WIQL.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="timePrecision">- Whether or not to use time precision.</param>
    /// <param name="top">- The max number of results to return.</param>
    abstract queryByWiql: wiql: WorkItemTracking.Wiql * ?project: string * ?team: string * ?timePrecision: bool * ?top: float -> Promise<WorkItemTracking.WorkItemQueryResult>
    /// <summary>Gets the results of the query given the query ID.</summary>
    /// <param name="id">- The query ID.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="timePrecision">- Whether or not to use time precision.</param>
    /// <param name="top">- The max number of results to return.</param>
    abstract getQueryResultCount: id: string * ?project: string * ?team: string * ?timePrecision: bool * ?top: float -> Promise<float>
    /// <summary>Gets the results of the query given the query ID.</summary>
    /// <param name="id">- The query ID.</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="team">- Team ID or team name</param>
    /// <param name="timePrecision">- Whether or not to use time precision.</param>
    /// <param name="top">- The max number of results to return.</param>
    abstract queryById: id: string * ?project: string * ?team: string * ?timePrecision: bool * ?top: float -> Promise<WorkItemTracking.WorkItemQueryResult>
    /// <summary>Get a work item icon given the friendly name and icon color.</summary>
    /// <param name="icon">- The name of the icon</param>
    /// <param name="color">- The 6-digit hex color for the icon</param>
    /// <param name="v">- The version of the icon (used only for cache invalidation)</param>
    abstract getWorkItemIconJson: icon: string * ?color: string * ?v: float -> Promise<WorkItemTracking.WorkItemIcon>
    /// Get a list of all work item icons.
    abstract getWorkItemIcons: unit -> Promise<ResizeArray<WorkItemTracking.WorkItemIcon>>
    /// <summary>Get a work item icon given the friendly name and icon color.</summary>
    /// <param name="icon">- The name of the icon</param>
    /// <param name="color">- The 6-digit hex color for the icon</param>
    /// <param name="v">- The version of the icon (used only for cache invalidation)</param>
    abstract getWorkItemIconSvg: icon: string * ?color: string * ?v: float -> Promise<obj option>
    /// <summary>Get a work item icon given the friendly name and icon color.</summary>
    /// <param name="icon">- The name of the icon</param>
    /// <param name="color">- The 6-digit hex color for the icon</param>
    /// <param name="v">- The version of the icon (used only for cache invalidation)</param>
    abstract getWorkItemIconXaml: icon: string * ?color: string * ?v: float -> Promise<obj option>
    /// <summary>Get a batch of work item links</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="linkTypes">- A list of types to filter the results to specific link types. Omit this parameter to get work item links of all link types.</param>
    /// <param name="types">- A list of types to filter the results to specific work item types. Omit this parameter to get work item links of all work item types.</param>
    /// <param name="continuationToken">- Specifies the continuationToken to start the batch from. Omit this parameter to get the first batch of links.</param>
    /// <param name="startDateTime">- Date/time to use as a starting point for link changes. Only link changes that occurred after that date/time will be returned. Cannot be used in conjunction with 'watermark' parameter.</param>
    abstract getReportingLinksByLinkType: ?project: string * ?linkTypes: ResizeArray<string> * ?types: ResizeArray<string> * ?continuationToken: string * ?startDateTime: DateTime -> Promise<WorkItemTracking.ReportingWorkItemLinksBatch>
    /// <summary>Gets the work item relation type definition.</summary>
    /// <param name="relation">- The relation name</param>
    abstract getRelationType: relation: string -> Promise<WorkItemTracking.WorkItemRelationType>
    /// Gets the work item relation types.
    abstract getRelationTypes: unit -> Promise<ResizeArray<WorkItemTracking.WorkItemRelationType>>
    /// <summary>Get a batch of work item revisions with the option of including deleted items</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fields">- A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.</param>
    /// <param name="types">- A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.</param>
    /// <param name="continuationToken">- Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.</param>
    /// <param name="startDateTime">- Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.</param>
    /// <param name="includeIdentityRef">- Return an identity reference instead of a string value for identity fields.</param>
    /// <param name="includeDeleted">- Specify if the deleted item should be returned.</param>
    /// <param name="includeTagRef">- Specify if the tag objects should be returned for System.Tags field.</param>
    /// <param name="includeLatestOnly">- Return only the latest revisions of work items, skipping all historical revisions</param>
    /// <param name="expand">- Return all the fields in work item revisions, including long text fields which are not returned by default</param>
    /// <param name="includeDiscussionChangesOnly">- Return only the those revisions of work items, where only history field was changed</param>
    /// <param name="maxPageSize">- The maximum number of results to return in this batch</param>
    abstract readReportingRevisionsGet: ?project: string * ?fields: ResizeArray<string> * ?types: ResizeArray<string> * ?continuationToken: string * ?startDateTime: DateTime * ?includeIdentityRef: bool * ?includeDeleted: bool * ?includeTagRef: bool * ?includeLatestOnly: bool * ?expand: WorkItemTracking.ReportingRevisionsExpand * ?includeDiscussionChangesOnly: bool * ?maxPageSize: float -> Promise<WorkItemTracking.ReportingWorkItemRevisionsBatch>
    /// <summary>Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.</summary>
    /// <param name="filter">- An object that contains request settings: field filter, type filter, identity format</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="continuationToken">- Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.</param>
    /// <param name="startDateTime">- Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.</param>
    /// <param name="expand">-</param>
    abstract readReportingRevisionsPost: filter: WorkItemTracking.ReportingWorkItemRevisionsFilter * ?project: string * ?continuationToken: string * ?startDateTime: DateTime * ?expand: WorkItemTracking.ReportingRevisionsExpand -> Promise<WorkItemTracking.ReportingWorkItemRevisionsBatch>
    /// <summary>Creates a single work item.</summary>
    /// <param name="document">- The JSON Patch document representing the work item</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- The work item type of the work item to create</param>
    /// <param name="validateOnly">- Indicate if you only want to validate the changes without saving the work item</param>
    /// <param name="bypassRules">- Do not enforce the work item type rules on this update</param>
    /// <param name="suppressNotifications">- Do not fire any notifications for this change</param>
    /// <param name="expand">- The expand parameters for work item attributes. Possible options are \{ None, Relations, Fields, Links, All \}.</param>
    abstract createWorkItem: document: WebApi.JsonPatchDocument * project: string * ``type``: string * ?validateOnly: bool * ?bypassRules: bool * ?suppressNotifications: bool * ?expand: WorkItemTracking.WorkItemExpand -> Promise<WorkItemTracking.WorkItem>
    /// <summary>Returns a single work item from a template.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- The work item type name</param>
    /// <param name="fields">- Comma-separated list of requested fields</param>
    /// <param name="asOf">- AsOf UTC date time string</param>
    /// <param name="expand">- The expand parameters for work item attributes. Possible options are \{ None, Relations, Fields, Links, All \}.</param>
    abstract getWorkItemTemplate: project: string * ``type``: string * ?fields: string * ?asOf: DateTime * ?expand: WorkItemTracking.WorkItemExpand -> Promise<WorkItemTracking.WorkItem>
    /// <summary>Deletes the specified work item and sends it to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion. It is recommended NOT to use this parameter. If you do, please use this parameter with extreme caution.</summary>
    /// <param name="id">- ID of the work item to be deleted</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="destroy">- Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone.</param>
    abstract deleteWorkItem: id: float * ?project: string * ?destroy: bool -> Promise<WorkItemTracking.WorkItemDelete>
    /// <summary>Returns a single work item.</summary>
    /// <param name="id">- The work item id</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fields">- Comma-separated list of requested fields</param>
    /// <param name="asOf">- AsOf UTC date time string</param>
    /// <param name="expand">- The expand parameters for work item attributes. Possible options are \{ None, Relations, Fields, Links, All \}.</param>
    abstract getWorkItem: id: float * ?project: string * ?fields: ResizeArray<string> * ?asOf: DateTime * ?expand: WorkItemTracking.WorkItemExpand -> Promise<WorkItemTracking.WorkItem>
    /// <summary>Returns a list of work items (Maximum 200)</summary>
    /// <param name="ids">- The comma-separated list of requested work item ids. (Maximum 200 ids allowed).</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="fields">- Comma-separated list of requested fields</param>
    /// <param name="asOf">- AsOf UTC date time string</param>
    /// <param name="expand">- The expand parameters for work item attributes. Possible options are \{ None, Relations, Fields, Links, All \}.</param>
    /// <param name="errorPolicy">- The flag to control error policy in a bulk get work items request. Possible options are \{Fail, Omit\}.</param>
    abstract getWorkItems: ids: ResizeArray<float> * ?project: string * ?fields: ResizeArray<string> * ?asOf: DateTime * ?expand: WorkItemTracking.WorkItemExpand * ?errorPolicy: WorkItemTracking.WorkItemErrorPolicy -> Promise<ResizeArray<WorkItemTracking.WorkItem>>
    /// <summary>Updates a single work item.</summary>
    /// <param name="document">- The JSON Patch document representing the update</param>
    /// <param name="id">- The id of the work item to update</param>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="validateOnly">- Indicate if you only want to validate the changes without saving the work item</param>
    /// <param name="bypassRules">- Do not enforce the work item type rules on this update</param>
    /// <param name="suppressNotifications">- Do not fire any notifications for this change</param>
    /// <param name="expand">- The expand parameters for work item attributes. Possible options are \{ None, Relations, Fields, Links, All \}.</param>
    abstract updateWorkItem: document: WebApi.JsonPatchDocument * id: float * ?project: string * ?validateOnly: bool * ?bypassRules: bool * ?suppressNotifications: bool * ?expand: WorkItemTracking.WorkItemExpand -> Promise<WorkItemTracking.WorkItem>
    /// <summary>Gets work items for a list of work item ids (Maximum 200)</summary>
    /// <param name="workItemGetRequest">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract getWorkItemsBatch: workItemGetRequest: WorkItemTracking.WorkItemBatchGetRequest * ?project: string -> Promise<ResizeArray<WorkItemTracking.WorkItem>>
    /// <summary>INTERNAL ONLY: It will be used for My account work experience. Get the work item type state color for multiple projects</summary>
    /// <param name="projectNames">-</param>
    abstract getWorkItemStateColors: projectNames: ResizeArray<string> -> Promise<ResizeArray<WorkItemTracking.ProjectWorkItemStateColors>>
    /// <summary>Returns the next state on the given work item IDs.</summary>
    /// <param name="ids">- list of work item ids</param>
    /// <param name="action">- possible actions. Currently only supports checkin</param>
    abstract getWorkItemNextStatesOnCheckinAction: ids: ResizeArray<float> * ?action: string -> Promise<ResizeArray<WorkItemTracking.WorkItemNextStateOnTransition>>
    /// <summary>Get all work item type categories.</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getWorkItemTypeCategories: project: string -> Promise<ResizeArray<WorkItemTracking.WorkItemTypeCategory>>
    /// <summary>Get specific work item type category by name.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="category">- The category name</param>
    abstract getWorkItemTypeCategory: project: string * category: string -> Promise<WorkItemTracking.WorkItemTypeCategory>
    /// <summary>INTERNAL ONLY: It will be used for My account work experience. Get the wit type color for multiple projects</summary>
    /// <param name="projectNames">-</param>
    abstract getWorkItemTypeColors: projectNames: ResizeArray<string> -> Promise<ResizeArray<WorkItemTrackingRestClientGetWorkItemTypeColorsPromise>>
    /// <summary>INTERNAL ONLY: It is used for color and icon providers. Get the wit type color for multiple projects</summary>
    /// <param name="projectNames">-</param>
    abstract getWorkItemTypeColorAndIcons: projectNames: ResizeArray<string> -> Promise<ResizeArray<WorkItemTrackingRestClientGetWorkItemTypeColorAndIconsPromise>>
    /// <summary>Returns a work item type definition.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- Work item type name</param>
    abstract getWorkItemType: project: string * ``type``: string -> Promise<WorkItemTracking.WorkItemType>
    /// <summary>Returns the list of work item types</summary>
    /// <param name="project">- Project ID or project name</param>
    abstract getWorkItemTypes: project: string -> Promise<ResizeArray<WorkItemTracking.WorkItemType>>
    /// <summary>Get a list of fields for a work item type with detailed references.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- Work item type.</param>
    /// <param name="expand">- Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.</param>
    abstract getWorkItemTypeFieldsWithReferences: project: string * ``type``: string * ?expand: WorkItemTracking.WorkItemTypeFieldsExpandLevel -> Promise<ResizeArray<WorkItemTracking.WorkItemTypeFieldWithReferences>>
    /// <summary>Get a field for a work item type with detailed references.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- Work item type.</param>
    /// <param name="field">-</param>
    /// <param name="expand">- Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.</param>
    abstract getWorkItemTypeFieldWithReferences: project: string * ``type``: string * field: string * ?expand: WorkItemTracking.WorkItemTypeFieldsExpandLevel -> Promise<WorkItemTracking.WorkItemTypeFieldWithReferences>
    /// <summary>Returns the state names and colors for a work item type.</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">- The state name</param>
    abstract getWorkItemTypeStates: project: string * ``type``: string -> Promise<ResizeArray<WorkItemTracking.WorkItemStateColor>>
    /// <summary>Export work item type</summary>
    /// <param name="project">- Project ID or project name</param>
    /// <param name="type">-</param>
    /// <param name="exportGlobalLists">-</param>
    abstract exportWorkItemTypeDefinition: ?project: string * ?``type``: string * ?exportGlobalLists: bool -> Promise<WorkItemTracking.WorkItemTypeTemplate>
    /// <summary>Add/updates a work item type</summary>
    /// <param name="updateModel">-</param>
    /// <param name="project">- Project ID or project name</param>
    abstract updateWorkItemTypeDefinition: updateModel: WorkItemTracking.WorkItemTypeTemplateUpdateModel * ?project: string -> Promise<WorkItemTracking.ProvisioningResult>

type [<AllowNullLiteral>] WorkItemTrackingRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> WorkItemTrackingRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] WorkItemTrackingRestClientGetWorkItemTypeColorsPromise =
    abstract key: string with get, set
    abstract value: ResizeArray<WorkItemTracking.WorkItemTypeColor> with get, set

type [<AllowNullLiteral>] WorkItemTrackingRestClientGetWorkItemTypeColorAndIconsPromise =
    abstract key: string with get, set
    abstract value: ResizeArray<WorkItemTracking.WorkItemTypeColorAndIcon> with get, set
type WorkItem = __WorkItemTracking.WorkItem
type WorkItemField = __WorkItemTracking.WorkItemField
type WorkItemRelation = __WorkItemTracking.WorkItemRelation
type WorkItemRelationType = __WorkItemTracking.WorkItemRelationType
type IdentityRef = ___WebApi.IdentityRef

type [<StringEnum>] [<RequireQualifiedAccess>] WorkItemTrackingServiceIds =
    | [<CompiledName "ms.vss-work-web.work-item-form-navigation-service">] WorkItemFormNavigationService
    | [<CompiledName "ms.vss-work-web.work-item-form">] WorkItemFormService

/// Options for getting the values of a work item
type [<AllowNullLiteral>] WorkItemOptions =
    /// Returns the original instead of updated value for the field
    abstract returnOriginalValue: bool with get, set

/// Host service for opening the work item form
type [<AllowNullLiteral>] IWorkItemFormNavigationService =
    /// <summary>Opens the specified work item. The host page will display the work item in a dialog,
    /// or it may update the current page view, depending on the current page.</summary>
    /// <param name="workItemId">The id of the work item to open</param>
    /// <param name="openInNewTab">(Optional) If true, opens the work item in a new tab. Default is false</param>
    abstract openWorkItem: workItemId: float * ?openInNewTab: bool -> Promise<WorkItem>
    /// <summary>Opens a new work item of the specified type. The host page will display the new work item in a dialog,
    /// or it may update the current page view, depending on the current page.</summary>
    /// <param name="workItemTypeName">The name of the work item type to open</param>
    /// <param name="initialValues">(Optional) A dictionary of any initial field values to set after opening the new work item.</param>
    abstract openNewWorkItem: workItemTypeName: string * ?initialValues: IWorkItemFormNavigationServiceOpenNewWorkItemInitialValues -> Promise<WorkItem>

type [<AllowNullLiteral>] IWorkItemFormNavigationServiceOpenNewWorkItemInitialValues =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: fieldName: string -> Object with get, set

/// Host service for interacting with the currently active work item form (work item currently displayed in the UI).
/// Form service depends on the current active work item context. Will throw an error when there is no open work item.
type [<AllowNullLiteral>] IWorkItemFormService =
    /// Gets id of active work item.
    abstract getId: unit -> Promise<float>
    /// Gets active work item's latest revision.
    abstract getRevision: unit -> Promise<float>
    /// Gets active work item fields.
    abstract getFields: unit -> Promise<ResizeArray<WorkItemField>>
    /// <summary>Gets field value of the active work item.</summary>
    /// <param name="fieldReferenceName">Field reference name</param>
    /// <param name="returnOriginalValue">(Optional) If false, gets unsaved field values. Default is false.</param>
    abstract getFieldValue: fieldReferenceName: string * ?returnOriginalValue: bool -> Promise<Object>
    /// <summary>Gets field value of the active work item.</summary>
    /// <param name="fieldReferenceName">Field reference name</param>
    /// <param name="options">work item options</param>
    abstract getFieldValue: fieldReferenceName: string * ?options: WorkItemOptions -> Promise<Object>
    /// <summary>Gets identity field value of the active work item.</summary>
    /// <param name="fieldReferenceName">Field reference name</param>
    /// <param name="options">work item options</param>
    abstract getIdentityFieldValue: fieldReferenceName: string * ?options: WorkItemOptions -> Promise<IdentityRef>
    /// <summary>Gets field values of the active work item.</summary>
    /// <param name="fieldReferenceNames">An arrary of field reference names</param>
    /// <param name="returnOriginalValue">(Optional) If false, gets unsaved field values. Default is false.</param>
    abstract getFieldValues: fieldReferenceNames: ResizeArray<string> * ?returnOriginalValue: bool -> Promise<IWorkItemFormServiceGetFieldValuesPromise>
    /// <summary>Gets field values of the active work item.</summary>
    /// <param name="fieldReferenceNames">An arrary of field reference names</param>
    /// <param name="options">work item options</param>
    abstract getFieldValues: fieldReferenceNames: ResizeArray<string> * ?options: WorkItemOptions -> Promise<IWorkItemFormServiceGetFieldValuesPromise>
    /// <summary>Sets field value of the active work item.</summary>
    /// <param name="fieldReferenceName">Field reference name</param>
    /// <param name="value">Field value</param>
    abstract setFieldValue: fieldReferenceName: string * value: Object -> Promise<bool>
    /// <summary>Sets field values of the active work item.</summary>
    /// <param name="fields">A dictionary of field refName/values</param>
    abstract setFieldValues: fields: IWorkItemFormServiceSetFieldValuesFields -> Promise<IWorkItemFormServiceSetFieldValuesPromise>
    /// <summary>Gets the allowed values for the field on the active work item.</summary>
    /// <param name="fieldReferenceName">Field reference name</param>
    abstract getAllowedFieldValues: fieldReferenceName: string -> Promise<ResizeArray<Object>>
    /// Returns true if the active work item is dirty.
    abstract isDirty: unit -> Promise<bool>
    /// Returns true if the active work item is new.
    abstract isNew: unit -> Promise<bool>
    /// Returns true if the active work item fields are all valid.
    abstract isValid: unit -> Promise<bool>
    /// <summary>Marks the work item as invalid and disable saving the work item on the form.</summary>
    /// <param name="errorMessage">A custom error message that would be shown on top of the work item form.</param>
    abstract setError: errorMessage: string -> Promise<unit>
    /// Clears the error set by setError method and unblocks saving of the work item in the form.
    abstract clearError: unit -> Promise<unit>
    /// Saves the active work item.
    abstract save: unit -> Promise<unit>
    /// Refreshes the active work item. Will prompt the user if the work item is dirty.
    abstract refresh: unit -> Promise<unit>
    /// Reset any changes in the active work item. Will prompt the user to confirm.
    abstract reset: unit -> Promise<unit>
    /// Gets fields who are in an invalid state according to the work item rules. These fields need to be changed before the work item can be saved.
    abstract getInvalidFields: unit -> Promise<ResizeArray<WorkItemField>>
    /// <summary>Gets fields that have been changed either by user or by a work item rule and are in a dirty state.</summary>
    /// <param name="includeSystemChanges">A boolean value indicating if the result should include changes set by work item rules.</param>
    abstract getDirtyFields: ?includeSystemChanges: bool -> Promise<ResizeArray<WorkItemField>>
    /// <summary>Adds links of another work items or artifacts (e.g. commits, hyperlinks) to the work item. Attachment is currently not supported by this function.</summary>
    /// <param name="workItemRelations">Work item links to add.</param>
    abstract addWorkItemRelations: workItemRelations: ResizeArray<WorkItemRelation> -> Promise<unit>
    /// <summary>Removes links to another work items or artifacts (e.g. commits, hyperlinks) from the work item. Attachment is currently not supported by this function.</summary>
    /// <param name="workItemRelations">Work item links to remove.</param>
    abstract removeWorkItemRelations: workItemRelations: ResizeArray<WorkItemRelation> -> Promise<unit>
    /// Returns an array of  work item links to other work items or artifacts (e.g. commits, hyperlinks). Attachment is currently not supported by this function.
    abstract getWorkItemRelations: unit -> Promise<ResizeArray<WorkItemRelation>>
    /// <summary>Returns the REST API url of the specified work item resource.</summary>
    /// <param name="workItemId">Id of the work item that the resource url is requested for.</param>
    abstract getWorkItemResourceUrl: workItemId: float -> Promise<string>
    /// Returns an array of work item relation types.
    abstract getWorkItemRelationTypes: unit -> Promise<ResizeArray<WorkItemRelationType>>
    /// Returns true if the active work item available.
    abstract hasActiveWorkItem: unit -> Promise<bool>
    abstract beginSaveWorkItem: successCallback: (unit -> unit) * errorCallback: (unit -> unit) -> Promise<unit>

type [<AllowNullLiteral>] IWorkItemFormServiceSetFieldValuesFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: fieldName: string -> Object with get, set

/// Interface defining the arguments for notifications sent by the ActiveWorkItemService
type [<AllowNullLiteral>] IWorkItemChangedArgs =
    /// Id of the work item.
    abstract id: float with get, set

/// Interface defining the arguments for the 'onLoaded' notification sent by the ActiveWorkItemService
type [<AllowNullLiteral>] IWorkItemLoadedArgs =
    inherit IWorkItemChangedArgs
    /// 'true' if the work item is a 'new', unsaved work item, 'false' otherwise.
    abstract isNew: bool with get, set
    /// 'true' write rest apis are disabled. All controls should be rendered as readonly
    abstract isReadOnly: bool with get, set

/// Interface defining the arguments for the 'onFieldChanged' notification sent by the ActiveWorkItemService
type [<AllowNullLiteral>] IWorkItemFieldChangedArgs =
    inherit IWorkItemChangedArgs
    /// Set of fields that have been changed.  'key' is the field reference name.
    abstract changedFields: IWorkItemFieldChangedArgsChangedFields with get, set

/// Interface defining notifications provided by the ActiveWorkItemService
type [<AllowNullLiteral>] IWorkItemNotificationListener =
    /// <summary>Called when an extension is loaded</summary>
    /// <param name="workItemLoadedArgs">Information about the work item that was loaded.</param>
    abstract onLoaded: workItemLoadedArgs: IWorkItemLoadedArgs -> unit
    /// <summary>Called when a field is modified</summary>
    /// <param name="fieldChangedArgs">Information about the work item that was modified and the fields that were changed.</param>
    abstract onFieldChanged: fieldChangedArgs: IWorkItemFieldChangedArgs -> unit
    /// <summary>Called when a work item is saved</summary>
    /// <param name="savedEventArgs">Information about the work item that was saved.</param>
    abstract onSaved: savedEventArgs: IWorkItemChangedArgs -> unit
    /// <summary>Called when a work item is refreshed</summary>
    /// <param name="refreshEventArgs">Information about the work item that was refreshed.</param>
    abstract onRefreshed: refreshEventArgs: IWorkItemChangedArgs -> unit
    /// <summary>Called when a work item is reset (undo back to unchanged state)</summary>
    /// <param name="undoEventArgs">Information about the work item that was reset.</param>
    abstract onReset: undoEventArgs: IWorkItemChangedArgs -> unit
    /// <summary>Called when a work item is unloaded</summary>
    /// <param name="unloadedEventArgs">Information about the work item that was saved.</param>
    abstract onUnloaded: unloadedEventArgs: IWorkItemChangedArgs -> unit

type [<AllowNullLiteral>] IWorkItemFormServiceGetFieldValuesPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: fieldName: string -> Object with get, set

type [<AllowNullLiteral>] IWorkItemFormServiceSetFieldValuesPromise =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: fieldName: string -> bool with get, set

type [<AllowNullLiteral>] IWorkItemFieldChangedArgsChangedFields =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

/// Class that describes a request to add a field in a work item type.
type [<AllowNullLiteral>] AddProcessWorkItemTypeFieldRequest =
    /// The list of field allowed values.
    abstract allowedValues: ResizeArray<string> with get, set
    /// Allow setting field value to a group identity. Only applies to identity fields.
    abstract allowGroups: bool with get, set
    /// The default value of the field.
    abstract defaultValue: obj option with get, set
    /// If true the field cannot be edited.
    abstract readOnly: bool with get, set
    /// Reference name of the field.
    abstract referenceName: string with get, set
    /// If true the field cannot be empty.
    abstract required: bool with get, set

/// Represent a control in the form.
type [<AllowNullLiteral>] Control =
    /// Contribution for the control.
    abstract contribution: WitContribution with get, set
    /// Type of the control.
    abstract controlType: string with get, set
    /// Height of the control, for html controls.
    abstract height: float with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been inherited. from a parent layout.  This is expected to only be only set by the combiner.
    abstract inherited: bool with get, set
    /// A value indicating if the layout node is contribution or not.
    abstract isContribution: bool with get, set
    /// Label for the field.
    abstract label: string with get, set
    /// Inner text of the control.
    abstract metadata: string with get, set
    /// Order in which the control should appear in its group.
    abstract order: float with get, set
    /// A value indicating whether this layout node has been overridden . by a child layout.
    abstract overridden: bool with get, set
    /// A value indicating if the control is readonly.
    abstract readOnly: bool with get, set
    /// A value indicating if the control should be hidden or not.
    abstract visible: bool with get, set
    /// Watermark text for the textbox.
    abstract watermark: string with get, set

/// Describes a process being created.
type [<AllowNullLiteral>] CreateProcessModel =
    /// Description of the process
    abstract description: string with get, set
    /// Name of the process
    abstract name: string with get, set
    /// The ID of the parent process
    abstract parentProcessTypeId: string with get, set
    /// Reference name of process being created. If not specified, server will assign a unique reference name
    abstract referenceName: string with get, set

/// Request object/class for creating a rule on a work item type.
type [<AllowNullLiteral>] CreateProcessRuleRequest =
    /// List of actions to take when the rule is triggered.
    abstract actions: ResizeArray<RuleAction> with get, set
    /// List of conditions when the rule should be triggered.
    abstract conditions: ResizeArray<RuleCondition> with get, set
    /// Indicates if the rule is disabled.
    abstract isDisabled: bool with get, set
    /// Name for the rule.
    abstract name: string with get, set

/// Class for create work item type request
type [<AllowNullLiteral>] CreateProcessWorkItemTypeRequest =
    /// Color hexadecimal code to represent the work item type
    abstract color: string with get, set
    /// Description of the work item type
    abstract description: string with get, set
    /// Icon to represent the work item type
    abstract icon: string with get, set
    /// Parent work item type for work item type
    abstract inheritsFrom: string with get, set
    /// True if the work item type need to be disabled
    abstract isDisabled: bool with get, set
    /// Name of work item type
    abstract name: string with get, set

type [<RequireQualifiedAccess>] CustomizationType =
    | System = 1
    | Inherited = 2
    | Custom = 3

/// Represents the extensions part of the layout
type [<AllowNullLiteral>] Extension =
    /// Id of the extension
    abstract id: string with get, set

type [<AllowNullLiteral>] FieldModel =
    abstract description: string with get, set
    abstract id: string with get, set
    abstract isIdentity: bool with get, set
    abstract name: string with get, set
    abstract ``type``: FieldType with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] FieldRuleModel =
    abstract actions: ResizeArray<RuleActionModel> with get, set
    abstract conditions: ResizeArray<RuleConditionModel> with get, set
    abstract friendlyName: string with get, set
    abstract id: string with get, set
    abstract isDisabled: bool with get, set
    abstract isSystem: bool with get, set

type [<RequireQualifiedAccess>] FieldType =
    | String = 1
    | Integer = 2
    | DateTime = 3
    | PlainText = 5
    | Html = 7
    | TreePath = 8
    | History = 9
    | Double = 10
    | Guid = 11
    | Boolean = 12
    | Identity = 13
    | PicklistInteger = 14
    | PicklistString = 15
    | PicklistDouble = 16

/// Describes the layout of a work item type
type [<AllowNullLiteral>] FormLayout =
    /// Gets and sets extensions list.
    abstract extensions: ResizeArray<Extension> with get, set
    /// Top level tabs of the layout.
    abstract pages: ResizeArray<Page> with get, set
    /// Headers controls of the layout.
    abstract systemControls: ResizeArray<Control> with get, set

type [<RequireQualifiedAccess>] GetBehaviorsExpand =
    | None = 0
    | Fields = 1
    | CombinedFields = 2

type [<RequireQualifiedAccess>] GetProcessExpandLevel =
    | None = 0
    | Projects = 1

type [<RequireQualifiedAccess>] GetWorkItemTypeExpand =
    | None = 0
    | States = 1
    | Behaviors = 2
    | Layout = 4

/// Represent a group in the form that holds controls in it.
type [<AllowNullLiteral>] Group =
    /// Contribution for the group.
    abstract contribution: WitContribution with get, set
    /// Controls to be put in the group.
    abstract controls: ResizeArray<Control> with get, set
    /// The height for the contribution.
    abstract height: float with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
    abstract inherited: bool with get, set
    /// A value indicating if the layout node is contribution are not.
    abstract isContribution: bool with get, set
    /// Label for the group.
    abstract label: string with get, set
    /// Order in which the group should appear in the section.
    abstract order: float with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set
    /// A value indicating if the group should be hidden or not.
    abstract visible: bool with get, set

/// Class that describes the work item state is hidden.
type [<AllowNullLiteral>] HideStateModel =
    /// Returns 'true', if workitem state is hidden, 'false' otherwise.
    abstract hidden: bool with get, set

/// Describes a page in the work item form layout
type [<AllowNullLiteral>] Page =
    /// Contribution for the page.
    abstract contribution: WitContribution with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
    abstract inherited: bool with get, set
    /// A value indicating if the layout node is contribution are not.
    abstract isContribution: bool with get, set
    /// The label for the page.
    abstract label: string with get, set
    /// A value indicating whether any user operations are permitted on this page and the contents of this page
    abstract locked: bool with get, set
    /// Order in which the page should appear in the layout.
    abstract order: float with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set
    /// The icon for the page.
    abstract pageType: PageType with get, set
    /// The sections of the page.
    abstract sections: ResizeArray<Section> with get, set
    /// A value indicating if the page should be hidden or not.
    abstract visible: bool with get, set

type [<RequireQualifiedAccess>] PageType =
    | Custom = 1
    | History = 2
    | Links = 3
    | Attachments = 4

/// Picklist.
type [<AllowNullLiteral>] PickList =
    inherit PickListMetadata
    /// A list of PicklistItemModel.
    abstract items: ResizeArray<string> with get, set

/// Metadata for picklist.
type [<AllowNullLiteral>] PickListMetadata =
    /// ID of the picklist
    abstract id: string with get, set
    /// Indicates whether items outside of suggested list are allowed
    abstract isSuggested: bool with get, set
    /// Name of the picklist
    abstract name: string with get, set
    /// DataType of picklist
    abstract ``type``: string with get, set
    /// Url of the picklist
    abstract url: string with get, set

/// Process Behavior Model.
type [<AllowNullLiteral>] ProcessBehavior =
    /// Color.
    abstract color: string with get, set
    /// Indicates the type of customization on this work item. System behaviors are inherited from parent process but not modified. Inherited behaviors are modified modified behaviors that were inherited from parent process. Custom behaviors are behaviors created by user in current process.
    abstract customization: CustomizationType with get, set
    /// . Description
    abstract description: string with get, set
    /// Process Behavior Fields.
    abstract fields: ResizeArray<ProcessBehaviorField> with get, set
    /// Parent behavior reference.
    abstract inherits: ProcessBehaviorReference with get, set
    /// Behavior Name.
    abstract name: string with get, set
    /// Rank of the behavior
    abstract rank: float with get, set
    /// Behavior Id
    abstract referenceName: string with get, set
    /// Url of the behavior.
    abstract url: string with get, set

/// Process Behavior Create Payload.
type [<AllowNullLiteral>] ProcessBehaviorCreateRequest =
    /// Color.
    abstract color: string with get, set
    /// Parent behavior id.
    abstract inherits: string with get, set
    /// Name of the behavior.
    abstract name: string with get, set
    /// ReferenceName is optional, if not specified will be auto-generated.
    abstract referenceName: string with get, set

/// Process Behavior Field.
type [<AllowNullLiteral>] ProcessBehaviorField =
    /// Name of the field.
    abstract name: string with get, set
    /// Reference name of the field.
    abstract referenceName: string with get, set
    /// Url to field.
    abstract url: string with get, set

/// Process behavior Reference.
type [<AllowNullLiteral>] ProcessBehaviorReference =
    /// Id of a Behavior.
    abstract behaviorRefName: string with get, set
    /// Url to behavior.
    abstract url: string with get, set

/// Process Behavior Replace Payload.
type [<AllowNullLiteral>] ProcessBehaviorUpdateRequest =
    /// Color.
    abstract color: string with get, set
    /// Behavior Name.
    abstract name: string with get, set

type [<RequireQualifiedAccess>] ProcessClass =
    | System = 0
    | Derived = 1
    | Custom = 2

/// Process.
type [<AllowNullLiteral>] ProcessInfo =
    /// Indicates the type of customization on this process. System Process is default process. Inherited Process is modified process that was System process before.
    abstract customizationType: CustomizationType with get, set
    /// Description of the process.
    abstract description: string with get, set
    /// Is the process default.
    abstract isDefault: bool with get, set
    /// Is the process enabled.
    abstract isEnabled: bool with get, set
    /// Name of the process.
    abstract name: string with get, set
    /// ID of the parent process.
    abstract parentProcessTypeId: string with get, set
    /// Projects in this process to which the user is subscribed to.
    abstract projects: ResizeArray<ProjectReference> with get, set
    /// Reference name of the process.
    abstract referenceName: string with get, set
    /// The ID of the process.
    abstract typeId: string with get, set

type [<AllowNullLiteral>] ProcessModel =
    /// Description of the process
    abstract description: string with get, set
    /// Name of the process
    abstract name: string with get, set
    /// Projects in this process
    abstract projects: ResizeArray<ProjectReference> with get, set
    /// Properties of the process
    abstract properties: ProcessProperties with get, set
    /// Reference name of the process
    abstract referenceName: string with get, set
    /// The ID of the process
    abstract typeId: string with get, set

/// Properties of the process.
type [<AllowNullLiteral>] ProcessProperties =
    /// Class of the process.
    abstract ``class``: ProcessClass with get, set
    /// Is the process default process.
    abstract isDefault: bool with get, set
    /// Is the process enabled.
    abstract isEnabled: bool with get, set
    /// ID of the parent process.
    abstract parentProcessTypeId: string with get, set
    /// Version of the process.
    abstract version: string with get, set

/// Process Rule Response.
type [<AllowNullLiteral>] ProcessRule =
    inherit CreateProcessRuleRequest
    /// Indicates if the rule is system generated or created by user.
    abstract customizationType: CustomizationType with get, set
    /// Id to uniquely identify the rule.
    abstract id: string with get, set
    /// Resource Url.
    abstract url: string with get, set

/// Class that describes a work item type object
type [<AllowNullLiteral>] ProcessWorkItemType =
    abstract behaviors: ResizeArray<WorkItemTypeBehavior> with get, set
    /// Color hexadecimal code to represent the work item type
    abstract color: string with get, set
    /// Indicates the type of customization on this work item System work item types are inherited from parent process but not modified Inherited work item types are modified work item that were inherited from parent process Custom work item types are work item types that were created in the current process
    abstract customization: CustomizationType with get, set
    /// Description of the work item type
    abstract description: string with get, set
    /// Icon to represent the work item typ
    abstract icon: string with get, set
    /// Reference name of the parent work item type
    abstract inherits: string with get, set
    /// Indicates if a work item type is disabled
    abstract isDisabled: bool with get, set
    abstract layout: FormLayout with get, set
    /// Name of the work item type
    abstract name: string with get, set
    /// Reference name of work item type
    abstract referenceName: string with get, set
    abstract states: ResizeArray<WorkItemStateResultModel> with get, set
    /// Url of the work item type
    abstract url: string with get, set

/// Class that describes a field in a work item type and its properties.
type [<AllowNullLiteral>] ProcessWorkItemTypeField =
    /// The list of field allowed values.
    abstract allowedValues: ResizeArray<obj option> with get, set
    /// Allow setting field value to a group identity. Only applies to identity fields.
    abstract allowGroups: bool with get, set
    /// Indicates the type of customization on this work item.
    abstract customization: CustomizationType with get, set
    /// The default value of the field.
    abstract defaultValue: obj option with get, set
    /// Description of the field.
    abstract description: string with get, set
    /// Name of the field.
    abstract name: string with get, set
    /// If true the field cannot be edited.
    abstract readOnly: bool with get, set
    /// Reference name of the field.
    abstract referenceName: string with get, set
    /// If true the field cannot be empty.
    abstract required: bool with get, set
    /// Type of the field.
    abstract ``type``: FieldType with get, set
    /// Resource URL of the field.
    abstract url: string with get, set

type [<RequireQualifiedAccess>] ProcessWorkItemTypeFieldsExpandLevel =
    | None = 0
    | AllowedValues = 1
    | All = 2

/// Defines the project reference class.
type [<AllowNullLiteral>] ProjectReference =
    /// Description of the project
    abstract description: string with get, set
    /// The ID of the project
    abstract id: string with get, set
    /// Name of the project
    abstract name: string with get, set
    /// Url of the project
    abstract url: string with get, set

/// Action to take when the rule is triggered.
type [<AllowNullLiteral>] RuleAction =
    /// Type of action to take when the rule is triggered.
    abstract actionType: RuleActionType with get, set
    /// Field on which the action should be taken.
    abstract targetField: string with get, set
    /// Value to apply on target field, once the action is taken.
    abstract value: string with get, set

/// Action to take when the rule is triggered.
type [<AllowNullLiteral>] RuleActionModel =
    abstract actionType: string with get, set
    abstract targetField: string with get, set
    abstract value: string with get, set

type [<RequireQualifiedAccess>] RuleActionType =
    | MakeRequired = 1
    | MakeReadOnly = 2
    | SetDefaultValue = 3
    | SetDefaultFromClock = 4
    | SetDefaultFromCurrentUser = 5
    | SetDefaultFromField = 6
    | CopyValue = 7
    | CopyFromClock = 8
    | CopyFromCurrentUser = 9
    | CopyFromField = 10
    | SetValueToEmpty = 11
    | CopyFromServerClock = 12
    | CopyFromServerCurrentUser = 13
    | HideTargetField = 14

/// Defines a condition on a field when the rule should be triggered.
type [<AllowNullLiteral>] RuleCondition =
    /// Type of condition. $When. This condition limits the execution of its children to cases when another field has a particular value, i.e. when the Is value of the referenced field is equal to the given literal value. $WhenNot.This condition limits the execution of its children to cases when another field does not have a particular value, i.e.when the Is value of the referenced field is not equal to the given literal value. $WhenChanged.This condition limits the execution of its children to cases when another field has changed, i.e.when the Is value of the referenced field is not equal to the Was value of that field. $WhenNotChanged.This condition limits the execution of its children to cases when another field has not changed, i.e.when the Is value of the referenced field is equal to the Was value of that field.
    abstract conditionType: RuleConditionType with get, set
    /// Field that defines condition.
    abstract field: string with get, set
    /// Value of field to define the condition for rule.
    abstract value: string with get, set

type [<AllowNullLiteral>] RuleConditionModel =
    abstract conditionType: string with get, set
    abstract field: string with get, set
    abstract value: string with get, set

type [<RequireQualifiedAccess>] RuleConditionType =
    | When = 1
    | WhenNot = 2
    | WhenChanged = 3
    | WhenNotChanged = 4
    | WhenWas = 5
    | WhenStateChangedTo = 6
    | WhenStateChangedFromAndTo = 7
    | WhenWorkItemIsCreated = 8
    | WhenValueIsDefined = 9
    | WhenValueIsNotDefined = 10
    | WhenCurrentUserIsMemberOfGroup = 11
    | WhenCurrentUserIsNotMemberOfGroup = 12

/// Defines a section of the work item form layout
type [<AllowNullLiteral>] Section =
    /// List of child groups in this section
    abstract groups: ResizeArray<Group> with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set

/// Describes a request to update a process
type [<AllowNullLiteral>] UpdateProcessModel =
    /// New description of the process
    abstract description: string with get, set
    /// If true new projects will use this process by default
    abstract isDefault: bool with get, set
    /// If false the process will be disabled and cannot be used to create projects
    abstract isEnabled: bool with get, set
    /// New name of the process
    abstract name: string with get, set

/// Request class/object to update the rule.
type [<AllowNullLiteral>] UpdateProcessRuleRequest =
    inherit CreateProcessRuleRequest
    /// Id to uniquely identify the rule.
    abstract id: string with get, set

/// Class to describe a request that updates a field's properties in a work item type.
type [<AllowNullLiteral>] UpdateProcessWorkItemTypeFieldRequest =
    /// The list of field allowed values.
    abstract allowedValues: ResizeArray<string> with get, set
    /// Allow setting field value to a group identity. Only applies to identity fields.
    abstract allowGroups: bool with get, set
    /// The default value of the field.
    abstract defaultValue: obj option with get, set
    /// If true the field cannot be edited.
    abstract readOnly: bool with get, set
    /// The default value of the field.
    abstract required: bool with get, set

/// Class for update request on a work item type
type [<AllowNullLiteral>] UpdateProcessWorkItemTypeRequest =
    /// Color of the work item type
    abstract color: string with get, set
    /// Description of the work item type
    abstract description: string with get, set
    /// Icon of the work item type
    abstract icon: string with get, set
    /// If set will disable the work item type
    abstract isDisabled: bool with get, set

/// Properties of a work item form contribution
type [<AllowNullLiteral>] WitContribution =
    /// The id for the contribution.
    abstract contributionId: string with get, set
    /// The height for the contribution.
    abstract height: float with get, set
    /// A dictionary holding key value pairs for contribution inputs.
    abstract inputs: WitContributionInputs with get, set
    /// A value indicating if the contribution should be show on deleted workItem.
    abstract showOnDeletedWorkItem: bool with get, set

type [<AllowNullLiteral>] WorkItemBehavior =
    abstract ``abstract``: bool with get, set
    abstract color: string with get, set
    abstract description: string with get, set
    abstract fields: ResizeArray<WorkItemBehaviorField> with get, set
    abstract id: string with get, set
    abstract inherits: WorkItemBehaviorReference with get, set
    abstract name: string with get, set
    abstract overriden: bool with get, set
    abstract rank: float with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] WorkItemBehaviorField =
    abstract behaviorFieldId: string with get, set
    abstract id: string with get, set
    abstract url: string with get, set

/// Reference to the behavior of a work item type.
type [<AllowNullLiteral>] WorkItemBehaviorReference =
    /// The ID of the reference behavior.
    abstract id: string with get, set
    /// The url of the reference behavior.
    abstract url: string with get, set

/// Class That represents a work item state input.
type [<AllowNullLiteral>] WorkItemStateInputModel =
    /// Color of the state
    abstract color: string with get, set
    /// Name of the state
    abstract name: string with get, set
    /// Order in which state should appear
    abstract order: float with get, set
    /// Category of the state
    abstract stateCategory: string with get, set

/// Class that represents a work item state result.
type [<AllowNullLiteral>] WorkItemStateResultModel =
    /// Work item state color.
    abstract color: string with get, set
    /// Work item state customization type.
    abstract customizationType: CustomizationType with get, set
    /// If the Work item state is hidden.
    abstract hidden: bool with get, set
    /// Id of the Workitemstate.
    abstract id: string with get, set
    /// Work item state name.
    abstract name: string with get, set
    /// Work item state order.
    abstract order: float with get, set
    /// Work item state statecategory.
    abstract stateCategory: string with get, set
    /// Work item state url.
    abstract url: string with get, set

/// Association between a work item type and it's behavior
type [<AllowNullLiteral>] WorkItemTypeBehavior =
    /// Reference to the behavior of a work item type
    abstract behavior: WorkItemBehaviorReference with get, set
    /// If true the work item type is the default work item type in the behavior
    abstract isDefault: bool with get, set
    /// URL of the work item type behavior
    abstract url: string with get, set

type [<RequireQualifiedAccess>] WorkItemTypeClass =
    | System = 0
    | Derived = 1
    | Custom = 2

type [<AllowNullLiteral>] WorkItemTypeModel =
    abstract behaviors: ResizeArray<WorkItemTypeBehavior> with get, set
    abstract ``class``: WorkItemTypeClass with get, set
    abstract color: string with get, set
    abstract description: string with get, set
    abstract icon: string with get, set
    abstract id: string with get, set
    /// Parent WIT Id/Internal ReferenceName that it inherits from
    abstract inherits: string with get, set
    abstract isDisabled: bool with get, set
    abstract layout: FormLayout with get, set
    abstract name: string with get, set
    abstract states: ResizeArray<WorkItemStateResultModel> with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] WitContributionInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set
module WorkItemTrackingProcess = ___WorkItemTrackingProcess_WorkItemTrackingProcess
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract WorkItemTrackingProcessRestClient: WorkItemTrackingProcessRestClientStatic

type [<AllowNullLiteral>] WorkItemTrackingProcessRestClient =
    inherit RestClientBase
    /// <summary>Creates a single behavior in the given process.</summary>
    /// <param name="behavior">-</param>
    /// <param name="processId">- The ID of the process</param>
    abstract createProcessBehavior: behavior: WorkItemTrackingProcess.ProcessBehaviorCreateRequest * processId: string -> Promise<WorkItemTrackingProcess.ProcessBehavior>
    /// <summary>Removes a behavior in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    abstract deleteProcessBehavior: processId: string * behaviorRefName: string -> Promise<unit>
    /// <summary>Returns a behavior of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    /// <param name="expand">-</param>
    abstract getProcessBehavior: processId: string * behaviorRefName: string * ?expand: WorkItemTrackingProcess.GetBehaviorsExpand -> Promise<WorkItemTrackingProcess.ProcessBehavior>
    /// <summary>Returns a list of all behaviors in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="expand">-</param>
    abstract getProcessBehaviors: processId: string * ?expand: WorkItemTrackingProcess.GetBehaviorsExpand -> Promise<ResizeArray<WorkItemTrackingProcess.ProcessBehavior>>
    /// <summary>Replaces a behavior in the process.</summary>
    /// <param name="behaviorData">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    abstract updateProcessBehavior: behaviorData: WorkItemTrackingProcess.ProcessBehaviorUpdateRequest * processId: string * behaviorRefName: string -> Promise<WorkItemTrackingProcess.ProcessBehavior>
    /// <summary>Creates a control in a group.</summary>
    /// <param name="control">- The control.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="groupId">- The ID of the group to add the control to.</param>
    abstract createControlInGroup: control: WorkItemTrackingProcess.Control * processId: string * witRefName: string * groupId: string -> Promise<WorkItemTrackingProcess.Control>
    /// <summary>Moves a control to a specified group.</summary>
    /// <param name="control">- The control.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="groupId">- The ID of the group to move the control to.</param>
    /// <param name="controlId">- The ID of the control.</param>
    /// <param name="removeFromGroupId">- The group ID to remove the control from.</param>
    abstract moveControlToGroup: control: WorkItemTrackingProcess.Control * processId: string * witRefName: string * groupId: string * controlId: string * ?removeFromGroupId: string -> Promise<WorkItemTrackingProcess.Control>
    /// <summary>Removes a control from the work item form.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="groupId">- The ID of the group.</param>
    /// <param name="controlId">- The ID of the control to remove.</param>
    abstract removeControlFromGroup: processId: string * witRefName: string * groupId: string * controlId: string -> Promise<unit>
    /// <summary>Updates a control on the work item form.</summary>
    /// <param name="control">- The updated control.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="groupId">- The ID of the group.</param>
    /// <param name="controlId">- The ID of the control.</param>
    abstract updateControl: control: WorkItemTrackingProcess.Control * processId: string * witRefName: string * groupId: string * controlId: string -> Promise<WorkItemTrackingProcess.Control>
    /// <summary>Adds a field to a work item type.</summary>
    /// <param name="field">-</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    abstract addFieldToWorkItemType: field: WorkItemTrackingProcess.AddProcessWorkItemTypeFieldRequest * processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.ProcessWorkItemTypeField>
    /// <summary>Returns a list of all fields in a work item type.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    abstract getAllWorkItemTypeFields: processId: string * witRefName: string -> Promise<ResizeArray<WorkItemTrackingProcess.ProcessWorkItemTypeField>>
    /// <summary>Returns a field in a work item type.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="fieldRefName">- The reference name of the field.</param>
    /// <param name="expand">-</param>
    abstract getWorkItemTypeField: processId: string * witRefName: string * fieldRefName: string * ?expand: WorkItemTrackingProcess.ProcessWorkItemTypeFieldsExpandLevel -> Promise<WorkItemTrackingProcess.ProcessWorkItemTypeField>
    /// <summary>Removes a field from a work item type. Does not permanently delete the field.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="fieldRefName">- The reference name of the field.</param>
    abstract removeWorkItemTypeField: processId: string * witRefName: string * fieldRefName: string -> Promise<unit>
    /// <summary>Updates a field in a work item type.</summary>
    /// <param name="field">-</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="fieldRefName">- The reference name of the field.</param>
    abstract updateWorkItemTypeField: field: WorkItemTrackingProcess.UpdateProcessWorkItemTypeFieldRequest * processId: string * witRefName: string * fieldRefName: string -> Promise<WorkItemTrackingProcess.ProcessWorkItemTypeField>
    /// <summary>Adds a group to the work item form.</summary>
    /// <param name="group">- The group.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="pageId">- The ID of the page to add the group to.</param>
    /// <param name="sectionId">- The ID of the section to add the group to.</param>
    abstract addGroup: group: WorkItemTrackingProcess.Group * processId: string * witRefName: string * pageId: string * sectionId: string -> Promise<WorkItemTrackingProcess.Group>
    /// <summary>Moves a group to a different page and section.</summary>
    /// <param name="group">- The updated group.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="pageId">- The ID of the page the group is in.</param>
    /// <param name="sectionId">- The ID of the section the group is i.n</param>
    /// <param name="groupId">- The ID of the group.</param>
    /// <param name="removeFromPageId">- ID of the page to remove the group from.</param>
    /// <param name="removeFromSectionId">- ID of the section to remove the group from.</param>
    abstract moveGroupToPage: group: WorkItemTrackingProcess.Group * processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string * removeFromPageId: string * removeFromSectionId: string -> Promise<WorkItemTrackingProcess.Group>
    /// <summary>Moves a group to a different section.</summary>
    /// <param name="group">- The updated group.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="pageId">- The ID of the page the group is in.</param>
    /// <param name="sectionId">- The ID of the section the group is in.</param>
    /// <param name="groupId">- The ID of the group.</param>
    /// <param name="removeFromSectionId">- ID of the section to remove the group from.</param>
    abstract moveGroupToSection: group: WorkItemTrackingProcess.Group * processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string * removeFromSectionId: string -> Promise<WorkItemTrackingProcess.Group>
    /// <summary>Removes a group from the work item form.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page the group is in</param>
    /// <param name="sectionId">- The ID of the section to the group is in</param>
    /// <param name="groupId">- The ID of the group</param>
    abstract removeGroup: processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string -> Promise<unit>
    /// <summary>Updates a group in the work item form.</summary>
    /// <param name="group">- The updated group.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="pageId">- The ID of the page the group is in.</param>
    /// <param name="sectionId">- The ID of the section the group is in.</param>
    /// <param name="groupId">- The ID of the group.</param>
    abstract updateGroup: group: WorkItemTrackingProcess.Group * processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string -> Promise<WorkItemTrackingProcess.Group>
    /// <summary>Gets the form layout.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    abstract getFormLayout: processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.FormLayout>
    /// <summary>Creates a picklist.</summary>
    /// <param name="picklist">- Picklist</param>
    abstract createList: picklist: WorkItemTrackingProcess.PickList -> Promise<WorkItemTrackingProcess.PickList>
    /// <summary>Removes a picklist.</summary>
    /// <param name="listId">- The ID of the list</param>
    abstract deleteList: listId: string -> Promise<unit>
    /// <summary>Returns a picklist.</summary>
    /// <param name="listId">- The ID of the list</param>
    abstract getList: listId: string -> Promise<WorkItemTrackingProcess.PickList>
    /// Returns meta data of the picklist.
    abstract getListsMetadata: unit -> Promise<ResizeArray<WorkItemTrackingProcess.PickListMetadata>>
    /// <summary>Updates a list.</summary>
    /// <param name="picklist">-</param>
    /// <param name="listId">- The ID of the list</param>
    abstract updateList: picklist: WorkItemTrackingProcess.PickList * listId: string -> Promise<WorkItemTrackingProcess.PickList>
    /// <summary>Adds a page to the work item form.</summary>
    /// <param name="page">- The page.</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    abstract addPage: page: WorkItemTrackingProcess.Page * processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.Page>
    /// <summary>Removes a page from the work item form</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page</param>
    abstract removePage: processId: string * witRefName: string * pageId: string -> Promise<unit>
    /// <summary>Updates a page on the work item form</summary>
    /// <param name="page">- The page</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract updatePage: page: WorkItemTrackingProcess.Page * processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.Page>
    /// <summary>Creates a process.</summary>
    /// <param name="createRequest">- CreateProcessModel.</param>
    abstract createNewProcess: createRequest: WorkItemTrackingProcess.CreateProcessModel -> Promise<WorkItemTrackingProcess.ProcessInfo>
    /// <summary>Removes a process of a specific ID.</summary>
    /// <param name="processTypeId">-</param>
    abstract deleteProcessById: processTypeId: string -> Promise<unit>
    /// <summary>Edit a process of a specific ID.</summary>
    /// <param name="updateRequest">-</param>
    /// <param name="processTypeId">-</param>
    abstract editProcess: updateRequest: WorkItemTrackingProcess.UpdateProcessModel * processTypeId: string -> Promise<WorkItemTrackingProcess.ProcessInfo>
    /// <summary>Get list of all processes including system and inherited.</summary>
    /// <param name="expand">-</param>
    abstract getListOfProcesses: ?expand: WorkItemTrackingProcess.GetProcessExpandLevel -> Promise<ResizeArray<WorkItemTrackingProcess.ProcessInfo>>
    /// <summary>Get a single process of a specified ID.</summary>
    /// <param name="processTypeId">-</param>
    /// <param name="expand">-</param>
    abstract getProcessByItsId: processTypeId: string * ?expand: WorkItemTrackingProcess.GetProcessExpandLevel -> Promise<WorkItemTrackingProcess.ProcessInfo>
    /// <summary>Adds a rule to work item type in the process.</summary>
    /// <param name="processRuleCreate">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract addProcessWorkItemTypeRule: processRuleCreate: WorkItemTrackingProcess.CreateProcessRuleRequest * processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.ProcessRule>
    /// <summary>Removes a rule from the work item type in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="ruleId">- The ID of the rule</param>
    abstract deleteProcessWorkItemTypeRule: processId: string * witRefName: string * ruleId: string -> Promise<unit>
    /// <summary>Returns a single rule in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="ruleId">- The ID of the rule</param>
    abstract getProcessWorkItemTypeRule: processId: string * witRefName: string * ruleId: string -> Promise<WorkItemTrackingProcess.ProcessRule>
    /// <summary>Returns a list of all rules in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract getProcessWorkItemTypeRules: processId: string * witRefName: string -> Promise<ResizeArray<WorkItemTrackingProcess.ProcessRule>>
    /// <summary>Updates a rule in the work item type of the process.</summary>
    /// <param name="processRule">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="ruleId">- The ID of the rule</param>
    abstract updateProcessWorkItemTypeRule: processRule: WorkItemTrackingProcess.UpdateProcessRuleRequest * processId: string * witRefName: string * ruleId: string -> Promise<WorkItemTrackingProcess.ProcessRule>
    /// <summary>Creates a state definition in the work item type of the process.</summary>
    /// <param name="stateModel">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract createStateDefinition: stateModel: WorkItemTrackingProcess.WorkItemStateInputModel * processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.WorkItemStateResultModel>
    /// <summary>Removes a state definition in the work item type of the process.</summary>
    /// <param name="processId">- ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- ID of the state</param>
    abstract deleteStateDefinition: processId: string * witRefName: string * stateId: string -> Promise<unit>
    /// <summary>Returns a single state definition in a work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- The ID of the state</param>
    abstract getStateDefinition: processId: string * witRefName: string * stateId: string -> Promise<WorkItemTrackingProcess.WorkItemStateResultModel>
    /// <summary>Returns a list of all state definitions in a work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract getStateDefinitions: processId: string * witRefName: string -> Promise<ResizeArray<WorkItemTrackingProcess.WorkItemStateResultModel>>
    /// <summary>Hides a state definition in the work item type of the process.Only states with customizationType:System can be hidden.</summary>
    /// <param name="hideStateModel">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- The ID of the state</param>
    abstract hideStateDefinition: hideStateModel: WorkItemTrackingProcess.HideStateModel * processId: string * witRefName: string * stateId: string -> Promise<WorkItemTrackingProcess.WorkItemStateResultModel>
    /// <summary>Updates a given state definition in the work item type of the process.</summary>
    /// <param name="stateModel">-</param>
    /// <param name="processId">- ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- ID of the state</param>
    abstract updateStateDefinition: stateModel: WorkItemTrackingProcess.WorkItemStateInputModel * processId: string * witRefName: string * stateId: string -> Promise<WorkItemTrackingProcess.WorkItemStateResultModel>
    /// <summary>Deletes a system control modification on the work item form.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="controlId">- The ID of the control.</param>
    abstract deleteSystemControl: processId: string * witRefName: string * controlId: string -> Promise<ResizeArray<WorkItemTrackingProcess.Control>>
    /// <summary>Gets edited system controls for a work item type in a process. To get all system controls (base + edited) use layout API(s)</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    abstract getSystemControls: processId: string * witRefName: string -> Promise<ResizeArray<WorkItemTrackingProcess.Control>>
    /// <summary>Updates/adds a system control on the work item form.</summary>
    /// <param name="control">-</param>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    /// <param name="controlId">- The ID of the control.</param>
    abstract updateSystemControl: control: WorkItemTrackingProcess.Control * processId: string * witRefName: string * controlId: string -> Promise<WorkItemTrackingProcess.Control>
    /// <summary>Creates a work item type in the process.</summary>
    /// <param name="workItemType">-</param>
    /// <param name="processId">- The ID of the process on which to create work item type.</param>
    abstract createProcessWorkItemType: workItemType: WorkItemTrackingProcess.CreateProcessWorkItemTypeRequest * processId: string -> Promise<WorkItemTrackingProcess.ProcessWorkItemType>
    /// <summary>Removes a work itewm type in the process.</summary>
    /// <param name="processId">- The ID of the process.</param>
    /// <param name="witRefName">- The reference name of the work item type.</param>
    abstract deleteProcessWorkItemType: processId: string * witRefName: string -> Promise<unit>
    /// <summary>Returns a single work item type in a process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="expand">- Flag to determine what properties of work item type to return</param>
    abstract getProcessWorkItemType: processId: string * witRefName: string * ?expand: WorkItemTrackingProcess.GetWorkItemTypeExpand -> Promise<WorkItemTrackingProcess.ProcessWorkItemType>
    /// <summary>Returns a list of all work item types in a process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="expand">- Flag to determine what properties of work item type to return</param>
    abstract getProcessWorkItemTypes: processId: string * ?expand: WorkItemTrackingProcess.GetWorkItemTypeExpand -> Promise<ResizeArray<WorkItemTrackingProcess.ProcessWorkItemType>>
    /// <summary>Updates a work item type of the process.</summary>
    /// <param name="workItemTypeUpdate">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract updateProcessWorkItemType: workItemTypeUpdate: WorkItemTrackingProcess.UpdateProcessWorkItemTypeRequest * processId: string * witRefName: string -> Promise<WorkItemTrackingProcess.ProcessWorkItemType>
    /// <summary>Adds a behavior to the work item type of the process.</summary>
    /// <param name="behavior">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    abstract addBehaviorToWorkItemType: behavior: WorkItemTrackingProcess.WorkItemTypeBehavior * processId: string * witRefNameForBehaviors: string -> Promise<WorkItemTrackingProcess.WorkItemTypeBehavior>
    /// <summary>Returns a behavior for the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    abstract getBehaviorForWorkItemType: processId: string * witRefNameForBehaviors: string * behaviorRefName: string -> Promise<WorkItemTrackingProcess.WorkItemTypeBehavior>
    /// <summary>Returns a list of all behaviors for the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    abstract getBehaviorsForWorkItemType: processId: string * witRefNameForBehaviors: string -> Promise<ResizeArray<WorkItemTrackingProcess.WorkItemTypeBehavior>>
    /// <summary>Removes a behavior for the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    abstract removeBehaviorFromWorkItemType: processId: string * witRefNameForBehaviors: string * behaviorRefName: string -> Promise<unit>
    /// <summary>Updates a behavior for the work item type of the process.</summary>
    /// <param name="behavior">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    abstract updateBehaviorToWorkItemType: behavior: WorkItemTrackingProcess.WorkItemTypeBehavior * processId: string * witRefNameForBehaviors: string -> Promise<WorkItemTrackingProcess.WorkItemTypeBehavior>

type [<AllowNullLiteral>] WorkItemTrackingProcessRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> WorkItemTrackingProcessRestClient
    abstract RESOURCE_AREA_ID: string

type [<AllowNullLiteral>] BehaviorCreateModel =
    /// Color
    abstract color: string with get, set
    /// Optional - Id
    abstract id: string with get, set
    /// Parent behavior id
    abstract inherits: string with get, set
    /// Name of the behavior
    abstract name: string with get, set

type [<AllowNullLiteral>] BehaviorModel =
    /// Is the behavior abstract (i.e. can not be associated with any work item type)
    abstract ``abstract``: bool with get, set
    /// Color
    abstract color: string with get, set
    /// Description
    abstract description: string with get, set
    /// Behavior Id
    abstract id: string with get, set
    /// Parent behavior reference
    abstract inherits: WorkItemBehaviorReference with get, set
    /// Behavior Name
    abstract name: string with get, set
    /// Is the behavior overrides a behavior from system process
    abstract overridden: bool with get, set
    /// Rank
    abstract rank: float with get, set
    /// Url of the behavior
    abstract url: string with get, set

type [<AllowNullLiteral>] BehaviorReplaceModel =
    /// Color
    abstract color: string with get, set
    /// Behavior Name
    abstract name: string with get, set

/// Represent a control in the form.
type [<AllowNullLiteral>] Control =
    /// Contribution for the control.
    abstract contribution: WitContribution with get, set
    /// Type of the control.
    abstract controlType: string with get, set
    /// Height of the control, for html controls.
    abstract height: float with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
    abstract inherited: bool with get, set
    /// A value indicating if the layout node is contribution or not.
    abstract isContribution: bool with get, set
    /// Label for the field
    abstract label: string with get, set
    /// Inner text of the control.
    abstract metadata: string with get, set
    abstract order: float with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set
    /// A value indicating if the control is readonly.
    abstract readOnly: bool with get, set
    /// A value indicating if the control should be hidden or not.
    abstract visible: bool with get, set
    /// Watermark text for the textbox.
    abstract watermark: string with get, set

/// Represents the extensions part of the layout
type [<AllowNullLiteral>] Extension =
    abstract id: string with get, set

type [<AllowNullLiteral>] FieldModel =
    /// Description about field
    abstract description: string with get, set
    /// ID of the field
    abstract id: string with get, set
    /// Name of the field
    abstract name: string with get, set
    /// Reference to picklist in this field
    abstract pickList: PickListMetadataModel with get, set
    /// Type of field
    abstract ``type``: FieldType with get, set
    /// Url to the field
    abstract url: string with get, set

type [<RequireQualifiedAccess>] FieldType =
    | String = 1
    | Integer = 2
    | DateTime = 3
    | PlainText = 5
    | Html = 7
    | TreePath = 8
    | History = 9
    | Double = 10
    | Guid = 11
    | Boolean = 12
    | Identity = 13
    | PicklistInteger = 14
    | PicklistString = 15
    | PicklistDouble = 16

type [<AllowNullLiteral>] FieldUpdate =
    abstract description: string with get, set
    abstract id: string with get, set

type [<AllowNullLiteral>] FormLayout =
    /// Gets and sets extensions list
    abstract extensions: ResizeArray<Extension> with get, set
    /// Top level tabs of the layout.
    abstract pages: ResizeArray<Page> with get, set
    /// Headers controls of the layout.
    abstract systemControls: ResizeArray<Control> with get, set

type [<RequireQualifiedAccess>] GetWorkItemTypeExpand =
    | None = 0
    | States = 1
    | Behaviors = 2
    | Layout = 4

/// Represent a group in the form that holds controls in it.
type [<AllowNullLiteral>] Group =
    /// Contribution for the group.
    abstract contribution: WitContribution with get, set
    /// Controls to be put in the group.
    abstract controls: ResizeArray<Control> with get, set
    /// The height for the contribution.
    abstract height: float with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
    abstract inherited: bool with get, set
    /// A value indicating if the layout node is contribution are not.
    abstract isContribution: bool with get, set
    /// Label for the group.
    abstract label: string with get, set
    /// Order in which the group should appear in the section.
    abstract order: float with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set
    /// A value indicating if the group should be hidden or not.
    abstract visible: bool with get, set

type [<AllowNullLiteral>] HideStateModel =
    abstract hidden: bool with get, set

type [<AllowNullLiteral>] Page =
    /// Contribution for the page.
    abstract contribution: WitContribution with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
    abstract inherited: bool with get, set
    /// A value indicating if the layout node is contribution are not.
    abstract isContribution: bool with get, set
    /// The label for the page.
    abstract label: string with get, set
    /// A value indicating whether any user operations are permitted on this page and the contents of this page
    abstract locked: bool with get, set
    /// Order in which the page should appear in the layout.
    abstract order: float with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set
    /// The icon for the page.
    abstract pageType: PageType with get, set
    /// The sections of the page.
    abstract sections: ResizeArray<Section> with get, set
    /// A value indicating if the page should be hidden or not.
    abstract visible: bool with get, set

type [<RequireQualifiedAccess>] PageType =
    | Custom = 1
    | History = 2
    | Links = 3
    | Attachments = 4

type [<AllowNullLiteral>] PickListItemModel =
    abstract id: string with get, set
    abstract value: string with get, set

type [<AllowNullLiteral>] PickListMetadataModel =
    /// ID of the picklist
    abstract id: string with get, set
    /// Is input values by user only limited to suggested values
    abstract isSuggested: bool with get, set
    /// Name of the picklist
    abstract name: string with get, set
    /// Type of picklist
    abstract ``type``: string with get, set
    /// Url of the picklist
    abstract url: string with get, set

type [<AllowNullLiteral>] PickListModel =
    inherit PickListMetadataModel
    /// A list of PicklistItemModel
    abstract items: ResizeArray<PickListItemModel> with get, set

/// A layout node holding groups together in a page
type [<AllowNullLiteral>] Section =
    abstract groups: ResizeArray<Group> with get, set
    /// The id for the layout node.
    abstract id: string with get, set
    /// A value indicating whether this layout node has been overridden by a child layout.
    abstract overridden: bool with get, set

type [<AllowNullLiteral>] WitContribution =
    /// The id for the contribution.
    abstract contributionId: string with get, set
    /// The height for the contribution.
    abstract height: float with get, set
    /// A dictionary holding key value pairs for contribution inputs.
    abstract inputs: WitContributionInputs with get, set
    /// A value indicating if the contribution should be show on deleted workItem.
    abstract showOnDeletedWorkItem: bool with get, set

type [<AllowNullLiteral>] WorkItemBehaviorReference =
    /// The ID of the reference behavior
    abstract id: string with get, set
    /// The url of the reference behavior
    abstract url: string with get, set

type [<AllowNullLiteral>] WorkItemStateInputModel =
    /// Color of the state
    abstract color: string with get, set
    /// Name of the state
    abstract name: string with get, set
    /// Order in which state should appear
    abstract order: float with get, set
    /// Category of the state
    abstract stateCategory: string with get, set

type [<AllowNullLiteral>] WorkItemStateResultModel =
    /// Color of the state
    abstract color: string with get, set
    /// Is the state hidden
    abstract hidden: bool with get, set
    /// The ID of the State
    abstract id: string with get, set
    /// Name of the state
    abstract name: string with get, set
    /// Order in which state should appear
    abstract order: float with get, set
    /// Category of the state
    abstract stateCategory: string with get, set
    /// Url of the state
    abstract url: string with get, set

type [<AllowNullLiteral>] WorkItemTypeBehavior =
    abstract behavior: WorkItemBehaviorReference with get, set
    abstract isDefault: bool with get, set
    abstract url: string with get, set

type [<RequireQualifiedAccess>] WorkItemTypeClass =
    | System = 0
    | Derived = 1
    | Custom = 2

type [<AllowNullLiteral>] WorkItemTypeFieldModel =
    abstract allowGroups: bool with get, set
    abstract defaultValue: string with get, set
    abstract name: string with get, set
    abstract pickList: PickListMetadataModel with get, set
    abstract readOnly: bool with get, set
    abstract referenceName: string with get, set
    abstract required: bool with get, set
    abstract ``type``: FieldType with get, set
    abstract url: string with get, set

/// New version of WorkItemTypeFieldModel supporting defaultValue as object (such as IdentityRef)
type [<AllowNullLiteral>] WorkItemTypeFieldModel2 =
    abstract allowGroups: bool with get, set
    abstract defaultValue: obj option with get, set
    abstract name: string with get, set
    abstract pickList: PickListMetadataModel with get, set
    abstract readOnly: bool with get, set
    abstract referenceName: string with get, set
    abstract required: bool with get, set
    abstract ``type``: FieldType with get, set
    abstract url: string with get, set

type [<AllowNullLiteral>] WorkItemTypeModel =
    /// Behaviors of the work item type
    abstract behaviors: ResizeArray<WorkItemTypeBehavior> with get, set
    /// Class of the work item type
    abstract ``class``: WorkItemTypeClass with get, set
    /// Color of the work item type
    abstract color: string with get, set
    /// Description of the work item type
    abstract description: string with get, set
    /// Icon of the work item type
    abstract icon: string with get, set
    /// The ID of the work item type
    abstract id: string with get, set
    /// Parent WIT Id/Internal ReferenceName that it inherits from
    abstract inherits: string with get, set
    /// Is work item type disabled
    abstract isDisabled: bool with get, set
    /// Layout of the work item type
    abstract layout: FormLayout with get, set
    /// Name of the work item type
    abstract name: string with get, set
    /// States of the work item type
    abstract states: ResizeArray<WorkItemStateResultModel> with get, set
    /// Url of the work item type
    abstract url: string with get, set

type [<AllowNullLiteral>] WorkItemTypeUpdateModel =
    /// Color of the work item type
    abstract color: string with get, set
    /// Description of the work item type
    abstract description: string with get, set
    /// Icon of the work item type
    abstract icon: string with get, set
    /// Is the workitem type to be disabled
    abstract isDisabled: bool with get, set

type [<AllowNullLiteral>] WitContributionInputs =
    [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set
module WorkItemTrackingProcessDefinitions = ___WorkItemTrackingProcessDefinitions_WorkItemTrackingProcessDefinitions
type IVssRestClientOptions = ___Common_Context.IVssRestClientOptions
type RestClientBase = ___Common_RestClientBase.RestClientBase

type [<AllowNullLiteral>] IExports =
    abstract WorkItemTrackingProcessDefinitionsRestClient: WorkItemTrackingProcessDefinitionsRestClientStatic

type [<AllowNullLiteral>] WorkItemTrackingProcessDefinitionsRestClient =
    inherit RestClientBase
    /// <summary>Creates a single behavior in the given process.</summary>
    /// <param name="behavior">-</param>
    /// <param name="processId">- The ID of the process</param>
    abstract createBehavior: behavior: WorkItemTrackingProcessDefinitions.BehaviorCreateModel * processId: string -> Promise<WorkItemTrackingProcessDefinitions.BehaviorModel>
    /// <summary>Removes a behavior in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="behaviorId">- The ID of the behavior</param>
    abstract deleteBehavior: processId: string * behaviorId: string -> Promise<unit>
    /// <summary>Returns a single behavior in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="behaviorId">- The ID of the behavior</param>
    abstract getBehavior: processId: string * behaviorId: string -> Promise<WorkItemTrackingProcessDefinitions.BehaviorModel>
    /// <summary>Returns a list of all behaviors in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    abstract getBehaviors: processId: string -> Promise<ResizeArray<WorkItemTrackingProcessDefinitions.BehaviorModel>>
    /// <summary>Replaces a behavior in the process.</summary>
    /// <param name="behaviorData">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="behaviorId">- The ID of the behavior</param>
    abstract replaceBehavior: behaviorData: WorkItemTrackingProcessDefinitions.BehaviorReplaceModel * processId: string * behaviorId: string -> Promise<WorkItemTrackingProcessDefinitions.BehaviorModel>
    /// <summary>Creates a control in a group</summary>
    /// <param name="control">- The control</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="groupId">- The ID of the group to add the control to</param>
    abstract addControlToGroup: control: WorkItemTrackingProcessDefinitions.Control * processId: string * witRefName: string * groupId: string -> Promise<WorkItemTrackingProcessDefinitions.Control>
    /// <summary>Updates a control on the work item form</summary>
    /// <param name="control">- The updated control</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="groupId">- The ID of the group</param>
    /// <param name="controlId">- The ID of the control</param>
    abstract editControl: control: WorkItemTrackingProcessDefinitions.Control * processId: string * witRefName: string * groupId: string * controlId: string -> Promise<WorkItemTrackingProcessDefinitions.Control>
    /// <summary>Removes a control from the work item form</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="groupId">- The ID of the group</param>
    /// <param name="controlId">- The ID of the control to remove</param>
    abstract removeControlFromGroup: processId: string * witRefName: string * groupId: string * controlId: string -> Promise<unit>
    /// <summary>Moves a control to a new group</summary>
    /// <param name="control">- The control</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="groupId">- The ID of the group to move the control to</param>
    /// <param name="controlId">- The id of the control</param>
    /// <param name="removeFromGroupId">- The group to remove the control from</param>
    abstract setControlInGroup: control: WorkItemTrackingProcessDefinitions.Control * processId: string * witRefName: string * groupId: string * controlId: string * ?removeFromGroupId: string -> Promise<WorkItemTrackingProcessDefinitions.Control>
    /// <summary>Creates a single field in the process.</summary>
    /// <param name="field">-</param>
    /// <param name="processId">- The ID of the process</param>
    abstract createField: field: WorkItemTrackingProcessDefinitions.FieldModel * processId: string -> Promise<WorkItemTrackingProcessDefinitions.FieldModel>
    /// <summary>Updates a given field in the process.</summary>
    /// <param name="field">-</param>
    /// <param name="processId">- The ID of the process</param>
    abstract updateField: field: WorkItemTrackingProcessDefinitions.FieldUpdate * processId: string -> Promise<WorkItemTrackingProcessDefinitions.FieldModel>
    /// <summary>Adds a group to the work item form</summary>
    /// <param name="group">- The group</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page to add the group to</param>
    /// <param name="sectionId">- The ID of the section to add the group to</param>
    abstract addGroup: group: WorkItemTrackingProcessDefinitions.Group * processId: string * witRefName: string * pageId: string * sectionId: string -> Promise<WorkItemTrackingProcessDefinitions.Group>
    /// <summary>Updates a group in the work item form</summary>
    /// <param name="group">- The updated group</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page the group is in</param>
    /// <param name="sectionId">- The ID of the section the group is in</param>
    /// <param name="groupId">- The ID of the group</param>
    abstract editGroup: group: WorkItemTrackingProcessDefinitions.Group * processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string -> Promise<WorkItemTrackingProcessDefinitions.Group>
    /// <summary>Removes a group from the work item form</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page the group is in</param>
    /// <param name="sectionId">- The ID of the section to the group is in</param>
    /// <param name="groupId">- The ID of the group</param>
    abstract removeGroup: processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string -> Promise<unit>
    /// <summary>Moves a group to a different page and section</summary>
    /// <param name="group">- The updated group</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page the group is in</param>
    /// <param name="sectionId">- The ID of the section the group is in</param>
    /// <param name="groupId">- The ID of the group</param>
    /// <param name="removeFromPageId">- ID of the page to remove the group from</param>
    /// <param name="removeFromSectionId">- ID of the section to remove the group from</param>
    abstract setGroupInPage: group: WorkItemTrackingProcessDefinitions.Group * processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string * removeFromPageId: string * removeFromSectionId: string -> Promise<WorkItemTrackingProcessDefinitions.Group>
    /// <summary>Moves a group to a different section</summary>
    /// <param name="group">- The updated group</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page the group is in</param>
    /// <param name="sectionId">- The ID of the section the group is in</param>
    /// <param name="groupId">- The ID of the group</param>
    /// <param name="removeFromSectionId">- ID of the section to remove the group from</param>
    abstract setGroupInSection: group: WorkItemTrackingProcessDefinitions.Group * processId: string * witRefName: string * pageId: string * sectionId: string * groupId: string * removeFromSectionId: string -> Promise<WorkItemTrackingProcessDefinitions.Group>
    /// <summary>Gets the form layout</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract getFormLayout: processId: string * witRefName: string -> Promise<WorkItemTrackingProcessDefinitions.FormLayout>
    /// Returns meta data of the picklist.
    abstract getListsMetadata: unit -> Promise<ResizeArray<WorkItemTrackingProcessDefinitions.PickListMetadataModel>>
    /// <summary>Creates a picklist.</summary>
    /// <param name="picklist">-</param>
    abstract createList: picklist: WorkItemTrackingProcessDefinitions.PickListModel -> Promise<WorkItemTrackingProcessDefinitions.PickListModel>
    /// <summary>Removes a picklist.</summary>
    /// <param name="listId">- The ID of the list</param>
    abstract deleteList: listId: string -> Promise<unit>
    /// <summary>Returns a picklist.</summary>
    /// <param name="listId">- The ID of the list</param>
    abstract getList: listId: string -> Promise<WorkItemTrackingProcessDefinitions.PickListModel>
    /// <summary>Updates a list.</summary>
    /// <param name="picklist">-</param>
    /// <param name="listId">- The ID of the list</param>
    abstract updateList: picklist: WorkItemTrackingProcessDefinitions.PickListModel * listId: string -> Promise<WorkItemTrackingProcessDefinitions.PickListModel>
    /// <summary>Adds a page to the work item form</summary>
    /// <param name="page">- The page</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract addPage: page: WorkItemTrackingProcessDefinitions.Page * processId: string * witRefName: string -> Promise<WorkItemTrackingProcessDefinitions.Page>
    /// <summary>Updates a page on the work item form</summary>
    /// <param name="page">- The page</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract editPage: page: WorkItemTrackingProcessDefinitions.Page * processId: string * witRefName: string -> Promise<WorkItemTrackingProcessDefinitions.Page>
    /// <summary>Removes a page from the work item form</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="pageId">- The ID of the page</param>
    abstract removePage: processId: string * witRefName: string * pageId: string -> Promise<unit>
    /// <summary>Creates a state definition in the work item type of the process.</summary>
    /// <param name="stateModel">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract createStateDefinition: stateModel: WorkItemTrackingProcessDefinitions.WorkItemStateInputModel * processId: string * witRefName: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemStateResultModel>
    /// <summary>Removes a state definition in the work item type of the process.</summary>
    /// <param name="processId">- ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- ID of the state</param>
    abstract deleteStateDefinition: processId: string * witRefName: string * stateId: string -> Promise<unit>
    /// <summary>Returns a state definition in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- The ID of the state</param>
    abstract getStateDefinition: processId: string * witRefName: string * stateId: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemStateResultModel>
    /// <summary>Returns a list of all state definitions in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract getStateDefinitions: processId: string * witRefName: string -> Promise<ResizeArray<WorkItemTrackingProcessDefinitions.WorkItemStateResultModel>>
    /// <summary>Hides a state definition in the work item type of the process.</summary>
    /// <param name="hideStateModel">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- The ID of the state</param>
    abstract hideStateDefinition: hideStateModel: WorkItemTrackingProcessDefinitions.HideStateModel * processId: string * witRefName: string * stateId: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemStateResultModel>
    /// <summary>Updates a given state definition in the work item type of the process.</summary>
    /// <param name="stateModel">-</param>
    /// <param name="processId">- ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="stateId">- ID of the state</param>
    abstract updateStateDefinition: stateModel: WorkItemTrackingProcessDefinitions.WorkItemStateInputModel * processId: string * witRefName: string * stateId: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemStateResultModel>
    /// <summary>Adds a behavior to the work item type of the process.</summary>
    /// <param name="behavior">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    abstract addBehaviorToWorkItemType: behavior: WorkItemTrackingProcessDefinitions.WorkItemTypeBehavior * processId: string * witRefNameForBehaviors: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeBehavior>
    /// <summary>Returns a behavior for the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    abstract getBehaviorForWorkItemType: processId: string * witRefNameForBehaviors: string * behaviorRefName: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeBehavior>
    /// <summary>Returns a list of all behaviors for the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    abstract getBehaviorsForWorkItemType: processId: string * witRefNameForBehaviors: string -> Promise<ResizeArray<WorkItemTrackingProcessDefinitions.WorkItemTypeBehavior>>
    /// <summary>Removes a behavior for the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    /// <param name="behaviorRefName">- The reference name of the behavior</param>
    abstract removeBehaviorFromWorkItemType: processId: string * witRefNameForBehaviors: string * behaviorRefName: string -> Promise<unit>
    /// <summary>Updates default work item type for the behavior of the process.</summary>
    /// <param name="behavior">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForBehaviors">- Work item type reference name for the behavior</param>
    abstract updateBehaviorToWorkItemType: behavior: WorkItemTrackingProcessDefinitions.WorkItemTypeBehavior * processId: string * witRefNameForBehaviors: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeBehavior>
    /// <summary>Creates a work item type in the process.</summary>
    /// <param name="workItemType">-</param>
    /// <param name="processId">- The ID of the process</param>
    abstract createWorkItemType: workItemType: WorkItemTrackingProcessDefinitions.WorkItemTypeModel * processId: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeModel>
    /// <summary>Removes a work itewm type in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract deleteWorkItemType: processId: string * witRefName: string -> Promise<unit>
    /// <summary>Returns a work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    /// <param name="expand">-</param>
    abstract getWorkItemType: processId: string * witRefName: string * ?expand: WorkItemTrackingProcessDefinitions.GetWorkItemTypeExpand -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeModel>
    /// <summary>Returns a list of all work item types in the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="expand">-</param>
    abstract getWorkItemTypes: processId: string * ?expand: WorkItemTrackingProcessDefinitions.GetWorkItemTypeExpand -> Promise<ResizeArray<WorkItemTrackingProcessDefinitions.WorkItemTypeModel>>
    /// <summary>Updates a work item type of the process.</summary>
    /// <param name="workItemTypeUpdate">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefName">- The reference name of the work item type</param>
    abstract updateWorkItemType: workItemTypeUpdate: WorkItemTrackingProcessDefinitions.WorkItemTypeUpdateModel * processId: string * witRefName: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeModel>
    /// <summary>Adds a field to the work item type in the process.</summary>
    /// <param name="field">-</param>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForFields">- Work item type reference name for the field</param>
    abstract addFieldToWorkItemType: field: WorkItemTrackingProcessDefinitions.WorkItemTypeFieldModel2 * processId: string * witRefNameForFields: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeFieldModel2>
    /// <summary>Returns a single field in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForFields">- Work item type reference name for fields</param>
    /// <param name="fieldRefName">- The reference name of the field</param>
    abstract getWorkItemTypeField: processId: string * witRefNameForFields: string * fieldRefName: string -> Promise<WorkItemTrackingProcessDefinitions.WorkItemTypeFieldModel2>
    /// <summary>Returns a list of all fields in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForFields">- Work item type reference name for fields</param>
    abstract getWorkItemTypeFields: processId: string * witRefNameForFields: string -> Promise<ResizeArray<WorkItemTrackingProcessDefinitions.WorkItemTypeFieldModel2>>
    /// <summary>Removes a field in the work item type of the process.</summary>
    /// <param name="processId">- The ID of the process</param>
    /// <param name="witRefNameForFields">- Work item type reference name for fields</param>
    /// <param name="fieldRefName">- The reference name of the field</param>
    abstract removeFieldFromWorkItemType: processId: string * witRefNameForFields: string * fieldRefName: string -> Promise<unit>

type [<AllowNullLiteral>] WorkItemTrackingProcessDefinitionsRestClientStatic =
    [<Emit "new $0($1...)">] abstract Create: options: IVssRestClientOptions -> WorkItemTrackingProcessDefinitionsRestClient
    abstract RESOURCE_AREA_ID: string
